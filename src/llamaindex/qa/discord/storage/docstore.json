{"docstore/metadata": {"1059314106907242566": {"doc_hash": "dee01d6a163e651950c3a13d2b7073f0f3a14a5a5fe37c5994dad1144c637b7d"}, "1059531287758655538": {"doc_hash": "43584ef1067d868b76878504b621c7e5d86fa83f660624ccb7951106e37f1943"}, "1059640614783828048": {"doc_hash": "8b91d2dd80854fec928501bceec31bcf919d1dd5eebf9777be0ed0116579edd5"}, "1059642227766341653": {"doc_hash": "c4f1be9ccb7fdd92c6de103fc92f8204784a635425357c62da634abee90f414a"}, "1059737181234671676": {"doc_hash": "e4f153904cb3b2ebd4b572dc7f47ece08386020d053f9e0af55682f10d542860"}, "1061574088079978586": {"doc_hash": "a483055626bc25997fcf1ea233cd1178e33b8bde53c3186505f4da8579453307"}, "1061715932248035448": {"doc_hash": "8ecc7baebf4dcefe79871981b856ed63ac58c850faee919f904feb91c9f2ea39"}, "1062802959508963439": {"doc_hash": "f710a7a4c01f2284b817c7b2ddafbfeb309d4173574dd670a5b4eed224485964"}, "1063163546000707725": {"doc_hash": "6172aa9d04b9859ccdb10ac723d544034f3cd94479b7fbe12355ae60e495b89a"}, "1063476199780782100": {"doc_hash": "920ab7aa56e55369fe9b3e738a6ecd6e05e24483dbefadf33f614d7a2c97b1f3"}, "1063883812045594724": {"doc_hash": "e9da6a67bddad9ffddc2564a9fabd511c7053227c960003f905aeb5f142b3c31"}, "1063884238610518126": {"doc_hash": "a37d0367d47d0199815e6c843002d8102315ab3d391e7f7c950bc1bd5cc42bf8"}, "1063884751557120030": {"doc_hash": "3e39fe400399be3497361a62219c85a588e710ef6d7fa93524a6577c7cdb54e5"}, "1063913848790319136": {"doc_hash": "22a0d48c53e5908a4de279c1bc4db7fc9ae798dbf91890b940058d763d1e333c"}, "1063949675696234586": {"doc_hash": "ba657480cb8c98ed1e19896d16e098234b2f437d7d4289cfe4bdf4f226c126a3"}, "1063961595878838385": {"doc_hash": "84cb06e8f6b05a6956ddfbad52ff84a0b36a4d791d3bb56633b518b843019138"}, "1064018367301812346": {"doc_hash": "15a4ff2a8bd034300bfeb9ab4de643830d732956c5a96eaf213a25bc475bf23d"}, "1064111734522134538": {"doc_hash": "6ac73151d4cacf31560d856d7936649a635b5c1fd8fb204a9dc5e09888f84ff0"}, "1065428004760731718": {"doc_hash": "bb3308823751d17b31470b504b6350ca784cd54cd7015d31302970c443e229dc"}, "1065471408311898153": {"doc_hash": "5e038f7342d47407edbedacdd91e476894082c966b62cf1f060da6ed7825b971"}, "1065578358315954246": {"doc_hash": "67ac30c56772c8374e5cb2de7f994156865d2a996083ce0f94c93fcb0f74df6a"}, "1065683307699904584": {"doc_hash": "5538288c087bf33b3ed78292d67694db87f4af234d8730dcf1702a3e4b7fedb0"}, "1065697489073741915": {"doc_hash": "09069dd3a0224248f5f7efa68b319a668e067f75d0a55f367988189c0cf49bd4"}, "1065804322908164246": {"doc_hash": "61a9c94df7a0d3993b436e66f7a6ce7787857f347f74869b4918c69a06c067c6"}, "1065808880518566010": {"doc_hash": "1679feca1fe727f8fbd6aa89cf16699c99d937d2e0ebd5738f1835f962ea5d1e"}, "1065975878812696666": {"doc_hash": "86cb34b11c5ab08caa662e46dfe811920a7f2e89184b6704800e9423e72c4fd8"}, "1065977153327468575": {"doc_hash": "10584ec54e883d0c8b87cd857f25a25ab7f478dfaf1fd2da193e4ec7e4424db9"}, "1065979599374262333": {"doc_hash": "6d19f888f953df215b5a182bf8bf703f10f9f151033b344158125157895519f9"}, "1066044818574290964": {"doc_hash": "cb9e41b6a1ed35d2d5afc1a07e622bd8ac7566d880cb516e2a1a534ee60a92bb"}, "1066484476164722748": {"doc_hash": "dbf196cb6f0d55f5d0094c432fef9239e0c371783e3f555a7c73999aba2edf6c"}, "1066522245079511140": {"doc_hash": "e3973f7d0e8f0c4ba0be90ac11e2d6bb2971f9e9e14d56a0943d331f567684b1"}, "1066664500239015957": {"doc_hash": "71987e760e6749e77fea1de5ce5582459ed44bb958fdefa1c1f813f282cccf5d"}, "1066815268870959125": {"doc_hash": "fb16af753347df17263136406d61ebf0726484ec8890379852e3e9137d038964"}, "1066866355548209172": {"doc_hash": "fb0b98fffbcc746e1ce4b1f94654fcf08c4dfcfea2091bffa91db1b77c47cc1b"}, "1067001008334589952": {"doc_hash": "38485f3c27cb3d3fd5c0d3235e4f03263111e2957ed270dbf77f4f9fed8a4497"}, "1067140353838293033": {"doc_hash": "8ca94f0098c6cdf5d76697f22e1f707298f555ea5ebf30876b406c95dea7099e"}, "1067378921894580264": {"doc_hash": "4e0eab02ec45d2e69e9c7dd25ef5f6ab3374730fc578d073f728bf804dd2df78"}, "1067393805323612160": {"doc_hash": "6a4ea9710373b4b2932ee41cae6b24d49ffdde0a5b7e74d63d9ba461db7ea629"}, "1067398661253910589": {"doc_hash": "edbfccd2ac7fd201abd55f05246fad8ba29019d72054403f59f89996491471f3"}, "1067399604112478249": {"doc_hash": "e72948e02bb84c134276018da6e8e9f3c41bbe4579158f23ae9c31d3f9f983b8"}, "1067679198614917182": {"doc_hash": "bbe1df2d9685ca9ba78fd88158b4885412420094d25e23f4365fb026429e10b4"}, "1067679518816477194": {"doc_hash": "099e93d33f05c74402f3c9685fb42ea8826168dc1e44a036645af89bf48d25f5"}, "1067859234173235240": {"doc_hash": "3442f02ee43f415b2731c1656aec2019d69424223aeee4cfab7e0708b34da1ec"}, "1068244680422199326": {"doc_hash": "15f40099270a4c3c439ed3e54d4fc3720a3b2e6e491b0aa8d0a81f39f45fae51"}, "1068380296682147900": {"doc_hash": "091592175bf4113cebd9b21ccab778e95fb079821ad0ccad86adae63445b573b"}, "1068423249828007946": {"doc_hash": "38c265525280a2948b1126e923345c8a2c88d05d2f8f25b1c8d10ee3af5779d7"}, "1068451912644558848": {"doc_hash": "e063a517a4a986e5cf66e12832938dc2399368026475c907678094ce641f3637"}, "1068570619001712730": {"doc_hash": "1541c7df09e1e3cba4aed94bc197d42aa63c430c4447ccd116d298d927d77a43"}, "1068580389381210223": {"doc_hash": "856281bb02603316e938481c5dc91afe3c7b96bee18bbf751ce6a19878d92f68"}, "1068776132272472085": {"doc_hash": "379f90e782ebdf2c19edf553ce3f20c3c108a1861f1842234b264144b2dd4eb1"}, "1068964291807555685": {"doc_hash": "e7a0579bb3c1259bc3b3a096fe03f3f67795de21c6cf6d811b71f33b182ab85f"}, "1068982361770950716": {"doc_hash": "aad4b9600b39d933f9cbcaa182138a34b0e999df5356782b20f017b4518995ec"}, "1069017983382458438": {"doc_hash": "f76297d31e3e94e3533c7163e1ab6742d92a8bc1d8b27888ad8f6597396fcd78"}, "1069019881359544420": {"doc_hash": "13ec370aa7b68856e56968e4c99851949556c2584f71fec28599316de1e163c2"}, "1069020747076468876": {"doc_hash": "cf6a3a396dac5e3b550bdb24f6fa1151668d6aafdd70d0514cccb421d5796c61"}, "1069373288834412626": {"doc_hash": "7429f7aaad55e75e2cfe5c5cf22325c166eb6995e5e3969b4dd4d9a71d3197d3"}, "1069405879666999346": {"doc_hash": "b37f3629a31ef3c7cd434d9be706c2f26e93d393bf1f48972e64e717c6c75137"}, "1069456064099143761": {"doc_hash": "8dcb7af7d076ccce059d7e68799ddf54351b5b143284521eab6df3f068bb73af"}, "1069790899309138081": {"doc_hash": "413fc2d4c635d63ce991ada87175677348835beeca13a336f11d9ff4538e7e3a"}, "1070359401598287943": {"doc_hash": "33b8060274740e0e2066f6b3e6caada2034adeee649aa74a991b1f87ffa1f625"}, "1070857656799076352": {"doc_hash": "15f06219baed7045ec725e57188bc809dd5d0610cf7ee606e15dd0525faa17d9"}, "1071106783181029406": {"doc_hash": "ceea6c65b7b698843148a073314ed034779b15e273064a69dc9b14014d95909c"}, "1071153785243697234": {"doc_hash": "9d4c84f2fca8b1d090d435464a9dcabd78b4972ed19da8792972dc6065a86cd1"}, "1071228197074632745": {"doc_hash": "943ffa9e59275153bd05d772579d7577d2c85be213a4cbff47d8a932a0536c52"}, "1071243006688112730": {"doc_hash": "89f5049a7d7892fa354b35890d8834ebc14871263cc6c3021f41c56c606fc3cb"}, "1071354591515516959": {"doc_hash": "8f5043df13c8b3927a02fdc8562245af6e0227ef001f71308c0291b47c273bf6"}, "1071378307263770685": {"doc_hash": "810435663a244198b1f905b3e7b8f32ca26fa9b93021542a9bbdcc5946841ece"}, "1071832260090794014": {"doc_hash": "0a6b0b82725b19ba209a7b141bc0aa5e12d093d431e1391bcde176fb8be2d4b8"}, "1071887841740738731": {"doc_hash": "ab8c5a185ca1614bc923973111b5612cb5491515946a2e7ffe21c54b9c3af4f7"}, "1071900308982218783": {"doc_hash": "ed259d81cb066e2d845a779bb36a882e6335b23d056f65d99c5afdb679f9e733"}, "1072077885214556251": {"doc_hash": "26db388641550c5cfe81a4c988dabab456153baa315da43239d8cafc90dc65f8"}, "1072186651650043995": {"doc_hash": "54e3dcbc34f55a5e5a304f4730fe11c01220b5bf8ce75b0a5e6cb7dc401dd6aa"}, "1072262195800449207": {"doc_hash": "c27e089b227a2ac892aebdf46b3dcad138e853c6e909adde814acbac4e11a4fb"}, "1072337856091144323": {"doc_hash": "969a9430b7a2db867a8e5b0f19a88fe89b458d46629fa8907cc4e551c97c3f56"}, "1072505550681677864": {"doc_hash": "c9b8dc4cd56f2def3a66e565d72283c40c7de3d858533ff2be340a7a906b12ac"}, "1072579473691652128": {"doc_hash": "605e98e6edce394ef52dd5eff03a3f773c1e1d927f198b45b9721a6680b7656e"}, "1072723051189391431": {"doc_hash": "3b6d55808379b4fcca15c21687b728655c6b816f31e205343f8f1081910421ee"}, "1072733033318318190": {"doc_hash": "a29b8c502ca2fc8b0f0552b14605ea9380cd41b2d09ce0307360022771aabdeb"}, "1072861437053120512": {"doc_hash": "7b1a6c982fe585d75046b04b8ca33e598a3e85712e4843f5a6118cb8b51050b1"}, "1072865771484622878": {"doc_hash": "940602a8e919da0bb33e6a41e2435b7c437be9119a36b0fca71241fdd1f06bfb"}, "1072918444669943858": {"doc_hash": "04243510cdbec0138387fa249ec9300441200e27f9578966408c1d541db2072f"}, "1072920103844319232": {"doc_hash": "be4535a5df82f8932511ab98a36fa6a03a6a65a68bfff49e0741817659f2ddf5"}, "1073041964787834880": {"doc_hash": "7460c46901dbd7e3b68d20a19e4dca56046f0e646d5f961886887829c1507c8c"}, "1073051051936202773": {"doc_hash": "9cf46a98366876767359b355afd3d73493a31833d88d392ae0b493b13f5803f3"}, "1073140516151103548": {"doc_hash": "1f2a917ac854c93db1cba05d7474e03c7a56c93da9936c301a203ee5e27edba0"}, "1073143739872194590": {"doc_hash": "71d8c4e1887e84e45b9c611b0063eb5e22cf812a0723594739c3c68a8352d774"}, "1073215541856182332": {"doc_hash": "8d294235498141c638d835c4c4ff32bff2b1138134b3cc816e95d319c5c914bf"}, "1073221588457099295": {"doc_hash": "5bdc916bce05458faaa20244a8aadef5ad37fb7aba68293c1eb2e58ab7e6d9a3"}, "1073224750572245042": {"doc_hash": "9545934c350db1167a45ea9a6d209d0e3f7e58363cb83781d4425f8ee75be8d3"}, "1073250173658083508": {"doc_hash": "c3f968f05a0c0cf6f20f7b3356a9fbe47295d2e614ce19bef3698a130af25084"}, "1073340799598735373": {"doc_hash": "cf76eba70e4cf23fca844adbb3f8a01e7ab2155f09d71c20845f8626d910e2fa"}, "1073366281799086220": {"doc_hash": "c6409686d3bcbab9125637dff73d695bc59aaf0f4a4ac37a0de8c24ecf981977"}, "1073441919574745129": {"doc_hash": "501aefc7f68c5c2399c9fec37031e33fe1830cbca2d05414e1abc52cab76557d"}, "1073454185430913105": {"doc_hash": "6e05fcfd058d0ffec72d5142a01b0bbfb7432c738c2c0c0b41898fda7ca0c071"}, "1073470005330591796": {"doc_hash": "2adf07b3b6cd8f9bd58748748d798db222dd281e9048879c1903ed999dcf000b"}, "1073489506147258450": {"doc_hash": "2a480cbbb485baacaee9ee73ed7e7660301ff4eeeae89b17ec238bae9a391505"}, "1073705390979698829": {"doc_hash": "222f2120335376970e28c73d115950cc05254f7253327be5d91bddf36981ae2d"}, "1073742124551512104": {"doc_hash": "e73b9d86d02a369ba1f9bdc6357810ba9f779f1065bf76d3d25bc021fb4cbcf0"}, "1073746285452070953": {"doc_hash": "8ac911c44d45463ad8d90e90e907d90d9c833b4fa4aec5b8ec7848a9f04bbdcc"}, "1073747794898211006": {"doc_hash": "ff3af0fc47c62c38612f6222124d38a324f9e90143da1b5b6e9855438d55716c"}, "1073874802718285834": {"doc_hash": "aadbe1adc699cc70eb49b9424aaafff3cf9d99ac5fbde32b5ee0e528856dd7df"}, "1074004335131893780": {"doc_hash": "64cd7c5170c1fd2b9490bfabc4b448c4151aa9691c35a80bbdd53f5a90b1a20a"}, "1074013294165245972": {"doc_hash": "99184107ccb2138b85fe14421dc86e239989815bef5becc06caf7a6147d05220"}, "1074064493979643934": {"doc_hash": "746f431105b4c6ede87f6a0a25a225a8569f8483fd8bfb187a2e22557784b607"}, "1074066504263401533": {"doc_hash": "4a1a32b50b9f86e32db82b1b64f08f3f22fdfb8a6942279ab57e67e9d82cc41d"}, "1074263408175755274": {"doc_hash": "36c45c17e3a4a0397fbc0f259086124098126dca9c3c69681a043fe78aa2da7e"}, "1074430667359797268": {"doc_hash": "54900e0661989ef60cbc3c0f9bcec2005540a88df98225d77465be8bec6af2e8"}, "1074484726108266577": {"doc_hash": "eb6bc1b855c19a8e82e8c28e84c494abed0ba94413bbaf7b6fcf7f99742c3ba2"}, "1074511357258518538": {"doc_hash": "d9d99ffcf6c67f2ffed0ba9c151798a769d23adfc1003cf1cd751fa2e47870cc"}, "1074531128628756590": {"doc_hash": "f02dd38225c44e8200723d4d7bba1c8c303ef70d8924299ab0d6d92a52ffd033"}, "1074532133470732308": {"doc_hash": "a374ce245ac037db3dff5af4885479fa8e0bdc02f999bdce6a03a343347a0170"}, "1074673952682672210": {"doc_hash": "bc9b8db36f15754d2bb9e7fc7f3837f81942818f70443574e7239eb10b8e22d7"}, "1074690672650633327": {"doc_hash": "574ac60adc6ccd3a7aa6205d150ddd8a732286d364e06953008fe39b3f6a54d0"}, "1074711837263790131": {"doc_hash": "d6e9d8d1532ea8ce420f1a4e77350665ff018902757737db3542c7cdf3afa8da"}, "1074724475658043474": {"doc_hash": "792ea4889e654cd722e43e47f37c4e300bb40c4d7f7be859cb51c5a8f150c92e"}, "1074819346670563459": {"doc_hash": "af8bd894cd67d558178e582350c22ad03c219efd8d63f161a80083e30e26a4b8"}, "1074884406914842634": {"doc_hash": "31864aa3f9ba40a2195ca14ca3e5c09c574be9d207092f7acc7a1894dc06458c"}, "1075032341417840761": {"doc_hash": "9a153fd55c92529612bcecd4d0a7e11d4fa2576f639095703a6a61005c2cb4e9"}, "1075158852179349594": {"doc_hash": "b20e7ef6c65e2aa5d1272cf9068fcf521dc0ba45f2198051dd50a115544c0d22"}, "1075292235983224842": {"doc_hash": "70a51ee9b948c10fff062ff0a712fa50d44f601860c3822cd599d31ab5b70ce8"}, "1075297640360706048": {"doc_hash": "006c048f5f81dced1962b7e18112312cf498b8cebddbd551063090b1ec2842bb"}, "1075328672870957076": {"doc_hash": "96045de29f86347f325a9c7d00757856a3a68ddc1d42074fe4c442fc9e33ba65"}, "1075330342128472126": {"doc_hash": "a98a5bb202cfef0096cd62d0c143fb05901dfb8324461beca5d128e3e13f9c27"}, "1075408853170147418": {"doc_hash": "0097439954ba97959ad836d1d6b6089861d35eb46a0b1eb5a36d049a5310147a"}, "1075451235475402764": {"doc_hash": "8e573bbfcf38c546c88f13e04ae2e3d207abfd95cc7713c6b2ad2b2c5053ddb1"}, "1075512720813719563": {"doc_hash": "1e9ada9c878675bb02d175cd9d3dbe5fb046162b85b8e7cce5f2c63d939b9966"}, "1075748774653198366": {"doc_hash": "b378499e1c42767e15cf3a1d52176bde43af1f7afab03cea4463aeed6b5e5cb0"}, "1075749386946093096": {"doc_hash": "3a35639eacca5c19b9e14a8fae209f181dbea167419f4d5fbe2c9acd305f1e68"}, "1075797462595403817": {"doc_hash": "301d619ecf9fb51b9f358e09f31d9520655656d2bd4c08fbee14a7b36332e4b6"}, "1075839506575544481": {"doc_hash": "81cc899181066d816fe7750bd1ee227966369dac47525231c42fe3492b865699"}, "1075843568763162797": {"doc_hash": "a74f6ae3ec38aacfa62ffa359a1d08a08f4bec2a5b3ef526a85abb194f2ebbf5"}, "1075865143650558054": {"doc_hash": "14e6743c3700d3e9423e0364831f067c49c9219e62572cc03430830a1fcae339"}, "1075867143717011576": {"doc_hash": "dcc6eba42d9c8b5da94e1a25294b6a15cded48ca2909482c734b97102d2a8d33"}, "1075886072678060163": {"doc_hash": "c25dfaa8965bd1d7868562b88cc94abf93d9cc95d48ac4afa727890bf1622ac6"}, "1075929098406338711": {"doc_hash": "ae252ce1219283c9cf583f19f70e26fd07cdea56eddf23cce819e06e9f743c81"}, "1076783492857348166": {"doc_hash": "69855a3b16b26d4fed4cab7cc6d6356f718b8b1981d112ee2437855d5c53bb85"}, "1076783534699716629": {"doc_hash": "5f884754192600f5b4c054193980cb4daff37cd92a66a7d36459cd7e2f25b69c"}, "1076898778843467776": {"doc_hash": "7d8746d31a5f9d7e3c7a60f1fec9a878633c1b1e0162ec1f19490a946b353dbd"}, "1077358811934896198": {"doc_hash": "ef392aa68f36e65d63cd88622ce4ff1a1dbcc654ed8fdfefbdca92de1ca2d2ff"}, "1077473220917219328": {"doc_hash": "d9551a073515bcdb8ec059a9eae17da3a86b33ce11ad84065db8115879441999"}, "1077506974834495568": {"doc_hash": "95bc12133d6e5cfd20f38ff8bfa948b6fb5600ff620efa580e2822a1c3ba7bcf"}, "1077681579020791880": {"doc_hash": "97fc77414e67d37c684fa3284f1b7ce96cda6dc9fc772afc48e862b46ea57d7a"}, "1077861022674735184": {"doc_hash": "c8b35a16dc00cb701d5ef9276d7c1d279161e1ab7aeb597cadc0d6cfde8d995c"}, "1078303463299096617": {"doc_hash": "3a32f28db5fc141621e5da82b203438a0b893075b9bd2aaa89743fdc39298994"}, "1078473961739915334": {"doc_hash": "4b78c4d3cb631773159d099fb45bf9e0311b0befbb27467354464ac5341bd367"}, "1078679652723335228": {"doc_hash": "46dd196b9a8b53d61a0a6c47254a7e3a6c1a6c4dcf3754c7914ad2629513f553"}, "1078713750435151872": {"doc_hash": "7460bd1c66f0431485c06c3cb6c762cfdd2a61e2092e844017a4fc154b6fb1ed"}, "1078774643650986136": {"doc_hash": "aac9a59fec0c1855e7c0449f21993fd79cf4d40ebd8d259a8dbec11e85f7259a"}, "1078789274075402251": {"doc_hash": "25e7f902612a19f29a8de9fe9eac3aafea84dd18255f336900406352e492f52d"}, "1078789953884000428": {"doc_hash": "a0c56b1ce4e02e9280de48fee490805856e5ec3f13e0cfa31bb4be5b51a25544"}, "1078791067996000296": {"doc_hash": "0e15f57825bd860447adbe00abb134c24308f2a958937809574690c965c81151"}, "1078800149561737277": {"doc_hash": "1be32bfd9220969d8711e3053edbff9aa3139a343688867a0f8b74af9f8831da"}, "1078826036260773958": {"doc_hash": "91aeb0de26f56daaa356a8bad07367b21acc574dbfcfa18fb1692791fbe997ec"}, "1079076747041050715": {"doc_hash": "a5b0baebf5081bcb2ada7aa503b182c45222281b5dac06f6502921a0672e5dd9"}, "1079191090508345435": {"doc_hash": "a10404091bfaef8ee3c141d2bf3b6d5d6e5af764dff41054631786bef64f419e"}, "1079442490555383938": {"doc_hash": "065de0565b3c3061c1cf2d2796474d57e7875b516bf96a72e1ff7a4f3a267a5f"}, "1079575925471068230": {"doc_hash": "c863da8392cfe1430ea0f95f6352a709ae3d9f6712819de03a36a8f3c0d79632"}, "1080263915650416811": {"doc_hash": "70ffacf4c803982b009cf9215d49c686106963eae7b23c0f0081c6b629b801ea"}, "1080299966817374250": {"doc_hash": "fe6ec0b27291c02ed7f5c9a3129b769d5cea830cf7e13fc9d4c4ce3cfeb6bd44"}, "1080374871864922212": {"doc_hash": "cadc6f439bb4ef971dcbf17c56d34aed358465faf7fc2077923590732e335573"}, "1080551520757612594": {"doc_hash": "f907e4193233e00874781a630f729fe78c5a261bffd851c4e236bbc7dc14f4b1"}, "1080552440115499128": {"doc_hash": "6f8df23c85c3e88e9a20fd1d0e41d8d1f3aac831e810770ba5889466783ca5e8"}, "1080639518195073054": {"doc_hash": "50eeda757b99694c7bc403135102ebcd3923b3f7c2ec73ab1900a7c9eef56328"}, "1080648100479254568": {"doc_hash": "c5b76c9001b3e70d69b5e79177089a398c9320cc4e7b7d565f89be3debe2561d"}, "1080670134177370142": {"doc_hash": "051df649c5588c8fba0b37e9264664078a1d50b07b6d3c21bd205ad2bb011537"}, "1080680891094945893": {"doc_hash": "074eab95ab3195e35c515bc47ed86a228095069e657587aca8690914ece2eaf4"}, "1080682854452834395": {"doc_hash": "654e32f2f5e7161707b33d8119a16038ce6c50bef41ba279dce2d31b916e46ae"}, "1080704497719984180": {"doc_hash": "128e1a52231ed631939d3f0fdc5fd1f9394aadc8aa01c1af72b9ae88f3626a63"}, "1080718083867553822": {"doc_hash": "726fdce216cf6fd5aa36b5ea2b562a15fc249851536f96f6d0c279d881b46f4f"}, "1080788565258154044": {"doc_hash": "dc971275816a5c8e3b4145986392bc3222f3637d5e9d8d0e94156ee5a967c7b4"}, "1080793075401633823": {"doc_hash": "5609fb2e65fb27757042009c88e7fcc65fe9071c489501cb59fb4168922b71fc"}, "1080796088849678357": {"doc_hash": "e64f302a6eff02ddfbd30facf3c4061108056e75ff7e49afc0e56ce521501646"}, "1080806777836281877": {"doc_hash": "988ee933af9ef42fb4749d0ee0b706534e1d786f92030c023d58141125c0c67e"}, "1080847925342642218": {"doc_hash": "c78709910d0bc7ba89988746cd1b34e7f783c07bbd09d7d2f66a27384cf8070e"}, "1080912671366467827": {"doc_hash": "3f1b17f7dfae166d7796576d4098658f6b34ea25b01e8d1bfce086050dd32031"}, "1080932626539483258": {"doc_hash": "f1f20eb490c45c40e41055522c4cc09bd7cf555bb31d238bd4c4bea752d3cd6f"}, "1080933109073186826": {"doc_hash": "bcbba90d0f027b211a41dc83df20ba93333f1cb30e554b122be82ba1bd33296c"}, "1080937442997190676": {"doc_hash": "7b1fd7ee70bc5dea2eb78e0572a5bfa3b8192f820857b2a2289b6b8b723f336a"}, "1081112568510292018": {"doc_hash": "687c3acfed7cbd07f2d6a68122f200e08655cc8b7267792f9d40fe8d47fc0af0"}, "1081148960430886933": {"doc_hash": "302e3be90ba82cd0d3e1e42066d27b086331ac27c697ab598df7c9cafa3fef9b"}, "1081295364595908790": {"doc_hash": "3d1d20bead839e0278539768359bf2ae72ee5da79076410819a6b914b20b3dc1"}, "1081328872571801680": {"doc_hash": "6e7f4ebccbfde9cb6478baded30e8a68c2ea1dd0790dd2a97cb3a0da65aa90f4"}, "1081329351800406107": {"doc_hash": "f1d0679d54c6bcb60f1a53d11f860a8ee3e2cea266e309ebb7334f7b21f55ce9"}, "1081336444339109948": {"doc_hash": "ceb9f76cd636ab7b0e3968554aab4035292b911cc3a4c9451d789b900a109ca6"}, "1081366516399882340": {"doc_hash": "3283e01c8a5cd8e31631f79c9c0f0a6399fb7ff401c79e1a9d0b624a6be2212d"}, "1081394193764712488": {"doc_hash": "3326d81b575227a7768a7fc6e1f44cf100c9c0010201aeab07e8c687b6f6c7f3"}, "1081568608863391824": {"doc_hash": "bf48b599a4b97f575c9a76300d57c34a7f2db55812bb51a54bcef28da74af73e"}, "1081742628237881494": {"doc_hash": "9dcdba02e3c69ee1cccf68fbbcefb1f06ec1803c92f654bb010c36cd758ea887"}, "1082076726974234737": {"doc_hash": "ef47eba0355114dc135098f55a77a6c5e2bdf544db1e8b77edaa2005279157e3"}, "1082205263349678151": {"doc_hash": "aa4c38cecd6c3cb2b982dc292643ba6a6d5b55b6e56f518344e2fcb36c2ba78e"}, "1082211813766213692": {"doc_hash": "77d71e52d9847611cf1b593ef17f7aa05dc9abf130e168875d08a1bef932459c"}, "1082303582981869649": {"doc_hash": "b97836a09b927f9b6127f5dce31cab144d27347c863932a2d81b2fad0d6dbc00"}, "1082768936573075606": {"doc_hash": "0d9844b9386bbfb7388d373841cc63b1d6b6b764f908ff98d65cda68c2d77596"}, "1083069177985765386": {"doc_hash": "ed1e2ea1e50748b888970869a03d11b1b2a972a071ceb6c2d4abb7cfa3733a37"}, "1083097212671766590": {"doc_hash": "e77cd3ab35f0890a4e567629322399649990f10276baaf325a34b57ba629c772"}, "1083099657632223342": {"doc_hash": "0a71ace7c4805a582c56ac76ea6e7f7a071db1fca5580aad24ac46155e3fae96"}, "1083108184740339742": {"doc_hash": "19238d73d2d30531b6257c1f45848bf4d1ea024b56e07a6fd6b6c649ce22fcde"}, "1083116241541156945": {"doc_hash": "469fd96c7fec438ab96e0fdd989043d3e90191fe69c281761cf4d381ede59ddd"}, "1083122207531749426": {"doc_hash": "2f20890b95b7098ce5f1b0bded8e1a94cb8876c5627095a7a548676a2a17405a"}, "1083322529105575956": {"doc_hash": "b228e13520f098269c2978adcdd71a6d66b5dd967a7cafe053babca67392a610"}, "1083474132441772113": {"doc_hash": "c82995951e28585de01f19e3efd684118184060e76d09394a8a624f527d94235"}, "1083519788573261864": {"doc_hash": "424574ca72bf2d1257567d09c8efab1eaf170ae29d613015c0bdae5398a9bb1b"}, "1083561958097289216": {"doc_hash": "048130c1c50fdda32abffc14c20e30f86711b30175c1bfcc492896aaeba8cd45"}, "1083572873848963154": {"doc_hash": "7ceed07e5c0f817f0bdcc3fb3ee05d996a168806a502592dcad6240d4d2b4dc0"}, "1083619174938595388": {"doc_hash": "ce980c013b8d051ee5a863dbd2a624fae24f96c906f346efaa91c6550036638d"}, "1083754445705326673": {"doc_hash": "bd23f0462e23bea25312f415a7c64c6c8338e4afcf46cd443a1f2052324c6845"}, "1083759371990859888": {"doc_hash": "59f1ed7d5f3d8d4fc4fbb932a038fcf950e601bdf0375bd3446d7990ba53ed56"}, "1083760308314706031": {"doc_hash": "310a915127650713c5d799b0ac16ac57e8d85c8dcd180837aed30ead1faa4c00"}, "1083778977526722611": {"doc_hash": "8fa54fcf01e3c92299b8c5e9a9467fab1bbd02e353daf09d2f3a22d0fc9f7029"}, "1083792829278584843": {"doc_hash": "3ee432c49f3fd6325064da9f65a219156597324bbf57358db504e5659ebd564e"}, "1084085632562888734": {"doc_hash": "6bae9d0a0103927385ccd7dfb697ed968a8789555b76bc40560c3232806fd5a0"}, "1084179118033227836": {"doc_hash": "6602f76c780f59fcce8b190fb6ccf83e853151dada713686e937c4f39d2bd7c1"}, "1084247067112779898": {"doc_hash": "546b26e462738dc02a5d03d93d8030aecbf412c57e6cbb33d9f7db263a8a431d"}, "1084247092635107438": {"doc_hash": "e0aad312342ddb139e53d73291088bd7789b3c59cfaf3b37cc057ddc68954f05"}, "1084305521215033444": {"doc_hash": "9c3f4c5b21d9478e68d550d45878ca3abd06d4c7d475e86eb555a5cf1f1a3bdd"}, "1084613316053311489": {"doc_hash": "98691750b7140963e0b3c9881fa520500d0a4ae76befed1f1c1fc4ec86f266b3"}, "1084718723987947571": {"doc_hash": "8df0507d85f9fb2eece638add739a6f7ba9fe3a592953447c7a1418b5e293af5"}, "1084753677178376222": {"doc_hash": "c1c0b1e5d70ade647402fbfea7909bcd19ce037ebf86111dd47ae632bd37b0ef"}, "1084876932589555783": {"doc_hash": "e8cb9d41bcd266de58daf8c235fc02cae6d67cae449b1441df900a8dd344ff75"}, "1084956695194775592": {"doc_hash": "6ff06c5ca19a7d22b7e8f59e0f341c8ab43f5ac324cbfd183be219024cacb7c2"}, "1085087103920132197": {"doc_hash": "9eaf15858845c0b72429138ade5ec11af517467ba479049eabb519d5d02056f6"}, "1085100286441439273": {"doc_hash": "3c5a2bfb80220dfceaf0dc48220c74d4b4f74ce8ee6d04982b7c98abf39bb514"}, "1085122648046063636": {"doc_hash": "fb3994e0d767f1cfd05c26cb9fbfc38e975785cff4b9a4cdf4202a2f308f9416"}, "1085216740339875991": {"doc_hash": "58f6367c78c847cc33c8a8aef9c1fc3dd507fc1b8584ea4060fff55ed5724988"}, "1085319607897821195": {"doc_hash": "d5ab0740b27554db382a942bcfcc8d0b6b675576d365d11b364c6928a19f30c2"}, "1085324838559821974": {"doc_hash": "5a9f5267e5a626abd422615f1c6ed7ba222c51010783b2b7b5eba90923fff98e"}, "1085371949858947123": {"doc_hash": "88dc24839f3e854f705ff39547ef2c12499f41a2ad7f376af9c1bb07d23e69ff"}, "1085398267770183760": {"doc_hash": "11d045fe753e2f638d45ba9097e08b3e8c6c8c115fba2097490528480f983131"}, "1085511018693804113": {"doc_hash": "7a65023ec7a3c08f92c272c5acf1432d32e4926f128eb8537bcab7c67b8dffcf"}, "1085540732070285353": {"doc_hash": "2f9371565ec1aa464302185155c84819c710b278191df42c240a271f308113af"}, "1085553350390583307": {"doc_hash": "d39186c2705244a3d2d87ec6a46b90692372b01b7cc509041db3f60f64ea0b96"}, "1085579182307807313": {"doc_hash": "a192db4b7e9f00d5d3b0178787d966c9e16cce70a06c6ce8cac315d520b325bf"}, "1085586527591075860": {"doc_hash": "08fa29fd336336eaa6e5ec6b430ae0ea5354b1c10e1b66f677f57900acb8c612"}, "1085648901148770478": {"doc_hash": "d96eed660afb94342af3b926d1c287b0e357de9c110f39a8300300ff51e252be"}, "1085688993858981909": {"doc_hash": "a531d5b908d3deb72e003bd2b6f3d65c6cbf01e1635217b3b533a428db8bd7fa"}, "1085745359394979860": {"doc_hash": "bb41cb648fd34f49c758bc3017764513ac4c893897a379dfd449edc85e135d34"}, "1085785318822785064": {"doc_hash": "a3a7eb0787762d71851afb3afac8b2d6d47a93065455d6be9610e49eab3a819a"}, "1085789697814564914": {"doc_hash": "d782bb66651eb807deedbd0d8f51dbea526e74e44219e5222143efd004a189cd"}, "1085812187861352498": {"doc_hash": "c650ccf7234ccb28cca746a480fa050c05f49e77f8133149c575e514410b8243"}, "1085813176513347704": {"doc_hash": "d8bc97c0995a896212962104601233547e3bf289a8abc001f37c2f2e64ecd30c"}, "1085934652314877983": {"doc_hash": "9f5de0a2ef8e34b12c6f54ef3ecd99a2eb7f0c5087922fa4294f71e07de1f26f"}, "1086012677068959776": {"doc_hash": "b4147ac59eddc0610f7abc415e3ae41af60b463ba0bd08a51261761c22a496c9"}, "1086020117458079925": {"doc_hash": "742fe1e09a4f6c99b75365ab92adc564560680c3c3272c192ecd8800b39a7a62"}, "1086037370836615259": {"doc_hash": "de1188ee4ac500edd7e96833d634ee7f231e8b58a659485434db3457b793dbb8"}, "1086050962499711026": {"doc_hash": "8c9bf9227e01f3a1c909394df63c9ea7337258d97ae57e83d28ca4a2e7c10017"}, "1086204851379245197": {"doc_hash": "179ddfe2d8f741fbf38809c41cf779426222e23fec462f5adc01a5e00b1e335b"}, "1086270139021930506": {"doc_hash": "6716f4273180b33585d509311045b3fb244738fa808caa7539539cf683f0851e"}, "1086441287319826522": {"doc_hash": "684f7a4da498875c0398ed148c88093816172ff61dcdecd82f590c7bb043f6d5"}, "1086450662818197566": {"doc_hash": "2f3712fa731da61c380bc2779fb19570d5ae086d071ac440ae2e65c81187ea2f"}, "1086724338461462541": {"doc_hash": "db385693643448e740aefe78d5c792ca2dd08cfb1fe3078b455e93a5e94fc255"}, "1086832870787666030": {"doc_hash": "cdaabb07760cd1f94262abbdc203d5a913114ed909356989438e37abf0e948e5"}, "1086950395458355292": {"doc_hash": "9d5e290b834ec248e15faefb6e264a331f0e2ae408ee7fa201d9131c7eb0c9a8"}, "1086968174353862687": {"doc_hash": "3057c08e836acdbff9d63925591a76d4c10fdca54621ada8c47b681b48bdaf65"}, "1086968357326180395": {"doc_hash": "78df5c7857a6f065b5c5c0759bb21fb7028bc5bcd97b8c2b5cf5cf6e37c8c981"}, "1086974298251608116": {"doc_hash": "4760b9ae1cc13979a0eac3370e190c30bb3b32d91d6c2638728c2faa76f46068"}, "1086977412400693280": {"doc_hash": "1096a7c9f76cf23e40992e938f2fa8f03b4b4881c1039b6a83edddb5e665a8c8"}, "1086984654860599366": {"doc_hash": "27b412f4a5dbc34372329dafeeb4c960f147ff5c75830182432352f7471bc88d"}, "1086994839096266783": {"doc_hash": "c41306b46e0c47767dbdffbd56862503a03964c9f63b944df6d63213d643e4ed"}, "1087000519073079337": {"doc_hash": "1188bba0234ea41ed856e697f0b1781de5d89f78e789b33287a6f44db95376b2"}, "1087006323180306563": {"doc_hash": "15ac363d88aa85478cfeb64a242fa0f7a7173da64a35f4bc07c13ba6f47c2c3a"}, "1087006977063923713": {"doc_hash": "61304b3da19be4960d8339ef5f6eda18f51bd5f8c837a4d1d5793fb31d838106"}, "1087022368150540318": {"doc_hash": "516c36de7dfd9993b47dc8ad2994d1f08c6bcebca84b0ebc3457d4596aa88676"}, "1087050949303992472": {"doc_hash": "7f39d71cc70e9f7f33a7138684b47ae4e283cf48ad058db7c5b030ee5dd63884"}, "1087051901142585395": {"doc_hash": "7be4c9a661e6eacf08cdefd86d7946bdb409775afff6fdac18d1b8adc77b7880"}, "1087053681406509066": {"doc_hash": "edaded59a3d093be692d9e72d8fd78542e324832bca803e7b29dfa3900322279"}, "1087056600499499098": {"doc_hash": "bd45a1cbcc061571cb87a514b76e8b506804763f888389e91f38421936a07552"}, "1087062566993404004": {"doc_hash": "1b5858b7144141885f1d2094d06f10544abf6ecb719a09bddf09dacefb66d90d"}, "1087344397680648324": {"doc_hash": "787c64a64022fdeed73418b6b87c175b8cd7dbb8a8c86ef07cd5206497e0423c"}, "1087347988407525377": {"doc_hash": "61328300b9c4aea44da9ea09e4051a30b3b57881c814edfcfacba0e6b96618eb"}, "1087348527635644417": {"doc_hash": "31c823a4271fe7b798dec94fdbc5656003c9cdf546bd6ee72319d9aee8603ca2"}, "1087364107654680668": {"doc_hash": "d160b769c5b5439efdbd8d75692ebb5cc6b1a02e006a88b7d8b126fed526c840"}, "1087412205156303019": {"doc_hash": "4b2a67b4a629c29d03fad4650e8bed0a88513793c3efdc0fb222e0f9865044e2"}, "1087415605101084682": {"doc_hash": "d776e9a9b6e00e7ffe55c6597f32d05e3af6e4db17cf3741d074dd2ec4ec0667"}, "1087440937623490692": {"doc_hash": "7f8e4e562c24df534565838ee48a3dec7a0460e2a9af20c0521e549abc84502f"}, "1087444022911578142": {"doc_hash": "649843d9da60525c0bed1776dcb56696ebb189956ad85ac6daa92e61bb91c30e"}, "1087504177825067078": {"doc_hash": "103b2a1d93aa36d5dde7f774be368e6ab3ac6c9078d7e729081a828d02cb9fd7"}, "1087509749517533204": {"doc_hash": "b3cd1678492750971c51f0c54022c6f322b94f359dc5e47343b80191c9eed4f6"}, "1087590022074601543": {"doc_hash": "906bbbee2609a73ea8911b581dabe4c455f50691438e2c7b6404992ad5a752c3"}, "1087600298274586755": {"doc_hash": "b6a6c0ab7fe9c28c05a7fbe6fba533e22fcd184764b40276625d77574c3a791b"}, "1087634790888509500": {"doc_hash": "2a6cc3edeb666069d8caaa6249ea04b0c4b31fdd50f3affaf5256c0c22d7f1e0"}, "1087671852622688266": {"doc_hash": "57b2c6e4756c7c12c022dd9e14fcce3b7a22689db2a4eafb12f0006e12a88acf"}, "1087721537827786772": {"doc_hash": "c895af28a68a67ae757f6366d48f2b304691cd251f241c10475ea49123657c78"}, "1087734157083418634": {"doc_hash": "c1a79e3d4c057dbd13444834f3fd9f2d14f80a51ea3078a976b0f323b5b44376"}, "1087737128148009042": {"doc_hash": "c73d9a1e3cc66fc92b9c47b9788f5518fe95168ba71e641e6ec79c4d846014d6"}, "1087785559646290040": {"doc_hash": "5f7381383c76cf83ef888f5fca5de5c02e04fd3c73d776aa301c06afb255beba"}, "1087789607195791511": {"doc_hash": "c058a26b8a6e6abc9044bb6e76cf573dfa64071dc1cc7f24e11fa9b096ca2f5e"}, "1087800655470678066": {"doc_hash": "5c2089344393fc9ccd83aebc3ca38a5967d9327efdd7a266b3a69eadedab4615"}, "1087835701732720820": {"doc_hash": "a1d39978d77923569200508b5607a4bc87c096ac81c5bf14f4136acc5587c3a8"}, "1087876152611315742": {"doc_hash": "3669e3d10561125787e4fb0c4d35b7c3805ed2029f6a3240b125542987c062c9"}, "1087968569729486868": {"doc_hash": "dc52f753519288ed635bd8909ba3b426c0bd947c822f027bd536dcffee3dfdc8"}, "1088016711845957653": {"doc_hash": "b522367c66ca16164bb07df876dd0299a53ba828264842a56f86f2326147b48a"}, "1088081015639126096": {"doc_hash": "cbada194309bdc21d28425579105eb3e402d9e272c3840e7b22003fbb8de8442"}, "1088163751502561302": {"doc_hash": "62a7b6a53475f59127da707c56c1e44e90cf9f805aefafdaf53cf8e5dfefec51"}, "1088164500206800936": {"doc_hash": "a440b0b9e619ef75015fc7c1c98aa9a94d7aad6aebdc4751ee5b087b3b8ceec1"}, "1088217325221728337": {"doc_hash": "982ff3c4eb9b2f850287e5ab2f3c0175bbcd78e3c63cfefe05dc977df55430ae"}, "1088220601140924536": {"doc_hash": "952e588d4eed4c3fa487d4447b6d303a73c70341a163be2c2a7412c93de2c097"}, "1088276920447270992": {"doc_hash": "ff5bdcaf2811297c8cea2deea482cc5142f50c846f46880225627b08efdce1b4"}, "1088280495785254972": {"doc_hash": "897cd08e8a1e67197c5d89b22793f24b25fc2edf8bd3a3a67c832a28ecad67f0"}, "1088421061298769970": {"doc_hash": "2a9faee6840af9eeedb173568e5af92d96615145389f74f0f961fe97269277af"}, "1088444181753630780": {"doc_hash": "0a56d2911a8a6b5235792a5f2836a0887773dfbb273742f54e7b48a5cdb0e47d"}, "1088480785574662275": {"doc_hash": "a156e74d190ddc5db572e58f0c33b5d29a561ac69c9b5840db857793cf07ec58"}, "1088481956255240192": {"doc_hash": "caf41b243743e3a15916d041f88841c944acaf91d8494f2fc2c336c806cdd0b2"}, "1088494981565661244": {"doc_hash": "5b01e9a5f5acfe3ced04cbd7f92fd623738f64f5836c0c9391c1530179ab7d31"}, "1088502513503850658": {"doc_hash": "325b7a8d5f8262f32989a2c67266a64f28a364585fa319c76dd5e14ec2512254"}, "1088534046381969528": {"doc_hash": "8f33d71d8948bbac95168df337c8ad0a8284075f99b62bcaccccafaadef41ba8"}, "1088552607083143299": {"doc_hash": "92b3f6356d03d8dc8ceeb48e96f5e8019b0d653a8b6d48d24311afb8e41f20b7"}, "1088564751266750505": {"doc_hash": "3e8e8d4ea613dad3de949f1a1c17d6ede5b71a5ff7b47b08ce4b6ae6a6380191"}, "1088637858186809565": {"doc_hash": "452d3573ae9052829d221bab712ef5c9f88ae198dc3a01f611c0cd00e027fe6f"}, "1088730842198712391": {"doc_hash": "82ad5b53b0b575043f628364064416d589b4880401480496d339ba9d3441c0ad"}, "1088737463847108619": {"doc_hash": "8732f8e3761bd71e9bba1bf9d50395e8b1fd2061a33d628de43fc7cf28bcf68b"}, "1088754575323955200": {"doc_hash": "801e261877f64e432c343065a5a42e212f76e411acd90add1c11803d8263ceb7"}, "1088764538482085949": {"doc_hash": "d9179d5d232cb62192f78dcdbfd7e673cc4c1b3b85dce851a679fdde82c32168"}, "1088890651850055862": {"doc_hash": "169d6b946818fe6bd8dc425c0e1959f820e3b2f7b1cea3b6fc8e1a00a69332d1"}, "1088893005001412658": {"doc_hash": "2b873dfa3d0c669790933fc57ff8e1ce3c07238968b0e5bf8bfbc9a961a4aad3"}, "1088893847720960020": {"doc_hash": "60505d644ec12b54132a2126e87a7c9694b162955deafb995c423277880ab888"}, "1088947642840649868": {"doc_hash": "a5a9fbb01053d983faa846b03595e7da25cc270a02c485ecc36756b99211b6e7"}, "1089063519749689426": {"doc_hash": "d2b80c42c50e3d7415c891dbb687c6a39b38fbd62a11e1f398491cb964aaf199"}, "1089198484638404638": {"doc_hash": "1b6c7847ed67b7ee74870b246585eba6a173f6bfe119f44c544410da36cd6425"}, "1089229932586074152": {"doc_hash": "f290077db446380e91895975b2478705bf1f5a1d3a171725aca4a084a2c90901"}, "1089248211698466988": {"doc_hash": "5d8acfc4cb6842e564558f5a4abc83f5bc925b61f46c54bd5cfc7657bf5cca39"}, "1089357972657934336": {"doc_hash": "a479adf31e4c2ddeaf636c628fa99a3173837b8865ea44087a9b3cdca0e94a90"}, "1089517412078071810": {"doc_hash": "4a4ec956da2fa9b92e8bf70ceb7a9e621e180124ded4901d24b872def4727979"}, "1089720306886770709": {"doc_hash": "8abc0c4ad926e187a08e98951305bfe1396d36d132c8caf9a52e423b1ee3e206"}, "1089881201684262912": {"doc_hash": "404b0edb31be1031f8409c4b3ed60fa3fe1a19078255e7bbd83c138c826f5d36"}, "1089916275184111667": {"doc_hash": "6465995303b7e60e3fdc224a3e9628cbabd2f68554d5ba5d3c7924eca6057b1f"}, "1090035927159681144": {"doc_hash": "cfdf954be058f8ecef94c54f6221da5c6ba07ca233b04caa3efa84b67ad6621f"}, "1090043846454423654": {"doc_hash": "36c280e6bd2946ce706c2dd174d1a2be1bab2327a79566190b83aedf0093d09a"}, "1090046627449946122": {"doc_hash": "c44914ecc3ec963908e5605852c369b27718fdea2d27240dd848dba7856f59c4"}, "1090060277485158480": {"doc_hash": "c2c0fcc9fe601648ff087772f1b87259a86a7dad32a16c0c200ccd55cc4f4e0b"}, "1090159696981262396": {"doc_hash": "dfbce855185ad8e08ed1b5eac4f8f8fd475e36ac52899013b9f6d7e9d31f573e"}, "1090383537481469972": {"doc_hash": "c361bdd2a641d0047720e47a1b4f8b705e0ee38495671b14c19486fed84954c1"}, "1090384679481376809": {"doc_hash": "2d04b97eaf87ccb29a584ab76d19f0d39a74eb5131d5ebb40e731678ccea5fa4"}, "1090384767528206408": {"doc_hash": "22ee59aab4c111aa4526113bd921b0d6f7d169a2f418c71689580719deeca685"}, "1090430513560424488": {"doc_hash": "baa636f3e0331b20a17a0b40e6147750b2bda6144a1b78822c64195f639f4c50"}, "1090454778326298676": {"doc_hash": "b8062ab936672fb4a798fe7b6d7ef52c9aaec957f5e6a65b823bc072db7e8810"}, "1090479032686104657": {"doc_hash": "581586947d541a72df638ec8580a510bda7aa37b368dcf0111beb65865fb8a26"}, "1090520284672565268": {"doc_hash": "bf893e7259202d06717f459983c61c6a391a7759efdcee620a9695ad733cdfab"}, "1090552847650803723": {"doc_hash": "af3d7d5c338035c628650b0b28e9389c41480d40da2246ae95c8cd0851680b6e"}, "1090574437205676112": {"doc_hash": "7414ca64be52465e5af38c42358d558bdd212ec91852f13e2aea447e202f33ac"}, "1090580412138532894": {"doc_hash": "d611d4c611d037512b60c546a9918dae75ed6922293486bb070bc95b44237432"}, "1090617709466767431": {"doc_hash": "4be7a8e8bfaaa7940a40b11e5e0491245f5264dcfad42535678e055202cf6aeb"}, "1090633302773346344": {"doc_hash": "fe39f2e44cbbb0ea90a37695b11afd24b17026da7633eacdb75f8b747f29ae2a"}, "1090646705361399848": {"doc_hash": "7a15d30c87f9a5ceb76b593332e2d012c9aa30cfafec4107780f549ebe3535d1"}, "1090650412870271077": {"doc_hash": "0a110f098945741ef8b6471a0c8b6b9036c79268b41bbed4b418818e52282e2d"}, "1090670459168759884": {"doc_hash": "9df3bcc0e8729b60ee7e993ee77746c0e780fc5096a4de0687c9ef13c2ee0c49"}, "1090723822308704357": {"doc_hash": "318bf15200d9c320f0a6a29d3c1d5bd5cc479d0f13ee82a5968eeead15f4f403"}, "1090740288919720027": {"doc_hash": "4dff286aba5d3caf6d8d0a8b2d8cb66d586d5e6e70971e13c77e2937b756e523"}, "1090745720899899392": {"doc_hash": "a1eef40e6fc3780cfe0218b762c66e4c65cdfc3d7b53a51128d935231f058d9f"}, "1090777458036461699": {"doc_hash": "2fa9e9211c64373972b492282a938b6a7fcdf636c46244416aa841f5f5a1ef22"}, "1090810973587247195": {"doc_hash": "1ac9132c73ac988058f28be81804b584dd25b7be59bbb174e3a23451bc394964"}, "1090854990714785862": {"doc_hash": "1d0577678d1128bd72325fc341d0f9a4616bbb1dadccc90192cbca2c024a85d4"}, "1090871529933381644": {"doc_hash": "20d219e7111005a43349607a490048e755a10aba4113db82ae82158c4f22a319"}, "1090965285374275684": {"doc_hash": "35bbab5c1fe6c3c94dc8811247a1a6256f9c438e273c99a4e33d2d75990556e5"}, "1091013188402810881": {"doc_hash": "5cf850c0bf7ed010ab5d6a13ccc2194e4dea26fd09e406bc796c138e5ad17932"}, "1091044468775473152": {"doc_hash": "764a3875d8a58028293004b79b2775f7efa2c541973278b65caf65c263fbd112"}, "1091064499739566130": {"doc_hash": "4f8623a3b5154c93306885ba40e766853ba74b2d57cf275c8c3c16421ba615fe"}, "1091088166414463057": {"doc_hash": "7cc6d67c930681f7463f2142da966c5a380731b284ec4cbc9239fc3ce79f7a98"}, "1091220365340069938": {"doc_hash": "0160aea1ccd854ca7def9c8497ce593b094cf8035ff8a3077202508623c52c50"}, "1091244336534003732": {"doc_hash": "1cb74ea96850b68c15fd81c68c9b477dc59c0126280d2e661d3f6b48d90554a4"}, "1091260944463691797": {"doc_hash": "6e7bc1997dd7310943b1d3fe365ec1436345e1b26e99c9f8a0d08566077d65e7"}, "1091276055035269151": {"doc_hash": "3612212af915cb9efbecda642795d8680fe5ef2703339bbef47dc61206ac7fa7"}, "1091279157448691761": {"doc_hash": "b1effab3c24f5bb5025da0ca5758ee1a0986fd6b24fe8f25526c8416e19b45f6"}, "1091298907583160321": {"doc_hash": "c9549d61f455e99071cb57b914c14f5048df254d01cacaa320ee2663ca3fa4f6"}, "1091326971163705406": {"doc_hash": "9696a956ea9d32b22cd3db17c13718b94f788fba3200a681f86e4503f61b45eb"}, "1091540691269722144": {"doc_hash": "4f634e6688ddea43587f9cce8ea0c17a0ba799cc045c74c7023b04aace363672"}, "1091692373328810124": {"doc_hash": "3c97f39531e06ca86ba382de58aea4bf635b364108b8e24be12488609c5ac1e3"}, "1092086171120705676": {"doc_hash": "95261fc8afd28e0d27fee0dd65e3388c9ec160ad584f4e5f2dba90be55d75edb"}, "1092200001293275186": {"doc_hash": "757374cb216a13b22992b92872bffd0e6d73f7415a67b33b06e6320bf5dcdbbd"}, "1092242741062275152": {"doc_hash": "b54a5afa8029b29f10c9fd0e1a4e595cedb064c4ca3289c0fc4d42fa3dc1f4a9"}, "1092432032400945182": {"doc_hash": "a791b5a356dbaf4d555ae3b8f16785168d8161cbf3fe8326b73de52a47791b27"}, "1092487133073248276": {"doc_hash": "e7c29a3826eac61c9061a97a12018dce170b6a6c7b6066285d5011ba76f672ee"}, "1092519759309967390": {"doc_hash": "c20b531ee5dd0f831d27b21ee716ec78210faeb1d4347ce2b2c6f41b18b633b9"}, "1092546886902222869": {"doc_hash": "def782dc5e689c909a8e6cb74b0aa93ca2b1c41d5a2615b1f5e0802b31f87304"}, "1092581722455023716": {"doc_hash": "aa7f2381551542bb441f56fff0f51990e7e7f6112c9e8644b7d265e605509f43"}, "1092605765111521310": {"doc_hash": "6f4bfb9a4b35da2037fd91a7adcde83d5a837ba89822a7bbb831d94b4202ef20"}, "1092607359420993556": {"doc_hash": "0cd1b845feca4a04582e4f7f286ee01b824e2d4e24e2f5a27c8baa8d65404a0a"}, "1092692065361592391": {"doc_hash": "633062964813de390a4feb0489779bb6b1ff9f7d3b2b1f502ccaea6ba5926b69"}, "1092711792414818354": {"doc_hash": "cfb5852b2fcdeff3e760bb2ec4e9c324552b2c8850011a759356bbde68590145"}, "1092745879624110100": {"doc_hash": "7ac8ba091a9bda9e5c0a21b2d16b1899c44cbfa4d9d12a94aed0979c613f1d3c"}, "1092862292816822372": {"doc_hash": "223f5cfd16e5897549556442cdde2561bcdda5d1949ab3217444f940d8ead361"}, "1092887140188303380": {"doc_hash": "ff3c3e9b19feac816340d0345746ceb77d1d95c2bc0b37f5e521b1bf141dec4c"}, "1092955994012790896": {"doc_hash": "0f867390f5ca98a2569af8b502fb72bbec37fa8176013763a9f25c5ed23892d9"}, "1092963511858122783": {"doc_hash": "80ced0cfd73a87bf411c1358d36ad7ae4e1d55d3245f76c9e930c05f8e8c34f7"}, "1093140563555008574": {"doc_hash": "7ecbdf764a9ad875c13fa91a054cf0b6aaeb415fad8c7a19465db20c650757e2"}, "1093147582647251055": {"doc_hash": "cb5314087f223e07152720598b0fc71f3d8991ab234514dd1900369146c1b877"}, "1093205174727757844": {"doc_hash": "871edd571627f92153116f2ac05a49967a71dd4796d96306a93dd4b2511572d5"}, "1093208273219506176": {"doc_hash": "39144832288bc83306eccb71536671449765b53a3efa902497edda164ab291a1"}, "1093262299407597648": {"doc_hash": "06a8345f0b7234f07529a494136b6f9918e4d9b90df3cff83169872289ac5b4b"}, "1093321690337005578": {"doc_hash": "b920c7923d98e18301a5163e7ebbd1904298106c07e2408a91593eaaf08ec481"}, "1093344546752036905": {"doc_hash": "97ecf636ff0f7c93eee7bbfcba54361d728a91e2c066d1d659ba6ef36ea5852d"}, "1093463314719322194": {"doc_hash": "910fe459d94fa81bdce24e413f9a260cb5c516c36c5c742e3e639ea8fd317477"}, "1093501820900483214": {"doc_hash": "28e4f1bca3372343ac00c9f740fb9980a1c51f2264618ffea4111a00eb212a58"}, "1093558597876723753": {"doc_hash": "bb70b899b7bc5a794bafa735db00511222aa0524e975bf45114ba814a1a1b0c8"}, "1093571154175869028": {"doc_hash": "9bc264cdaa8d5efd260666ba682d5258629a966bf0cc6f1bc999a05cb054c028"}, "1093626809662320691": {"doc_hash": "7ce25f7e36de63ddce2c524c8f8305482287d43791bd5bc15ef7888dca3ffb24"}, "1093627048301436969": {"doc_hash": "94318965314cc8806497810950e864fe838036658e651f9d6fd56afb6119037e"}, "1093627143541506078": {"doc_hash": "715bae5508eda1c620892359e23c5ef4c18618e4906c6de814dab41499498dfa"}, "1093627256368275466": {"doc_hash": "898a4c2424e8a0dfb9e7f716371237aeace9729444d4447f51226fd5b32ef427"}, "1093635993099313162": {"doc_hash": "6cf9e749e52b49989bbe19230cd9b03feb42343512aa908598db4330b842d98f"}, "1093638449862553642": {"doc_hash": "53827e000e23e5d22d02a51cef76275a8b3593b9bc895262fd75238161a97d12"}, "1093642280100962324": {"doc_hash": "25d20567e3b425c5fc48b3234c85a01f1f00eb45cd0ab1131b7463287d97f240"}, "1093678160790425610": {"doc_hash": "317d9114d017ddc11ee9c2594cb76aa46ccd67d580139f591a893053aa2cc5e5"}, "1093679900700979291": {"doc_hash": "41a06f2166794c3a2eb5dfd819c0fb103e8a235150e5c1dd8def21b68c7c15b0"}, "1093687021689638932": {"doc_hash": "d07212a515766b5f5c9feddec9f8d3fabfcbae8a845f88b33bf99364e135ab07"}, "1093691684228964383": {"doc_hash": "3a4c8328f6488fb502bc27fc2c62cd699ef0ba4d65eb8b73ddb79ac0fa7f255d"}, "1093719425837973564": {"doc_hash": "7ee08e6b331e7f1b835b051bc7d9daa9a2fe5fb20120d7b0017509c92d02adcb"}, "1093723232504381571": {"doc_hash": "077180471681cf111610d5bbd74a5c20a64c4f8aa377773a71118715ded47664"}, "1093741472983035924": {"doc_hash": "7266d5f26d84780904bb074a69036f210b4959acbb545c9dda1ed43137cad516"}, "1093838805519315075": {"doc_hash": "9ac681ef715c62cdce1a88fe80ee0544c4ffb5902ec1066f7df48963fbfde79c"}, "1093841749966860309": {"doc_hash": "6701aed14a98f1644a8af79b22b794250cbe3ea8bf524c8f9aee29a4f4e09815"}, "1093845630532730930": {"doc_hash": "c8774fc69ba8e3d7631e69a2766e590085a675500a005625fea83f9af74dc560"}, "1093872829684011088": {"doc_hash": "b546ca933cceab21b1ff58bc19066d54abd21467f7e6eeedba417b3b148a1509"}, "1093874705074769940": {"doc_hash": "9970f82f1d3e07d80ef5e43d18edc773399b3c5dfeaad0658d462d3fcd0fc646"}, "1093887885796720660": {"doc_hash": "2772ad716aa7a467fcc73fa47fe08c1418785534a93935279836c0e1f9a52478"}, "1093917687601709136": {"doc_hash": "764877c3a6ceec171b4813e7e98a9d7808243f01cdea59f83e066c3fb0dfa9f9"}, "1093924553522167958": {"doc_hash": "99b8b32b4261c62f2a5f531a7c558f0c648bee2dc119cacb7deeb0ad56d9b7d6"}, "1093929899774984293": {"doc_hash": "c4fa13fd4840b0205d887d24c3d290516ed605761a78757f5a3f564098f8e795"}, "1093941566772625529": {"doc_hash": "1109958c139b61529b5f01a8dfad791f33dfa84d4e95f446740f1c627f401b29"}, "1093942201496637501": {"doc_hash": "06c581294271fc0c31b3fbe0e80742d5887d873a5d1edcc883a89919a797f1d1"}, "1093946869664727110": {"doc_hash": "b86af445609e467386170319e00ca83654c75816a1bdd07cc6ccc5abda5668e2"}, "1093951109493698741": {"doc_hash": "2a31a0fb41551b0fba9307fc031e2bb17596e7eacbaf91578eee065ffd0f6465"}, "1093976288538148956": {"doc_hash": "4932317fec0c148e8c9a13237d752f9ac593ee6debc3213a3486eb3d3ce6c63f"}, "1094046570040795227": {"doc_hash": "787721501949873c0489697ccd9b03f09db99d9d4510ebd71a8936bb5ed92a65"}, "1094083038880747540": {"doc_hash": "8ec4188047598f52ad9c3df696adef5b807105aa0a056493fb8944f7cfab560b"}, "1094226388271247370": {"doc_hash": "0288b06190df3e708e6d6b1ba589d333b6f74b7df64480f8a6ed75a2c8d81b51"}, "1094250026458415124": {"doc_hash": "ecdf5380359370911652452c6d14406c93d8603c664700c6e703f85d60e027ab"}, "1094413465550074026": {"doc_hash": "a2a148ac1d8ddb10714402d9af5f6b8b1f58748b2aafd9df0c10b8886defee0a"}, "1094435722498408519": {"doc_hash": "a999b420fef6f47f605949aa730ac841383524b1750747e518508194f3ddada8"}, "1094669214545084467": {"doc_hash": "ad05249bfd0913aedf8de29a06d85dcb08d059bad15139b57905788fbd8ace22"}, "1094672732509176029": {"doc_hash": "7ce7231d58414b5f009c23280a54adf931fb0910358cb978f38b1b864d29c5f9"}, "1094673099942801591": {"doc_hash": "befbc3234ec60200350aadddf213649612d1623eaeebcef4799bcd0a2f509c50"}, "1094687962115080392": {"doc_hash": "29fabe7be6194dcff567267ee367a04c3fe631a5c42327eceac01ced62c4f752"}, "1094692959884157021": {"doc_hash": "73f8f6359c1c9c9182f3bf6fba45e83e0a6cbb0999dc880a21bcba1ed7183fdf"}, "1094696941541130302": {"doc_hash": "17c5df8b297bde569638c4b0c39cb1483f4216268e5c35416e4f57ad31b848a1"}, "1094730579116822548": {"doc_hash": "791ebc93df3923a062517917727db5e473a5c164d064cca5467f91ca6caefdd7"}, "1094748090621239347": {"doc_hash": "832ca6b9b02dd32fe5a92bdda9a566c349bfab26b0903f4218020612355bc002"}, "1094841164626133022": {"doc_hash": "a911ba54ddda0e178fe7168ab20f8cec53946721420e7c3987236b594c2a6165"}, "1094849021211836476": {"doc_hash": "cc91b2a3aacacbc0a5e84e2878a324a784a7e0abd6b34713115bc2ed7c659130"}, "1094849110357586090": {"doc_hash": "490097d4b2c7ed5271e7e6e6d2eea9a5856d67cf954ff2684d3dc452aa535a9f"}, "1094988592159404042": {"doc_hash": "10a836a2b6d730a41196cee29bce41b1f0d258d0fb3f202f6b787f880cf03817"}, "1095024178597474386": {"doc_hash": "52551b758523186e86c68859c95c0befb24d6bfba6b9428f22d0842f4bd8e2ce"}, "1095045798925975613": {"doc_hash": "efc44a6ac308a6d13e3d8efdd1b971e6a1b5d8a5939af4cf01ad3c24dd201a8e"}, "1095062859026792560": {"doc_hash": "f1b30a4af2d3bb76d06fb0182d221e6f4de10291c2f5e4a33f949bf1d4b039a1"}, "1095077541846462716": {"doc_hash": "6f2a50bf5d1e49a6059ab357741f65adc89e5932349c7d2636e1a4675f9571ad"}, "1095094580929630329": {"doc_hash": "f7f812c52c04ed3d8afd585a9a551a44a3e7d5369e86803f4c90834fb6a4d721"}, "1095096365459189880": {"doc_hash": "9b9e02f0ff673baaa67dc817482af6054ffe70f87f5e6b184eb961fd7c2ef9bd"}, "1095146031928328242": {"doc_hash": "19addd286c48e719b38bd45f3cdf6b8ddddccf059ac3626053dbb2753a811fa9"}, "1095162431535317122": {"doc_hash": "9b6527d58190783f3bcb39e214910472558e8e700298ff9236c8dbd88a2398d7"}, "1095185307453894656": {"doc_hash": "b71f9b411267d67cf56c4a3a080aacb223bd56b092d177a209dcd6854a1315c7"}, "1095189395369365584": {"doc_hash": "846662f96e8251022e498264435c618ccb784b86cff5591dd45af464cd0f1d6e"}, "1095196769459118080": {"doc_hash": "f1c56601779019a6d08eb9fbde68097d0e29f3a553bdd4ddaa32500bbbd83841"}, "1095205700164136980": {"doc_hash": "d97c238fea5a3bdcd2c3f126b608689f77edb8a551fc600cf9ed980e93a54c05"}, "1095206051877502986": {"doc_hash": "2d7f12b7ec255a90b68a08042ddcba07d2cc5ff0201646dc8743a055af6c4710"}, "1095211773285650512": {"doc_hash": "f26771d2cafc4b089997ae230288c0a42be7ca05104626c81776b52e4057a996"}, "1095215052803551292": {"doc_hash": "19a70a98aeb36df04e363382b209474d4f7db7391954fbcaf481810261dac33a"}, "1095215342869037177": {"doc_hash": "e3ed2179f426bee631d7f4852101fa7faedddb213bf9b48c7a4c2740b8df750c"}, "1095236866061643796": {"doc_hash": "0f83d3033c5b9e05c6356ade3f67861f87302f3c79a5bec861ecfbaf4be7633d"}, "1095245753225576538": {"doc_hash": "8a4c2c3701bc7962e7ed9854ea2e04d2ab6849c34e05954bcafa2227f71c3e99"}, "1095271119474401344": {"doc_hash": "4fe0344cdc9183d5bf06ce7c332c65a6aaf2a5db82f61c69b4ee94331ca9c3fa"}, "1095312415807246496": {"doc_hash": "1f09770387d0d68dee0fd761fd502340149bd6a517221ddc93234f0daccbde01"}, "1095314039250374757": {"doc_hash": "78db8beef2a1d8d8711ad44f793630e068ad2770c45be2cba37ea0128f26888e"}, "1095323782228475924": {"doc_hash": "b0f70a4ef79da0cde746e95dad12fc883e2d851fe3dc9f4ab0d86463f1ac6bb3"}, "1095374029122179174": {"doc_hash": "f61ebc216f48212f6dc137046f188dda328c89f36e5b9765fd3745e27ca5b1b0"}, "1095388609672126524": {"doc_hash": "9418c34e8fabceecd214b4af88b4588d24de7768cfc846a9a8f5b127baf23f30"}, "1095402192665583656": {"doc_hash": "76381e69634fabbf9e645d6fda9d5bfe3edec1f9a2ade37685590b17f45fd90f"}, "1095427710710464543": {"doc_hash": "8a0cb9c2a40cf29abba2688bd8b45f1d3e4f2533eb4a15af18e582c5865fe8bc"}, "1095434229069918350": {"doc_hash": "e49206f0c67181f48ea0ae9d57376eedba2894e6a602e4006afbf0e86254fda4"}, "1095446982170001498": {"doc_hash": "714079583d0b79683cd1e82c609f0e5699abfe1ee77c7b26cade021964e9fa81"}, "1095453963551260763": {"doc_hash": "bc71d8b5287474f6fe8fb0371e956cde5ff7b6b205daac39c5053bddb0a6c1c6"}, "1095456043204624394": {"doc_hash": "4aa34a4df4b40ae9985ccfc3a0b701c304604c3f1f64bc8c7e0c467286f0c5dc"}, "1095457000663568474": {"doc_hash": "ef4da44b4d55615b2bef051340b9424cde030c26e533e962d325c3a879e14f49"}, "1095468224109367437": {"doc_hash": "c64d6bd74e443b76a094cd39c865f040610b5ca123941f387378f15f8ee3a63e"}, "1095494616867930223": {"doc_hash": "84c4c96f53b7c76a8ba6562bbba903082ab03de3ca9d74f76c4b1022d4b7ca89"}, "1095524477305094184": {"doc_hash": "272537b578f6debcc8ea3ca2d66b9f0be402b7e1021857b7cd974fc7183432e4"}, "1095545141848187042": {"doc_hash": "a5083cc07b73f850eacda4750d50aa1f27fd9930bcff3cab898b19cd6726b7f2"}, "1095752066640642059": {"doc_hash": "2716ace2c97129525acadbc53c13313a17a905344bcd6024821093abc81098a5"}, "1095753837555486811": {"doc_hash": "17c98f7d7f2ae322c173198143b1d3d1ac6c60cfeddb3f57f06600e0e03455dd"}, "1095755357613199510": {"doc_hash": "6f4e3467e22c477f7088c355d1cdd40ca0675421fd883fdaddf82b583d9b6f72"}, "1095757528131977316": {"doc_hash": "0752118d3f191c42cc363d308dc84897887a2bc0858fa3e4661595340a73560e"}, "1095758154568060959": {"doc_hash": "db3f6bc334ee520be38c9d1f3cdf488878fc00bec9f522be1b453076f41fef8d"}, "1095758244787535932": {"doc_hash": "b94ceefb978630b2cbf3b2dd40f04d59651993d98528b16cca90c210cff8d395"}, "1095822900898050171": {"doc_hash": "ab294a3cf7a50da1aac5dbf737509a1c0111a88f5d0ef26d36557a21c5637def"}, "1095843145780056145": {"doc_hash": "0450706a8309bd171ef14cb39b81c448b1c30ca3ad75af5947e9b049429ffda7"}, "1095850293444477008": {"doc_hash": "6e2586f2fd7651c76e1eafaac3b0b8277847ba7baa35d5efb31cbd57cbde59c7"}, "1095877935728169061": {"doc_hash": "fe352c6ac2b72ca3fc00cd84ae007f5a26045246854723eadc746c4abe372580"}, "1095921352390754425": {"doc_hash": "c758fc7e3d5b765d8a5fd23f0773f102b6930f86263c0a7252718f90944f50a4"}, "1095973964783812668": {"doc_hash": "5c47148d022d7835a5b7952071091d60ea65eaa60e87aa712db07871730b3f16"}, "1095975685648023683": {"doc_hash": "07b9c1646730e19a1b130c5074301a1b349bc9efb64063f1d6ee2bd53e872a67"}, "1096013981581328405": {"doc_hash": "d1431869cbf5aa92ad254506e44c7fe55d36587611854af85524dd964328d858"}, "1096084398975230104": {"doc_hash": "66829dfa79087b1c5dc4550a5e4cc51b63d8ac45f3e1ac3da130e2bc51da72b4"}, "1096087849742377042": {"doc_hash": "e22e8973257830f8ec4c67f23dcf4fb47a6aaf9fc63b0c6c2366c90d4c3aed15"}, "1096119257198243972": {"doc_hash": "7134410a7959bcbcfbc8f11efcb30c9ac1bcf05bdd959bf3f34a7a5a976185b4"}, "1096123297202176173": {"doc_hash": "8d6fc980e9f39414e3dc4fd5ebdfe4a03feafd2b9416188feff258ecec526749"}, "1096124373108261005": {"doc_hash": "344dd65aa9095adf038dc5b995ab70b0d5e8c2be79b081889df4772b7729c192"}, "1096156804301455401": {"doc_hash": "3828107b1fb50a5e376b3ab4c13df21b7bf01b1ed1dad6c9e33c7764a613ce73"}, "1096186836059160656": {"doc_hash": "582bc174a7ce771a948877f9206711bf6a47282a1a85d980bdff775140521049"}, "1096201182386606135": {"doc_hash": "8973024252bc683bb64a3121824d8878a4bd47bdd7a956701677d7eca62c1450"}, "1096218175265312878": {"doc_hash": "f2d1e7c4e447078608ff8ad2ffa6e093b1a9d446318e343b651a24e4e01ff716"}, "1096303955664969828": {"doc_hash": "296934f34936f5687503671c0f37a6cc89c24a74429cf4b3bfb4339db5d941bf"}, "1096330936024563752": {"doc_hash": "25550b6f0e1891758afbbee6914743b904b3ff5c2b23843ff314cce8060757d9"}, "1096336176673202198": {"doc_hash": "dcd0b43421e8455e801105fae5c1216380a4c82a44787b7180eb381cadfa2aaf"}, "1096336227814342707": {"doc_hash": "5c623a15402b88d1bbb41839c2a857d200f6ce1e3db42c27b17feb53e0e95be9"}, "1096413431122374726": {"doc_hash": "d245648d6b787c7636a4534c8ea3cda8d2303cfcf4b648966706f6ac5db25fac"}, "1096474926128566332": {"doc_hash": "af2da6f09d935be449fb2e0e8aab0291a090ad1b7290f616ed30bd961767d6ee"}, "1096529895259123852": {"doc_hash": "d60c999a62f6c099d60c7d3d8d8bb5f2ebb1915e57cfd64d7c65fe944de64094"}, "1096553917602611270": {"doc_hash": "8f4a38abaa025f1ebdbc2fa60d4cb62b23ce6b39ebf52b7031bb34f00c250990"}, "1096594952991035453": {"doc_hash": "17cefb65a0c2349f141e694e0842ee4a3b361031732c10a42824c1f55932b972"}, "1096834295299051620": {"doc_hash": "9115bc4d1ada6f391ebf201f1f36f5e16763d5daaadba6f34c1c5d2d5357af69"}, "1096874982572822530": {"doc_hash": "dec9bda303eaeeca5a557cae2976060bb65dcd1464a35619010add4928dc5e88"}, "1096947591872254054": {"doc_hash": "bee014ee9fae04afbb9eb5e61f33760ccd69f437c4e0ea9f0dafee057d814997"}, "1096948907759632465": {"doc_hash": "6cf68ae19a66635c32352f03cf0771e22c7b63cee5943564cd08104bfec7f2c6"}, "1097121014447607858": {"doc_hash": "193634e0d35e5d8ac5461378f3f80869dbe67515cf6ddb5b28ee8b44dfca6c93"}, "1097272296298774538": {"doc_hash": "021447cb67f6ae01317866d79009521542958f9414448f8d6662ad9f4786c358"}, "1097300835244970115": {"doc_hash": "af06d76708675efc956f5eb742c6c489f2e224134d5a119ae5a9e8372853b43c"}, "1097339675217236141": {"doc_hash": "67c43c38eaed9b403cfa8355447d8b07c37b146d4ebc46bf9d495730fa36ef3c"}, "1097355813615571085": {"doc_hash": "516ef7777da4dea189c5aecc083ae603089ab928df045cb9f7f7cad8f50c6903"}, "1097360650923155586": {"doc_hash": "2d25e8d8923aa8c5c6f0b60a0aef0396a22db05474cd380c8c1de72653720d13"}, "1097398731076292638": {"doc_hash": "596f7e7a3bfbfb7ad7c80b7a426460053e1e975d78cfd56f9b1024d99bcd4701"}, "1097401616430276608": {"doc_hash": "17960c5e239a1b058dbc0a422a3142b4852511dc1f470fb06e6f54f23f745720"}, "1097404071704530984": {"doc_hash": "06421da6fda845979995356006b346193a4a222f4dcb3001386a555011fbcdec"}, "1097409746828533870": {"doc_hash": "fe17acb9b1e3be5f57fdec9f543f74981811c93095beb31089edbb8fd17ac5f5"}, "1097414565211414579": {"doc_hash": "dcb414aadd853f642379e95e7d2018cf377206a2126ce4706adebcb456273441"}, "1097429068569387078": {"doc_hash": "bf978fef0ac65d06b5ed1c0bec4410d2713108827d4e57a138e3365e09eedc92"}, "1097466500291510322": {"doc_hash": "3a22e9f33a60d09477a7ee2038c259f5e6630065d03847367319bc2eaa0e2c3e"}, "1097520126120710224": {"doc_hash": "75794a804576311fc5bfc5cce94f3ec7389200b3fabf9cb5617a4e4f351026d7"}, "1097537142068101241": {"doc_hash": "5d8ba80d57c004aa2e91d682104b2264163ace57c931b59fdf38dbbc49f1964f"}, "1097558647455887462": {"doc_hash": "cfd868ad7f799638d1e269823ced1c03f985a6a21491eb55840a6bcbf3d1a20a"}, "1097571668064477424": {"doc_hash": "c601e38af292760df7c155c59c07dc78c04b17c2c47ced283ac294bad335b883"}, "1097593771702624366": {"doc_hash": "fab22e3e056351ba0321c16067b12d1140ed5fdc753ec4d1f1d799027422d25b"}, "1097664723497009304": {"doc_hash": "1bd719b8695939ccc3aee10cc86edbcb175d96014192dda8e9fbceb13999d443"}, "1097686435546529823": {"doc_hash": "4863350f848c7af6928379c701cf3994cd0d1cd805cc365a51e3016eea2c5d3c"}, "1097712034801524756": {"doc_hash": "82809e233ead403401562031d2143a0e48bc94e30899502c651b579bd68909c6"}, "1097722499237695488": {"doc_hash": "a54712f583b00223ac2796ccc75f5280b1f71f61c8b8aac6bcbebc4bde8eeee0"}, "1097763050137858048": {"doc_hash": "34f85ccd372e27ad8f4ab5fe1b97be5cdc21ba9e6ed6aaf5b051156aa38cf89e"}, "1097766621998751766": {"doc_hash": "8e1ecb0d53e80224a6baae9bacfc7610b6a2558fccb23e29e4d34b30f11f2efc"}, "1097770637545721876": {"doc_hash": "7ed47aace1c7125d679ca73f9322a817b0e67ea03af6ebcae8ec2180096b45b3"}, "1097808213832892426": {"doc_hash": "eb7838dbc0e508a5aef91b7c4720882c4216e587d6069204b82b4d136e277217"}, "1097861742127755354": {"doc_hash": "40c064bf04648033ae2a46bd6c4e02d208da90ca6d4805937344b2707c48820f"}, "1097937493518733453": {"doc_hash": "195e99d9c78f328bbc30090967835a8bfbc88341a2fd28865ff7e3241e73bd42"}, "1097971564814794842": {"doc_hash": "3b70ab1cbb152f4b4be9e29749245f101f16286948f5cb444c03594d8b90eca7"}, "1097995032281239652": {"doc_hash": "5092d8629d4fb13567c102fc3de8eebe820cf814d9606af835347664d69e77cd"}, "1097995717672448020": {"doc_hash": "f9ab29caaae2bc41e9289d6555627220ee13b4169885878cc27cebd44f4691b7"}, "1097997796738609222": {"doc_hash": "2e67b2496f87933b2e2aa22c0a5930f9835175705a6dbd77ec88c40a73a8938d"}, "1098019685888434308": {"doc_hash": "42892eeb1d4641ac3dd203959c24fd33aa4b588f3112b13e4c971a385a162b4f"}, "1098025623466811432": {"doc_hash": "a1807a4d31417464618c5be46061f19bcbf2e55eae24e1ddbb892a49f5a0201d"}, "1098048197596819516": {"doc_hash": "4073e69c5a125119e65c77c8763691adbf20349da28db91fb005d725b901b24a"}, "1098162346284826764": {"doc_hash": "13a41664efd8340fc36e67a9cceb3ad4647e1b531ef7e73d6434730558946d36"}, "1098262415298269294": {"doc_hash": "3a4b2e3f8ff8789fbab987487060878ef11c92dc15df293f2fbc3323d441975e"}, "1098281808606531694": {"doc_hash": "ff21481db184fdb6fdf1bc43dbb7c1653fc968faebbd71d570dd58973cde677b"}, "1098283962385838180": {"doc_hash": "df1d9469e63264066e79faf0e539ddafa63bceafaca3d1052d292cbcc9a00c1b"}, "1098287636004737095": {"doc_hash": "c81f0f6ce4bd0b683bd076aef8f7c9e8aaf4c73f5c49328f0c1860da8748a77d"}, "1098454726850383892": {"doc_hash": "d1b7887957ad76aab6baf4db8e30901a17ada25c36ef66034d8fcd02d6c56069"}, "1098636367950532668": {"doc_hash": "9f744135950a41bee208c8e98f7614a4ecf9f0067e787dc77969df7b95d3dcca"}, "1098683327805919253": {"doc_hash": "c202922ce942b7e5e8293f97b1bd01f29146b66dd1f8d67f8f4b36600e00743e"}, "1098685337708023988": {"doc_hash": "6a30f14f39e07bf980b7ab552d3506fa5f3fbb6e6f68583f2fb4451324288c07"}, "1098687182140616745": {"doc_hash": "4dba35d4e3f70b54a6c9ecb09038fad2d866371462991025c3d9c6d3e31adbd4"}, "1098777646537650206": {"doc_hash": "a1eac70cec4eea8b2ed1835ca89548ce65cee014af690a322f7a9afbdbc2da53"}, "1098792683163623475": {"doc_hash": "60aa5def709a52ba2fdd2c8189c68b7ca44e341df89de782dbcc3d6ea22ce3c4"}, "1099040182646362203": {"doc_hash": "c52433eaeb4ab7c5ecdb42ebb02bb39222fc686f54b7ac0e6ba940ca19786d0a"}, "1099042393698865192": {"doc_hash": "809db092cd38cf73416e214c190adc4dd9b2610907903010b4fff22e4af24916"}, "1099124874590556210": {"doc_hash": "177937a49936dfcc230ffee1a4b79bffb9cedd8541dadf1667da505ad957d9be"}, "1099172603706486835": {"doc_hash": "94396b887746d2a5c41508bba4265c024234f9269d61c1950a1a2434567d7a40"}, "1099439531549265960": {"doc_hash": "6998fffb3c68bbf3679f00a3597748afa7ca21567d5f2129d271d8a67a951404"}, "1099449008860184586": {"doc_hash": "1d5dd9ec2b4b259e331aa69bb0894482e60090f4ebf90c728b4d7c4cb393c077"}, "1099450116131258530": {"doc_hash": "fc84ba749550389fe9edf767f2f311e66344d2aa8737fa910473ccc94f7411ac"}, "1099464754067685438": {"doc_hash": "1f872effe8f3a6b596193c29e8fdcf3b9f27dd68d7e01857f5465838e0b6c141"}, "1099469959479955621": {"doc_hash": "8076a5f91b0bf8ee6b54f81074f03c39c9c3bf65e7be51c0f1e6e14abb76a4b4"}, "1099693858146754660": {"doc_hash": "6f791bcfcd7f575212346db4e4eec9c715705e0f3620088d0051059733fd2332"}, "1099791236430319687": {"doc_hash": "89d8e62d8bcd3aa9b5ff8992ea3514aae052c2a9020652dbaae637fa96988623"}, "1099837576917024808": {"doc_hash": "cb1d8d1d97cc7be88ace3f9791c2be8bb450ddbaf0647903009439c250ee8b1f"}, "1099841632121135134": {"doc_hash": "a8e87de5323f0ea1483313e23bf86e93528b2a4afdcff5e725dc8d4ee12beb3e"}, "1099858239228743741": {"doc_hash": "fb7c99ab326f8640562e7c5977d580cf493c6547d6ab873307201fcf3f3192a8"}, "1099906867402133596": {"doc_hash": "ff890b034198a3a94d8af1dbec5e9ab77881d4480d2eddc6eb1629ecdcb8ecbc"}, "1099911293311397950": {"doc_hash": "e4a94065f01dbfafc183f98fef05a878247438e7da7338faa6070edef7a1d3b1"}, "1099912350129197196": {"doc_hash": "dec44c671caead899b41327a5a9f732fe8f9a98300f31fd053604f4ed60bc041"}, "1099930822397661225": {"doc_hash": "a8905f0232b747a3f1688d147afd6feb6d45d06e0e80435ae6e13a6457905e54"}, "1100000721149104178": {"doc_hash": "8946434cd7852e71fe95e06360c5388cfae9a727661f8114793d3f2945daa94c"}, "1100102638135169138": {"doc_hash": "7c48c72954d9f29f8aea1586d4e13950b7e82a2172b88f6ae5c806cad9d7be06"}, "1100110065840697464": {"doc_hash": "82d34abc9fb9e46d53298ab5887171df68b59da05e96616179ca140b963bd741"}, "1100191872749682738": {"doc_hash": "63bde9c51f5a8ebd75fce5380bb2c712491f9e514f6b2e451a6ca1531ea38bdf"}, "1100356152593756172": {"doc_hash": "444bdf72118d43631cb3cd6c5fb571b3e9f3b0e145f0af083315322bfcbbbba6"}, "1100384051954712596": {"doc_hash": "ad4b2b70439027d37d305b91f51a3036547b055b8a051d472cd5a5cd8a64f90b"}, "1100391280166588446": {"doc_hash": "3ca3cb4509a10f3bddcedfc506c4d3590b01505603e55584331c215b52ac01d9"}, "1100432734666633309": {"doc_hash": "7754aea9d410bb3dcbf5ef5ca6aa545cd60487b9bba44f94d83bd7b5d7d4b4cc"}, "1100442307481849898": {"doc_hash": "694e4c3e546634899f66e935f88f4d65b56192935cdb5a6053801d231cddddd5"}, "1100482619596091453": {"doc_hash": "d277bbfe27faa26d2e470b536c62eac253181c7765e252d4bfd28f39126f4586"}, "1100493445614813205": {"doc_hash": "fdda28a16f85dd0bb3da6943ab76fb5b125d319b8c5f4bcd31557c15068f4e35"}, "1100515309741408276": {"doc_hash": "4c81a72d5a45d77597945366c1eadec79bd277c310e267b357ce2c3c690e9f8d"}, "1100551698147196969": {"doc_hash": "40ca887996ffa507879438731f0a136527a23919fb5150d1e308f96de13cb340"}, "1100561196073103461": {"doc_hash": "a3b7d81213dbd37662f738980af7f0c9feebb25ec3084a957b7ff7dca03c746b"}, "1100626944657215541": {"doc_hash": "f9e1ab26355da26cb8b837dcd7ad6dadccebb9e210b98a9aa8631a471aa699db"}, "1100794926486274100": {"doc_hash": "27ba0c50ae2b24411112afcb30d602942804bb4fa89b5724ffa05635cf64d3d7"}, "1100805108998090784": {"doc_hash": "8203e62f601b9c54dd8756a86c5d41684cc42363677cfd138ede182fa4e9e570"}, "1100809386257043565": {"doc_hash": "e5fd2ecc1cf91920250d565c4cce4c4bda4fb70041df0c67d567ef5a36b034b6"}, "1100848445343932497": {"doc_hash": "1cff53179da8e30231ed8a3a6084efb8d7418a196732ef881c27427ae56892ca"}, "1100868170388086845": {"doc_hash": "721062c2179e7f61453ef1348828ae72a1b59f5c85219369d0f2ecaa91fd39ec"}, "1100901226020884490": {"doc_hash": "2e6df8d166abc46f0859d4a063d634506ab19cb14ae58d0d6c4a94a854add7a6"}, "1101012703725764629": {"doc_hash": "f6c22986fc7b8c7f891fa5a635e092ead6922a24d32f403331f00c735f0b36b3"}, "1101139253154549800": {"doc_hash": "ab19ec346ec893efa158e0d675b976863914b56dc4dd07b9689f4bcdc99c1a35"}, "1101168521423101974": {"doc_hash": "349693085d8549f0ed711842b65f5f5c19a7280f36aa40562a4faf62e8bf93b3"}, "1101227048762085458": {"doc_hash": "02abceaac45ea9e51eceba742fe36a7f7b865f396c9ae4e3cc10b41e4fbde616"}, "1101280908666994719": {"doc_hash": "73e8f1e24ea4b01768e659babd0a17d8125ea4150f8707447c6e6893334d4904"}, "1101309453111926815": {"doc_hash": "2932342b8fc2db66cb73796b2c357d73ec2c5c5e6380b7853f144b44aaa2ca1c"}, "1101312613847138354": {"doc_hash": "b11585656b8fb5fb67b2d293987e8f30010392d1622bf0e7786800de6f10d8ec"}, "1101342617389781042": {"doc_hash": "6ad28252259556d08a40ed843550f5717bc62377929a7630a43453170eab39fe"}, "1101361090572582942": {"doc_hash": "2cf503b79c8ee225998c14f0c6b2161391543d99f4a9369a1ec904f2e5512f8f"}, "1101395056453222480": {"doc_hash": "499b718b6496201581412777e067d234519818bda9c17efcd5268fd3d9b4fdd9"}, "1101397910194757692": {"doc_hash": "cead7880134f8ced0acf3dd5b55f5febaef0544ee41d509eae56831290b7ca11"}, "1101575114585292850": {"doc_hash": "fd9bda241488d40e4d291d513fd6765efdc38e4bb8b57741a0c61ac012678a8d"}, "1101623077596569671": {"doc_hash": "054f90560b04a7188606e12e256593d61f8ba81ed878c83fda31fbabee6c6f33"}, "1101660562041098321": {"doc_hash": "7976bfe6da44f47d527d0941a95279659ea181b4a8b3d56275f7d0439f470d1d"}, "1101661401254203442": {"doc_hash": "ff20c3329122c8723ff36f32dbbcba73b49650ffbcadb03fab77ea415e7df0e6"}, "1101818908505280552": {"doc_hash": "7e2adae4568ac9f1bf292c96f7c810ff7e5892a1b8e574f09d84c28ce9418984"}, "1101900251176116335": {"doc_hash": "454827026bcb7d9b915ee70a0d1b9d8f80aea203395776af086c18d0e9384caf"}, "1101919651413381171": {"doc_hash": "b3b01bcbbca001a0b0db18eee825a04839176b3097118e5819a31663834b515d"}, "1101931864802984008": {"doc_hash": "5e521a626caf1ce8b8afb206325664b3277012cb14ec9dbfe3f777166c073972"}, "1102039230949118033": {"doc_hash": "ae33eee39416ddab146d0fdd20ca035f3fb9e5a056902f39c8c6fd2df16606dc"}, "1102146238159261736": {"doc_hash": "fa865b17e9112126c912c78bf30f98914a61f6c659011c3f00e8c1e921886436"}, "1102312662320283808": {"doc_hash": "a1416068a856ebf62929023dd71f46331e178593496813f7bee9254f726295b9"}, "1102329163483979897": {"doc_hash": "fe4a0b1149ee9ca8f2c94fd1b9158f3f0fbbd8a9879b8bc97a11787e21d1cef6"}, "1102382713480171540": {"doc_hash": "5c759bd7587b8071be1c44c93fda151baea4f98e289b3063313c79568edba51c"}, "1102417187962105886": {"doc_hash": "1934332c8a7837a5154a398629b5d09113dcb68ab3ab0589a9736cca86ecb84e"}, "1102544418579431454": {"doc_hash": "9aca9f8fa22ae38bf9bdc2fe850150f62095afc6dd7df0310ded73ece28bfca3"}, "1102572024712405044": {"doc_hash": "942aeb7b912bb62ca0a7a16b33c694dc25a6cd508d97e663c7159539c2292779"}, "1102604058713395330": {"doc_hash": "e0debe473cfbe0db5539e8d7a5aa20f1600ffcfef439a42579c3cd1c1734c462"}, "1102628178595426406": {"doc_hash": "b05d9d371d2fb8be32b093221c277edaf5defe3830842949d3eb1a7d03f794ed"}, "1102689650277105717": {"doc_hash": "7dd2380b0fb9e5b7d443113fc2bba204044e36cd4b18c61886d4c67e65bbd81e"}, "1102704008549908630": {"doc_hash": "24044f7b8c859f66d553dba9e65a83eb98c0dbc8f16eb988144e323bac59a521"}, "1102718648193404928": {"doc_hash": "a98906d701f46454b5b4cb7a82c68c4cbefbeafa5b1f111a22dca71ee27afcd2"}, "1102728788644728902": {"doc_hash": "65ec1c752d34cb948c84b2fef4ba58f91ed0894ddbbbdd61b0e1ce7d3fd24d30"}, "1102805937250639942": {"doc_hash": "7183e4ec6f06d190f308317d8cf6e9a74c12265d987c8f4f03e7aa93f9a3480a"}, "1102932995511439410": {"doc_hash": "c8daa5bdccec5869de04590e3f61a15236d07cf85134507579c9daa7cde95974"}, "1103006069220970557": {"doc_hash": "1787bd3e6ebb949fd1a217651461feb623fb92d9c9b869b6a5b119042cce7f84"}, "1103007057990385674": {"doc_hash": "b73a815a37c00c53697c4e1143f0a27e0967aea26d081856f77c27e077fcc901"}, "1103017834872852560": {"doc_hash": "2f95e08fc55f450a7b2b73622c882c8b5f9c6a3363275d855ed387ed5c630e56"}, "1103032319868141569": {"doc_hash": "c248e42928ee932c90ec39e93bb0818fa23ae081f4791b3307ffc1448475576c"}, "1103044452739723394": {"doc_hash": "1446f964140729ee679caa64b5598cf250da2f41dc2194024095cc78aa9e56a9"}, "1103044961525567499": {"doc_hash": "222a84f779b08318d88174492ef02e773634a5fd9333060e50baccb026bce581"}, "1103047627211284603": {"doc_hash": "48c57d548312501fa53d00d37bb123f2c06ff8175f557cf1b43d3dea8380afe7"}, "1103048955794817084": {"doc_hash": "ca5b57ad3594831e7562e1c683eea7d39ec213c92d6a3a79786855b80207dfff"}, "1103049140604248154": {"doc_hash": "bf1793823e56099ec13d0b1268dc55136e751ee42cec8cf8100750f9689ad860"}, "1103049554015826064": {"doc_hash": "d4d86528a361d681c9bf5f23fe18f32864d361b69ef331255bffb0b938740aeb"}, "1103186776241209384": {"doc_hash": "f0a7a2d0a762b6ac0df87c40f9634c01f0ff9ab5e1d681cea98c253b3f7c59ef"}, "1103414360476483715": {"doc_hash": "1aea91d209e8d9482d371685a132d8f6b9c59e61d96fc74e428241c7387f2c0f"}, "1103446268308619327": {"doc_hash": "8fb9b7eb9720c0aa6ceb360a4d080c568770c22e8fc76180de9a1b400de5e0ea"}, "1103468907907518506": {"doc_hash": "c9ce6d1a624451925dd20c1efaef4091990b01ccac6dbb41fc2998f67e2c360d"}, "1103543391624642642": {"doc_hash": "e6cf18ba613832eac71c5db869fc84b38c1d061e1df18ff741891b48c3fa5415"}, "1103545177894817843": {"doc_hash": "76d015c9b642774a11d1e0de02b4fc8f97a201f9ad61967b04e4caf88c71353e"}, "1103546493136293918": {"doc_hash": "14a0c9c1d558dbe19ec1d304539c08e512ba1c3afd2f1723be8a4b8f3c45145a"}, "1103574131431182356": {"doc_hash": "d5e65bc325543e1cdf21e19909c85dbc98c5a0021fa85788decdd8da4e875e4c"}, "1103581201744269343": {"doc_hash": "e5a64a84c64fe1dcf35147ef5cbc852f914250f4212f752d77ae1c0d1fa0c21e"}, "1103629766877265960": {"doc_hash": "762c46dcd42b42e4e8839785daaa452243505219c076d4176c0cb901a1f32d40"}, "1103718849293066270": {"doc_hash": "da31cf7b64b21e157617e2830089b57eb51f4a1aebacde5f590d0f204ffd7110"}, "1103733529097015368": {"doc_hash": "ab94ff418ae43caa550f772fd334b22f9994ea7eeeefb120c95d2deb46da895b"}, "1103744338107830272": {"doc_hash": "ee78f3e1b147515547fe152b03cdc6666b74a96e8ee082c2856ffc9582392ec4"}, "1103756548527886396": {"doc_hash": "e90c50b6bfa6b00b333d7b4b81247e713293c194b3c9ca0e342759aab601dae9"}, "1103844161318289519": {"doc_hash": "68f272476f4d9d58ce79e1ccc9d66182b558f179d5840e44c34be3c913f2e0a2"}, "1103992481214906430": {"doc_hash": "25dd5c99fd62e0639c12bbe10e5c488e735ec849078ba94d1ad497ee2c3da8f5"}, "1104046741159944283": {"doc_hash": "86cc5eaae01eeb52a59ada1a5e6cb2e53ba63bb241c2156af5aa5fbce47ce3b7"}, "1104062955437424700": {"doc_hash": "b71560d011590174454b791999cfc28fd9dab10ca31d7c867ac6fcd3a23d8414"}, "1104104853162172501": {"doc_hash": "adf188018d8265615e41c6f79dc4a636eaeedb6bd43927400996ba78665b46c1"}, "1104122853445611610": {"doc_hash": "87bc04676e176d7d8854c36f16c4fc00aec909f36238775a74adaaf9c3125b6f"}, "1104160656523014307": {"doc_hash": "d7aa7078bae930c66e72a7f858252d9cf7add905255cf49f0a420dc31fe91686"}, "1104177215060578365": {"doc_hash": "eb75ec88baae472e73b2f32b0a44c7c529ecb50781589de1777a372cd9d5e5a1"}, "1104204259857268869": {"doc_hash": "691799deae4a16ef8f23a3b829d174bb4cc5e173d36a3e162259c3cfe1b07711"}, "1104240772691267696": {"doc_hash": "53d3ce38c56f6221cca53454c821d92febc165030ca3ffb779405ebc0ba061aa"}, "1104262809010847756": {"doc_hash": "622b86095f8e6d4b9c7c88634c55ec6c66ac69046df6a1df287704b89d80457c"}, "1104434396758548641": {"doc_hash": "6ec00c190d548c827c803934c85f38a2e5c04241c1e7eb66611452064a3b76e4"}, "1104447930150158528": {"doc_hash": "e334e6965a64dd23000b0b14bc1a1cdfa8c5b6279248187027a966cbd4615115"}, "1104479195767255133": {"doc_hash": "ffd1e7ea139d4685301d38690945d3069bf52affdb7b83f93620a6bf70186072"}, "1104515787349311519": {"doc_hash": "f5f514cf14f84db92014ec8b44b9edf53928c3194a7b88ecc007d652345875ad"}, "1104677893314990080": {"doc_hash": "ba8f604c378012b3b4e89aa60ab369add47df44d797290dcd3bb6799933ca5aa"}, "1104813615145558106": {"doc_hash": "8f102de5854130d555f1a7d7e80b8036ed5e6238a0e65efc3c3c8197ddafa7c8"}, "1104855848850833409": {"doc_hash": "a85dd2dbfafb68cf6565e6bd86a191b8711f881f5d0292427b1da26b43dd0e89"}, "1104865196859740281": {"doc_hash": "3b555a02fca09d5a835d828c86c64dbf4d8ed4d0fff6d3a782574be562c356f6"}, "1104897544879878264": {"doc_hash": "94673456f2081fb17a2aa68d072d4349fd6808667ec218a36f4b67b51501adc9"}, "1105060369996709901": {"doc_hash": "bd29f370a9c99fd19d0b9f9c11d9dfecb91c0cb5b058aaaeacb968ceef5e16c0"}, "1105119873954238556": {"doc_hash": "f1ac45571ddab915d703c8460a0d3faa051357e02f300d4924e1ab81f9683ca6"}, "1105172237146927265": {"doc_hash": "fe0e6b7ae83794632cf6cf2ffb5efb1faeb679dd05fd916cb4313e620aeb866a"}, "1105207644710502410": {"doc_hash": "92231ffadc772820deb1235fd52b4882e581affc0224495848acffbb2305a3ea"}, "1105211724484849775": {"doc_hash": "2e39b110c7c631310f488758e9c0e5ae4e8e2db1bc08a1e7f79b5741d3f45e67"}, "1105214020606234807": {"doc_hash": "dc9a39a7cd24e39ac0704ec477fb36f0818e59cf2a3cbda36d9b74bfd96c390e"}, "1105239113784885289": {"doc_hash": "e79e9c3b1802c1f1fa27a6048f69cb6885b2ebfb82c74a49f1cd42a985b36594"}, "1105260402817908797": {"doc_hash": "36b870a7be0dff3efd17dff0c14083f5e4038935502499431f933680dfd20a20"}, "1105269976035770408": {"doc_hash": "1cd43e59f85dfb869e3f90de1083edf3d5f296607f61236a02d1e7bebeda3ebd"}, "1105399849744089218": {"doc_hash": "b733bae97617dde76cae73a6ffd5944682ec077e208088d7f09d72d0794cd28a"}, "1105432435803557960": {"doc_hash": "5ff7c4c22d05d9f9c91d628b130b3a2aa88d41b7eae0c5b607a16d60728f17c7"}, "1105454849438523392": {"doc_hash": "62e61551f1eb25c13bf56006f4c3f7ad9ec160ec5ecf55a47e1c2f4ac8c3f7f5"}, "1105503261622022175": {"doc_hash": "9432781ea0f31bd01cc124a7fba8e841e0f0a2502a61976e24e313bdb8ef599f"}, "1105504506302701588": {"doc_hash": "29fe513ab707cec849a96a387842cb215a2a28eb045ba2ab7f7ce63754a65bfb"}, "1105535739426512896": {"doc_hash": "9e2828f64e01bddcaee71a96190b50c9ff1fbe765c70a3c62b33035aec6178b8"}, "1105615538757050471": {"doc_hash": "ebb91615f51c2e2ce2d2ce78ecd2501e3cca8e9174ee1641ec376b5e5f83a38b"}, "1105617458552918126": {"doc_hash": "8b6cf68b22bb8b2a607d8b5ba7e2654134324b7ca67f30f07d364392c1045fc8"}, "1105631426562506812": {"doc_hash": "0a1a33c68727913d9667a1bc68803fa0818b650b579b10741a60cdf43dcbb7ca"}, "1105699199011532831": {"doc_hash": "7963068a14edd037a4c02e1ff47c6f5d7520d18a1017f080b6c26591667c7e53"}, "1105743922581491765": {"doc_hash": "4d6c44f22f9659a48d77ce8711fb37bd4f2ddfc9bb738200ec140588533b244a"}, "1105799756099375135": {"doc_hash": "c4d45936e0ab96a633436e82f757b38ec33773fa17703fe99443805ff2f672aa"}, "1105819056319250553": {"doc_hash": "b7d72fe5a7fc4bc34a7ee8d3f6a852e2f4703b3da195b95087be4a098121a489"}, "1106134832607678495": {"doc_hash": "4a51722e526201e2333f69cc0280001f82d1ff7a45ef56cce1bc2aebb3483088"}, "1106143532441423914": {"doc_hash": "7a4c55009852aba1ea8e759abc9c66bf0c725ae6552dee5407305dfce7c3ea8c"}, "1106218550865166356": {"doc_hash": "e629465be8cc7e982b6cb5467b392f38f3f98d056874acda4cd6f2d0e267717b"}, "1106219909056311316": {"doc_hash": "76145815cca5e073b53fae4d376411d851ae39c7586ca890242f5021be6b590d"}, "1106222132146470962": {"doc_hash": "bac0969da77e474f5e6ba8f22def9f0488444c3fbbf8634bb112e1daef00d64c"}, "1106274074444976259": {"doc_hash": "5a33d40b9e7d1ac8790ed30ecf68450736eed0820cf44acc282d95a7bb81c264"}, "1106304910036828170": {"doc_hash": "7621c52f9efe8da786997c2e41ce5a881ec5a079d98a5a3aa72e294bf3877250"}, "1106308977639301210": {"doc_hash": "0e8b21eb6ec7cb5b875ff2de558b77ca2cffcc3751a0de3a8d6bdfebf9bd0aea"}, "1106310557864312892": {"doc_hash": "0e601635e8217644a033efc415c7e6220287f44b1f1ded0315870bdfa20264fa"}, "1106371820057284740": {"doc_hash": "f76f0fc2194df3e02f3ff868d88bdc9347f5314f449b234e41f23b4d7f91cb00"}, "1106588940275830886": {"doc_hash": "9862662e20a4945b6dfe070315994d29aa0fb5dfe5f3cd1dee369684169fe23b"}, "1106878899700375564": {"doc_hash": "22b92536000b98e8b74c57e1574b2d1df11ee465a7e5b28240acfc8d6ddf258a"}, "1107061954398396416": {"doc_hash": "687b9f0271db363873e359afa141c88452a73922e3d20f0c7924d245b3963f21"}, "1107078350117285909": {"doc_hash": "a13abe2191c60ff1e8724c1a9ffd6aa4459a62ef62d8f4f0e0a738e561639f52"}, "1107258665892859954": {"doc_hash": "5acda4f3e3b6271f89a3ffc2710bdc37c4bd2ba129b09a4ae2b1503404a2f8ae"}, "1107259163286970448": {"doc_hash": "66c3759a9708bf1fbbfad70e82dddeba0f95b2a72574f213b700ee7a3b4faaf2"}, "1107319393815363636": {"doc_hash": "9651812c301e2f835f931a88cb30d91f9baef9b51171e5e9ac05786d1915e699"}, "1107526682677620737": {"doc_hash": "5e174e1eb304a65a8d682c507e4d758027a608e2b312adfadd06c7c1145e3761"}, "1107705333440323584": {"doc_hash": "25ca757897079f27fa826de93e618cd9f3b864d7071f1c67991873f12fa894c3"}, "1107737907747360768": {"doc_hash": "e9d5ce6e8906ea868777cb51c17413ed9ef67f60797ba44aec886bf533dec169"}, "1107937933438242826": {"doc_hash": "64ca82e594faf1da30edf91357cbb81431ea20d1e0fcd467c23c9f868c7036cb"}, "1107970968531517500": {"doc_hash": "7c0e00ac10eb84b3db63eb79fca8ccd94c7b933dd3fe21678d5098f945082cf8"}, "1108031200972521503": {"doc_hash": "81596cd4bae2a2aad4d62a0e1d5cc5ca0c4d273af88fd03d21de696a271fae1b"}, "1108056811107536906": {"doc_hash": "810a4d5502874b00059bf1955156776713d0b9fd469e954952712059bbcd6240"}, "1108064258681470996": {"doc_hash": "a8b1b4e219d410cbc045ac99e8091ae46b1e995ef16e7e3afa5abdfd08e8c147"}, "1108099650914897951": {"doc_hash": "f1a3809c05d336a6f86c1f7d9f27fa5bb07353e9788caf3e8d46e4d2687c96ff"}, "1108134824541167747": {"doc_hash": "d1021a29d36544914abac5c4dbd8049e03bec148854a07e762ba31d67bb5918d"}, "1108406076958842920": {"doc_hash": "245163cb4b78f98ba94c4c2fe52bc032d96aeb3cdffb9815d8095b3dff88af84"}, "1108453845991956511": {"doc_hash": "ef410c843ab2e5d7a31f657e006fd013e8b4fa5857107d066ccac26542a11447"}, "1108458278180098069": {"doc_hash": "9c6e6c9d55a10383575a8a52ad40e7dd833337c171af4f9156970f602f077aa3"}, "1108459998088016006": {"doc_hash": "522eabd2f6b672bd0bb267ce72b033082a45a604ca5f52fe93a48e04a9973f4d"}, "1108667975222964334": {"doc_hash": "1aac18b25a309787a54bbeca88527ad21969bda9496a68bf4671bef07974adf5"}, "1108687992115179520": {"doc_hash": "35625bbdf4841089ec983bfe161c7e0be9a46e98ced13fec2164d196a2febfc6"}, "1108708745447485543": {"doc_hash": "569d4202fc64e39d3ea7348771af95dc7d731ed83618c8e2a13d20cabfbee321"}, "1108751412353060884": {"doc_hash": "1f6d7e2c20dc78612187bcea30cb363f7636715e3d8cd3dc87a094a8f77693a5"}, "1108842180161843323": {"doc_hash": "8dea5f9267a17ec055ce6cc8c37761225a9af0ed0c95dd1b4430f819f858118f"}, "1108846524382838794": {"doc_hash": "55d9369a6e429b6520bfad8565fd11e62991e8f4939dd8a128239e96ad37e55d"}, "1108854091934859344": {"doc_hash": "bc40df8ee1618528a888bb818c634181e8e30eee416a20e1110717db86ed1993"}, "1108921924513452084": {"doc_hash": "570a3df54a3f105c08bb39f54c4d5af0ea4199f4892ecb7fc8c17d004d21c7b0"}, "1109068463110107157": {"doc_hash": "23a22a92d80ca91b204ebc7f3b282d64404615a2d21d36aef1a2ac1232d48897"}, "1109163985422520340": {"doc_hash": "10ce999eac9da6fcfe9fced6025680f06f63dbb58920744c9853349d1fb436d3"}, "1109244585709940766": {"doc_hash": "b459426160ae8950f037a13c2a92493b7a4e203c672229a9f881fa8ced54d61a"}, "1109247502475087923": {"doc_hash": "6849c14f61dcc43759499ee4a541a629cce50bc714f981b1bd13a85f80edb6cc"}, "1109356747803607082": {"doc_hash": "027be6c8f130e3b4628c86b9588c355a1c57285062f38cdafc6756f67462156e"}, "1109412573138395198": {"doc_hash": "396eac1c104c655c3b71cd5b84f16b0f6934c36a01c209ebc93e3435e3f97412"}, "1109511262850777088": {"doc_hash": "b58ef2396f6327594f59702dabb7a6c03aaf24ee9eef3f614588ac793e09de9a"}, "1109579516885618748": {"doc_hash": "6a6987c2fb091f2c7764926a5d2d85f1a623aaab27be8b73d1e50905e5572840"}, "1109620793740107906": {"doc_hash": "7e09eedb0c2d8a1a63c7cb34e94f494a499a0ee0906461c1b94f980031f4f3a9"}, "1109622772272988230": {"doc_hash": "0d42497c72d0a30c8c3f650b3e827a1763b2a230a1b763d05f7f182dbae65ecc"}, "1109654025567207444": {"doc_hash": "2d04180d60c46289a0b131866ceaed5321a82dbcbebd516c6dee1d10290369b2"}, "1110001427046215690": {"doc_hash": "0e10c7a24850e74db8c5fd339ab789042516ff2fa44851e32538e277dd8b081d"}, "1110061080799105054": {"doc_hash": "0f1a37c05b39e71c6812dd1cc77b86e4cea706cd7e873e69d1a8c89f910b81ee"}, "1110071662612852737": {"doc_hash": "c42f00018135bd92f78f5b067038a14cdac11d83dc43562d8507887a7552776d"}, "1110089211442376725": {"doc_hash": "ed4537582cfda2f1c2dde37fffc4e1558939b3fa5281e8ff0c356939a190bb98"}, "1110127178487701584": {"doc_hash": "6328d5c123e8e1810501afe6163015a0e1da8004ac31e39633f58b6069ccad0a"}, "1110134841544036382": {"doc_hash": "50c95343e0c0113bd8c6c8b3e7a5d73f49c7b53c6cce1875823c93acf6e70add"}, "1110220796988760268": {"doc_hash": "beb6cc7deb6a0c6d6248a8a35cfd659cb571905f937a17ae76c05c6070d79899"}, "1110384608291328070": {"doc_hash": "4e854a896c9d474f0b1c90b734283a9ab97387f70a7365e9a8792b33c24fcf92"}, "1110643153624637440": {"doc_hash": "0f2f1aaa2a1e1826dc5c9b757c7d70029389391288c399faa966df3a44192a83"}, "1110759850255859712": {"doc_hash": "c59aa7611406ab1a853b095499e20888e8f688d728b4fb5245116b774fa37e5c"}, "1110814097609609246": {"doc_hash": "a4476cf28bc3821d508a0f43b8c946ba7971b38c216e1ae39af4abf98eee0a41"}, "1110938122902048809": {"doc_hash": "c995c43873440a9d0263de70fff664269ec70d751c6e8245b290882ec5b656a1"}, "1111012973700460665": {"doc_hash": "3e41b8a8e00d38ae42fd9975ef47ceac84aeb4faa8b0c556fa95ac253e009bc2"}, "1111132743661781042": {"doc_hash": "487da82eba031943e5a7f843f6e6d7f5c9df3d736d4abe3fe186efd7c513ae47"}, "1111307131887562823": {"doc_hash": "7f3cb6a354b43444f1e3232b9ca75bc7c28ff093cf204cf46072664e8baa0ee7"}, "1111332768186646618": {"doc_hash": "4aa3ca83c44e7fb1e65d79e7761240e0dc5f1e37758ed20ff2872138769e600c"}, "1111353270242398369": {"doc_hash": "af174495c944dc784d1bb5eb8add2190f0e5c45189b9f6dd49a5ffb6f4796a25"}, "1111354305530843358": {"doc_hash": "d00e6a0fcfb09cf5e81c508d3fdb1c8148560a0339eac74f671f511043169482"}, "1111374680276877413": {"doc_hash": "45573694faf0b7badbab17cc7c3015bffc7d446bd366d1df8048fa420be98daf"}, "ad0b9bf8-040e-405f-8e9e-e48d1101a9c4": {"doc_hash": "28c8ff8ff501da9456d894b54e82162a5bffb64bfe63b219f6bd80b118fc879a", "ref_doc_id": "1059314106907242566"}, "7a377e25-32f6-45a1-a401-868172fbffe1": {"doc_hash": "da7149c5a6e1af48e107c569a1d93b07a017ba44b8447913b48e26993ebc89e7", "ref_doc_id": "1059531287758655538"}, "7a3e470f-9795-44ad-8e61-407cdd8c7262": {"doc_hash": "6d0565231488aea6a914fbaf75087b66cc703bce76254c729ee8881818686d8e", "ref_doc_id": "1059640614783828048"}, "6918dc88-6221-4b9f-8a49-2b477c0c6d99": {"doc_hash": "5737e6eea77e49689b598635228889ba7df550767a53f3346dfc897d99aef614", "ref_doc_id": "1059642227766341653"}, "496561d5-a2df-48b3-9d76-2407e27ce23b": {"doc_hash": "124f28a4ec898caec61d34ead91b66e000357582118b5ec7863047f50c0541e8", "ref_doc_id": "1059737181234671676"}, "160f54b4-9ba5-4696-a81a-2533560e241e": {"doc_hash": "8f1c3920a88025dbe2bb13822af80f3f49256492ce24388e946b3002e0025092", "ref_doc_id": "1061574088079978586"}, "c941520e-8c1c-4b72-9bb1-9b7b68e0c6da": {"doc_hash": "28396ee0ba896a7db834d8bb9b463a7caa2b59098707ab37472e970a9584a40b", "ref_doc_id": "1061715932248035448"}, "217abd49-cf1b-4a09-9885-cb526e4c6cd7": {"doc_hash": "5a6b15b396b45f1989d58f7c23472cd68222e986e17bdc058edc9207f3e8982a", "ref_doc_id": "1062802959508963439"}, "a16ee3ec-1789-4712-b5b0-9c666b602c2c": {"doc_hash": "7b8edd2ce67411afa719ca792c535478868e72ca3c8646be5208331d2be3eb14", "ref_doc_id": "1063163546000707725"}, "83475daa-cff8-4ed1-afc9-c8d441a54a6f": {"doc_hash": "db6a8e9ed6339c1cd5652452657025f76f820b27711181e4c3568d6af859ab32", "ref_doc_id": "1063476199780782100"}, "157f0efa-205c-4fc3-82cc-71b17861e11f": {"doc_hash": "5150742d7f785424e61101902ef611a6f7d53a327072f17059f9ed05de6c9415", "ref_doc_id": "1063883812045594724"}, "238bf44f-0e5a-4fa6-8935-8e72dd5c85b8": {"doc_hash": "feb1dca479f32f03eae9b05e5158cfbcf4b536d3e2cf6bbd82ed0442130060de", "ref_doc_id": "1063884238610518126"}, "062238e7-a3af-42ff-9fbb-cf0a1b2573be": {"doc_hash": "06e84319dfe7fac5f2293f0b48fee0792d7eb2c947f84a157d5b59510f04f378", "ref_doc_id": "1063884751557120030"}, "d5679e5a-906c-4ef9-a134-9ff506e3b10d": {"doc_hash": "5f19f9a90bd7ea79f663bac44387eab5bfff021b2dbbe615b92818a927175441", "ref_doc_id": "1063913848790319136"}, "b88a38b0-d2c8-4013-aec5-af865ef21ad6": {"doc_hash": "2b4822b8e1a8efc85547cb10be6df9150ec4e13aa925ed55fe235f59c8add594", "ref_doc_id": "1063949675696234586"}, "3cb54e1b-f392-4321-a451-6a58cad4a56a": {"doc_hash": "e1d014d8b9cecbc0838f08406d51e0375a36135156bfc51f5d3e2263cdbe945d", "ref_doc_id": "1063961595878838385"}, "4cfb4e15-7a37-4f27-a86c-ad8279d60d8c": {"doc_hash": "ed078d3de5a75d9e64891ceb04233993f8a9a90aa59134ae3ccd1d9c47059249", "ref_doc_id": "1064018367301812346"}, "17d05f81-853b-44ea-9601-2f592261658f": {"doc_hash": "b80c49b1549f7fab0a5f32a699d5aa88e2aef8650786aa344159dc2d742e14c8", "ref_doc_id": "1064111734522134538"}, "dece5fe8-7a05-4f23-8a69-7a0ba598fe51": {"doc_hash": "4c818d105ba373d30d856e76700c07fe5987326f59a7e4d3eb5736f9aff32821", "ref_doc_id": "1065428004760731718"}, "b7683098-3856-47d7-b513-bece11f9b5f7": {"doc_hash": "a8f3d5dc4d1384923e202ee5f0122b1a6344a24ec6a03fbd9f3538d372786ccf", "ref_doc_id": "1065471408311898153"}, "24c61c9e-78ad-43f3-a7e5-174a189d10df": {"doc_hash": "28e01dcd07d67577dc34bbd1a80fb7439d23f9461f62ec647679e25e65abc382", "ref_doc_id": "1065578358315954246"}, "c17514d9-0028-422d-963f-4e4a2d85f41a": {"doc_hash": "22c776406719e246af1c744192639282f91a77b96fb4fa3cbfb45e70f9f9a999", "ref_doc_id": "1065683307699904584"}, "a3e59177-c6a6-4ade-a61f-92ae6ac302e5": {"doc_hash": "82ea5d941dfd4a3ba588da8c74ced758aea9eb64a7240ccdb8554d8cc9a9a624", "ref_doc_id": "1065697489073741915"}, "ac8d1944-cbac-41f0-a396-edbcaf90207f": {"doc_hash": "e69ad621abf1ea4a730a3a1d87adbc6cecf5fb25fbe9df7989a8c2a31abfa472", "ref_doc_id": "1065804322908164246"}, "50e8ecf6-e448-4a08-8d78-2e487b05d6c6": {"doc_hash": "8eb8ecd786f4415a55242c60dacf2b058ed9621baf91ab06615d5cc694f89bb3", "ref_doc_id": "1065808880518566010"}, "968ad9f8-cd8b-4259-978d-791c38405a71": {"doc_hash": "8c5c5203b3d92faa593b65b38bfff6e375365fcd79c64701200aa6d1965f6b7a", "ref_doc_id": "1065975878812696666"}, "a811aac3-e999-42f0-845d-2edb1bcbc896": {"doc_hash": "8db64a6d8941eee0c4b414be7d7fa5329c55d15b711c0956b042f8ec2f9a3e31", "ref_doc_id": "1065977153327468575"}, "009495fc-69c7-450d-81b4-590d16364bd0": {"doc_hash": "1062874f31c8721b72e667cd3500d166689318875c10a0ff8428bfe180f51caa", "ref_doc_id": "1065979599374262333"}, "72243f22-454e-43e3-9e4a-ef306ce1d393": {"doc_hash": "a3eb95575fd004def05f46f7081ed52d10d5d7354371f44001f20b863e0a2606", "ref_doc_id": "1066044818574290964"}, "a3512bf0-7512-4a08-9616-62ef24f694ce": {"doc_hash": "790345f822900d5d5286d4a9efc112d52d12eab33db98a79ecf7f615693c7cc8", "ref_doc_id": "1066484476164722748"}, "d41a8d3d-9bf9-41f9-9dce-251a26eb7fe8": {"doc_hash": "cc3e2fe42a7a0efe11c68300bea95f87d90039d03a0be35aec111ca2c0c83679", "ref_doc_id": "1066522245079511140"}, "73b86eeb-76da-4fc8-b505-8c94865ec2de": {"doc_hash": "7aaaf1081c2ceeac8e33fc501502182c4a4d2a420c5dc1705217c90a9c922415", "ref_doc_id": "1066664500239015957"}, "9dbde246-7013-46fb-a069-b064f073f207": {"doc_hash": "1e6ef1e9eaa341efb707eb4c4b4086a2f1e402acb773ab6e6c36e736ec1cbc8c", "ref_doc_id": "1066815268870959125"}, "0105984b-2253-4d37-959c-75ab703fef40": {"doc_hash": "1fc91075900404670fe48e68cb0ca119f0ecd028d3daee5befff7825d49f2044", "ref_doc_id": "1066866355548209172"}, "6a8f2ef7-6403-498e-96f2-0545082ca27a": {"doc_hash": "7d1b7848e53ef631b92eae3ebbbf016a70beef2ff435a1866033a61aa7087da4", "ref_doc_id": "1067001008334589952"}, "eb91d854-87cc-4f71-9349-52d99fc0d564": {"doc_hash": "c5a0d3afb3dd88a56a707aeec5868281a4fd586fe307ae5864cf626d9c567903", "ref_doc_id": "1067140353838293033"}, "0f5cdc26-2dda-4b10-9413-d410db317a70": {"doc_hash": "39885bf07b86c72d4ba7d1e7c460931063cbbaadd69452d5fd28823e711141d3", "ref_doc_id": "1067378921894580264"}, "bd473c26-55c1-4f80-930e-de289796cbd3": {"doc_hash": "04f2494dd58c079e356d6a4e55cf1a90733d611092d60ff277cac48fe51abaa0", "ref_doc_id": "1067393805323612160"}, "ece20304-b1b5-4c0e-9618-d4291b37cd5c": {"doc_hash": "d7881c8859e57e5a8ed323888a9770fbd7f2aa5b2e86bea057e876018d801fff", "ref_doc_id": "1067398661253910589"}, "498842ae-3343-4757-8a49-b03a043f9309": {"doc_hash": "4deaeae1f4428301e79635c66111f93664823037826d821f361e61f464b33b69", "ref_doc_id": "1067399604112478249"}, "b11ee36a-8da3-4396-bf1e-c8f052eeb6dd": {"doc_hash": "bf7e8736179bb0181cb379db330584a48e8e957b5aebd9e3331a135b31ef7a2b", "ref_doc_id": "1067679198614917182"}, "7b037985-5d20-43d7-803c-043b821896cd": {"doc_hash": "8b934027b73c67550b5ab0ef961afe9f669f5927d5eb5b91a2214ceb8f0b42ba", "ref_doc_id": "1067679518816477194"}, "bf603371-2045-4bc1-a7d0-6e81b5d29661": {"doc_hash": "73ddf02b5ad5aa5197e12384af6bd52055b8494cfce5d210283bdfbb4032ccf2", "ref_doc_id": "1067859234173235240"}, "e4f81299-72f5-4430-a00c-6e359eb9192b": {"doc_hash": "4ef76d473bddf2c0c78660a5d4152c33ca35a66a653d53eafd3e8b71fa7b417c", "ref_doc_id": "1068244680422199326"}, "c022a5fb-2d96-4973-ae7e-d112cac9ea28": {"doc_hash": "cc2fd5535e42b6c5c09074987deb1adc6e159991f4e444e7c7a21975413377ae", "ref_doc_id": "1068380296682147900"}, "86ddc833-1ce5-4698-8011-db59189a45c5": {"doc_hash": "7d1f98e8972b7b8b1ab4acf28e5256e40eefb1f16f4604e5d84694e2f0737441", "ref_doc_id": "1068423249828007946"}, "ca11e80b-9370-47a6-a591-8f64f9f84eed": {"doc_hash": "b60b31d3e0604004c4f2d6045a3b7886687ffb72d25cc16ed6f9f544218dfdac", "ref_doc_id": "1068451912644558848"}, "f6e53d45-20a3-4896-b17a-5ba2fb8c17e5": {"doc_hash": "60d86cc8a4c7c0c13079c55c0f3274765ec4226ae01d497f2cf3291b9345b01c", "ref_doc_id": "1068570619001712730"}, "ec8bb5eb-aca6-45ac-bc5a-59b4457e76c7": {"doc_hash": "3bbd1cf4bcd6519d805481dae8a5b51b5cddd10bb5f8006ab4e35e41330c339e", "ref_doc_id": "1068580389381210223"}, "6fdbe84e-5e82-4203-8b21-e63d601dff84": {"doc_hash": "6773f8a54e70f25c093de93f8aba53b94533368813caa99e009206750fec8945", "ref_doc_id": "1068776132272472085"}, "5c1102b5-eca7-40c6-8bbb-9316b88a9161": {"doc_hash": "e4e375109a042f3b68ef5a1c5faa4d5b1a6ff6f12a1e1384562057712f5315d6", "ref_doc_id": "1068964291807555685"}, "eb40048a-10f8-4883-9e14-eee3ab213293": {"doc_hash": "ace3747ce23cbfb770be0e2e7c811747fc11c05c0cd7c7f2b85bc1ae034402be", "ref_doc_id": "1068982361770950716"}, "52a664a2-58f1-4bbd-9fd4-1eb9f86c03ad": {"doc_hash": "5ad639ce19aa6195a2333181e48e95496b4d3bc74650800b5365590c94d3ab37", "ref_doc_id": "1069017983382458438"}, "3f31412c-f6fb-42a1-b929-7e16848f5215": {"doc_hash": "cf47158adef16076d44ba6396b678d1b3dd88e9e175ce90a5630a0bd3bb3e65b", "ref_doc_id": "1069019881359544420"}, "fa88e2ac-99fd-4447-895a-b02d9b7bf9db": {"doc_hash": "c9a8878fe1e0dfe45116b249cf9294ffa7deb5c3122bd4bed60b85de95aa027e", "ref_doc_id": "1069020747076468876"}, "dc66c10a-cd01-4dcd-9511-acddb9cef9f9": {"doc_hash": "11baa7580bcdd5fdb30e037fa224ba599162d1183d51c2198b2b557ac409606e", "ref_doc_id": "1069373288834412626"}, "c4b2ec13-3c97-49df-9d12-4ab56eb0a895": {"doc_hash": "bec154460cf499e453e2d1f4ef5aaed4737dedcdd55aff9ac4aac513867dc1e6", "ref_doc_id": "1069405879666999346"}, "e0d32942-7e7e-4645-ac7b-0f2a9a92d9e8": {"doc_hash": "91b979abe505f22f62a7a468aecddb24449ad945c5ae8f9afa98202d4fbfd57b", "ref_doc_id": "1069456064099143761"}, "7e71761b-fcab-4af5-b112-f08e2678c97e": {"doc_hash": "3d0738f658bb2c90d19b960c29b5d72717f589225d7ef78afbfaabda65367323", "ref_doc_id": "1069790899309138081"}, "95e34ba8-b987-4318-9c76-0a17e8914176": {"doc_hash": "5c061cd45e48860603282af71679884ef94d56c5247e7e2e6c239a6d664825da", "ref_doc_id": "1070359401598287943"}, "3cf33557-7e90-42c4-9a20-ee2666c9034f": {"doc_hash": "16a07896e8f1aee7ae923ac50c94bb3fc5080bc7d79e79b9d38cb70104c03d95", "ref_doc_id": "1070857656799076352"}, "ccdc59fc-7584-4124-a861-bf44e41f7218": {"doc_hash": "2672a87c6e3a3f1f991f46dab8a9bc21551438bd5e10390b91636f860e4a7c67", "ref_doc_id": "1071106783181029406"}, "922d27df-a3b9-4e24-9ab2-93de644ac1e8": {"doc_hash": "796ee0be1d124841d0d767f246974ca9be76e149187cd73cca243dd612354ed8", "ref_doc_id": "1071153785243697234"}, "b12f9c34-fff6-4557-91b1-6ae669516e13": {"doc_hash": "703129d304530ff54a974ca1e5058243302c2c32a4cf52d67659c3f8df47915d", "ref_doc_id": "1071228197074632745"}, "9d24c8dd-f116-4660-96d2-5fa5c04862d7": {"doc_hash": "b91355e354fede13c4b5053b7c9aa0e901335369ea5b7d1cc0b59a73a8d745ee", "ref_doc_id": "1071243006688112730"}, "7f08c837-d8f8-40c7-84e8-f66d193639fd": {"doc_hash": "127373ee34bf6f99b5e08233d406f05af65e09c845c7ddae9bcf2d0b73eacafb", "ref_doc_id": "1071354591515516959"}, "6624383a-d3a9-4cc3-95f9-9531f9b5b5ce": {"doc_hash": "e1d2bf3a164e147131f7f252cd55e9ac41f472c4e897dd3713dc25a1aedaf039", "ref_doc_id": "1071378307263770685"}, "c3e1198e-1d9b-426c-aeac-0701c2f790ad": {"doc_hash": "93b03a14def2c50fd217572f0dec9fc35a4dd8d5593cb3d773a95c5d1365f7be", "ref_doc_id": "1071832260090794014"}, "08e908d4-24e7-44e0-989a-dc2a3ebe20f1": {"doc_hash": "915ed09642fddc55b0a109607ebba6cc0e514577cc168260db087f8426086ed1", "ref_doc_id": "1071887841740738731"}, "add0043e-8b54-43c8-a9d4-55ecf64cf888": {"doc_hash": "6e9a9198e0bf27d331fabb4037801a5571ef562efeea44f8cedaf2cbd38546dd", "ref_doc_id": "1071900308982218783"}, "6aa9e8ec-3216-4e73-a594-64d28bc94409": {"doc_hash": "d70e332c033b273ae110bdc228c0610583a9b41fa5b586ed63b1df7ea34589a5", "ref_doc_id": "1072077885214556251"}, "159416f0-8ad6-4aaa-8741-1bb2c6ffc987": {"doc_hash": "536959cdda711a66cd73d96ad17f8c1ed84a98b6e610dd2f5a56afded77e25b9", "ref_doc_id": "1072186651650043995"}, "e0b5a247-f046-44d7-aa22-b7305ef1ad67": {"doc_hash": "467ad475d2ecc69f6f9a537c9da8a38a70a6bd6eef4a423017a4ed017464e83f", "ref_doc_id": "1072262195800449207"}, "046c0069-fb8c-45be-aeae-a346f33e343b": {"doc_hash": "9030402979c4184c64223d0945b2d61733aa7cb51b6f378cbc59611c6c020bfa", "ref_doc_id": "1072337856091144323"}, "4c791a98-24e2-4981-92a9-e113bbdaabae": {"doc_hash": "00d97fde99ac5dcc0d2a9ac471a3bcec8bb916635a14d4632c8f804f577c663d", "ref_doc_id": "1072505550681677864"}, "70e1731e-06e3-449a-b6cc-14bd9f61b9fa": {"doc_hash": "1957fce36b9825adb1887f826c998045ac575a9638ea54191353aa031e27d5f6", "ref_doc_id": "1072579473691652128"}, "f03877ff-3f9b-4c3b-b8fb-0e3d9f5cc257": {"doc_hash": "45766767751594f2274b3f3ed4b848a498c97ef02f0990538a87ad68cb9cf9e0", "ref_doc_id": "1072723051189391431"}, "2ea3eedc-664c-4697-a24f-78d2fe38dd35": {"doc_hash": "b8fa5eccd38450225b52902e59ebc46264b2bdabf9e8141541176562bb440d1c", "ref_doc_id": "1072733033318318190"}, "d3513f7d-53ec-428d-9365-6fe06293bd81": {"doc_hash": "4a18361dae252404991c62a19eb442a1c296438955ffe4215c50464ee6761596", "ref_doc_id": "1072861437053120512"}, "55b6080c-e667-4a92-878b-4e154202292a": {"doc_hash": "058aed34a0644c2aa61ac233f6aeab5b5e2d69a082d5c2c9b810aa75272736ae", "ref_doc_id": "1072865771484622878"}, "f8d13645-48ca-487b-9b13-364216805be5": {"doc_hash": "6e5f00bb44f8f4af8271857c2f639584385c366b6b50c12db3378d9e7f6d1fe8", "ref_doc_id": "1072918444669943858"}, "2f46c051-f076-43e4-ae77-21c501de40c2": {"doc_hash": "022fb4defcdf2892dc325d99c99fdf3deda7294d1299c295b61b5c04c68951f0", "ref_doc_id": "1072920103844319232"}, "be65e0c1-d4e8-4537-8a12-84bbd9522cae": {"doc_hash": "a28e42c3f0447370b48725ba1a9cfca5e8c3237d9f9d7b917b1570d8ef78829b", "ref_doc_id": "1073041964787834880"}, "156a4ff2-85c2-414f-9862-6229aa1cd381": {"doc_hash": "6b2232e08f22ad45f9fa2569547e2955b0ffa040c56db6dffa4a862a23bda882", "ref_doc_id": "1073051051936202773"}, "db6ad1a2-01c6-4e2f-ba73-8bf72d6ec8ea": {"doc_hash": "17fd2e48142b8f8ed96d2a3eac3dd25b93cfdb28726071777908dab4781f5db8", "ref_doc_id": "1073140516151103548"}, "f9d2f99c-bd77-4648-af4f-45bcfca8f9ee": {"doc_hash": "a2becd3b4c0ca01ef1ffe80f6de9440d919d8c59bedca7faa3f91181f7dca53e", "ref_doc_id": "1073143739872194590"}, "cc572593-f37d-4fd9-b4a3-81a3d00b0d3d": {"doc_hash": "f9cbd183b8bec3ae9a5a8e1d87c809617977d0b771cb183a76767c0f32d06aff", "ref_doc_id": "1073215541856182332"}, "d8b782ee-f4dd-43f5-9832-3cfb649373a2": {"doc_hash": "0614b04f37e217f76d8af1761204ccb1b344589274cffa658dc14d1713526ff6", "ref_doc_id": "1073221588457099295"}, "c8706269-a2f6-4158-a3d2-6f5e12d45c5f": {"doc_hash": "e5a8e0a3cd1af106f7ab6655fa6f071233b3e8d58b4bb5eaeaf1649820bc03ed", "ref_doc_id": "1073224750572245042"}, "fa7b5073-607a-4619-bebb-2b26b74abfc0": {"doc_hash": "5d9c0fad8fe3f91b97973de629d5d89ff5fea2d33472a2487f60de956639ff03", "ref_doc_id": "1073250173658083508"}, "e7246b00-16dc-4644-a550-590b8ef8cb4d": {"doc_hash": "dae55ef827b906da9f72fbb6d2e0355ddd1a04c24eb2ffe737d83522bf9b6a83", "ref_doc_id": "1073340799598735373"}, "2f314dbd-02f5-443f-a9b3-b415d5c9ab65": {"doc_hash": "4d47f3f19626964cda744dc885cc7ba7739cdbe225c1a450de510913bd58bd69", "ref_doc_id": "1073366281799086220"}, "b1b615e6-1c28-4f2b-9b54-b6221f5c3bd6": {"doc_hash": "4b55d18e923ace22df16758225391358c7c06db3188bf9c0c60fa5180c428746", "ref_doc_id": "1073441919574745129"}, "c7940338-ed3e-4f0e-9d09-d3b07ac8ee56": {"doc_hash": "eb3a4a2c82370a6c8e7c5f9149c2eaad870a1dc039e43f2e542d0195e7346af4", "ref_doc_id": "1073454185430913105"}, "4ec0b41c-10ee-451d-8df4-22247ff4f7a9": {"doc_hash": "c3e38ad818b1f954377fe3803fa8561515194f71a8963243c83426d3d89e1855", "ref_doc_id": "1073470005330591796"}, "784dcf86-30c2-4a21-b2f2-495fff011a18": {"doc_hash": "245dee1b12b4023ac1e73a8c1e6454fc2ce9729d3d62176138ecf58576b43d34", "ref_doc_id": "1073489506147258450"}, "1977b405-f518-4e66-a973-2e57f34052c8": {"doc_hash": "99b5894a275c41783a47913506ae4cc11f6d899d4e8900a1e21a2fd2e8aa8028", "ref_doc_id": "1073705390979698829"}, "55b4d14a-db18-406e-887f-1e259752c0a3": {"doc_hash": "cc5df52843224931e8b963e9bf78cd969ca385beb46baa021396b2b6a328c5ce", "ref_doc_id": "1073742124551512104"}, "35d9ca0d-227d-4f65-b178-52c2aca50be3": {"doc_hash": "527411b17c8e9a8a026246e2ef01d151ea6cb1b4110c662bd2569dd61c160cf5", "ref_doc_id": "1073746285452070953"}, "7fcb01da-aa9f-4191-a999-d873dddcc1a5": {"doc_hash": "439f05ef1f0a4ffa20b17992f0360af8808cf8409f58aad5ad56faef8506a3b7", "ref_doc_id": "1073747794898211006"}, "c3205d19-8104-4882-a9c1-fb035df79e1b": {"doc_hash": "03f6154329edcf0601613279344ef1173db7465048587c896d3617eda5849ac4", "ref_doc_id": "1073874802718285834"}, "190117f4-1228-43a5-8e57-67ef9c0b9026": {"doc_hash": "6cc47997644aafdb2d293ccd3182cb4c58c2e242582931d0d09087e4aec039fa", "ref_doc_id": "1074004335131893780"}, "012079d9-7734-4175-987e-6c075391354f": {"doc_hash": "1a88decb1a509e71368d9e25028d145543a251afd9942c4c903a6836fb22eeb5", "ref_doc_id": "1074013294165245972"}, "d5dea8c7-9dee-4d69-86be-9f3eb2fda36d": {"doc_hash": "4f2c28a6d87853516f5f15f9eb69590ad67e66f1180dcc6bb953402ff9437abf", "ref_doc_id": "1074064493979643934"}, "e8f70ede-bd7b-4564-9e89-2feeb171c9eb": {"doc_hash": "e9c0bb6f792522f735aba38cf949c4f5235624f68f662f34d42846e9b0c14464", "ref_doc_id": "1074066504263401533"}, "38394d33-8304-40ba-b379-d7d30375898d": {"doc_hash": "b5015a1da7cbb92734deaa0b57bb72b140b0028eaa8c63497322ae9ae8062a7e", "ref_doc_id": "1074263408175755274"}, "57002f7f-39f0-4c77-a162-278ce28111b6": {"doc_hash": "2661f01d52937ccc0c7b349f18c3d55d2064df3977025fb6922cbc129151b0b3", "ref_doc_id": "1074430667359797268"}, "d87307ef-0556-43b1-b3f2-b377d3bd7c3b": {"doc_hash": "adfd1d783f6a16a5948591e52a4ac0add91b26131dae765c3cc66c65bec3a234", "ref_doc_id": "1074484726108266577"}, "6e3215d7-1795-4850-8a3d-a62321dcdd05": {"doc_hash": "e031b267a3ace305a7919a5c9db4117e89966411ed80fb608d319a48c865fbb6", "ref_doc_id": "1074511357258518538"}, "e8a054e5-c721-45a1-8da4-2e777c1076a8": {"doc_hash": "9d2540c0eb175a86083fb73f40ef8df3a661e627e9798ca6790893525b55121b", "ref_doc_id": "1074531128628756590"}, "8a337f08-31a7-4674-9aa7-5f935c72ccc8": {"doc_hash": "5c3d30f41d443d5feb6453a8abbdbbe30f006e392913dd1eb6256e22164aeade", "ref_doc_id": "1074532133470732308"}, "b8c1cddd-f836-4cdd-a8a8-066499789e4b": {"doc_hash": "1e8d95a0f3267577f321001f3aaad4f18fdcb50ca9d581a1b6078583dc44680b", "ref_doc_id": "1074673952682672210"}, "b1b3bc2f-b0a2-410d-9da8-a305f9d9c8a1": {"doc_hash": "d30774d898a005ef087afaecdc2543522814a08f558aa0cd6c06f4e566cb7035", "ref_doc_id": "1074690672650633327"}, "f3ef83da-7e57-4ac4-8750-0fa2df82d3fb": {"doc_hash": "d9fcd3493e94562f7b4dcf91a0c53421433505c0ce38ba9dfca1e3b209b134e2", "ref_doc_id": "1074711837263790131"}, "be43a632-802d-4b8d-b45b-83c5732973a4": {"doc_hash": "d0f15ddd48e4b1e1df443a6c39ea91702a2609b26ad1134dd8911e5dcb47fe5c", "ref_doc_id": "1074724475658043474"}, "099bfcea-b2c9-4cac-85be-0c1520340a86": {"doc_hash": "371d476a4e204955c207546f5bb882bcf384e8bbc7acf6349cd74eba5ad70c0b", "ref_doc_id": "1074819346670563459"}, "22bf4fdf-903b-41f8-9918-f3933e6817cc": {"doc_hash": "4d893e78246e4008b2bd7f82bde389e1a4f0e9b7b35dbf96d8290cf708fc5e2c", "ref_doc_id": "1074884406914842634"}, "523e2d31-602b-4284-bb7b-4e5d0e442bb6": {"doc_hash": "a1ba50b7b72c17c5fb1375a4be4f4b6737cda17c19ebc6ba8d1026695a282b75", "ref_doc_id": "1075032341417840761"}, "c0bec1b3-6880-4a89-aff9-699996fa12c9": {"doc_hash": "e77eee4170ecd74bca8b4fd95722c8e6abee639b1f7e2d1b9aa3bb15e88dcc21", "ref_doc_id": "1075158852179349594"}, "6976be85-132b-48be-949c-c62bdb11954d": {"doc_hash": "a8c6ef9f43faf553a796c7b59919d75dfea58a6c498a9cfd7b0c5c264a13a610", "ref_doc_id": "1075292235983224842"}, "0362f1a1-0a6b-4736-baa9-6d61d00ac686": {"doc_hash": "341b9f6ec3af3740d427010bba509092bb2c0fd8aae657895a486178df9cb3bf", "ref_doc_id": "1075297640360706048"}, "540c139c-40cf-451a-bb3a-8baa95a6e42d": {"doc_hash": "1af4ed72ced0877b30ca0532757b73db3f1d79c1d8ef319701fff55b250f4f03", "ref_doc_id": "1075328672870957076"}, "f943e581-7d64-4977-9785-83ac05889250": {"doc_hash": "19dc6c8adc0a23f68d210f0e67300f57f5f0cf70ead8b874f1c4fab75e0639d3", "ref_doc_id": "1075330342128472126"}, "03155c65-e206-4e08-a061-ec3c56455cf1": {"doc_hash": "d5691151df5184f32360940ccaf356e532d30d2ccae11b777abb4a53e0a3c119", "ref_doc_id": "1075408853170147418"}, "1934fcd1-6a8b-4c1f-beb7-1ea14a5f7a4e": {"doc_hash": "28029255cde7c9020a036fc5baed70ab625a5a36031299c0c8d36683800d4bc1", "ref_doc_id": "1075451235475402764"}, "663d017e-20a6-4dee-a05d-1e12d1132fce": {"doc_hash": "4a466b70774a55dd7c8874f8ef155402851d0aa492f58e482c8d5eee80cb5e51", "ref_doc_id": "1075512720813719563"}, "04eed960-07db-4576-9751-d6050220f06f": {"doc_hash": "ad8365004495bd0f4a886852e60e37a890f4f4599c7b793bc754f5164a9b67bf", "ref_doc_id": "1075748774653198366"}, "f4391c8e-6fdb-4b69-a3e8-e367576350e8": {"doc_hash": "e2b000709fe271a135d608d1c50e4cab17b47c18d5e613af31c451aaae1ed0e4", "ref_doc_id": "1075749386946093096"}, "00ea0ca0-cb8a-4f6b-8dfb-8d15fc267fa4": {"doc_hash": "ac8adb1d4963ff5cfc1511e616e4f414827c2d166aa688f5902ce68038db720e", "ref_doc_id": "1075797462595403817"}, "1b90250d-f221-46ce-ba78-941ebcd924f3": {"doc_hash": "c8bfd1a26f504f0cbae5c36173cdf8dc43c41951c4eded4a3484058b327660c9", "ref_doc_id": "1075839506575544481"}, "6a0b2473-edb9-4c7f-b862-ef8f06439b1f": {"doc_hash": "b489e2d07b199398c05f05596565d68a573ca7d99e9a827db3886b4c7ee2a500", "ref_doc_id": "1075843568763162797"}, "998109bd-53f6-4294-8091-6b206e58dc9c": {"doc_hash": "e58ccfa5af0d863411e52ed774473d1f4d079263e2b1fa3a2dc4dc1290bf4cc7", "ref_doc_id": "1075865143650558054"}, "3b10f734-f815-4e6e-bab9-84c95b3ceece": {"doc_hash": "7388a2d3e95936326279f6db9ed7d4a61b25288bfd5f47d8539729c7959bd3a7", "ref_doc_id": "1075867143717011576"}, "9f68719c-4250-4c00-ac96-615e93e77e19": {"doc_hash": "a29f3efe057c5f871ce1ad28fbe1a09f6431f3e843999323fd96556f7cdc8af5", "ref_doc_id": "1075886072678060163"}, "2a620754-1c38-4851-a14e-4304a8e53beb": {"doc_hash": "4b94fcf55c1270a500e51e73d72dfda6376b00108c96d63d7983733d57d4839e", "ref_doc_id": "1075929098406338711"}, "65cc65fe-10e4-4a2a-aa28-6f34f3a7fd7d": {"doc_hash": "fae3e4387b7dd0a47a1ab815c82ae82ff7dc62b9fdf2f4d297a5c2a06db1a386", "ref_doc_id": "1076783492857348166"}, "53991171-7c7a-40c9-83a3-b641f289e6d7": {"doc_hash": "5c400864e79c0bb0cd166170ef5aa0fee252e9bcfddf51e9fae98776ef96982b", "ref_doc_id": "1076783534699716629"}, "4e8b9622-a16c-4311-97a7-b79cfc806048": {"doc_hash": "a58490251ceaaba5a50f265b97222033703257310e7b77f43c20c2fa9eb6d7b2", "ref_doc_id": "1076898778843467776"}, "5ec9b843-a45b-48e3-8643-891c0d745aed": {"doc_hash": "4075de2b7cf0aa6d086f613857346b32237d5c1db847fce3da211cbc95073600", "ref_doc_id": "1077358811934896198"}, "a1cd01fd-ede6-43b2-ad67-6c4c09e7e07a": {"doc_hash": "ddabfd268a97b7b85f697ad6e367d18f33a975e63258324ea0b15bdae300f885", "ref_doc_id": "1077358811934896198"}, "5b648728-2bc8-4b27-b27d-41d71893638e": {"doc_hash": "3ad85e4fe3b22e79a48eb03089e90dc8d53ebe73c9f4860ff7aca44bac55e75e", "ref_doc_id": "1077473220917219328"}, "df1c8070-44b0-473e-9b7b-768d88352b4a": {"doc_hash": "58a4a0fad25e747affa3987ed48df5c58971df2f06930bb3181a6a392fbe5a10", "ref_doc_id": "1077506974834495568"}, "045c0e48-a6ac-4fd7-89b7-77a0169e9b04": {"doc_hash": "09154e88b1f6af4472de1e822d10efe8e87f302a27ef68d5f20d0338ed246bba", "ref_doc_id": "1077681579020791880"}, "9610eaf9-0d81-47ac-916e-a8c5e8c7e705": {"doc_hash": "a35e0c694e5af11fbdf3fc73571a60303923f4ce52e809bf791be7702934f4cc", "ref_doc_id": "1077861022674735184"}, "f2435a33-e866-4662-a52d-183cea7aef67": {"doc_hash": "6773dfda50ec8ca388ef314f0342c83f58d7db014c71702aba15b2b83d25c9bb", "ref_doc_id": "1078303463299096617"}, "9245979c-f960-46d3-82b0-9600601e284e": {"doc_hash": "2ba738b349613d17a9ed9de687a8e8e85986f8061a0c912bc6924c092da4026f", "ref_doc_id": "1078473961739915334"}, "39ff5a8e-38ff-498a-a82f-93569761e5f2": {"doc_hash": "bee45df9c5350f0f14628427943f403e53dab115bc2821dfe25ce2d61814667b", "ref_doc_id": "1078679652723335228"}, "3a9b475d-d2af-46e2-a887-60da7e9069d2": {"doc_hash": "97007904ebe837cf7c6e71a27f1058150dd053e46256e4d1af8e9ecc002f50e1", "ref_doc_id": "1078713750435151872"}, "2ee6cbc8-83d9-4093-a520-c26ae334f65f": {"doc_hash": "5723809e91308040fdbb6f5a00414b74b26ed1d3ee1516db5f4896f087a00178", "ref_doc_id": "1078774643650986136"}, "8070bcfd-5da8-45a0-be1d-a94eb759dfec": {"doc_hash": "ff4e2351e52d72efe48e64e5816d354aedd3e6447063cdccf926162551101216", "ref_doc_id": "1078789274075402251"}, "03065805-e1bc-43e2-a211-326ef63e15c3": {"doc_hash": "5226e55152451d8dcc5c95d7e3f3f795f9d6f8f811bf6c22ab57c5f553eb1964", "ref_doc_id": "1078789953884000428"}, "737611f1-7245-40ba-abc3-662aa8e7e023": {"doc_hash": "c1b43150ba8024ac478aaec03d18079d7d60025b5e4237a82d637e999d432e80", "ref_doc_id": "1078791067996000296"}, "7bd6e236-47cc-4be8-926e-17e34eeb5804": {"doc_hash": "6d5f594545427cb945b395838d3e40a2dd217d01296ef2e520e402f91b30fbe0", "ref_doc_id": "1078800149561737277"}, "7b702ce2-f14d-43cd-a73e-a5ea418877d3": {"doc_hash": "dadd709085b110680316b15e89dd9cc7f76e1dbcad4bacf33ddb807dbd62cb88", "ref_doc_id": "1078826036260773958"}, "17a8ca58-4fd5-40cf-b4b9-99972f50606e": {"doc_hash": "0b0578603324c1fabe2481740e91afbd6b0a051b262ddffe066b2614969379db", "ref_doc_id": "1079076747041050715"}, "25b7ac9f-8f32-4061-9578-874d4cfcb7d9": {"doc_hash": "ed1d4cb6cf91a90c74bad8a95370ff64fe801f0639545c9eb604a03ade1c90d3", "ref_doc_id": "1079191090508345435"}, "cdcbe4c2-6c71-4e56-bc23-a663aaf9fbbb": {"doc_hash": "b9d091429073d439e517c949715510baa4da218ccfdbe82bb93645b9cad49474", "ref_doc_id": "1079442490555383938"}, "adf2a8de-3d2d-4fad-973e-ef30a5ae56bc": {"doc_hash": "c78947776a1305683f7b865cb700f5656775cc7c2b302527c2c0020396b2ce87", "ref_doc_id": "1079575925471068230"}, "1884aeb9-fdb8-42c8-b186-5315d6e35133": {"doc_hash": "5829805dd9b241bdf4e41fedafdbbfaf63a1bdcccd38379bef188808b95680bf", "ref_doc_id": "1080263915650416811"}, "f5975a91-8a12-4aea-99d2-c6918c05e60a": {"doc_hash": "cfe943974a992f321abb9f6d162a18eb613e82e0db76bf6e05543c1390bfa1bd", "ref_doc_id": "1080299966817374250"}, "5ea3759f-190e-4891-afe9-f84ded59b55c": {"doc_hash": "dca60034d4e92d158f9b1cbe44fd9df05bd147b734a84ad42332404a175297b3", "ref_doc_id": "1080374871864922212"}, "cdc00f7a-99ed-418a-8147-21b6d9a7de80": {"doc_hash": "f6c57bc03169f94647075fbf79e84b1fa09058a4c0e9bd39877039de551c3ab3", "ref_doc_id": "1080551520757612594"}, "1070d48f-8347-422c-bab7-f1079ec4ea63": {"doc_hash": "61db984edbea289eb402465d9254107512f3ff0758d92a8bcd7c302c7f4e0ba1", "ref_doc_id": "1080552440115499128"}, "07c3f2a5-7114-4766-975c-c7c3e6be9bc8": {"doc_hash": "9f5e3561022337c8a57dd0fc8837c26a4c586f55395aed6a30444e14898691d6", "ref_doc_id": "1080639518195073054"}, "11949e00-0abb-48cb-b4fe-852007625c24": {"doc_hash": "be565d9f41f5e8fa78be7d8bc8729168aba3c35dbbee220ac328103147c5b139", "ref_doc_id": "1080648100479254568"}, "bf28bc3c-bcd4-4fe8-99df-3c5cd11064ca": {"doc_hash": "53d84cb1b042d8da9fc1dc26d90533a7d8ed88f254071b27bb15d2c1e7626ad1", "ref_doc_id": "1080670134177370142"}, "1ee5d42e-7f98-49fd-a4fd-ca2ab16f5db7": {"doc_hash": "b3cbb840cd21adf1ee6529f1a02d7de440343ed25ae7186814ace73543527757", "ref_doc_id": "1080680891094945893"}, "6d1794b5-e6b3-4a4c-96f9-4ed77a75ae1d": {"doc_hash": "90c4064c213e21547c51f13b65879d27789b923b07a341f48e22fe0333165731", "ref_doc_id": "1080682854452834395"}, "a47ab701-94be-4f15-87e2-e0cea8d32571": {"doc_hash": "ce631f3945fce4c9a02fcfba304dd28d09213757da1405da5206af4c189efc98", "ref_doc_id": "1080704497719984180"}, "f7c9e92c-6565-40f9-888d-bd9bfc06b23a": {"doc_hash": "43be903c19ff72cbe3386466ffab7c67e0ff128b7360589820c59e747f1f0b05", "ref_doc_id": "1080718083867553822"}, "64add6ed-114d-487b-9ece-161efb186520": {"doc_hash": "0382dd0dc7c10d9be2eea911eaa7bb1a811df8160663fcf0eb8dd6e8c64efcd4", "ref_doc_id": "1080788565258154044"}, "b3221280-8fc2-44b3-8c66-e732db0965cd": {"doc_hash": "6e445d40d379ecbd4c502cc0a76d3ce6d9bf8ca3d6eb1ee68922828e7b16a900", "ref_doc_id": "1080793075401633823"}, "2ef7d2e0-dfeb-4828-a4e0-07ab8647dcc7": {"doc_hash": "f21eecfae63db2786f11ab7186cf21857a00d5f74d53af366462aba3327b63da", "ref_doc_id": "1080796088849678357"}, "86f359fd-8d94-48c9-93f2-141043c44ab7": {"doc_hash": "d56cc87d751872c07f0f88dfd3730a5daacb5c5ccaf9cc2bf4905589dd844d88", "ref_doc_id": "1080806777836281877"}, "2d6ccdae-1084-4d56-96e2-b9f108e5f077": {"doc_hash": "c9a28ccdccf81ec16635e019341195a4cc34f6fa2d33ae26e385dee2965b85d4", "ref_doc_id": "1080847925342642218"}, "e74698a8-a130-4855-875e-c033e6a11686": {"doc_hash": "1ea64e61c9de07ba46772cad064379fc58599ccbb91f4c2087aab89097dd8e52", "ref_doc_id": "1080912671366467827"}, "9428958d-ed08-416e-add6-91cd97a0bc03": {"doc_hash": "148ae4a19870b5100c5963f1fa64bb3a209bd01a7e1f3d296f685b97645f6093", "ref_doc_id": "1080932626539483258"}, "63f1a3ea-5c48-42aa-831f-c6f14f1ade41": {"doc_hash": "74e8a9371dd7eaf66d810fcef1ef93ed44a46f4e4a25741e1af884a66172a8e0", "ref_doc_id": "1080933109073186826"}, "281f2c6c-fa08-46a0-9ce6-ee898eca8805": {"doc_hash": "eaa09eceefdaf39bebe4eb533aae19d2c29e24d14365f8e2302c3b55c7c615ce", "ref_doc_id": "1080937442997190676"}, "00c905ab-374a-44f8-b2d7-98bead96d4d9": {"doc_hash": "c26419877f9950562f18b718f9a1aa26c8a9bad3687a362d08c90461447e294a", "ref_doc_id": "1081112568510292018"}, "c2216ef9-2608-4ece-9037-9a38ce85b440": {"doc_hash": "d86e4e039db7a1a51231385f56f37826705f2a1c0eee9d0795f8aed98388e5c0", "ref_doc_id": "1081148960430886933"}, "029526d7-3880-4704-ab7d-0c3871c03468": {"doc_hash": "46f11cec1685e2d1b84b95ef9ad68fe46a484818b3c11e71a162cd88f6bbec29", "ref_doc_id": "1081295364595908790"}, "08264b07-9918-48e6-8ca7-891f6b77e371": {"doc_hash": "fc33a67644c2d4e3e34c270c61aa4393a6f98ee3a3ff6cc29d0ed63a742fc44d", "ref_doc_id": "1081328872571801680"}, "6d5099ff-1edb-4f09-b6fb-b7abcdd72bc7": {"doc_hash": "8d84684234054a98f97e0f801b3f93c4924c6408c23f1094152e747aee7c9419", "ref_doc_id": "1081329351800406107"}, "2bc34d6b-4b9b-4fbf-a303-38df2668e487": {"doc_hash": "9632d0f09164351de0e75dc283c58c90e3e68606426750a830a2e333a6073b71", "ref_doc_id": "1081336444339109948"}, "63a9723f-6d4c-4d39-8961-f44d9e50679e": {"doc_hash": "b68ae81d031d0de82e83f8e751a34128ced2dab598e62d96ce3f78552e1304ae", "ref_doc_id": "1081366516399882340"}, "3f81febf-5601-4af7-a815-5c6b469668fe": {"doc_hash": "c7d74a426d880c1b6ed4f052f086682ca2da0fc14bc50b3dcd6cb96b72c50d0a", "ref_doc_id": "1081394193764712488"}, "d1e324fc-9d8a-4ab8-9a9d-febfeac337a7": {"doc_hash": "9900abed8035b049e2faee5fff50dace430e378a73678bd2931996f2b58a0514", "ref_doc_id": "1081568608863391824"}, "34e8f2ac-e6e0-47b2-a176-b01dea43b296": {"doc_hash": "46be49d7189f3a65471a12a0edaa3c3b497d41eee0325c0de2d177b0829d6777", "ref_doc_id": "1081742628237881494"}, "8a6a5cd5-b781-4fda-b072-992cadb878c3": {"doc_hash": "7242e73d82d9ea6fdc13b23a11adf3144e200f874310dfec75519e7a8ddf5be7", "ref_doc_id": "1082076726974234737"}, "d10af1ae-a22b-4e0a-804c-f124de0a3ef2": {"doc_hash": "103e84ac27a1b89a5b69eae9bf25aa2abb9a8e654a3b3585c9f41c0a53ebd4d7", "ref_doc_id": "1082205263349678151"}, "fa879dee-1279-491d-93f4-abfab8c8a7ca": {"doc_hash": "ddca8f80b6b3cc60f0df6f8ab322dd93f3069d0371c8f097c883d454e721f82f", "ref_doc_id": "1082211813766213692"}, "4f9dc698-114f-4595-ac80-9b87b7ac6666": {"doc_hash": "84a71ec1685168ff60245893c2e5ce86d4f7ec530779dc55d3b32adc098fe3ca", "ref_doc_id": "1082303582981869649"}, "ad3d827b-5969-4685-91d2-69e2cf66e513": {"doc_hash": "4dab02669477f6e4d7771b565b532ed1fb046d659fca9b195deb6a3e1828f106", "ref_doc_id": "1082768936573075606"}, "051c2198-3649-455e-9c93-aef783b352c8": {"doc_hash": "c65b6e42e9fd3c81e1ccdf2dcd47db762f87b5063510970c83c6f6b1c828100c", "ref_doc_id": "1083069177985765386"}, "e1d0d185-9140-46f8-b47c-94ee98de1934": {"doc_hash": "0dabf4c28a248c68ae5b2b0f6362b958606a5b95514fd7e2af640b085b5a93a3", "ref_doc_id": "1083097212671766590"}, "32ee192a-33d3-4def-b9c6-57cc59f14b6b": {"doc_hash": "1cb67818bff3e746017e3763a2fb319b2dab9ac5320798ace83ca0935ed2f263", "ref_doc_id": "1083099657632223342"}, "314e15fe-e7fd-464b-b211-92402afdc101": {"doc_hash": "fc2d3f79b10a8ccb1a1ce79894c6f4338f517870ca12fa09a01f55167d58eee7", "ref_doc_id": "1083108184740339742"}, "0be76cdf-42fe-491d-bcc7-096a73e82108": {"doc_hash": "a6551e95368c5fd51e8d230ac10eed8021c88b7326f2bdb192e1fb17db39d746", "ref_doc_id": "1083116241541156945"}, "a9978d0b-6640-4cc9-9387-c0ea050fe323": {"doc_hash": "7e6618ed870e8733a04738c867fc9576a0a3dab839efee1f3d4b46365e432214", "ref_doc_id": "1083122207531749426"}, "8e6ddccd-d742-42d2-a958-f7a1f3c8fc0b": {"doc_hash": "79990940482492b826fb29f5b09f666195b64db4bd7fcda09606cea9aef5aada", "ref_doc_id": "1083322529105575956"}, "ba383ded-7ac1-4191-8894-9f7db7aaaf3a": {"doc_hash": "98d2a448bea7ab0a98e2988c84f2307f3883cea0311df47995df89c32422ab06", "ref_doc_id": "1083474132441772113"}, "ec2c95de-4d17-411c-b6db-d85b99d869ad": {"doc_hash": "7881cff6285ed8fdd5dceec10ca8a4d1f901c71feccfacdc82416e7c4651bffc", "ref_doc_id": "1083519788573261864"}, "67bcda7d-2f1a-42b7-a88e-544f799ed618": {"doc_hash": "c8ed3cfd36f4580f5dde6bc9db095e733dac1930c7fce62535c72176a02ef549", "ref_doc_id": "1083561958097289216"}, "0238478e-c1d2-47f7-ae7f-60fa58523fe4": {"doc_hash": "8a2f0d1cbf63557bbeb422dba1bf3c7ada127a0aa07e3c4e932cf04ad76d8885", "ref_doc_id": "1083572873848963154"}, "25d3dc39-ebc5-4488-865a-bbf06c0193bb": {"doc_hash": "6cd9a22192600304bf5c80eec32b01b7eb7d953542b238e906a2e03c742fbcf7", "ref_doc_id": "1083619174938595388"}, "7002a959-e16c-4f6e-8a2e-784d3819982e": {"doc_hash": "e50b37f954f6f7b3e6faa22feec1edd556468a5ba6466373765139479c8b190e", "ref_doc_id": "1083754445705326673"}, "3e916b02-a69f-486e-bec0-5e02f5f7cf54": {"doc_hash": "a28959dbde8ffcbb9e3efbf86763449ac26f397d04d040b450d8b5cc5b6db8c8", "ref_doc_id": "1083759371990859888"}, "178bc042-4ee9-4e5c-ac33-45f7f571f897": {"doc_hash": "b41f74070d99c201a1ba7a1cb912279ebec8aa2bc3ecae56bc085f3cbdfb3353", "ref_doc_id": "1083760308314706031"}, "2549f8fa-ee84-4bd8-9922-49c97a940359": {"doc_hash": "83a8a43d6b70ddac12ce6c62346571ee0d31debcc581c027e90985a58a74a138", "ref_doc_id": "1083778977526722611"}, "d6f5f444-0ca1-4bc7-b7e6-45e336c32526": {"doc_hash": "5a65b247dd1cd867f60129e610c4ede3dcd25edf8f42a2b8faac6175674ba308", "ref_doc_id": "1083792829278584843"}, "2464655d-221b-42da-aea0-59de1e1a51bd": {"doc_hash": "9f8aa0aeff248a83e4f29b06fc8806f3c8e8a861006814e251adaea9bbe2d6c2", "ref_doc_id": "1084085632562888734"}, "a393f9c8-80a7-4402-a6c6-58761f00f8c3": {"doc_hash": "eaa841810417a531322d772eab46bd75922917f64673ace16ce67cd66c75d4b2", "ref_doc_id": "1084179118033227836"}, "963f46d1-fd35-4b1b-9ad6-5b6bedd07d07": {"doc_hash": "a6aeba5816831af6d45d46d33656935df4a904a4c564f43bc93ce1ac5d74b8f8", "ref_doc_id": "1084247067112779898"}, "f97cc97f-f176-426f-ac67-16564183822a": {"doc_hash": "0c9769ccf0b2526083468455e0908ba07cd695179139282e00e14fc0efc953ee", "ref_doc_id": "1084247092635107438"}, "80dd1486-43b2-4e1c-8900-7e2398b1a0ab": {"doc_hash": "726e0e3726da66b9ec7c837a1f2f4b235fc6b20b371f886e99fda754c9e59eec", "ref_doc_id": "1084305521215033444"}, "ba623c04-a525-4576-b58b-4bb17b6c091d": {"doc_hash": "637e9c68118e00bc2c6dc9d39d089f9157772d8ec441d777c72b9a40a9f98f11", "ref_doc_id": "1084613316053311489"}, "02992e9e-f6e5-4b6e-86bc-8b540f686494": {"doc_hash": "398c338edb91edaebaf458c0152df9e0f69a01c66acdce8c0505937316ebca43", "ref_doc_id": "1084718723987947571"}, "0e82514b-8276-4462-9c47-68f2fff0800c": {"doc_hash": "c45b924811ad2db33e31a16fd14dec8afa7853e17c84fddc05f61713c0d27394", "ref_doc_id": "1084753677178376222"}, "bdb945be-e646-4be9-86a6-9f47f33f2f94": {"doc_hash": "9f6ff228015b0747212b1678b837d474f0a1941feee95620a2f22289a0cb9d90", "ref_doc_id": "1084876932589555783"}, "58a703e0-393d-4720-a869-787ec0e59fa5": {"doc_hash": "07972f969d953108db3458986611c748299a3baa27ca6825da5a93e18b035356", "ref_doc_id": "1084956695194775592"}, "2cd679d2-b9a9-40fe-90ec-fcc55c76e0eb": {"doc_hash": "56f96bb0fc2ca7c076f8e3b6fcc12628d7d66d3fa96bd7b5428251682a22a464", "ref_doc_id": "1085087103920132197"}, "6df134c0-52c5-49eb-ab40-79383f3daf95": {"doc_hash": "b0191159fa6bf5a70f5804b7085c47b7709e97e22471ef218bc3c37816f67e5f", "ref_doc_id": "1085100286441439273"}, "6071ec5c-6e1a-48de-bbbd-d94786cb4cb6": {"doc_hash": "dd5a7f4626003adb4d626b19ff445c137d14a71af337d9c988262692ab169aac", "ref_doc_id": "1085122648046063636"}, "d225c8b9-4a5d-436a-a7e1-1ed8a0e0e3cf": {"doc_hash": "5eb15d04006619553c0598d9a0a09c9ea330fb4e4b355464665ae19c45733a65", "ref_doc_id": "1085216740339875991"}, "bc12b1e2-17f5-41f8-b2c7-f689a471445b": {"doc_hash": "16b547b13430c7db0beb557dff6eefd453fdee1465809033e2686ae4f2d78865", "ref_doc_id": "1085319607897821195"}, "bc3ef2a2-9ef5-425b-a11e-eccf4476846d": {"doc_hash": "2f54a18dc3e90c47711fc128d019e43d4cb6cb44c7677227bf45735883be38ec", "ref_doc_id": "1085324838559821974"}, "b2ef1a71-b3ea-4c3c-875a-7a737ab45daf": {"doc_hash": "f4558ceab59b5804d56e1044f0c813ffc20320f85671cee0b86714bc6003cfe2", "ref_doc_id": "1085371949858947123"}, "9f6fb565-be6a-4373-8429-e37bf5134ae8": {"doc_hash": "0ee778497423aa60de42bef943e9a4de79ed5c8e18b794c9e247e7ea96b4ccca", "ref_doc_id": "1085398267770183760"}, "12ea90d4-e35f-417e-ad7f-51fa38bfc5ad": {"doc_hash": "ea5f69d2eb31912ce9339ddefffe9780483db5994236ab6444a4debf3d7a78c3", "ref_doc_id": "1085511018693804113"}, "4a3180be-2b0b-445b-b5af-3f2de75eba2c": {"doc_hash": "86c87297c76bf3cdbbaf5037114ddf8f4276cc3b4f5d81fde78ef92ecf091e55", "ref_doc_id": "1085540732070285353"}, "3f99eee2-db41-47f1-8fa0-e5b5eab74de8": {"doc_hash": "4f23e048e18fab6cc27f21e756716641614c5e925a13c3301024b0f0ecc442cc", "ref_doc_id": "1085553350390583307"}, "b2b31664-24cf-4f85-9d22-81d98d0d2b86": {"doc_hash": "c9e764fcc29bd02aac2a992dc90c937df1709a6777b95ca0bc6be91db2d12f9e", "ref_doc_id": "1085579182307807313"}, "1c0fefd8-7d32-4f51-9bda-05bb7097210e": {"doc_hash": "168d31b32679e5231afaa56bfae2aff20a587dda10ff51e66b804560523b37ff", "ref_doc_id": "1085586527591075860"}, "7ee3d94b-a2fa-43ef-baef-88152273c377": {"doc_hash": "4ae37226e83cf7434dfbbd4474ddcd40767135649f865b3240bb55ef3ce45c57", "ref_doc_id": "1085648901148770478"}, "2cc19d61-2bba-4bdb-b31b-ee34bf86f48c": {"doc_hash": "070c472e6aa09e68d570dba1828e194d7b913cc1170776f35101de075b81f806", "ref_doc_id": "1085688993858981909"}, "cc0725d5-ed82-4ad2-ba75-1b3d53c77599": {"doc_hash": "638ff1b404c9a735957949a509be0bee0c4a7cbe846d0c859bd2267e66c98090", "ref_doc_id": "1085745359394979860"}, "c3c96ec5-1a4b-49a3-b7f0-31edc3769252": {"doc_hash": "ca92ca879ac46ed9fb9ea9381a8e3487910f495f13577f93175fcd5105e5f5d2", "ref_doc_id": "1085785318822785064"}, "5783eccd-6802-4d29-a10b-b40af78a82fe": {"doc_hash": "7c692bfc82f4f4f60f4ac595a54acf02089b7d6d05d61e5f6cccaf7df365114e", "ref_doc_id": "1085789697814564914"}, "ebb24d8b-bcf3-428d-a3a6-dd2499b1ad1c": {"doc_hash": "05865febc18a7e3320abc8fd986548b5ef3871d92a329e7632bfd19c19837f41", "ref_doc_id": "1085812187861352498"}, "3f6245e1-3d80-48f6-879d-fa61856520a6": {"doc_hash": "472d1d211e5c7c541c2ddf911d3f266b408524bdefb9f76cf00ea700b015b36d", "ref_doc_id": "1085813176513347704"}, "a7df105c-80ba-4472-816c-f2e2ddf06f3f": {"doc_hash": "9cd0068505bbc72f1f356d9d0a9321340ec420e2f4ea8148102bfbcc07f60bf3", "ref_doc_id": "1085934652314877983"}, "a1cac087-30cb-4add-866f-61dd6ed2b822": {"doc_hash": "f3cdc9b879ee65fd66b89224dc435dc81944eaa367774678fa8a0d2dbb8ea704", "ref_doc_id": "1086012677068959776"}, "a38e208b-91ed-446e-81b6-60db82d8c340": {"doc_hash": "1249fa2fa399eb89dbbc26c181d8320f639634c20009e9279b846201c971685f", "ref_doc_id": "1086020117458079925"}, "a27bba67-64e7-4d83-8f42-1bd91b994a9d": {"doc_hash": "e0dc9e6f29f1ff6c49b720afef649c967511a2a1ff7137270551e1ea99bb331d", "ref_doc_id": "1086037370836615259"}, "2fedfdce-a172-42fa-ab92-d739ddab864b": {"doc_hash": "463a352199d2ec9aaa97d8687d8ea2b3175bd186eb461917da29403ade136f9f", "ref_doc_id": "1086050962499711026"}, "b1a675c5-8629-466d-b482-94926f637324": {"doc_hash": "835342d00517f453a6bd7f5a37c6be1cfdc4262e9d3865f30e504f1dda3d663a", "ref_doc_id": "1086204851379245197"}, "f002fd44-d3cb-451b-a6f5-dcf9b9885977": {"doc_hash": "bd03f9d69feb8556fc521cfc958537f5527f7355a76c4630c0b7ee1b6f91bc1d", "ref_doc_id": "1086270139021930506"}, "49dbd679-e9c3-4a24-8b14-6efdae89a816": {"doc_hash": "13e192bcd4041d37b536406db496ea09e81538a2cf6ee1a9a56057c3ac97b489", "ref_doc_id": "1086441287319826522"}, "f51c38d5-669d-4cbc-a94a-728cda22a1eb": {"doc_hash": "ef6c34846611a084e3f7cadbc9946b0ab4bfd10e7fb182c427953db8a4932dad", "ref_doc_id": "1086450662818197566"}, "7cd4b425-d7c3-4536-b76f-37a77a5715d4": {"doc_hash": "4cc8c2ca0e74d58b3993f958fdc7998eab3643d85804b985a47bcef4efe83d2a", "ref_doc_id": "1086724338461462541"}, "05a52f6c-3cf3-44ef-8d62-178aa93e7b26": {"doc_hash": "e4e95a2c62abb2116993a95d1ef744e12d3a46eaaa1b09253d61f68d049f8b7e", "ref_doc_id": "1086832870787666030"}, "79383abe-7a84-4472-a021-52be7e9722ac": {"doc_hash": "458582e625a9b208acfad0be2b381d2f5ac260b448d3dba2c863e25fad6e5f66", "ref_doc_id": "1086950395458355292"}, "ba1b6514-adf9-4b7f-ba55-118f2d1219ee": {"doc_hash": "0cc48ca09080133f68541c0dcf18f3d62b24aa4eae830c0ebed5d5c4f664dc3d", "ref_doc_id": "1086968174353862687"}, "7b1194a7-bf5c-463b-bd78-5e516ff325a8": {"doc_hash": "d7ec093f062cf154889ff9994cb76065e3574d731041a7e5394eb7ca6ddc898a", "ref_doc_id": "1086968357326180395"}, "5a5f6857-2100-4b3e-851a-f490621aebeb": {"doc_hash": "8e34cc7ca8cefd26d4c460cb586b48b22e55567a8acfe4424f4aac46d5b84fc6", "ref_doc_id": "1086974298251608116"}, "20b8fb19-814e-4770-b673-fef8114d86b2": {"doc_hash": "30f9ace4ec865c9ca5ff08b29ca06863b3024fab286b649fdabfebd29c9ee2e4", "ref_doc_id": "1086977412400693280"}, "a804445f-965f-45c6-995b-0983e4af72d7": {"doc_hash": "c4b29d4a0b02f6696e2e9fe8c4b5708a8cef35c094e556de302ab942955c8b5e", "ref_doc_id": "1086984654860599366"}, "ff38bf2e-d57e-4a96-ac62-6502208c0ec8": {"doc_hash": "18d6e49c6baace507eda5c193c708753763c74ee3e7a63c63607b1257b12735e", "ref_doc_id": "1086994839096266783"}, "d587fd12-fc78-4e54-8897-eaeda297ccc6": {"doc_hash": "2e13962def854017cbc941abfa7486263c2e2ca87d145aa001cbf91fe43faa75", "ref_doc_id": "1087000519073079337"}, "e336df57-5aa0-4b8c-a279-2a5d4f474bac": {"doc_hash": "178e32713420febcc5332a17d144f0095875a48d2579ef1f434ca18c62c2380e", "ref_doc_id": "1087006323180306563"}, "e527282e-f2ad-43a5-b455-9b6b6ff3132b": {"doc_hash": "125a319167aea40cf769687100c7bcfbbacc2da4fcdc80d845f25f1e0f9dde90", "ref_doc_id": "1087006977063923713"}, "fc3e1ed2-19fa-45c9-95eb-9a92446a4e16": {"doc_hash": "22fef8f77d2bbaeb212780ea6518d934180930de10f139a8901084d4a7672461", "ref_doc_id": "1087022368150540318"}, "9f4393d3-9f4e-40fe-bd92-e8eddb377c51": {"doc_hash": "026c5caef88c5189bd021e937b5ab9dfa4e60733c8a8d9198b1bfb42bcff7715", "ref_doc_id": "1087050949303992472"}, "c728e66c-0379-4de9-ba80-e143d6301542": {"doc_hash": "20cabb75fc612534a650475e91944e3427a874f2df36b03e8f2480f433a582df", "ref_doc_id": "1087051901142585395"}, "500f3ed1-92db-46fe-be0a-bac65768cdd9": {"doc_hash": "c85414beee4da8918ac0bad9e6270bf36389d66c2b8808f7c4abe552b9aa4e1f", "ref_doc_id": "1087053681406509066"}, "89175def-e29e-426c-ae7a-460464ceb01c": {"doc_hash": "fa04c4fa91945dbcde98df02ce5bc9c8055051cd121e176a75854a0ceb7ff3f3", "ref_doc_id": "1087056600499499098"}, "6b435df0-2535-42c9-ab90-2d745f019bb1": {"doc_hash": "a0b52562164d05d112395df2205642df813d491e66048df6b802dd8a9046e976", "ref_doc_id": "1087062566993404004"}, "2aaa172d-b25f-4947-9f07-8108ce2bd189": {"doc_hash": "9d3a20e6f85ccf172b282fa45381449e9e3fc22525a23d6d2bbda09c910a0896", "ref_doc_id": "1087344397680648324"}, "0f128100-cacd-45d2-825d-14fbb7c063f4": {"doc_hash": "4426c9158f81a1d5a8fc551acd88f2805fecea298d9978b5c85cccf0e1c69d78", "ref_doc_id": "1087347988407525377"}, "e785808e-baf9-4a99-bc4d-3fb040ecbbfc": {"doc_hash": "440f69bde2a5652f9ff8b32d455beea4a76aa40bf26619a1efc5aeb8b6f0e9fd", "ref_doc_id": "1087348527635644417"}, "4de0b387-b0cd-4384-bd78-1a8886dbd5dd": {"doc_hash": "6e20e4cf2f13999d9b0017c1e26542b8f23ed240f6db2f8e0dedd3f0f607ed63", "ref_doc_id": "1087364107654680668"}, "89cf293c-86b4-4b0b-aa4c-b867f62ee531": {"doc_hash": "5cb0b22647fdce9495037152ffaf5acd7a933d10771b46b1360be35c87dfad93", "ref_doc_id": "1087412205156303019"}, "bdf522cf-aacc-4652-afe0-2421e6b4f8a7": {"doc_hash": "1a579d90a84ad8517d3a6fb5b1f8108412f3e3b15debc3af2fd35a23c28dda7b", "ref_doc_id": "1087415605101084682"}, "65ea30bc-99ef-4875-85d8-3787c7f94a9d": {"doc_hash": "4d16e880528a03da9385aa6d03c9cadfe40024db46453fda60dedfc43002b36d", "ref_doc_id": "1087440937623490692"}, "0f87aa93-97e7-4e0a-973a-f30eb2e3b98c": {"doc_hash": "de666b668cc68d22f3ae096cf23185e724536148c0568d6422fc0fdd813f5bdb", "ref_doc_id": "1087444022911578142"}, "a9ba1d6d-3ae4-430d-8ed9-16979f8a329c": {"doc_hash": "1f27296a3b6a564a0f6a13b5d3581aa423dec74ead6cfa6e7494c36fc272b664", "ref_doc_id": "1087504177825067078"}, "5856bed4-555e-4e93-bce9-e8d55522a692": {"doc_hash": "8d3029a06f5aa077ea7a8d33fae32af29b499557a120b9d407c0a7f42d355e13", "ref_doc_id": "1087509749517533204"}, "69c13501-08fd-4614-a998-c713ba4a3a65": {"doc_hash": "c73eb638381691f5dbc2aeab8957249576ecddc33ecbe19da9ecb73381fed06a", "ref_doc_id": "1087590022074601543"}, "ae5eb307-d501-4572-a675-515c6f3007de": {"doc_hash": "0a46ba2e2c64f5a7d1fe3eb9a137bc04f8e8e8ad979c85f8d39b3da8165b0cc7", "ref_doc_id": "1087600298274586755"}, "1a4726e5-9e53-438c-a530-ee73d58557e9": {"doc_hash": "8dd61f29a9216e33cd920a34e6bb4e581b0bb2dc2e76fe4a40a0f099b08afa4f", "ref_doc_id": "1087634790888509500"}, "c161bc68-8601-43a7-a9bf-70fee088e4ef": {"doc_hash": "c6df85e979fd599f048d8cb744e14e78dbcf57d5adcd15322861efb41f87f164", "ref_doc_id": "1087671852622688266"}, "4ec3bbba-fbd1-4ad2-970d-f2dbe6022614": {"doc_hash": "403e36e67a4d49c515b341277e020cc76ed177112466d0cb8b6a585f7c8299b5", "ref_doc_id": "1087721537827786772"}, "c0c9d527-3c43-4ae4-971a-fe92e4a1a5ca": {"doc_hash": "1e05acddaf2e89ec865661458274c8051786c310aeb8ad5859ef51002a7f58ae", "ref_doc_id": "1087734157083418634"}, "d3bfa49e-528e-41c3-880f-62d4cc2fcda1": {"doc_hash": "8caef50c3d8781e662ef4360789282a16d9cda48802910f503871299038a1039", "ref_doc_id": "1087737128148009042"}, "c61193f5-feaf-48ab-99c0-1f6bb8fbc37b": {"doc_hash": "5301ee0edc2b5aff75fbd398226980a04de312ff7cfeb9b75fd9291bdee9ef86", "ref_doc_id": "1087785559646290040"}, "e2a41294-93e2-4404-b874-26f107af42f8": {"doc_hash": "74e84dcfb696e395bb1556dbe8b1ed673a7d7ba587aea877bc9732bf15a7678f", "ref_doc_id": "1087789607195791511"}, "57808c3d-e571-4a31-bb77-e62053fccea8": {"doc_hash": "2ee59b15939b764225b613cd09a3336e13293e281ac38cc57c0ce83ba2084d24", "ref_doc_id": "1087800655470678066"}, "3d97c0bf-3b24-41ee-b246-cebbc5f13ece": {"doc_hash": "abc5c8a046bebd8ffa0bc4ea6c0e97f313211f189426961bce15cde7d113fc60", "ref_doc_id": "1087835701732720820"}, "66e78ce3-c200-485d-9ed6-eb7614eb169e": {"doc_hash": "d75f3b6a5d6579f9e3534cfb1c3c7b51e00fd46d6e6d2c677476b3d284e84184", "ref_doc_id": "1087876152611315742"}, "8dfa093b-9d7c-4bdb-b7e6-bd511cd5fd4f": {"doc_hash": "f7dc358738052a0d191d45a95946e9787b39b585ac655a341c1ade8356b25a0e", "ref_doc_id": "1087968569729486868"}, "1b180a0b-ee34-46d1-a3a7-d5324d33f579": {"doc_hash": "8333df2983cf346e69fd72c0cd21181e4021a286ca7bcd4a1268465ef946343f", "ref_doc_id": "1088016711845957653"}, "862513ff-c8ac-46bb-b900-63299b94f53b": {"doc_hash": "c49dcc0241cafba39a111c1ba5c7acfcd00e3b242d99bbad95f74a2e3c48464c", "ref_doc_id": "1088081015639126096"}, "1a05ed9c-a6e4-4d87-a735-073a7b64b364": {"doc_hash": "33a9b9eb41986e19f938adbc60bda64418d73e0a59c54422f28174fe34e92f6d", "ref_doc_id": "1088163751502561302"}, "44cd3754-3e07-497a-a1f1-dfcc59a3080c": {"doc_hash": "c7ebbcbfac766bb0cc4a465083d3096d1c1326ef25f4cb4c130a947d25c8cea6", "ref_doc_id": "1088164500206800936"}, "9252f4d7-cf36-4677-8e9d-77469bd3b115": {"doc_hash": "61a473c80ca69e9a4ed218ee16f38da9b37b2f3089215ee61e8d2749b37abe8e", "ref_doc_id": "1088217325221728337"}, "827ad132-e465-4d67-88e1-aa2a6e74c1d4": {"doc_hash": "05292c6407a18432d1baebac28ec37e7bc34a5f44f30e490f9dd0f1d875b40c4", "ref_doc_id": "1088220601140924536"}, "74f4e6d6-3f01-4c66-92fb-60e6eb22f529": {"doc_hash": "0504e567f61a0760dd9f2e8817849c55e210b5b782f46c8af83d745a47515118", "ref_doc_id": "1088276920447270992"}, "cca78525-8ee5-427a-9cf9-ffd96090d63d": {"doc_hash": "5e8bd19faa90b4b7c23b08b9942071042b56d7d25bb9e079c677bef929a262c1", "ref_doc_id": "1088280495785254972"}, "e263632f-6cb8-475f-86a9-c257d6f91c02": {"doc_hash": "fcab0053c9e36b9f2b64e349fbc382d687e60fdf1958cc4dd3fdfdbed4873df0", "ref_doc_id": "1088421061298769970"}, "77b6fe7a-1d07-4986-8abb-a45901b684cb": {"doc_hash": "8d45694ae6f1f7cb435df95a0011022f3912b5a70ae210f5fd28111b9483540b", "ref_doc_id": "1088444181753630780"}, "7beaf66e-235d-4e49-bf72-7369c7cb6219": {"doc_hash": "a09673b0aee6c7d7dffc297c443e159815f21cb1630a86f79343663163ab437f", "ref_doc_id": "1088480785574662275"}, "34c8c148-399d-4e3e-9aaf-7ddec7ab332d": {"doc_hash": "835417aa099828a59e23aa6a01d135bd80437fa1e3bdbf10b69b26066b9c5062", "ref_doc_id": "1088481956255240192"}, "92b3817d-376b-47f7-b233-9b476efed0d4": {"doc_hash": "f149b94f0c870f00abf2f26ad8832507e36a6b81d483af8ec7ac11153b89b25f", "ref_doc_id": "1088494981565661244"}, "42a4ee59-31b3-49f0-b8eb-530c1da671b4": {"doc_hash": "7192575274e0c10663d1a4ef193c0dbfeddbf0bbfb1ec8856fc7c42d3fd3f962", "ref_doc_id": "1088502513503850658"}, "561cbe2c-7aac-414d-ae6b-9905d6f1fa0a": {"doc_hash": "1b8737edca1b1cd448ce910b7d32097f4be5d672c72fe497d83fbd51a09dc9c4", "ref_doc_id": "1088534046381969528"}, "2fd9ecc9-56a8-4cbf-9785-92062fbcaa4b": {"doc_hash": "6b780c1dae60b572197efbbab0d924e55b5f2ee89b4f1150404398d17a0ea6d9", "ref_doc_id": "1088552607083143299"}, "b77a548f-3588-4d46-8fb6-0a494cc91c9f": {"doc_hash": "418b91e839c1c25663667c91e084a8b727bba1a497fca1c3ed2b5779280ad2ee", "ref_doc_id": "1088564751266750505"}, "679d034e-0903-4570-bffb-e6aaed46634f": {"doc_hash": "4c34cdddc205bcc1c06a124bbb0523f3dec3006f976d8f49820bffb5a7a91392", "ref_doc_id": "1088637858186809565"}, "1498f68d-fc81-4900-be41-70ff2c5c3d74": {"doc_hash": "5e7559d12c3c1e1d99172bd24627da55a89b00b21dbf59d5d041a13a87784a72", "ref_doc_id": "1088730842198712391"}, "9b68a1f9-0523-4600-b726-8b1ee85f6709": {"doc_hash": "a4445546ad9369ae501eda65ca271689f484f0fe74c9ecd7dd6cc7b90567a3f9", "ref_doc_id": "1088737463847108619"}, "004d8c18-6b0b-4712-b3ee-ec308e608e1d": {"doc_hash": "a7da7dba53f1b7a1be77ef9c11501ac7913c46474569dd1bdd998860d1d97581", "ref_doc_id": "1088754575323955200"}, "df144d32-ebe9-41c6-9005-396fee22142a": {"doc_hash": "1f7157ed968a2415fcd9b8607fa722958c7b17bbbf8198534e52b636b325a83e", "ref_doc_id": "1088764538482085949"}, "5bc76c7b-974f-45b8-99f6-0d82e521fbf4": {"doc_hash": "b1f1e4748cf58e669bf68ed0ddc684815c9b0605192717fed52ad47c12527bc6", "ref_doc_id": "1088890651850055862"}, "ca3fef25-e7be-41d0-9802-c15c3e343ed1": {"doc_hash": "932064abef80e56dcaac20b3fba2d83cb1b1faf47950eabdc1965d733524507e", "ref_doc_id": "1088893005001412658"}, "81c6d64a-4c90-4f66-85db-4b1a311d0220": {"doc_hash": "bec45741756756c7251941f32d33910cde71b6f66abf09b679c164ac64c279bc", "ref_doc_id": "1088893847720960020"}, "6148e013-040a-4b02-8954-0943d3f71bfe": {"doc_hash": "85fce7572d93e8b88e39c44c25570ddf7745f29cea6d9ec0adb2da60a3b87454", "ref_doc_id": "1088947642840649868"}, "8ede471c-c93f-4280-bd69-924928f4825b": {"doc_hash": "d6557cfe425706ad6663ff3b00c3fefc92619b7354d8d5f6e58362e4d4fccd2a", "ref_doc_id": "1089063519749689426"}, "69c44bc0-fa21-4e0d-8ab2-26566281f050": {"doc_hash": "db03b1de92b15fa4707e8aae7d9c8d639a3750e0f5ef567926e7440ff9f34092", "ref_doc_id": "1089198484638404638"}, "7cf3439c-9bed-4ed0-97d4-511bce841f20": {"doc_hash": "4ce8302427ad1b5667227c3131293f8e516aaed2bb9d805433a8bac2161dd3d7", "ref_doc_id": "1089229932586074152"}, "0fee8329-ec17-48c0-85b0-4e4c77a10984": {"doc_hash": "b3b25a3922c756dfca5513d8aa38c52c77be059aea73536d57e2db2655c38f5a", "ref_doc_id": "1089248211698466988"}, "7c4029e4-1546-463d-af23-654502ba2317": {"doc_hash": "c6a24834f1552b9f357a4e2c68cfee963f364b80b6ab4d4738a66c3ef3c6b7f2", "ref_doc_id": "1089357972657934336"}, "07237f79-4577-40b0-8dfb-13b3317de973": {"doc_hash": "cdfa39cee440f098bad187b9ec55aa7920459ca576c4794d28ebcebcae72191c", "ref_doc_id": "1089517412078071810"}, "df74cf37-8afa-4b48-a010-e727cc9fb0c8": {"doc_hash": "afe7efe48fce7f410fa9dc1c6cb5a5077e101525201d44c92f4c00a7ae1621c5", "ref_doc_id": "1089720306886770709"}, "de91d015-dc00-4ad7-8307-efc887bb3f52": {"doc_hash": "37df337f95207d6d8bebd326722649c6b108aff1d8c9937a3a6a06f6d176f507", "ref_doc_id": "1089881201684262912"}, "65f20ce0-da3b-4030-a234-52b54c75dd5e": {"doc_hash": "121b49083ed6e40862ab339eb8612bb4789043c404ef3fdbdd4aed5040ecfa47", "ref_doc_id": "1089916275184111667"}, "65eb35b0-224f-4cab-b3ca-b21b3f3ef99c": {"doc_hash": "f6ba552bfe22577bec460be402f5ca3beced95a0d158fb36ebfe23a14b5c60c5", "ref_doc_id": "1090035927159681144"}, "c2b2c48b-0784-48da-9a18-7b4efc989fac": {"doc_hash": "790116042f8841c0d62a8a9c459b0296db6bb14c838dbb207a3d469dbc0438b5", "ref_doc_id": "1090043846454423654"}, "10a0eb7c-3832-4455-a240-531acabdeae5": {"doc_hash": "68da43dce1a236cee4dc28f6b88df492d02fbf4ebc76b6163301dd7bf05d7582", "ref_doc_id": "1090046627449946122"}, "b29ef19f-fb9f-49e9-9ce9-088025126b4f": {"doc_hash": "3b6a8e627270028867c31df7afb24a60c8cf0ce1d47e6958b41c3af078597d9e", "ref_doc_id": "1090060277485158480"}, "43ad5437-a27f-42d9-9998-7fb37b16eb59": {"doc_hash": "406a245fdb8752f17f9e960bc7a114214a4a45b0a2106d46c6c74f1bdbb38507", "ref_doc_id": "1090159696981262396"}, "8270107b-e4b1-4545-9d7b-2b74705d1971": {"doc_hash": "1fcfbb66c83573f46cb7eac17aa0439f297d3568b69fec7ffafb0860fff0e50d", "ref_doc_id": "1090383537481469972"}, "116171ea-821a-43d3-8cdd-a16a4b829518": {"doc_hash": "13ce0ab58697e79191b9d01cdd4c9ef78c586478e87ab250e2acfa4ab3ede223", "ref_doc_id": "1090384679481376809"}, "757f5fbd-c3ef-4d76-bc6a-c8b3864bdf5c": {"doc_hash": "4182cb538612e1e7b815432eed3ffc679d9d509cf37e52f8f2664c5257f92afb", "ref_doc_id": "1090384767528206408"}, "bcd1f529-ea1a-4e45-ac4e-787864d69291": {"doc_hash": "0e5ba4014cbeb7ff0f83e659fda792601c56e380fab1260da580068c5649d78a", "ref_doc_id": "1090430513560424488"}, "e7f11f49-3e1c-4723-974a-23bade999320": {"doc_hash": "9a511cb56cc94cd77d7dfed5ef47f30daac7801eacb6724cddb525861aad26ed", "ref_doc_id": "1090454778326298676"}, "430d4b2a-5e3f-4c04-810c-8c64ed144aec": {"doc_hash": "c48cf0d2731d4782821bb0165cfff0e0b2a5d5e90655f23b3ef09d5983cd7d11", "ref_doc_id": "1090479032686104657"}, "5b1f24f0-12ae-4c90-b5bc-241dedbefbad": {"doc_hash": "9d37c5c639583510f267a25a0a15e5391c056d67c9d3a0e16bcda4a0268b83ff", "ref_doc_id": "1090520284672565268"}, "39252a67-5f83-45a7-a74f-1fd3949749a0": {"doc_hash": "d13365d173b0c39a26fe4c110dd8a9f46d62f85e9b59e4f45756e19b7e25e408", "ref_doc_id": "1090552847650803723"}, "dd37d415-4ef8-4011-a252-245accb72dbc": {"doc_hash": "b6cf4ffbe35a18e11ff5e2fcb328e5ee35889867d9fd870823a9eee08e85710a", "ref_doc_id": "1090574437205676112"}, "8b402ba4-ca14-418a-9323-02d395fe05df": {"doc_hash": "a8d3d97c1ef171e47ae66ce29a392dbe40661990ecd8b2c684de739a47dda72e", "ref_doc_id": "1090580412138532894"}, "84328161-9cbe-4657-b8fe-8d88899a7a05": {"doc_hash": "39047dada7aafb4302055b86a1bd6d2e0eeaf73fba4d78c3c1668a7d726cb8dd", "ref_doc_id": "1090617709466767431"}, "35a6051e-800d-482a-ad34-edfe71687db2": {"doc_hash": "fc0021f8b93ac81016e8c8e398729269a9702d376abed257c7506b840ca00ada", "ref_doc_id": "1090633302773346344"}, "1bae8a02-e584-4e38-bc90-9d5a9ecb9147": {"doc_hash": "2f7c8a80ea53af89ed758201cf0c9fe94e8688080e50f7b222c88cb88f91c55f", "ref_doc_id": "1090646705361399848"}, "1bb3bb13-bb81-4d0a-b946-9c7d860f8a41": {"doc_hash": "988ff381dca60e7e0012257bd0451d36aa9f9f339d714801795ebc27614f7760", "ref_doc_id": "1090650412870271077"}, "b78aae49-25ab-4ec2-b342-1020af9c6a6b": {"doc_hash": "9247dfe274b3997e657c9b08996ad651182e78469c0e6dc3bd4574ec635b4fa1", "ref_doc_id": "1090670459168759884"}, "28a191da-6fa7-47e4-b711-5bfebc4fcecb": {"doc_hash": "fb6aeeb3d3472bca35dfed205c7bed82b38b6e8febe973d073b6275b11f6d517", "ref_doc_id": "1090723822308704357"}, "498adce6-6a74-4cae-8a6e-098c2ec6292b": {"doc_hash": "7427d62dacc00d9165cd9f322ae633fc7c7f82341de073f76104251e96a1f2d9", "ref_doc_id": "1090740288919720027"}, "6c066305-35de-4b85-822e-5614938d29a3": {"doc_hash": "4b381ba9a97285b7f6011f8d7cd84c8bc000ecd5ff87cefd730c880ae303167e", "ref_doc_id": "1090745720899899392"}, "c487e9f7-7e04-44cd-8ee0-49ab24844519": {"doc_hash": "ec60710ae282177229b4dc0f68b8ef5ba928018d7878dfd4e2b542801444452d", "ref_doc_id": "1090777458036461699"}, "3f2197f3-70db-41d6-8eed-d78ff8033492": {"doc_hash": "08b72b1f1afb6c517d08901199ce9ee0f1e722a6b6503cabd46d916ca1a91845", "ref_doc_id": "1090810973587247195"}, "7fa87b1c-bd54-4266-88fc-81e37e41ea09": {"doc_hash": "cadf5d4e340d98e3b8ba38afbb3619248f7a218cf2ea5395571eea720479235d", "ref_doc_id": "1090854990714785862"}, "c53d6a87-8ca6-4663-aaa8-ccd46b1cb6d1": {"doc_hash": "9ce3778f30d74c84b163a617e90506bb7e9fc2869db469187081e0fa7d30e0cd", "ref_doc_id": "1090871529933381644"}, "9805dd95-c671-4481-b552-d94cf1a5e6e0": {"doc_hash": "9491b5266ed2c94d7399400cb0ee023e63547d6a19c19950fedfe878c68b23af", "ref_doc_id": "1090965285374275684"}, "e70c43b9-47e5-46b3-b56a-b5ad25de6efe": {"doc_hash": "199a1b342e3e8f2becd0c4b09ac0e81a5ee5f66a360f07bdd42cc139a66adea2", "ref_doc_id": "1091013188402810881"}, "ccf83673-acb3-43d3-9fd5-2b2c454b224d": {"doc_hash": "90042481142b3bf9ad94fbb8dcca1a58614351a378595763698d17618feda809", "ref_doc_id": "1091044468775473152"}, "a895a551-0dd4-45f7-8a4a-5e45319be559": {"doc_hash": "653d5dba8d91b882444779aeea05913c6709fa6d201695f9a60e392fc8c02b13", "ref_doc_id": "1091064499739566130"}, "20029004-5f43-4f7d-8f1a-d1937aaf9f3c": {"doc_hash": "2da3c2f53ddc6281d8829a06553547c6823142b6daa94f101a609391ec6ba272", "ref_doc_id": "1091088166414463057"}, "5cae747e-e88f-4be3-8474-5a2631beedd8": {"doc_hash": "565df0f551718959d830610564bb2d5b24529ca48f7a3ae344a8084fe0e8fbe8", "ref_doc_id": "1091220365340069938"}, "440c1163-fae8-4201-994f-e83229850c8a": {"doc_hash": "d72f4fe3c2130e292ee3062dff787aad7dd69fa888009e7198e365d96f509f70", "ref_doc_id": "1091244336534003732"}, "60059c90-1784-4d85-9c55-46a496df13b8": {"doc_hash": "52d1d14da27c6ab243149e59f2046f17fa3c0eeb5552ab91d7e53c5517f5ac6a", "ref_doc_id": "1091260944463691797"}, "366cf2b7-b837-4da5-85fe-78da23eaba1c": {"doc_hash": "980dbb4b78beb19f5a01c9775a2a664a9824fc49ec4aa73c5a2c132c8f3bdc36", "ref_doc_id": "1091276055035269151"}, "80ba884e-dc74-47e7-8df5-a2f9bdd09b96": {"doc_hash": "bb1cf9711c9837f5c48330fbadeb8aa30e11f164e5558d0e5d8b6756058d00a3", "ref_doc_id": "1091279157448691761"}, "353edd79-54da-4357-bff8-9184c5e0cd67": {"doc_hash": "85f38d4f98c3190c2521d5bb3de47e1c8cd5254916a0e7333a6d38eab95556a2", "ref_doc_id": "1091298907583160321"}, "ccb1ac27-2683-4f31-bb62-6cbff4e71616": {"doc_hash": "ef0517c558ebc363f851fca2aba35a1e203e4a4c8e2bc9bf964b70cd8b92d713", "ref_doc_id": "1091326971163705406"}, "c9beeb59-68f0-4677-94af-072c5d15c426": {"doc_hash": "61a794fb800521149d1d20e41609d93ebf7cc9720cef49ac7fe768bf773efc81", "ref_doc_id": "1091540691269722144"}, "b36f368f-0220-457d-9096-d36a6b46d198": {"doc_hash": "27a04b0835b359fdd39aaa83948813fef53f0533c34aed31db7f71a29338b89c", "ref_doc_id": "1091692373328810124"}, "3f099145-1db9-4dc5-812c-7b9817133c8f": {"doc_hash": "cf5c3f3dcad444775ca22a8463cff657af42a9f65fb698cbb7f9a1f43e556951", "ref_doc_id": "1092086171120705676"}, "d01604d1-67e5-4c5b-bb19-2f6ef8fef21b": {"doc_hash": "b859480aede20ead96c5c4204e9e7cee726cc044594afd340c44a3df421c63d7", "ref_doc_id": "1092200001293275186"}, "5fa4deef-cf49-4894-b3c8-504cece0181e": {"doc_hash": "09642c9bed4326a439814a89d3bb4a6e2e9b2d87b13a56ba28766e112fa87307", "ref_doc_id": "1092242741062275152"}, "182cc68c-c562-4e9a-895b-16cbc08a0d94": {"doc_hash": "cbc9a7bf16ba2691e170c13dbc3206706c8a311ce48c8599dcfeeeb9c92c1a3b", "ref_doc_id": "1092432032400945182"}, "d6d60286-2853-44e8-84d7-f1aad8b953a4": {"doc_hash": "b192eb3e08285a4ccd63b14715f74f9ce052168ea94c9a35ba7ab1edc71bda69", "ref_doc_id": "1092487133073248276"}, "a7301839-d57f-4ac7-a063-d0108d594c5d": {"doc_hash": "a5bdb6f7477bc10ca20a07c4bf11b116e1963d04156f843e8e239d0f1f329dce", "ref_doc_id": "1092519759309967390"}, "a9995fef-602e-4da3-be69-a86c4b9dc09b": {"doc_hash": "ec57211fac11be19c23de60974d4d5f2938338c0cc8f45201bf387f53fd1ef9c", "ref_doc_id": "1092546886902222869"}, "46e24a11-b390-41cf-8b07-fedc9736ea0b": {"doc_hash": "dfa2fb99a89ef619afeb9ff7d24bdf1dcc8182ecf394caa19d4cb0ed9cca90a0", "ref_doc_id": "1092581722455023716"}, "8136e108-6d78-4a22-9f7b-9b05008c4e91": {"doc_hash": "3d85c690adff54f3c5d523df38e76e4f646ad7abf9014d4a108a2be8901a9794", "ref_doc_id": "1092605765111521310"}, "46df8e3d-994f-4ffe-a91b-e6c9d76ab591": {"doc_hash": "820788831d56b393b9612079dd6493f00b3905509ed1c1d6ea9eabc35dbce292", "ref_doc_id": "1092607359420993556"}, "00d165cd-5f7e-4796-82f9-880495030db9": {"doc_hash": "ce38704ed3bfe5f52799f9e89c36ba8d58f99c2efd0bfd74a79cda46bdf7a391", "ref_doc_id": "1092692065361592391"}, "e16eb40f-9444-48db-8042-470dae7f9072": {"doc_hash": "148b5130a25b60786f1f67aa9855226d185d7ebcf9dd2564ee540cd83779beb6", "ref_doc_id": "1092711792414818354"}, "e0742839-4e3a-4531-8fd5-beb0527d9785": {"doc_hash": "230f941915945c965e06fe9a9839247c57eb409354f28245ccb0cbaea63fb2d6", "ref_doc_id": "1092745879624110100"}, "3c991259-a165-4907-a976-564114793cd5": {"doc_hash": "ade92fb798781da48846ccb5ee36dc845dbc92c8ec870cdb310223b9dd548e34", "ref_doc_id": "1092862292816822372"}, "1960a5c7-c7e8-4907-a4b8-fe7d8172b9d0": {"doc_hash": "b392365127eba9b66ed1913bbd9164767a891b8631b6db088045383f38e2bf0d", "ref_doc_id": "1092887140188303380"}, "20067f87-cd3b-4ef4-b343-3ce33993b48c": {"doc_hash": "1c0969d8ac91ee0b9c635f5d279dccf9486bd9707bc8da94b28a950ba0bd8b25", "ref_doc_id": "1092955994012790896"}, "a459fc69-1ea7-4645-b83f-7ce3a2ccf585": {"doc_hash": "d03ac32c4018e38d8ad07d79df0c3dcb3506f007286687598e2dfe2411c55551", "ref_doc_id": "1092963511858122783"}, "1837c80f-4b71-497a-b062-ee1a8c08753c": {"doc_hash": "54fc5cb8560bfddf0ff107ef4093f68c8ac894a028f182afeb5dc14e7f0fa3a0", "ref_doc_id": "1093140563555008574"}, "86e9c8a4-4f15-4179-b22d-25fc419316e4": {"doc_hash": "6c1ba140c5d1c56ba13757155b4a246fd92282089b31ed0e7a20c4b090f29152", "ref_doc_id": "1093147582647251055"}, "f9ec443c-86e6-444e-bb5d-c9cbf685ad1c": {"doc_hash": "2bdeb127bfd4f05be36afc2e7c8f57f430d14f23ac258cff5187ebb790c2cab8", "ref_doc_id": "1093205174727757844"}, "2337e002-17b2-4b9a-8ad3-6c53e0ff1c5f": {"doc_hash": "86df7b603fb80e655a0999d3b7f36eda9413f30d6aee0fa927130d1e9235ba59", "ref_doc_id": "1093208273219506176"}, "211dbb7f-5adf-47ed-bd3d-f64b7667f3fc": {"doc_hash": "32b6e3402a2d468a4538ffe24977c7d544e942318f6b666c80fad8303ea584f8", "ref_doc_id": "1093262299407597648"}, "d385a8be-e56b-4cb5-855d-378db20307e9": {"doc_hash": "ec4b3dbdd1fbb198319c45cad9528d552821509c4028530021bec0c0a36076be", "ref_doc_id": "1093321690337005578"}, "22908098-1c14-4f6a-9f8c-fdca6e7e3bb4": {"doc_hash": "6e208d9d0f64a7bb78f392827ed6e68e9290eacb0d27e5bc50df649dbb645e35", "ref_doc_id": "1093344546752036905"}, "ee3745a0-a93c-400c-9c25-e494f82f5563": {"doc_hash": "ac732df9638daa74101a5c412654d7db721995b2d27b69d85ef0980a802a87df", "ref_doc_id": "1093463314719322194"}, "367caa42-696a-4d28-8f6a-bd487491d6d7": {"doc_hash": "30f741653913ac449a1f5c63b7c625ffcd8daae50e8c5984b135b89d6fc03446", "ref_doc_id": "1093501820900483214"}, "d850c8b3-045b-43ad-a7c8-2c75fc26c12d": {"doc_hash": "cbd4f8c2a4033d80119c963a38a48cde16d76bbec418c79d31c4f79016969b84", "ref_doc_id": "1093558597876723753"}, "b0c1171d-38d1-43c9-86bd-5b483e34656b": {"doc_hash": "09e17221868a6c24831f23ec3d13d78793863d40e38c37d154cd79df8b714742", "ref_doc_id": "1093571154175869028"}, "f38d7bdc-ee85-4b15-b4a7-9e36c307386f": {"doc_hash": "3af048d3a1bea60f615d54c8c53166142c36abab4a9ac377c75a5ac3696e7f38", "ref_doc_id": "1093626809662320691"}, "3fc24bbd-b4d3-4967-a5ba-fc6860e56a81": {"doc_hash": "edd4382329c30461e7a8a3d72e361bcd4419821fdefb2f85c155c10efc9cc818", "ref_doc_id": "1093627048301436969"}, "ddc2d406-1a6b-43e5-ac56-cf193b391468": {"doc_hash": "95e7d48596a0bc1fde4f6364d401c46549d53ccc0e51524e5bdb47ed8035d11e", "ref_doc_id": "1093627143541506078"}, "fbfe3953-7f78-4404-bc19-159f5221b507": {"doc_hash": "265475b38c3c9588f5b96e2249df1fd22d3e603d42de1d8c987ae0af73600125", "ref_doc_id": "1093627256368275466"}, "5e47e59c-108c-4716-98bc-23068fb6b3b9": {"doc_hash": "76c2b8c531ca1d8a2e4a18a4e8f6261929a151b443c39927aa9c4a2de5f50f33", "ref_doc_id": "1093635993099313162"}, "db2dcf89-91b0-495a-b261-af329051e4ff": {"doc_hash": "5f73bd486c9f998199764c1a72aca8105a5d5c219728c02b31ae9d91c786f143", "ref_doc_id": "1093638449862553642"}, "45ab52f3-f98b-4ad2-9b0f-c9e29ebf6149": {"doc_hash": "b4c9ed22f7d08a9eb606939fc4c513aa2545d7879c3cad9b769949d73c6f6a01", "ref_doc_id": "1093642280100962324"}, "310677ff-91ea-43b9-8c52-5144ba713aa2": {"doc_hash": "85af4e0a13c50b26c027a594196cc15864035539c887bd1f41c6624abc07d9a3", "ref_doc_id": "1093678160790425610"}, "ec46d4d8-20a2-4dd1-98d1-ccf5ad7e8078": {"doc_hash": "c306bd7eb7b2f97ae201bdde98d81be2ee2b8663388fec41ea0c08e989ac221c", "ref_doc_id": "1093679900700979291"}, "6428e045-1cc2-4e4e-9226-3abcbd844932": {"doc_hash": "2dd4aca620307af40d54deacf3ce9f4ac66c8656fb9b92dca93703a1bf688d14", "ref_doc_id": "1093687021689638932"}, "7c454d75-9f61-43b2-ae4c-4ef662070f53": {"doc_hash": "3ae3cb2207ca429fdcca2bc6caf30fa6651e635ef3a0d7a75ad3e110bd848289", "ref_doc_id": "1093691684228964383"}, "598aa715-08b8-4aef-b5d8-c4d19e30c657": {"doc_hash": "8f5d790673a000c59e446fad12aa2e802580f03db23b94ab3bc7987018a9ab6c", "ref_doc_id": "1093719425837973564"}, "ad481aba-863d-45a6-ab5e-16312be3f652": {"doc_hash": "09d8d1f9697721243f874a3eaa0421f64c1218d39728ff90aee2931e9ae6ef3c", "ref_doc_id": "1093723232504381571"}, "1862abac-abaa-45ef-8b5f-cb73ab2a11ac": {"doc_hash": "e5aa49b789f0f4f8c0b0a9c740183fc48386cd7aa3601bde0099e58e2dac6a90", "ref_doc_id": "1093741472983035924"}, "42d0faec-9ff6-43bd-9612-c499483f8ce4": {"doc_hash": "10e6837eee9192f6505733bd75577fce4b1ce809da6d1a9bddbb8ea42323b86a", "ref_doc_id": "1093838805519315075"}, "7dae1b27-3643-431a-8ec2-2d34bd05988a": {"doc_hash": "cc853ab5d669b0e9bb2624a3ebae556569a95cc9fe0dd7492c6a9cf76c030b30", "ref_doc_id": "1093841749966860309"}, "f6fdfa10-7c9a-4b28-aaec-b7541a852685": {"doc_hash": "910bd2cc67635b21ed4a02993b6d182d44870954b20d7219af8ffd9c07f6317f", "ref_doc_id": "1093845630532730930"}, "213e52e2-97d6-4884-8be4-99dd00d9aab3": {"doc_hash": "24f5bbaa603ab6f73e2879ba78c2afff398977b507cbe45e866ea4ddb74a19ae", "ref_doc_id": "1093872829684011088"}, "982941d5-515d-4b80-ac3b-419d2ea05db7": {"doc_hash": "a8a53002fdc6d7d3d7d917808246ef7c858eac823f9154b7c15c1a47c4c634da", "ref_doc_id": "1093874705074769940"}, "86343f41-d066-4e93-a498-9f54ebdf2a58": {"doc_hash": "4ee8ef9bef687e19e3f6f381d0ce9abed6f2ad72b42bb5e12011e22d707f739c", "ref_doc_id": "1093887885796720660"}, "83a85c95-a802-4c2d-9477-ae712d76c511": {"doc_hash": "3eb44c4abe569afa0fe2f79c3735c160bea44c8a092d7bec2bb2fbf31b54be37", "ref_doc_id": "1093917687601709136"}, "0245700c-ae3b-4d31-8b27-280f39eac514": {"doc_hash": "0680d876840074ba7b0c50e7810690fa73312a5711e10075a939b000f87b78cd", "ref_doc_id": "1093924553522167958"}, "87753970-f7da-481f-8f1a-faa28e1b3a61": {"doc_hash": "13f35579fa4b053c366559018b8e107e83fa3090d4d587eba74810494bbb5311", "ref_doc_id": "1093929899774984293"}, "06d413b1-e1cd-4f27-b3e9-56b7653ce409": {"doc_hash": "97d78fc3e9fd37ed9fafcecdb580d0a067ba686a00330448307e1e9d0aca6da3", "ref_doc_id": "1093941566772625529"}, "37e3243a-6693-4187-893f-750f9f11d0d4": {"doc_hash": "451e5ebab9d5c70f2506a5ac62b119ddb2ad117f18e6ff6c09dc7a82702643b8", "ref_doc_id": "1093942201496637501"}, "537a38f3-9355-44e5-8db9-5096e7cc3b79": {"doc_hash": "96d93bdc8708535d87858f7096c93907919be056c2623cb1e3a16eadd40ce554", "ref_doc_id": "1093946869664727110"}, "06dfb410-3a8a-4345-a59c-ad06fe797fe8": {"doc_hash": "678a0f01b5a9a2967717d52bf3aaa4272563b6d8d7af9be0027c9ca9fa15cce0", "ref_doc_id": "1093951109493698741"}, "4a93452c-5615-467a-a34d-d5c47f1ae6a6": {"doc_hash": "a3e6ee18e2dfea1666e3559d2bfe630f50bd423efb010847ca13ded11b2e5b60", "ref_doc_id": "1093976288538148956"}, "c1fd45ec-fd17-4701-9cb5-e314b273e539": {"doc_hash": "b23dc64c216fe8a012851dfe04cfb6fbad2d85189966b37abd09dd8bee2d03d6", "ref_doc_id": "1094046570040795227"}, "9a8f690f-959d-4131-ac1b-fefe06158947": {"doc_hash": "70967562c360b8ca8236c9f0ac49f3e9457950401be004f2f309bc2dc29602f9", "ref_doc_id": "1094083038880747540"}, "ede1546b-8526-4bac-ba9a-63b3a1cc5e73": {"doc_hash": "d9f04a4fc8996c3e293a4ca07b2eb7176f06d297d674fee1f259b120ec7a41fd", "ref_doc_id": "1094226388271247370"}, "ac1ef1aa-e3a9-4dad-be07-f130c4404d3e": {"doc_hash": "1d9e340bcdb389f7de47e8ff8af81508f46d0a1b4fd393735b6cd7aa54cd3d05", "ref_doc_id": "1094250026458415124"}, "c10aadab-f8f7-494f-bb99-d718881869d5": {"doc_hash": "8b51e25643fdb2a3cd1c18a939009c40acf7fb0b55f3c4dd0b342e0d34dd2930", "ref_doc_id": "1094413465550074026"}, "a967162d-8922-462d-b3c4-101ca6e4dd3b": {"doc_hash": "af560c186f211d53e75c807b0f2a9879c8e95274e80e2027e7b6f862151e677a", "ref_doc_id": "1094435722498408519"}, "f44a9558-4f3f-4ff3-a552-3e11d9b2a3b8": {"doc_hash": "255ba2c161df60c91d8fd5980b16b130c1da58e981c93f827dcc65d25985417f", "ref_doc_id": "1094669214545084467"}, "e6bdde35-100e-4cd7-af81-c69bc38d9337": {"doc_hash": "e2a693b2e1fc9f4665057a775e48e29eea3b1effeb6983ca937d9948313865e8", "ref_doc_id": "1094672732509176029"}, "b9031c8c-4f3c-45fe-bab0-53233cf19346": {"doc_hash": "9e37af47ede57e0ad24ea1a0d7b5085f0976cee41a24a9e92d1025018e4b8354", "ref_doc_id": "1094673099942801591"}, "7cef5702-1f32-4f42-bf93-a8e47b5b2f7c": {"doc_hash": "c0f2ce7defcf0af0826d073463e0b041b5379c660e7455e1e0dd6121bf80dda5", "ref_doc_id": "1094687962115080392"}, "79e59714-61a5-4117-976c-97071305860d": {"doc_hash": "bfc51fc96f441dc0a88708903fd841e26094c569e5e0bac6bb70f5e437129180", "ref_doc_id": "1094692959884157021"}, "5b4caf6e-3fc7-4304-89d3-983eb7654502": {"doc_hash": "bc48a39e301d556f3b33fd2c090cfa91e5e29632e4b365a4854007bbe771b29e", "ref_doc_id": "1094696941541130302"}, "0c097e89-b809-4860-afb1-be1252eda3c8": {"doc_hash": "2babef5ec9e9507065b15739ced623302c38aee9695b34ba3aff464276c67780", "ref_doc_id": "1094730579116822548"}, "ffb348bf-8dd3-4631-b798-c8ef848b600d": {"doc_hash": "32069e2647ec76f80696fa285078b57fddcb43665f51f8ea720584f644866a5d", "ref_doc_id": "1094748090621239347"}, "23d8bbd5-aee0-458b-b5ae-ddaa9d465c67": {"doc_hash": "15213807c25b1a5a3d07c74f8fc0cab411c5922d9c75a61986210e95451d1792", "ref_doc_id": "1094841164626133022"}, "2674e8ca-ee9b-4f67-a60c-4a3f1600a1c3": {"doc_hash": "573669a291303a1bc89c12767729b1189a9d22a42477f01d46d124f77f658121", "ref_doc_id": "1094849021211836476"}, "8bc7e058-339b-4d86-85c4-bba13de48a07": {"doc_hash": "7fcd87904822585ec099c7270ab3a7face9a360c737ad898ce60c9582574bd19", "ref_doc_id": "1094849110357586090"}, "d381d80f-531a-444f-85cc-8432ce4883ec": {"doc_hash": "807725fd0c684fd13f268d4e68184073ecd974e9df4bb8a5acb58a3d54e140e7", "ref_doc_id": "1094988592159404042"}, "0e1496a1-a762-428b-8d01-8ca5eac468da": {"doc_hash": "5b8f421c4bd8c63d9d575a1b13b514e2611e2e03e22baa242fb8982dc9375fc9", "ref_doc_id": "1095024178597474386"}, "3db0bb35-4746-4f32-93a6-544c737e0c05": {"doc_hash": "e0ffb4889ac7eba72c5cad37dfa59ec8f77019a5697a5f1f209b392296e90032", "ref_doc_id": "1095045798925975613"}, "92dabdfa-058e-439f-88fe-30233074b59e": {"doc_hash": "8691e843222a793c9f6bcc1add8019ecc0fc27f332d56bfeb85a88aea171f32d", "ref_doc_id": "1095062859026792560"}, "8bae67c8-1d8e-4b07-b641-6e58d570d75b": {"doc_hash": "236afe3085fdfea6138d41a663de7f619c091a677d844310e9163f587605981b", "ref_doc_id": "1095077541846462716"}, "5b5592cf-b58e-4f03-9ddf-62ae0e13d456": {"doc_hash": "15943362e8ccc232bdb8439532192512d0c36cdcc1e40fe651719ff3bfd2e0a6", "ref_doc_id": "1095094580929630329"}, "9524fcec-be63-4fce-8c74-a61f2e969ef3": {"doc_hash": "d13de1e3593d872e9af5a83c4daf62e9588a7c6d4337db72862da604edc2daa2", "ref_doc_id": "1095096365459189880"}, "74fa9688-d0d2-4b90-af75-76ee6335536f": {"doc_hash": "3e092894e2baa602321364a6b2f1d0228f4faa4176c7f56b9586620ed4a2895d", "ref_doc_id": "1095146031928328242"}, "ac2972ba-0881-47c2-80a8-45ca8162e698": {"doc_hash": "7b16e0726364f150579d4bb79c99512835c6ed24408105c4e0dcdabf930e068c", "ref_doc_id": "1095162431535317122"}, "1aaa0a55-9bd4-43ad-a86e-51363a5d266f": {"doc_hash": "267699d58faa4e977e5c09eac5669ef018e79f64c302f4bbe5ca98c5145d9b5b", "ref_doc_id": "1095185307453894656"}, "2fd69a8c-00b8-4f01-bf38-6d8383983711": {"doc_hash": "9cd3397b077058601a21f8931ebd1161086a3988e6aed7a6f0f82c4824861bd6", "ref_doc_id": "1095189395369365584"}, "d6e53a25-2719-4f8d-8fe8-cdc505c55424": {"doc_hash": "0395d8263dfd965a9ab37f94452fe8366e9f835eef7bbe021e9ce751fbdef442", "ref_doc_id": "1095196769459118080"}, "ba8309ca-61b2-4426-971a-2aa6721e8db8": {"doc_hash": "bf9f600836e6fa09ca4d8b8fb5e9fc92e329650fe134bb9419dc32915b48ff62", "ref_doc_id": "1095205700164136980"}, "f5c26f20-ef31-44f0-8fd0-752e45444813": {"doc_hash": "f6f60440e8f5def7ccf472291c219b1069eb1c0093c71e71e88662cb1a8a5364", "ref_doc_id": "1095206051877502986"}, "61c9444b-d74f-4008-aedb-c04b6d6b4f7d": {"doc_hash": "0fef77134da050340423ab48fa52d17296f688f2c0883b1430b8320fbb90d73e", "ref_doc_id": "1095211773285650512"}, "f1b9e406-a9ea-4736-aecf-c628bef50aff": {"doc_hash": "4e4c892b0d189a3ca6555a106c1797d026844aba1457329496338f526607daf2", "ref_doc_id": "1095215052803551292"}, "2ad43a27-1382-477d-9113-776b1948ed99": {"doc_hash": "4f9cfe38aa03ab1bed02037879b205d525f46efa0a67229ae817b921229b37b4", "ref_doc_id": "1095215342869037177"}, "84893197-80c6-4fdc-b0ca-4186ed1b9564": {"doc_hash": "5bb305608c92117c4adfbdb52e4476e24fadfde65cbc1e01495983d30d3e4950", "ref_doc_id": "1095236866061643796"}, "88774674-4267-4513-b8f1-113f263a7bd9": {"doc_hash": "9882ac792233adc2c94489b7a3a005edfca4834051c2b72be6c8c93ad5724f87", "ref_doc_id": "1095245753225576538"}, "13f389ab-732b-4868-a668-33ad338783a8": {"doc_hash": "89fef71c116d9fb375eb0921d64378ff03ca143209182c1d30457135a94279d8", "ref_doc_id": "1095271119474401344"}, "ab2e76b5-6c66-4ae1-aaf5-8828e45c735f": {"doc_hash": "0ddc17c188f83d390c749a4f82f7a1872312ff7b4ce4fdcfeef8672e84b4a31b", "ref_doc_id": "1095312415807246496"}, "9309355d-a533-48cf-ba61-92161cb48705": {"doc_hash": "0989e53123c7ee8b9dc66aeb537fc185ed47b12ae5b06cd4f0068ae591955563", "ref_doc_id": "1095314039250374757"}, "00425b4e-42a4-4241-b725-f5a3484241a2": {"doc_hash": "54cd0578a6ba452193cff4513eada5959f570e15e61c50b746ec7e2d955b1d4d", "ref_doc_id": "1095323782228475924"}, "b10278f9-3b5e-4ba0-ae61-a2ac888e8e04": {"doc_hash": "d1887e423609e8ffe8d2ef9323d2bf3532e545e86395ac1fa53529886b9000f8", "ref_doc_id": "1095374029122179174"}, "a24bf793-2b51-4a6d-8836-517c571ffab8": {"doc_hash": "31e0b506d0575032792a1626b62e183c5ee6a6a3d406bbd592af104c254aa765", "ref_doc_id": "1095388609672126524"}, "d0b9405b-367a-4999-87fd-501ef4df14bb": {"doc_hash": "57955edb96e451ee72a36b1c21f6465c0a911371bd87e9d0fdf60427cc06d19e", "ref_doc_id": "1095402192665583656"}, "91a0f10f-46c3-4128-a0a1-d61928046782": {"doc_hash": "5130c127cf8690d7b2774387ac6d68fc7ef81dc7ac333636014153ca1320bcf1", "ref_doc_id": "1095427710710464543"}, "83db2d37-6714-4c8e-b315-1f350d7853d8": {"doc_hash": "91313b3d8d3cd2da280cb82eefbb982d02928dd37a284a0504c0fa727998b400", "ref_doc_id": "1095434229069918350"}, "60ab0005-e3ec-4dec-a93d-df9cd9e56a50": {"doc_hash": "c2bda28bc9d6c86ea98219b92f25970970597b2552f27179d6496bf4398e4b92", "ref_doc_id": "1095446982170001498"}, "037b47f1-13bf-4152-a6cc-d962a1d1ec66": {"doc_hash": "659ac98da9623c6a0c75e09b0a560e3e24a38eeeaf2fcb03ef8eacbe0ecec4ca", "ref_doc_id": "1095453963551260763"}, "2bbc81a7-f545-44ab-b24c-f9fc58758a16": {"doc_hash": "32d22301097bf1589c3c57b3626f3839d583a07f7e1bc08ca38611a60e022a98", "ref_doc_id": "1095456043204624394"}, "203826cd-3009-4583-b166-93fcaa0fd0b8": {"doc_hash": "47c8674e0933bd3fcea08e0534828fbfd34b2849dd8a0ca08c45897e3a959397", "ref_doc_id": "1095457000663568474"}, "20d95ffe-ba54-4593-9eb5-159c144f339a": {"doc_hash": "828818ca90f2a7d2688ba0ef1d20f69e024f95f3c50c1b75d638ef3beaed045b", "ref_doc_id": "1095468224109367437"}, "8b995fe7-9f88-47f9-8950-c675fcfebb82": {"doc_hash": "722821f77c98c257b0b5f68cf34a60e7c43a6931f1109df41effeb68d472f71d", "ref_doc_id": "1095494616867930223"}, "2c4861e0-9bab-4580-9488-79ce0cb082d3": {"doc_hash": "b6c89451d64e288b4c6e57a02a0e6cdb5aa23c4369df2d93e9890aee53029c79", "ref_doc_id": "1095524477305094184"}, "defe5a4a-60c3-4943-849c-9d2f24f5129b": {"doc_hash": "c849369beb741b88e6087ed7e4313f26c07a6dcaf4164e0230ac95971055a8ed", "ref_doc_id": "1095545141848187042"}, "4c880b5b-7e47-4d5f-bff4-b5f7af537526": {"doc_hash": "2c400935a34d2406b6b4018f8a935d412b9e14437f1fd2dadb797a5bf1f60794", "ref_doc_id": "1095752066640642059"}, "6698be22-ed69-49a8-851f-32998d95754c": {"doc_hash": "1dcf5642f876efc48a6c1bef5205901fc26b77ff80b786bc746c03fbe141b233", "ref_doc_id": "1095753837555486811"}, "c3f0daee-f9de-42ef-afa8-84c04c87b87d": {"doc_hash": "61b0b8e6ad09d797fd8480464fc2dbac779fd498c1666d9468c5f5a54ad28362", "ref_doc_id": "1095755357613199510"}, "c088087b-6a71-4be9-9f91-3f41a3affefa": {"doc_hash": "fcacf5176a97e156506d1efef4b2755928ea15bfb4c02944e2ac9c0a376b5199", "ref_doc_id": "1095757528131977316"}, "9e54ac9d-a900-4af3-8387-48185e1a9f7c": {"doc_hash": "aa0688cfc3fc1080594bc12c557df9b0a9beffb0319bddedfeee34a0c655a5f8", "ref_doc_id": "1095758154568060959"}, "d10f3695-7eb7-4e64-ac38-51b95def3b9c": {"doc_hash": "576f9a5f7a1389c62be661fec51f63fbc9f58e06f10f883daf6014e77e5b447c", "ref_doc_id": "1095758244787535932"}, "53e0adfd-5597-4204-9f6d-992ebb44f526": {"doc_hash": "59fc430d6b008707f9a6715f6ebe946cdc309bdec2575f21a839e9e5ff50b5ae", "ref_doc_id": "1095822900898050171"}, "61520052-1b60-49a4-aa79-a5d15039a4e9": {"doc_hash": "f63d58ff56baaacb1b1b02b5daf18dfdc822c4182c7ca2f16f4e72ba3dc741fe", "ref_doc_id": "1095843145780056145"}, "6178d4eb-7b45-4e45-97d3-bb85e0ece32e": {"doc_hash": "8b130937ea3c4bcea978ea42cd777d236ad223455c3b8a586b1accd2d6f252cb", "ref_doc_id": "1095850293444477008"}, "73cd57cb-23c9-4945-bed3-91eebc6cd22a": {"doc_hash": "0d6cce8113a446130f63389d64a1a0b719bf7163b7a70c23696a08316f60a628", "ref_doc_id": "1095877935728169061"}, "cec70050-f129-4d87-91e8-0a13602e73b8": {"doc_hash": "4d5ed6315b5dd54c50dc9ed0ce6f56152dc1a5b4f29915a6466d2871c177561e", "ref_doc_id": "1095921352390754425"}, "25897e8f-757a-4d06-8b4e-fcdf29778318": {"doc_hash": "9f88fd411998671c40275852111d4b29b2fedfa31a67e5ae72a51b965f0f7136", "ref_doc_id": "1095973964783812668"}, "634536f8-c5bc-443d-a2c3-d5c599a8bfbd": {"doc_hash": "0ec76e37b33c2a5c1b1e139c981dfff3f6212408631e30ad7b80917c77451a49", "ref_doc_id": "1095975685648023683"}, "cca8668c-6225-490e-bbd5-5bd22d482c68": {"doc_hash": "3e8dc49b319a941ba7e94fb68babcd6ea8d5627cb35ee2de7152c9a0faf2dc7b", "ref_doc_id": "1096013981581328405"}, "b8985f02-7491-431d-8af8-09496c73b1ba": {"doc_hash": "167b0f9217c89782c97e2a6978456281227683bde516ef5b2acb59ba5c345493", "ref_doc_id": "1096084398975230104"}, "ba56cf17-c471-426f-b550-731fab9c5476": {"doc_hash": "9bf96f3b6b54f9490661a40367b97917c0656b4a6368244c64702a96c7a6e193", "ref_doc_id": "1096087849742377042"}, "8742a08e-2a40-4159-ba89-6df5f910b4c5": {"doc_hash": "22c6d983bb4c8fe7774a8506a6d538487f24cfd4ccea16b3ae99ca5706ee7c6c", "ref_doc_id": "1096119257198243972"}, "0fdfc48a-f91c-4a13-83cb-63ff9e2b96e9": {"doc_hash": "5d985d03174707c0d7692fef27280f91539e558da7911d544d65dbe5b80b0c59", "ref_doc_id": "1096123297202176173"}, "7b417734-a13c-4b07-a8ba-33fb48809154": {"doc_hash": "4f2e93d06a36269838396ed760619ddd5724fec63a98a03a20d65cd0e0f8b759", "ref_doc_id": "1096124373108261005"}, "8cef5eb4-ca82-4fc3-98d1-a76397b89b54": {"doc_hash": "1ba97dd771543c2634ff774ba1d231e4213309e16e1d2fd85f66cd3f1d160a4e", "ref_doc_id": "1096156804301455401"}, "5850161b-0271-4d65-8927-e08ce19cb407": {"doc_hash": "36e10cf585848a87b2219b554069424427a419a9eb32d5c1e47bee2535cd96b4", "ref_doc_id": "1096186836059160656"}, "1c4c9e1e-5777-4681-a22c-ce8885fe08a4": {"doc_hash": "5dd9e61460a00938b80b6d20e5f56b9477b3a511784ff876b5f6ca1038fa1659", "ref_doc_id": "1096201182386606135"}, "3ce0519a-012e-45c1-9b00-e9e9ffea09e0": {"doc_hash": "40e7776e194f2142160bb5fcb778d754d0adb2e83c0922507459e053726a6e15", "ref_doc_id": "1096218175265312878"}, "aa7a0cee-2c9c-4081-baaf-1505bee18dc7": {"doc_hash": "46a1134d40a63e61c7e366b394e091bd0706fe38dbbbcc6920a8060fa6a0ba9b", "ref_doc_id": "1096303955664969828"}, "a1cf0cbc-dd60-40bd-9cc6-815f63ba834e": {"doc_hash": "734796fd3645fd687e1a2bdc7033c8d220cb9aba57b5bf249b8a865bf5f23f14", "ref_doc_id": "1096330936024563752"}, "099ae5de-e4de-43d3-866d-582531537807": {"doc_hash": "f2b0917a2bd4d489851f354ec2a17a361b71712ff2e81fbde59a4431d059005d", "ref_doc_id": "1096336176673202198"}, "c634af56-7b5c-4e09-a464-985e4282eb29": {"doc_hash": "6731216c8c3cacdeeed490181e4a70acc822ac290914ced213520af3eb7b1c7c", "ref_doc_id": "1096336227814342707"}, "a31c2880-ffaa-4de4-bbb3-17acdeb087bf": {"doc_hash": "2cd55b2e3f1c5468659974ec59bc331382139f3dedbb1422cbc066388f4f0a3c", "ref_doc_id": "1096413431122374726"}, "a28cd4b5-9fcd-49e0-acff-e12424b410e3": {"doc_hash": "5fc23353e1f3e86efee9f431d659622489b95ae9a904dc13c2d4f50d0c7e98e7", "ref_doc_id": "1096474926128566332"}, "2546504f-f4e4-4ec6-b437-f20503f00db8": {"doc_hash": "0183b0df3c9701d8b7b0674e0f2ca83d2a7fc0fc93976cceb074fe93fe32ae5a", "ref_doc_id": "1096529895259123852"}, "a9c279f5-82ab-4dc4-9902-72850de1d25f": {"doc_hash": "0685bf54e786fcd414972b342acb34dace8cc1094ce3fc06c7bfe72e5f52feda", "ref_doc_id": "1096553917602611270"}, "a0196f9d-69fd-4e68-a659-8e4d37c435d1": {"doc_hash": "0fec2fe0285bb0a9c209bf7c6c78df4277d00812b0b7811159d0ab659e60e74b", "ref_doc_id": "1096594952991035453"}, "48a211b3-b252-41fb-bc92-b2a9ab11213d": {"doc_hash": "d020fb6ce4fd6f3ef69ff4b0ebf0879f5de127701249327110c80517a2f30e92", "ref_doc_id": "1096834295299051620"}, "2e18b323-cd51-4fcf-a433-4620c106728a": {"doc_hash": "5fcb19aefa356fc0828a0a6d162b6e5f0266f75e6d5649b5673df506cee32be6", "ref_doc_id": "1096874982572822530"}, "11796d4f-deab-4f29-9de9-f9b5eab2f0d9": {"doc_hash": "830b9db88e9588f9ac951e187147301a8925a5e7c8c9319b9823d964a32d507f", "ref_doc_id": "1096947591872254054"}, "985b330d-250d-4b0f-80c3-66bca937b03a": {"doc_hash": "7f35ae3cc91fa9cb61694c7fd5814656374bff139eb3d8004852724b586dd855", "ref_doc_id": "1096948907759632465"}, "78e883de-21f1-4333-98fd-173b86b17cac": {"doc_hash": "5a2c6bbed2a0b0b59901d7d70afc49197aa1dfc7d8aadbce5991f014da7f434c", "ref_doc_id": "1097121014447607858"}, "600f3b9c-55e6-4200-8258-43357b0cb268": {"doc_hash": "31da08dab702b0bb79690172c0f65b144d1a4e87049c51d90c977d06374375b1", "ref_doc_id": "1097272296298774538"}, "ec07c5bc-1665-449e-936c-ead455b52e87": {"doc_hash": "3a1c6452e9d010989972c98c7482ddc6d4ba7a6b6ac8ed60f580b0444e50ec46", "ref_doc_id": "1097300835244970115"}, "467f7d99-3b0c-4b32-b567-2fb2656d705f": {"doc_hash": "3ecdd1bb0c1ac5f60e3dedaf3fb3fb51d787a8a38d622936674a012c957680db", "ref_doc_id": "1097339675217236141"}, "c4317051-d4ce-4b0b-8cbe-a2465f1532a5": {"doc_hash": "08ca9b863c30a9a487a13d7f3566e5eab3ee089bb4886c7c28f268437352b2ac", "ref_doc_id": "1097355813615571085"}, "93a34b87-0b20-4f7f-a3bb-404e1f15778d": {"doc_hash": "51bd9d9241b305be0b83dc1b7915904a0de1f1cb319b479413d9e7293f43cb95", "ref_doc_id": "1097360650923155586"}, "2b6979db-5482-4ad1-83ad-0c86bc0904d6": {"doc_hash": "dd4e81093cd0ccd4f84450321020f7c4c4417a5d5b359c7be3d6dca162fac0cf", "ref_doc_id": "1097398731076292638"}, "6b91e67e-545d-4f71-a6a8-734f841b4b42": {"doc_hash": "219b88c7aced7702462c3a95a1c26479c3dc6cc26ca35c0ad4ce443cbe907e42", "ref_doc_id": "1097401616430276608"}, "1dbabf21-f16c-4db2-a845-aa0605d2e1e2": {"doc_hash": "0f5a885170570f017e458710a232fd803093d3d7eeccbc429f5d485397a7e550", "ref_doc_id": "1097404071704530984"}, "4aaf3f60-64aa-49f6-857b-ee7532b24c68": {"doc_hash": "306b10e6be92dc4bfa9d931bd00cbb83613757be7416298bd301704b0c8ba306", "ref_doc_id": "1097409746828533870"}, "aac775f7-0e63-4701-9193-14a9a006be86": {"doc_hash": "07cbe173c66b9ddfb5022a3075930c3bdd2127c8b3f9ed0c7dad9dcab3409199", "ref_doc_id": "1097414565211414579"}, "66a11a95-3d6b-468e-b193-6238c8f1e5aa": {"doc_hash": "10abe23c3256550c739a1a480f7a55e29a2edb1ab0496ab72aa5590f3ece200e", "ref_doc_id": "1097429068569387078"}, "66a145e7-56b3-4b68-8164-7fc6b14b9cfd": {"doc_hash": "e177be0dd14f2a6fa206faf1931707607936d01f04090ad5182e1c7b6fc1f5c5", "ref_doc_id": "1097466500291510322"}, "b1673038-c0e5-49ae-9265-e6d0bf56b2c2": {"doc_hash": "34b69f94ec166ef385ff9073142e13266992a7883abfc68b61e3084ee7e96497", "ref_doc_id": "1097520126120710224"}, "288e7525-a573-42f8-8a3a-3d1f784b0925": {"doc_hash": "6d04adfa74fea1c5b4cbd69d5049821fb72a37b8d41e6ac79233543022003902", "ref_doc_id": "1097537142068101241"}, "294221e5-3108-4d07-96f1-55025d939c65": {"doc_hash": "39a6cab187c6a1a969b3b068d2d0ba6e2abd2ef31a79e96a54e5bdae2bc4cbc2", "ref_doc_id": "1097558647455887462"}, "8997ca1d-08c7-48e8-9e05-4d9202f3bc17": {"doc_hash": "25391fb44db5950852655d56a932f52ba94ec68d4e40d8de4fe82b27a2877ad4", "ref_doc_id": "1097571668064477424"}, "56422d1e-4ea2-42a2-bcfd-b60e6c6c82d9": {"doc_hash": "3c9b05c702b3fd25c4a958dcc2e8b2d02ff459159e894491216d411cf2d51254", "ref_doc_id": "1097593771702624366"}, "1e3ad923-50bd-4ca4-8598-fc741c0d2bf0": {"doc_hash": "3b131b76bc69507a656e7a06adec6615807e846d126d96cb21f6561e1d874a0c", "ref_doc_id": "1097664723497009304"}, "033a5b12-7a77-4ca9-9b98-4c77c13d0ba2": {"doc_hash": "8dc5821c7f34f36fc8b609afa871ac5257d8f3b385b21b88a3ec795023cb9b20", "ref_doc_id": "1097686435546529823"}, "40fec9b8-a0e4-45a3-999e-e4383eef6011": {"doc_hash": "c4f372c9c854922418a7e9d1d4e2af32551f4faf4150967789ba2aaf16b83479", "ref_doc_id": "1097712034801524756"}, "d7a84c16-45ad-435a-a389-56a23a0bda78": {"doc_hash": "a351c7abac90adea7734885c990b407a4395ee1a77f0bdb8c9c02280d0360b38", "ref_doc_id": "1097722499237695488"}, "0b91b8ba-b948-422b-89a2-fa38730655be": {"doc_hash": "0b5a0420acc523cba83d3344cad0cb6254b63f38f2cda19b4e41c2e750a1b9cd", "ref_doc_id": "1097763050137858048"}, "75d38914-29d9-459e-b76e-d522f704f23a": {"doc_hash": "8f8b3c5d8e63ac1fc4caf083993429964db367280c2432e52c6d48159a1b7262", "ref_doc_id": "1097766621998751766"}, "4ccbbf90-23c7-4290-befa-6008252fe975": {"doc_hash": "ed400f5cf08d4bb8a465c2fd3de3ccbdea8e7f135afd0baa326d05e37d34c438", "ref_doc_id": "1097770637545721876"}, "84315fdc-5780-4066-8f54-11cfb25164f2": {"doc_hash": "75e57e58223aad2c70b38cf67f4e291af1f65eeb43b1f64a9afbadde128c939e", "ref_doc_id": "1097808213832892426"}, "14128ad0-4144-4b23-adc0-bbff73d529c5": {"doc_hash": "bda6b552975f1604285b4aff91fb5d99fb4b16eea7fa2db853dac6e9039ee6de", "ref_doc_id": "1097861742127755354"}, "acb092cf-ddeb-4236-84b6-4c168d344395": {"doc_hash": "9d18ffa24c5f87e44558ac2bee4cec96a1f2edbd1917e43d35d95c00d05a500a", "ref_doc_id": "1097937493518733453"}, "8e319c23-ea18-4392-8367-9d7b1d345fd6": {"doc_hash": "90e1ad12b12c4555c61134e6565c5d7b0168eb5cccf9b948c41aca619fd00a96", "ref_doc_id": "1097971564814794842"}, "25094501-8d87-4df7-af72-38e76d5e6a98": {"doc_hash": "7c89f7db590f581debd0f9ccc1bfcceab96050b359e9f7dedab87692bfed4232", "ref_doc_id": "1097995032281239652"}, "37b62100-9ed9-4337-99cd-6b2f4fcf3aed": {"doc_hash": "5147441198143a753f5f2e9abc230e92877d844bd9ce3bc9a0604e7b1f2f1d29", "ref_doc_id": "1097995717672448020"}, "cd697c7d-0249-488a-90d8-7b635e032367": {"doc_hash": "fa109f5b70dd58ec667516d86ca2f43d660770a4fe589ff30a80e6310d21e697", "ref_doc_id": "1097997796738609222"}, "fdd13c24-8bf5-4b5c-afd8-b555ddd8fe7c": {"doc_hash": "7a15130e175588ae4f724050f92877ac9299be60147608e443f8ea4d992cd9f6", "ref_doc_id": "1098019685888434308"}, "894351bc-fdf8-42c1-a75d-7f416d44e48a": {"doc_hash": "ed0f75b51b81c42b9e41ab834616ffc1b354843aab6486fb2bb4caf13035b6a1", "ref_doc_id": "1098025623466811432"}, "9899cb33-2493-49b7-9365-e9716e4c2f31": {"doc_hash": "0de4a59c81858bc267e7fab9d71f3317182bac4941e52da637efd250643e7ca8", "ref_doc_id": "1098048197596819516"}, "d4b0e69e-23af-4e72-a916-0ff6e559dcea": {"doc_hash": "87e6747e1cec9f014f29c1f0e4f0d6b0a823993738c9fa01683f30c646976479", "ref_doc_id": "1098162346284826764"}, "8b1cf702-dc1f-4926-a57e-dc2340801041": {"doc_hash": "c91d20bae789665eed41b0c1b80748d6ab79035fa5a5b64c28751a6c777278ea", "ref_doc_id": "1098262415298269294"}, "d1d9e9f9-76be-476a-b307-04807f3b6a98": {"doc_hash": "7dffe103e2d596d5de7b39ece09f5e7bb5e1d0c172e7cef75cca4355e9268256", "ref_doc_id": "1098281808606531694"}, "f16fbedd-d0ef-4dbd-8af5-418776a7f8bd": {"doc_hash": "7437647a567fec4affce9f25c9a403e40f996c32ff276fec3a45b31ac9377f89", "ref_doc_id": "1098283962385838180"}, "c0ecf228-9acc-4349-821c-4c2945bca796": {"doc_hash": "413237ea188282da6345e59fc28c838fdd73667420e2e64b033627d9f8fed6c6", "ref_doc_id": "1098287636004737095"}, "f2fd2c70-b265-4306-bce0-6d596d50e1c4": {"doc_hash": "c47efd05fbd6cf85fc7d9eec9637e382525c53f85ce50fb549530ae79cc476de", "ref_doc_id": "1098454726850383892"}, "2b3d5372-7e31-4318-adc8-f6822e9ea5c3": {"doc_hash": "7badbcc168c40a7ef3eed9813a87ef59898edccce5dd7aba023b8d2cb2583343", "ref_doc_id": "1098636367950532668"}, "35c0543a-44dc-45a8-8255-1a423a0f7fea": {"doc_hash": "48e3377360095a29cce2f953689da83f1e6e0a8e8224b9cb256842968b7aac75", "ref_doc_id": "1098683327805919253"}, "d1c9944b-7794-400b-bb8f-927788336331": {"doc_hash": "1161045ed581a83e41d1d0359a0e9a54cd0d6622684db656e7473dc8eaafb31a", "ref_doc_id": "1098685337708023988"}, "8b1b3451-2128-433f-ad07-d345077aed9b": {"doc_hash": "e4a70f499670e60ba14b211b75a3f1fa935dde770fe9c1735fd7775f42cadb5d", "ref_doc_id": "1098687182140616745"}, "3a372065-573e-48bc-a2df-105369985510": {"doc_hash": "5bdbe338f5629dee34d5002b0044779c8904eb74a6e7bdf9d4aa8215e866772e", "ref_doc_id": "1098777646537650206"}, "0f72f83f-2740-438f-bfa5-910950143c1b": {"doc_hash": "7caba378aa9c4605766d0b0f3c988b5dcac5405cc9669c0ae2d6eef2ae7742cf", "ref_doc_id": "1098792683163623475"}, "90c69b5a-8198-440f-ab3c-f72daa7cdfb8": {"doc_hash": "ea91118509cf1fda61ae0cd6d0c28bbd46e9bd585cceadd66806d6368a34a88a", "ref_doc_id": "1099040182646362203"}, "cd60da02-3b0f-401f-8a70-37ee18cc97b2": {"doc_hash": "a1dc6c5a6f25c0f42c466dfc963555cca996c1684fdcec219d39aa2db2bd286f", "ref_doc_id": "1099042393698865192"}, "07acc492-fab7-416c-92b7-0be30eeb79d1": {"doc_hash": "cd9e2fd3894ea4f058ffcbc77702baa14ca0be96be42f49742967d7a020d1629", "ref_doc_id": "1099124874590556210"}, "2f952f43-3ebb-42fa-bbe3-1be9cfba28bb": {"doc_hash": "7af92aa0416f4eec736e589abc81af836a515c512c35437e22e608e0f5d2dbdc", "ref_doc_id": "1099172603706486835"}, "ffc0fadd-242f-47d5-be61-de7930b39ce2": {"doc_hash": "84109e7f6e8fe297ec72cbf7886f5fc5a5aeade407981a84f16d40bc5551dfc3", "ref_doc_id": "1099439531549265960"}, "f071f721-ff1c-4ccd-b167-8505146968a4": {"doc_hash": "911b7c12a97b79cc2807396606e8fddb3a120982aa1bf14411d1c8cad7e4e6b9", "ref_doc_id": "1099449008860184586"}, "7b0a6975-6a54-4101-8ed7-895ec211727a": {"doc_hash": "c1655f7c3ebe37678e2ab6ed5d6653a1d6484589faf1f3770acd2cbfd2d650cd", "ref_doc_id": "1099450116131258530"}, "beb318d6-6dd0-4ba8-972d-f9e510233586": {"doc_hash": "30e34c6beb283c992892b0794326bfe523d5f974f4b992ec1199f24ed8c9338d", "ref_doc_id": "1099464754067685438"}, "f886fa2a-e017-468d-a62c-4fca9551a7eb": {"doc_hash": "5452b4b531b8131ed96de6294b72868099be00ccdab9b9e1d8599199e821cde0", "ref_doc_id": "1099469959479955621"}, "65bd1ca0-776b-4693-aa29-b54c43e2daaf": {"doc_hash": "787adb57259e1e4b4b6575adaa4124ca3d8d49173ce77a98196e2798fffc24fc", "ref_doc_id": "1099693858146754660"}, "f4851f95-c0d2-4252-ac20-9e7a89468761": {"doc_hash": "226538659f092b4035a596c9aa9828bf649cf498e212095e4571c437f5b2e415", "ref_doc_id": "1099791236430319687"}, "4b517c91-529c-466a-bfc2-4e7c643002ba": {"doc_hash": "49fd05544ab370a066fbd83dbad59523b438b3a83e5cf4b2eba84b0d099f34fb", "ref_doc_id": "1099837576917024808"}, "dc077470-35b3-41ea-8128-44df82447e77": {"doc_hash": "d28e974e6005e7fd7ee2feded0edcb2892efd02226aed400b8ca714d499869b8", "ref_doc_id": "1099841632121135134"}, "91d9dc9c-dc03-4b2e-bc43-b0560ab29d24": {"doc_hash": "46526ec2b6ebd45f6bca49e9dbd9acda263a5cc046debad13b06b3730f64c60c", "ref_doc_id": "1099858239228743741"}, "49c1cc03-1fa7-4622-a6d1-fb0917fa2172": {"doc_hash": "2ed8ff28a5ad44854ae612a9d2205c69699ebd10d43f1e89614b74a9ca81c0ac", "ref_doc_id": "1099906867402133596"}, "2ab1dcf6-3d58-44cb-8613-9209fd9fa7cf": {"doc_hash": "bf77692f353d48828b4a44a96b6b48de52c78a976e44097d44be94d8cc4a34d0", "ref_doc_id": "1099911293311397950"}, "a59d5af6-b4b7-4680-9544-37869267198c": {"doc_hash": "4b2b87699e92d92bc0c2e537077ded83c1b1d918d0416078a7bba26000edfa74", "ref_doc_id": "1099912350129197196"}, "ea9e6ef3-a52d-498b-a39e-19d61c9740a2": {"doc_hash": "2f121a6904b3f42c6b94d9da5ec4913273627fafc0d3de77c7a451b490b5e8b0", "ref_doc_id": "1099930822397661225"}, "f0935c29-1188-4fac-b51c-7523cea835b6": {"doc_hash": "131df8ae18a8ad6b9d2efda5956ddc1635b920ab3cd5ae96474ebf0522ba2498", "ref_doc_id": "1100000721149104178"}, "b1ea0946-d458-4758-8f3e-600b29c9dbc1": {"doc_hash": "723d1525a0bd3f45e6b2ca281d440766dd9f278f76d05353758b2a328e33ec8b", "ref_doc_id": "1100102638135169138"}, "649519f6-ef92-4a7d-8fd1-c9213ec5a907": {"doc_hash": "2e7888be3290536a6b630a6de561bd88470b4605fec46210ae0df7687de56393", "ref_doc_id": "1100110065840697464"}, "3f22ac06-879a-4cff-bf76-0000e9cc5f1a": {"doc_hash": "ba846dbd850a6878dac0941149b729a5142e93a5fbbd01bd88ddfd2bbb02a062", "ref_doc_id": "1100191872749682738"}, "d7e37b62-daa6-4982-a17e-14915141f89b": {"doc_hash": "736144b07cb262e55ec2084ffe4a0018a4684993ac77c01f3b790e50bf0da0d8", "ref_doc_id": "1100356152593756172"}, "4188fa39-fab5-4d2d-8386-fbf8aff57c0c": {"doc_hash": "05534a6594267339658c6e6f2868a7527a3baaa05c7114c7d94b9c7e04cf547e", "ref_doc_id": "1100384051954712596"}, "1f8bc9ac-c5b6-4b4a-acda-dd4815ac53ca": {"doc_hash": "795d101e18d415e3c2b69123c04364ae2b082204da5d488528cff79636c8ec1f", "ref_doc_id": "1100391280166588446"}, "9c4940c0-99d3-414e-9992-f8c4fe49408a": {"doc_hash": "aef3139a252baba05d5c85298c6d7f26760773e5a0233a988bcdada3b9f35183", "ref_doc_id": "1100391280166588446"}, "6b307a8a-232a-420f-8ab1-44eb7d9dc964": {"doc_hash": "396dbbbd725c018da678f7c251cbd2cd31765b1cd10c70d7abf61f2ef4255213", "ref_doc_id": "1100432734666633309"}, "5f6b4a84-c9dc-4ee5-9134-8729c00032c1": {"doc_hash": "96b637c3739eaf81a169c6f89c975e620ce9c38ab15b23d8779b7c618dde2e9c", "ref_doc_id": "1100442307481849898"}, "26121d41-dfb6-46b8-9e6f-b700019ebd87": {"doc_hash": "8407b3d2ba0bd6c61459536af312025eaff8d754373c507545ccb62402547a95", "ref_doc_id": "1100482619596091453"}, "8f7a3b07-dcb9-49c0-a401-60de8ced3c7e": {"doc_hash": "3a6bf7d4a74781f5094b5f8187eb3f4bd797398b1b7a083df13fe14b0162898c", "ref_doc_id": "1100493445614813205"}, "f478c6da-46e1-41c5-a8ea-dfceeeb13306": {"doc_hash": "00329bfc751535d873379dd484d4332e51439acbcd4a7cf3c3d3858a10e505c5", "ref_doc_id": "1100515309741408276"}, "23107137-061f-4123-9f27-928169d051c3": {"doc_hash": "3ce386ea83b11a8aaccb7352ebbe97277edd20f1205a11ec3aecfc4b4b0994cb", "ref_doc_id": "1100551698147196969"}, "c8127902-2d75-4b85-bc60-ccfafdf554bf": {"doc_hash": "7468abbe5de86cabdc7fc3eb92e403c8e5d053e2cf47834cae4cb4e49fc25e97", "ref_doc_id": "1100561196073103461"}, "83115588-461a-408c-b7eb-5b912c518ce2": {"doc_hash": "33a0f11d86d8420e15d4ff8394f2a20ff57cc4fb127df00d3017c5ef56719798", "ref_doc_id": "1100626944657215541"}, "1f0a6390-af64-44ca-8e32-f2e71b2994f9": {"doc_hash": "c1edd2e29cb06604f6989421cf5a5d26f774d23b2c6647b0c005f4a5c97ad3cb", "ref_doc_id": "1100794926486274100"}, "fd2c71ac-60b0-4964-afe4-3d94b4ce21b5": {"doc_hash": "4e58f8f31ba76269f34c4a80a375af040d93fcdc7f280860e81a506bb63cd84c", "ref_doc_id": "1100805108998090784"}, "4fc7f22f-1242-45fc-b2ab-68997c2d690a": {"doc_hash": "d4511b777af180513d60228144500662f94973646b0761839efc2c5c2b10b9a4", "ref_doc_id": "1100809386257043565"}, "51e9c7fe-5425-44ee-9d0c-a16a76a0a276": {"doc_hash": "4d8513d23c1e9906221c6fdf6f587ea86b279b21514594f6ac9bc004200d40a1", "ref_doc_id": "1100848445343932497"}, "5ab72c3d-a7d8-4e87-b5e5-a59925185306": {"doc_hash": "9f6b532c5d74ec8bca5fc6c97d779a154bce6f9a335f8019e3a279b3e6d65e5d", "ref_doc_id": "1100868170388086845"}, "03616788-bdec-436e-b90a-9d60521d6fae": {"doc_hash": "c817efa3fc340d6685a1994e604e47218c6e5d2e627534dd316f1b8b14026b59", "ref_doc_id": "1100901226020884490"}, "ea032ca8-20fb-4673-a416-7286a3df4212": {"doc_hash": "68619dcbdcce2d33d890d37f188502a21a37615eeb107f36788a7cd4dfcb5813", "ref_doc_id": "1101012703725764629"}, "2f20b13f-5ce8-4e0f-9b49-23e82c7b8d86": {"doc_hash": "82b6b9cef50c65abcda49e18a096164f73bb4687ccdb587f9b55bb45918a07b8", "ref_doc_id": "1101139253154549800"}, "38508ea9-3dec-4741-9276-6b7c00edb16b": {"doc_hash": "54be41f2a9b8551ddd5312f6e57ff9e0c5b37a4230a948e64c8f7223910fb098", "ref_doc_id": "1101168521423101974"}, "ead220b2-c156-4a00-8c50-39bbb3c671f7": {"doc_hash": "05c308b0bd35e5b7b1774c6c1084a7feac2304c530152d7adfc5b11b364ec5c5", "ref_doc_id": "1101227048762085458"}, "b431c8c9-4338-45b4-90f5-b1cf3e71e184": {"doc_hash": "818414a8fd2225d32ef5d05eda17d20e9e9ba9e0fd56ba540c9c566b93b117ca", "ref_doc_id": "1101280908666994719"}, "c22d1869-cc51-4fb2-b7fb-7fee9d946791": {"doc_hash": "18b5b2eb78983bdd0189a5a8c8e790c42ddc2278ecad5fa4346ced0158864986", "ref_doc_id": "1101309453111926815"}, "1d8b1cd7-13b6-4588-aed5-f506ae988f50": {"doc_hash": "a8dbefe7deb3f014f9cda262dc1ff1982eb0b6c28791c2db38d10a83dcfcb03a", "ref_doc_id": "1101312613847138354"}, "c2b68c4d-cc43-4145-add1-94108329aaca": {"doc_hash": "6fb9c9568546ab520da1ff12b3b9430eb3b6ef8dec888e72327b97cd58206857", "ref_doc_id": "1101342617389781042"}, "47597dc3-1420-40d2-97e0-0f1c29eb86b3": {"doc_hash": "e2c758c6288380773a85ca43c2d20932e3da1548bf76685f4746de0d2c2b14d0", "ref_doc_id": "1101361090572582942"}, "b042631f-2260-45b7-ae97-e7e7f18c9029": {"doc_hash": "806fa9cfc26aed286a13436be13c49693d00510446e610db736948bd5359e935", "ref_doc_id": "1101395056453222480"}, "99ad73aa-0a0f-411c-ad59-e712037b9493": {"doc_hash": "a4e9716821f94980c365db761363cd9dfb90c3a2a9ef083df9388441b0a7a587", "ref_doc_id": "1101397910194757692"}, "331f6745-7455-4f0a-95a7-36b459fa2abe": {"doc_hash": "49c3aa18976852de819a5de4057ac83758007e851db9f7d7887f0675da7ffd8b", "ref_doc_id": "1101575114585292850"}, "4f1423d6-1e6e-45b1-858f-cd72b823ee13": {"doc_hash": "4a885f8dbdb721a4ccd6dbf45b8ca27294ba26f61f137323317b9d67a8c51266", "ref_doc_id": "1101623077596569671"}, "42c270d4-f42d-4e17-9841-bebe9106bf12": {"doc_hash": "fe8b75bcb0f8ee43367814ee184143152019655d4bbd8340d96fa69ca328c54a", "ref_doc_id": "1101660562041098321"}, "cc84788c-477b-424f-b10a-00407f20209c": {"doc_hash": "2a791cd9ee00be91c73d80d888107c4f11a717ac765735cdea4a317e9d7a2762", "ref_doc_id": "1101661401254203442"}, "201b384c-cbc4-4fcb-ac84-dbb0d43757cd": {"doc_hash": "15e8a9d986e5ddbdf69664c909d7e82741020040d024a4ec7eba075f99bbe624", "ref_doc_id": "1101818908505280552"}, "16497a05-dbc1-4079-828f-e4b52032b5da": {"doc_hash": "66f7aea3c6e7bca5fbd1754661c7def3433de146e72b9fac1af601614210b417", "ref_doc_id": "1101900251176116335"}, "cc6af57b-54a8-4e13-abfa-e658c8254b94": {"doc_hash": "e0b53689d912dc9d67d6fcf422b51129183b69806fa64211f913a7a996913b33", "ref_doc_id": "1101919651413381171"}, "1cfba289-4be3-43ad-a972-5e136dcd02c9": {"doc_hash": "a679ce2566e69d3f362c49498edcba30a3319a430faebf56a262d1107b52ea56", "ref_doc_id": "1101931864802984008"}, "30653371-ba2e-4bd3-926d-5072d7bd2d80": {"doc_hash": "bc35988845cd223d53bffdd1f15d6b5a39ff91c3e0dc431e1939292dfa0a8ff4", "ref_doc_id": "1102039230949118033"}, "fd078825-c4dd-437b-a819-b30fbec4101a": {"doc_hash": "c7dc4a9c9e9b4d31ad8f37fd6458b3d1277f0fe6e9a3343f89021c66cc039a4a", "ref_doc_id": "1102146238159261736"}, "2ee4887a-6ab5-4434-9431-910907fcaa7e": {"doc_hash": "b3d37a4fdd13b5ea29daf64481f3ba7829f27f8b374a6f0b67638a711a3ebb4a", "ref_doc_id": "1102312662320283808"}, "9b881fcf-7354-4326-bcb8-bc23fbeb2723": {"doc_hash": "0b914824721710a7c38d0592cf138835743d47330c9fe3272986924daa0abe8a", "ref_doc_id": "1102329163483979897"}, "695df484-e151-4c8a-a4b2-a537cbd71292": {"doc_hash": "27d26471fd52a5b147634f88f0277b88771fbce76c3d94a81f5ab42fb3c9994c", "ref_doc_id": "1102382713480171540"}, "a5892394-1134-4d5c-a646-936e5a5f75e4": {"doc_hash": "dafe108e6dedc661c480ceddf77b658e31988e68c5389009ff72cf3c7ad0c9cc", "ref_doc_id": "1102417187962105886"}, "af7f26b0-9d58-49ac-9a75-f62f822595f2": {"doc_hash": "f8c18870bad1fe3beaad51aceafed88fb7c68b3832e93b95387391f0e18539cf", "ref_doc_id": "1102544418579431454"}, "91f64f9c-2af0-439e-83d3-71a3048e3600": {"doc_hash": "f529d6c678449e0ccf361b6ea3d053b52bc0f255b4a1f7974a513dd2241341a4", "ref_doc_id": "1102572024712405044"}, "6d7cfc97-f4ac-4dbf-a373-2452b1ca60f2": {"doc_hash": "8b7540762266f0edc4b175f7ac5dcc2b6a132b470bfe1877f8c851668a955421", "ref_doc_id": "1102604058713395330"}, "6071a3a9-3215-4846-97ce-78ca6b0be67c": {"doc_hash": "f4a54e03b734077764c12a7bf0aa7e89027695712217991d511a36e476c72448", "ref_doc_id": "1102628178595426406"}, "3be02cdd-2d80-4c46-80b6-849d4db8da3c": {"doc_hash": "92cff3c6a03a5bfc97b0250226e27e0ad901e21c0bc15e9e70b199c5ea5315b5", "ref_doc_id": "1102689650277105717"}, "15d35758-eced-4758-ab91-720014081f96": {"doc_hash": "2fd40bad9536994e2bae1dd1a9a1d37357a4d60241755e2480ff8d29f2b96eca", "ref_doc_id": "1102704008549908630"}, "df674f95-f7bc-4b30-af18-69bd251ac2e8": {"doc_hash": "418a9f374702ce9120f24f160864730e7c20296c8fde52e46ec1b901d5caf80b", "ref_doc_id": "1102718648193404928"}, "3cc58d7f-d1f7-4547-9dcf-6a594a47298f": {"doc_hash": "495ccd918c1f7e653f406ed9eac5a0095d92afd3208b33e6e1e3f63b38144ea8", "ref_doc_id": "1102728788644728902"}, "d83c3ca5-05a6-4cac-9212-c8e72254af30": {"doc_hash": "14feca08a1c35a8a2d66247bb278e41a0360183dff54626f3bd51dfa3bf7b6dc", "ref_doc_id": "1102805937250639942"}, "90b0162f-1b33-4ab5-b600-3ea0853e2be0": {"doc_hash": "0752105100d7508bccf93039e424ac746df84063b905cf25bce1ecf28a078ec8", "ref_doc_id": "1102932995511439410"}, "da7b03d3-7376-4966-8611-3fa5ebca1cad": {"doc_hash": "9de0762431c5f844ed133d7af2e13e6a414b1535502f08047ab66b1b9139001b", "ref_doc_id": "1103006069220970557"}, "65763979-88f1-4a30-a432-3357b0983461": {"doc_hash": "421c9c9ed4004d520fbde16146020e8d34d73b5d71e8e7a1e89d0326710b70c8", "ref_doc_id": "1103007057990385674"}, "072310e2-df95-4d38-aff7-d4013593e3aa": {"doc_hash": "7779aa59cce718b868610342a2cc18bd16cf88a61c5431c489a9094c651c16d9", "ref_doc_id": "1103017834872852560"}, "4939d517-fcf8-4f41-b8d8-59c24986fe57": {"doc_hash": "f49a01b09556fdc28fc406b14e7ca66c6e651573ff2256974e634548424f7b97", "ref_doc_id": "1103032319868141569"}, "cd1f835f-abd1-4f4c-97b1-2568b63a9061": {"doc_hash": "6ce16430d74f3ad3033c6a9638e46f5cffeb1b7df8db009bbfea3188c82a516c", "ref_doc_id": "1103044452739723394"}, "d970902e-50b6-45d2-829e-78a2ced4aab4": {"doc_hash": "c5b27e1f9dd5c88d65257bdc26604a1f530b86d3a79502c9e39c06beb1adc31e", "ref_doc_id": "1103044961525567499"}, "02f06687-98f2-4bb0-a4fc-ef5dfdce4c54": {"doc_hash": "9062349fdd6eedb90d5d2226cd6356b81f06b2c5878c863c4f3b6990b0f4e2a6", "ref_doc_id": "1103047627211284603"}, "589e4dfc-77c2-4051-93ec-cb6b72160b2e": {"doc_hash": "533f532d5166897a31b510994eb53be128b8319eb179955e4158f6a44b23ce75", "ref_doc_id": "1103048955794817084"}, "c0e2e4d6-3d54-4e54-b14c-5474ec226d86": {"doc_hash": "abb0ff2d60926548761a1709e637742c7e25972e05bb87a027d6bd72ef15a180", "ref_doc_id": "1103049140604248154"}, "b6abba7e-9b62-4759-b2a4-aadb77bf9905": {"doc_hash": "87826410f0c20b5a0c4d454ce14849fe68cacedcacb53d2a8cfaf54e223bccae", "ref_doc_id": "1103049554015826064"}, "80e5b360-29c9-4f03-ae80-50c2ff65285f": {"doc_hash": "f99d9658bfba7dfdf855d8990ed8448363613bcfbd87944cee8c2f26f95402b7", "ref_doc_id": "1103186776241209384"}, "19b5d5dd-9164-4c5b-a253-b7b3d059c3ab": {"doc_hash": "b9190302985da111bfadfbbbf9e1e2b464f4bb599817624e44c5b6b450db6f22", "ref_doc_id": "1103414360476483715"}, "19575006-b864-4094-afd0-79c4309c764d": {"doc_hash": "9b8bb3d7e53ccbe7b2acb0b906edbd37321d1b31232ee99a92d6e3d26dec4994", "ref_doc_id": "1103446268308619327"}, "f1be8c88-7508-41df-ab65-cb8cbddf9937": {"doc_hash": "2116c9c58e2614a53d402f20fa4713e31edcea0d07f6ccf8d7a1f06b9dde47e8", "ref_doc_id": "1103468907907518506"}, "3e6f77b5-4b62-4b47-90c5-d161d29a1c7e": {"doc_hash": "bba8cd941aedd62d4de8843818981f26cc06205827ac7e8c2632bdab34669f26", "ref_doc_id": "1103543391624642642"}, "ec22ea1e-a0c0-4b34-823b-fd7f11abb46e": {"doc_hash": "a0beb4fc53fad975df382f199d1caed6386197253ab1186d4a952917270cbb92", "ref_doc_id": "1103545177894817843"}, "e71eca27-b160-4154-b376-106e1f8d1085": {"doc_hash": "435382c7074192abfab3f3d1bf63758b4423840f82561f74b8077574620b0288", "ref_doc_id": "1103546493136293918"}, "5a88ce72-3160-414f-9570-b0fd3c171da6": {"doc_hash": "904844a6fd9bee0aa09f56573a2b1e9b001611f23647c531b84e08fc2da3d763", "ref_doc_id": "1103574131431182356"}, "84edc15b-6a73-4b5a-987e-3dfdee8647b0": {"doc_hash": "1b842b2301815f5d0a996e0984e718aefc236f8680fc0e31c7bb0d1b9fcae5dc", "ref_doc_id": "1103581201744269343"}, "8cd4a537-96cf-445c-a0ee-582fb748b17a": {"doc_hash": "f1886c05ac215f8102276647d8960eceeb6346011ea064aef6152091eb1fa5f8", "ref_doc_id": "1103629766877265960"}, "1d94d528-0bbf-420a-a8f2-f8a31925fa42": {"doc_hash": "76969ae3656707a046aa569698058460fa62ba436082c9289b50803741fc55b1", "ref_doc_id": "1103718849293066270"}, "7dbaa29e-9b83-44b9-8d0b-8db13eac9105": {"doc_hash": "3942dba3bd3967c6cf289b0ff7c5cb47da62b228308ee227cf04c4f199bc26bc", "ref_doc_id": "1103733529097015368"}, "aea60139-c420-4a33-abdc-d6390194272b": {"doc_hash": "79ec39ad369a1e1417bf4f8a96032ccdc7702f27753c09653e80053f6f61a91c", "ref_doc_id": "1103744338107830272"}, "8592d61e-1234-4f8a-bc1c-fc243833c5c5": {"doc_hash": "8118dda3a2845df0b140d2335b20e874edf081b113a29608ca26f71f689a5ee3", "ref_doc_id": "1103756548527886396"}, "8fa97fd4-5ee1-4d7b-8d74-57e986a36928": {"doc_hash": "614b10f213b1631f143abb1a312e06b724dd9fcbc86feb46205f7100bd0a6a21", "ref_doc_id": "1103844161318289519"}, "3623db81-18ad-405c-9c91-fac2651acb14": {"doc_hash": "3a7d6ee486086ac9f508c679d52848c6d73c32d34cc44cae520a6393bdf6be68", "ref_doc_id": "1103992481214906430"}, "27473a97-bd59-40c7-ad33-9a60c43ab48b": {"doc_hash": "a1a4f7d7e6115b44e55637b00aad3d2120400d57547a765d8cbcbb7d71b55f2b", "ref_doc_id": "1104046741159944283"}, "6e786ff6-8a52-4c97-998d-878b8920f503": {"doc_hash": "93a5517de89330a37486d0b5f9c303078db1a7351b30c0d5cd3239d67852bfac", "ref_doc_id": "1104062955437424700"}, "8c2cf148-1605-4f5d-8c03-0474f952b61d": {"doc_hash": "7fa737b49cc3b658b0fd134e8994a1ecb486a2db2666c889a5db880f873e94cd", "ref_doc_id": "1104104853162172501"}, "d22eb32c-b153-468e-8949-7a010fb1ec79": {"doc_hash": "36187881c177e35e6720a374e974be31ae479d0f113fb7b64ceedde632038895", "ref_doc_id": "1104122853445611610"}, "ddcac52a-885a-4a09-aa01-a92ef78c0037": {"doc_hash": "1866a7eb3622ce6ba03e55f905e86c975e58cb22330825668032f2f620b0faa9", "ref_doc_id": "1104160656523014307"}, "8e6b88c2-8ba7-4c4b-893e-d0bf34facfd6": {"doc_hash": "f95220b6e0451762457cc80e52b294d46483511f5641057c36bdf2cf7e128bdd", "ref_doc_id": "1104177215060578365"}, "be6218b0-049c-4c99-969f-d6aa9dbeff02": {"doc_hash": "07bf6635ac54381bd2332d2226d15ffefda781dfddcaed8fa8fec3e516045fc0", "ref_doc_id": "1104204259857268869"}, "94195a82-4011-495b-89db-6a726a41a74f": {"doc_hash": "6829c467b9b32cc32e6a10edcdae76b9f324e2695161d2477334afa26ef4e6de", "ref_doc_id": "1104240772691267696"}, "0fc322a6-a4f4-4db8-bce4-ab7dc6b1f075": {"doc_hash": "aa96003d382b1878bc542d8de7a9c41f16fc92d8ccb82d0270defa676e970040", "ref_doc_id": "1104262809010847756"}, "b451109f-7e43-4edd-866c-a7e958173208": {"doc_hash": "b034e988f338538afb633bcae09cd6f3c511e7dc78ac33b68f8cee4375add7ef", "ref_doc_id": "1104434396758548641"}, "50641a2a-5ebb-4672-a4a3-363d578de784": {"doc_hash": "21146816a5b9c31829d6c944a98ff7491ff5e2afea5514ac335704f8e691ecba", "ref_doc_id": "1104447930150158528"}, "4a482696-2281-4bef-adbb-ded971a6a382": {"doc_hash": "770621b27b00e098daac392f5a2611c0858516f5a4d390d5d85117e4895e204c", "ref_doc_id": "1104479195767255133"}, "224cfd9a-016b-4ad2-8d37-03d980288f4d": {"doc_hash": "fa5cc65eeec74971f2bf78656ea34180c0b5b1d7e9970b95d6bdcdd29c8e715f", "ref_doc_id": "1104515787349311519"}, "1e702714-2e14-48f1-9cdc-ac7dc0349bb4": {"doc_hash": "eda1152b4b252abff31bb215239704c43967fb5cd59ab6a07e033ee9ced5151d", "ref_doc_id": "1104677893314990080"}, "f46a8758-c527-430b-b5df-40534227ab9c": {"doc_hash": "63f41483860063570a3fbcd832e204589053508b8230106c36f79ca689b7b6d1", "ref_doc_id": "1104813615145558106"}, "bd156d56-dde2-412a-9181-e345ace37273": {"doc_hash": "bc2750010d81830f36b20763821ece40d94a0fbc0bcd28dee9579013712b2c19", "ref_doc_id": "1104855848850833409"}, "9f3e70c3-3bfe-47fb-b8a9-0d1f7a153418": {"doc_hash": "7fdc35bb5937b1f9032bb3e4017766b509d7f6dc49f9a537751b7f39e850be92", "ref_doc_id": "1104865196859740281"}, "a215ebc2-0104-43c3-9ada-219b04637cf6": {"doc_hash": "57c94cebab35a6ee0d3ffe48cb01a10700982e54334a286e5b32d1311d3390e1", "ref_doc_id": "1104897544879878264"}, "1d525ea6-9d7f-4be8-9f2c-457c51e8a709": {"doc_hash": "0fcef1802aaf5f140fc187259cc0831041963432b9202b8a51fcc4f6650af371", "ref_doc_id": "1105060369996709901"}, "7d168434-f14d-4336-8862-9ff866359ab6": {"doc_hash": "31b73f9caab9329fd7fdfe4969eab668eb45ee4a70e064d25696c3198f148ae3", "ref_doc_id": "1105119873954238556"}, "7130f9bc-3222-47aa-b665-21d2db6c4825": {"doc_hash": "967cf5683155347a7dff4e4a09ec34242a140c2d887e34ff91064eed571c0ffd", "ref_doc_id": "1105172237146927265"}, "3de1e495-6815-499f-b290-21304e3dc248": {"doc_hash": "ef925692d1f58f353bc162553c15a6a77714185caf474d0caab59094fa5935a5", "ref_doc_id": "1105207644710502410"}, "c665faa8-f069-473c-b625-95a4ad6e83ba": {"doc_hash": "7a6b96dcd6dae66405cdf914f2e0d4e0c9341e0cb7235028e738155bac96464f", "ref_doc_id": "1105211724484849775"}, "97534259-e2b5-4641-aa2d-03c59159e968": {"doc_hash": "d48a1f35476af3b7827fa280971a9e29d6b6311f97ac80c3c8a722111e73038c", "ref_doc_id": "1105214020606234807"}, "d8b2a538-82e4-403a-b67d-0ea7112e07b4": {"doc_hash": "9bf4c550f793e7df69fcd2674a88fa173181192afba1432fbec0cc58513bf26c", "ref_doc_id": "1105239113784885289"}, "b26621bc-1b13-4215-bc6b-9f00516fbd87": {"doc_hash": "d14731f882242ce63f03920e6eb014a974819e457094834bbac413f97abfac63", "ref_doc_id": "1105260402817908797"}, "cad9a028-21dc-487c-8b39-b6a0b40b5fa0": {"doc_hash": "6204404cce840c80d8b2011ea7c140b633e711e8bc60a6f87ef28867bbd359b9", "ref_doc_id": "1105269976035770408"}, "4164ae8b-ad6d-4bbd-ace2-fdbfd8b5dec1": {"doc_hash": "d0b1c6715bc02d00c413907d0f211fc38b107733a7eb17b8827fd7ddfafd14d7", "ref_doc_id": "1105399849744089218"}, "38bbc07e-7502-4fd0-8edd-d12c5f042337": {"doc_hash": "2eb1f1ec5ac23bb20d373b538f61dda3a15d3ca9acc00ee1d8c7c98cc13739da", "ref_doc_id": "1105432435803557960"}, "cd3ea68a-4289-4e8b-8cff-ff65857af714": {"doc_hash": "65b7d8be481d7c911da19d3004b2406bac77887ade6c94b39392f4e70c457fd7", "ref_doc_id": "1105454849438523392"}, "2811c243-282b-4ed2-9560-85ae86d6fdd8": {"doc_hash": "766be9dc6e49ebaad4b276fca87a7eea1c8041f3cc55acea57a57f6314c78539", "ref_doc_id": "1105503261622022175"}, "4b11f930-4d8d-4828-9eb9-8ae8ce113909": {"doc_hash": "d7cb3206db68c391efd0b413ce6d3369b5cc25ea2a69fbaa692c0e151cd929a9", "ref_doc_id": "1105504506302701588"}, "065f559c-fec9-492e-84fe-656c714df579": {"doc_hash": "7842139a241fd56b4bddb05acde594a9ad56e93f6802b43fdfaa6b8a6729f761", "ref_doc_id": "1105535739426512896"}, "8b8b8793-99e7-40b0-91a8-702716523183": {"doc_hash": "69a5af81a2dcb60d284f506d49b13680fda30eb86789cecf5a9e8ce476c97bf1", "ref_doc_id": "1105615538757050471"}, "4eb5f821-4baa-4ff2-a457-a13d637f4f80": {"doc_hash": "e927cda4030f19e4d0bcd7543bb0bf0149ce94bbe503c608e24bcdb34c4e9046", "ref_doc_id": "1105617458552918126"}, "930a3709-60b4-4e69-8908-a6b48a097ae4": {"doc_hash": "29a7161f402230e411849e7e5a15932840dd97793e8b53455173e20b635984fd", "ref_doc_id": "1105631426562506812"}, "dda49d32-f1a4-4faa-a549-be3e7212099a": {"doc_hash": "5d0971bbe953eb8ecca71d4fbac376255d3ba203f82f2d9e3ccc43872cf14db3", "ref_doc_id": "1105699199011532831"}, "3a39c3ea-3d42-4aeb-a2d1-72d14d85be54": {"doc_hash": "7cddff485b9e9222088997b84022b29b04f83accdee33f2171826b4ded4d1f37", "ref_doc_id": "1105743922581491765"}, "e9714f9f-79a1-4c1d-b4dd-6f26ca085812": {"doc_hash": "39e324591a3892aae8ddc98db14b73a09e1dafd9fcd124480a9a72156206c84f", "ref_doc_id": "1105799756099375135"}, "d2f529fc-f5f4-4f58-95bc-f41bad3f6f6f": {"doc_hash": "55dcfbb8f2432f474539925c6a069c67924b642b02e290044a035181e855f66c", "ref_doc_id": "1105819056319250553"}, "5919190a-2842-4eec-b540-81f904ba0fa5": {"doc_hash": "7b77b7a30b00d62ffde6efca2b2565d8a03416ca990bee8fb066d9b4983b4280", "ref_doc_id": "1106134832607678495"}, "6ae0c0e3-99e9-41e2-84f1-e04b05fd8525": {"doc_hash": "d8212b6b1651633557b1da1918bcf79379428a6d49dfc1b3c24b3c245bab02a9", "ref_doc_id": "1106143532441423914"}, "e8695719-68e5-41a8-9912-b2faf04dfa62": {"doc_hash": "aac6de7f96a4ae0a08b530b4dc19b0046b54e33291ae6403af207524c0166115", "ref_doc_id": "1106218550865166356"}, "66ce25ef-a846-42fa-bc26-98ee2bb5f50d": {"doc_hash": "62fd14633e9c56e711dee46e3abef4db92bab30b15fa8c28b59a2051e98f261e", "ref_doc_id": "1106219909056311316"}, "2fc0aa82-0e41-4919-b096-eaeac7d3af69": {"doc_hash": "1e551b7e0595d6d49dddc02927608bc8ad036ae41eb4eb790537a70eee81bd3a", "ref_doc_id": "1106222132146470962"}, "8ba55da0-5a00-4e22-9291-208e6c6c7f9e": {"doc_hash": "c858bce42201b825de707b5534c30d0dcbba454ea34e05ea8cba04b0c4403c8a", "ref_doc_id": "1106274074444976259"}, "49042ee4-531f-415a-b969-42e2f09a1699": {"doc_hash": "5c5cd236eb5155bb28870afb4427c84f43b9c25313d224b70bd4111d88c0c912", "ref_doc_id": "1106304910036828170"}, "7bbab62a-da64-489f-9be1-1de0948cc4f1": {"doc_hash": "ce4d4a7a9759881c27d2985e0ca26c744f38a49ccea4b8044209ab1996c0cbd5", "ref_doc_id": "1106308977639301210"}, "8b0822ff-8da2-41d7-a356-4a18302eb164": {"doc_hash": "d1973aad40fa75339a16d42485844c61d320b3d7f7550de5ce4d55fef5a13889", "ref_doc_id": "1106310557864312892"}, "68da0105-ad25-48b6-8975-84983b4346c5": {"doc_hash": "8858607a401cc99ad5b44ac98e186de82dfa8c6d7cc5164dccd7e6f68cceb00c", "ref_doc_id": "1106371820057284740"}, "ef6f5480-9b8e-4a8b-bfe4-9cb0d887e055": {"doc_hash": "0f530b04f712bb1d90441237cede5c07b4ce74a2691733e344403fd83838de11", "ref_doc_id": "1106588940275830886"}, "796c2b4c-0a3b-4418-ace4-545cc0fed39d": {"doc_hash": "1b1a30478a13aa512090bcb943c0d0c10a1e3f3f2c7249040ea47b53f071e406", "ref_doc_id": "1106878899700375564"}, "6a1bb368-bdee-4f43-9eca-6bcb617d1044": {"doc_hash": "1d326143e9caee1e0cfb44bf27fa433801594f73a0ad5bcfb8bdb4d1b0d6f6f2", "ref_doc_id": "1107061954398396416"}, "37f58506-2fa2-49fe-b2b4-8639b8e40bb1": {"doc_hash": "0cb11b1d60a256af6911b0d19b3f2395703977c3dfd9cf707ac7f51f0b5d3b15", "ref_doc_id": "1107078350117285909"}, "7d2cbe69-8ee3-4439-8b38-e2f3f8acef4d": {"doc_hash": "e7fba66cb8418b619b1a29116f5dd67c8646c1470a0a798fae4a564f694df7ed", "ref_doc_id": "1107258665892859954"}, "c4ea0ea4-e739-4803-b049-ec7999d07672": {"doc_hash": "b2b4a50b3003ad548164c36448e9989fb615e9d6bcb673577c4cf8f8f093ba6c", "ref_doc_id": "1107259163286970448"}, "5359736a-780d-459c-9f7e-236c5272fe5e": {"doc_hash": "b369c20de7c6c3390f3d6acab766f3eb15d7023202538421617305975a101eea", "ref_doc_id": "1107319393815363636"}, "0fb9748a-a2e7-44ed-be87-a14e0c8e486b": {"doc_hash": "ffb1c875ea5d7a7e5feb2e98c1de121c171b7881895cc8a29812b762bb191052", "ref_doc_id": "1107526682677620737"}, "13702891-9350-40ea-b72f-2737971049b0": {"doc_hash": "35db5fda23760234dec524676305b12171871e7e1b28b2de31fe323aeec3ef1b", "ref_doc_id": "1107705333440323584"}, "26f840b2-dd60-47d6-bf71-eb9f1a397c44": {"doc_hash": "7edeb8b9c78d4b5a85c918bd7fee209ef52dea0145d055eac40c451775883f81", "ref_doc_id": "1107737907747360768"}, "35ec3e61-e71f-4c7e-b72f-f873da479c0b": {"doc_hash": "1ef2cbb06373bd533d3fdd024447f18a331d83b2ba5c8019c34f47ac9de3e8d3", "ref_doc_id": "1107937933438242826"}, "83b226e8-4503-4952-a9f6-25c358262fce": {"doc_hash": "965c147618da4fd7dacba66953ede295214eacd8e7ce6c3f275eb1595aa2d9b4", "ref_doc_id": "1107970968531517500"}, "e126ffb9-2ec5-4b76-ae3c-a3f74ba098b6": {"doc_hash": "1fc3c9f4b9566795fb7caaa22250c69dd8fa457cd3d5d4909574ae22c6517ff8", "ref_doc_id": "1108031200972521503"}, "857abb1b-3d52-4ba3-a25c-ceaed389266e": {"doc_hash": "ee8e33db73410f7daeb774adf913455aa9004de3a2802458b86a616098d590dd", "ref_doc_id": "1108056811107536906"}, "752dd8bf-7a84-403c-84e0-11e3ede0085f": {"doc_hash": "d4918bb21dc93b8cdba4e3a38b75fc7048bf1359ecb6cf88e70946886a459885", "ref_doc_id": "1108064258681470996"}, "133f64b0-0699-4e19-af36-32f895e83196": {"doc_hash": "61894d8245172b3ab5619f6492cc457d69e1b044e89998c05059d68c9f042dda", "ref_doc_id": "1108099650914897951"}, "58000a64-2d15-471a-8516-1e8fe14941d6": {"doc_hash": "c5e9db138fbae8e321c215f9d9a39588c516154a3757682ba1ac171e44636b82", "ref_doc_id": "1108134824541167747"}, "4770081c-6904-4aef-9668-9ddba5de2e4d": {"doc_hash": "4b29dea963ddf7c657ec3067b887e1c14f30a9306ac92e75c9bf4724bb4b6f6e", "ref_doc_id": "1108406076958842920"}, "91508a17-59da-4e4e-8520-92fed6f8d3f4": {"doc_hash": "0cb5ab5a2e5a4bd4d127c7e3998b2c9b2dc530b3c3a2105b29108f48b6d39185", "ref_doc_id": "1108453845991956511"}, "2c1df02b-f89f-4757-9247-b57a19d08bb0": {"doc_hash": "828c46a3258b609a34bb1c3c6647d2588792429fae24b35ecfd5823b00f9695d", "ref_doc_id": "1108458278180098069"}, "52d891a1-0fe5-44af-97ba-82c87e394c93": {"doc_hash": "442c15122c7e2fca5fe2b96be6ff879a8e1ec12969b333524ed341b98e74f300", "ref_doc_id": "1108459998088016006"}, "03009823-7572-41f1-9eb4-da7d70297fcb": {"doc_hash": "cb31f23d113d04be66532d5b3178455ac0f59cfd3e8941fea909b7566e10c061", "ref_doc_id": "1108667975222964334"}, "1ffab3da-e610-48dd-822a-96c016ae45ee": {"doc_hash": "dd675142c8962ed6f91f16ccc73be936e52f942746bd8cfa2edd351d89bee3eb", "ref_doc_id": "1108687992115179520"}, "104527ab-f7f1-47f8-9ff6-c01c189330a0": {"doc_hash": "82874df0d080a6a5513460debdee557483d4c9596ff3dde01819ad53798cf5f0", "ref_doc_id": "1108708745447485543"}, "4b5dea48-f824-42d3-b48c-d3c853e5c17f": {"doc_hash": "e26e251886d63403d8ad07b6f87a99616f9b05b4d45602f213de10242636807c", "ref_doc_id": "1108751412353060884"}, "f5a7bcdd-90ce-4a18-bed4-b3526130d87f": {"doc_hash": "14c3ff8f6c7374967f3813aa19ec65f46118687894d905e039ca622cf452ca7f", "ref_doc_id": "1108842180161843323"}, "c5812a5e-d7ad-42e7-b461-d0a1c279fb32": {"doc_hash": "3ebd761e08c5c6a5d83ff2b48059905191b026c12d352b95aa661ba20fa1320f", "ref_doc_id": "1108846524382838794"}, "3446310a-91fe-4891-a028-9ab7c3bda83a": {"doc_hash": "d5f4fd83ef58dbd5c6965aabcd46872c48ccb839c73c8697a37dc5f5dca814d7", "ref_doc_id": "1108854091934859344"}, "590718e5-d9a9-4693-8ec6-747197ffdd26": {"doc_hash": "9a54f0ef66d7356f5a0e4a2f029146204fa41f5ab4ce23ac0e04dfdff5f52551", "ref_doc_id": "1108921924513452084"}, "1a4faaf5-57ed-41e8-bec6-b1c8112405be": {"doc_hash": "92d101e05b26504e914b6ed89ecfe21d0b2ee388bcc462068bd3caea6f914ac7", "ref_doc_id": "1109068463110107157"}, "475d5913-0944-4acf-b01e-94b75aa22431": {"doc_hash": "7a88d78df14fe8241f7bd635cd240e1645bfbcba54c811598812257206d895d3", "ref_doc_id": "1109163985422520340"}, "1014887a-18f5-48ae-a967-3d68f9b35edd": {"doc_hash": "6ba9a1abd040a5ee5d289ed473ec1bd94cac69ea6c2c3db0684c28540f613a5f", "ref_doc_id": "1109244585709940766"}, "7f692019-57d2-43bd-bf76-e96e16c67fce": {"doc_hash": "17b8108af39d68afb17c22ece24429f19052a30cab0b671f729d7ad39b9c6861", "ref_doc_id": "1109247502475087923"}, "8035b469-8a22-411b-8f61-90f2f42f7c64": {"doc_hash": "482a3d93a2c55efe7f2d9c927c86715d371cf94fa0586eed813d5cfb46161a95", "ref_doc_id": "1109356747803607082"}, "ec88ccf8-f922-45c5-aca0-e3a0917d7bc2": {"doc_hash": "4daf23e689dacfb212bbfaf3aa0a372f0e981851d70105ecbf7a3351a8f51bef", "ref_doc_id": "1109412573138395198"}, "426217c6-270e-4d1c-9fdd-138052939821": {"doc_hash": "1f2527661a85d4e5165429c14fd4b18fd12e1b601662bd99fcfd6df59d9281e3", "ref_doc_id": "1109511262850777088"}, "fe867dac-1526-4344-b285-cf40e2b90878": {"doc_hash": "ab3100930d5810c90c8bba51a1b4ac4c2b5081c48abe86841223c353419a2391", "ref_doc_id": "1109579516885618748"}, "6caa801c-625d-4a67-ae29-c6d08629d22b": {"doc_hash": "70f5c7da70bba45aea6138a1bbe651973dd068349df866b41cc7e8aba60d5b81", "ref_doc_id": "1109620793740107906"}, "f91b52de-ccdd-4ebb-97a9-a6d72d731f2b": {"doc_hash": "8755d6fab9ea5cbd9b354256daf2b452e6ba703eebd099071ce036bb3936faeb", "ref_doc_id": "1109622772272988230"}, "eb6686ab-e2e5-44f4-9e7e-478bcdd98f28": {"doc_hash": "364f7aa8b286fa10099fb2a2a952ce3b274eeb866de0c4aca8ff5cd759ad42ed", "ref_doc_id": "1109654025567207444"}, "e7538adc-eabf-4495-a222-b59c5dbd7fad": {"doc_hash": "482af367e2c9444ab56572c0636f3020719dd6e62404738f7f1d98af951191dd", "ref_doc_id": "1110001427046215690"}, "f17f7e53-f27f-4b02-a10c-0a4ad3993cf6": {"doc_hash": "df5231e26cf6e7150bfd6693f5ebcd6f5020f4abbccab3a8b0e6aaf86dcd79f9", "ref_doc_id": "1110061080799105054"}, "39dc1e2e-8506-44e5-8468-fb9105bc52d8": {"doc_hash": "4d29ec38ffffacd021dd06093d167845f653a9d5e5c2ac60c7c2d0d142dedd51", "ref_doc_id": "1110071662612852737"}, "492d7965-81aa-4528-b078-d66faea6ebff": {"doc_hash": "34a3573318ed98b64db224a60541e2a46994f5455c5825e0192843cd53d834c7", "ref_doc_id": "1110089211442376725"}, "94d8cb7c-da50-42a4-a594-2807919f7d72": {"doc_hash": "720ad77cf67c8d215d8a2d71ec3b05cedfc34c29b2b96d739fd5d2f48971cdd8", "ref_doc_id": "1110127178487701584"}, "889da785-7713-42d5-a5d8-cf503c2c6e25": {"doc_hash": "fd4a0a467f00904c78993e43e153f83aba9bfeba056015268ef6e2964c841737", "ref_doc_id": "1110134841544036382"}, "3f0dbd9e-0020-4100-ac14-a5386df24b2e": {"doc_hash": "ca19d7a803933f0fd321db9a2bb6d3835ebdf122b275606987cb1d2fe9a8068d", "ref_doc_id": "1110220796988760268"}, "13b4fdd5-9bef-434c-a341-764068c29e6d": {"doc_hash": "60ff1572868403c65cedffca4310ce2ccbe93aff0663e923f51aa637dbe0c4ab", "ref_doc_id": "1110384608291328070"}, "193d740c-59ec-4804-88f7-8176ff087e65": {"doc_hash": "b28c158f675a9c2b52b169b230cd3c47f5fcae86a5ff934e411f47494c8223a8", "ref_doc_id": "1110643153624637440"}, "9eb2e29f-32aa-4792-88e3-685232a48621": {"doc_hash": "7ca3551a7a7a0072bdefdfe71c8d884e522109ee1be4a3f4338389acbecaa213", "ref_doc_id": "1110759850255859712"}, "389bc3a2-6828-4a79-bce2-7ce5c2d37c4f": {"doc_hash": "fcd3d6bee05dac67e195375f86b6f0919840637a1a344300c872f3daa683b376", "ref_doc_id": "1110814097609609246"}, "e59f8af6-dfe0-42d9-8156-207413e8a466": {"doc_hash": "0c3c40a6c383c30d71e66a1ce687ff9a15d5876edd3b8fd9de0465d6af1917ec", "ref_doc_id": "1110938122902048809"}, "2551aa8f-8c08-4e88-9717-c4b14e92cc75": {"doc_hash": "7f69dfd3d43646c07bf88f99788bd5454cb1aaab667aa6d65683a31833c42107", "ref_doc_id": "1111012973700460665"}, "bb2461e7-b9a7-431a-a81f-c590a00eef00": {"doc_hash": "e97558694283c0d3a36020bf5e5ffc36bb14a42010723ada16269251083c6cee", "ref_doc_id": "1111132743661781042"}, "9898c9f4-acbd-4726-bf0a-54c8fefd65a7": {"doc_hash": "9f81461b1b1f3658a560ba39e074c8abc4f7c0924a8f647d307bbc53666edf99", "ref_doc_id": "1111307131887562823"}, "89f33194-9f75-4ecc-bc59-1bc878d42b68": {"doc_hash": "bc9056d2e3ea8d9976fd574763ca3f80f7b57f9005506ad62c91f4c9158c61ec", "ref_doc_id": "1111332768186646618"}, "367b542b-1f7b-4d46-92af-8ec32f745ca3": {"doc_hash": "4624759c8a69af1dd0ffd87b97c28a54ca558337d690c97ac2c5a3ab290a663a", "ref_doc_id": "1111353270242398369"}, "771eb551-f105-401e-897a-ec9c9dc555ce": {"doc_hash": "55b1073e008b8f81a5f0878c5c976bd906888c23bbce1128eac642b55062e3f4", "ref_doc_id": "1111354305530843358"}, "eaad405a-2f20-484f-b538-ad8cab3f2d14": {"doc_hash": "1f2f37f3552dab1d7eac994d6f39445c6f39330230ee34a2c828e6eb16cbc48c", "ref_doc_id": "1111374680276877413"}}, "docstore/data": {"ad0b9bf8-040e-405f-8e9e-e48d1101a9c4": {"__data__": {"id_": "ad0b9bf8-040e-405f-8e9e-e48d1101a9c4", "embedding": null, "metadata": {"date": "2023-01-02T03:36:04.191+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1059314106907242566", "node_type": "4", "metadata": {"date": "2023-01-02T03:36:04.191+00:00"}, "hash": "dee01d6a163e651950c3a13d2b7073f0f3a14a5a5fe37c5994dad1144c637b7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a377e25-32f6-45a1-a401-868172fbffe1", "node_type": "1", "metadata": {}, "hash": "42288186bda2966263fb14ba53fd53d248fcb3e9349c1628439022ef5a054dfa", "class_name": "RelatedNodeInfo"}}, "text": "arminta7:\nHello all! Thanks to GPT_Index I've managed to put together a script that queries my extensive personal note collection which is a local directory of about 20k markdown files. Some of which are very long. I work in this folder all day everyday, so there are frequent changes. Currently I would need to rerun the entire indexing (is that the correct term?) when I want to incorporate edits I've made. \n\nSo my question is... is there a way to schedule indexing to maybe once per day and only add information for files that have changed? Or even just manually run it but still only add edits? This would make a huge difference in saving time (I have to leave it running overnight for the entire directory) as well as cost \ud83d\ude2c. \n\nExcuse me if this is a dumb question, I'm not a programmer and am sort of muddling around figuring this out \ud83e\udd13 \n\nThank you for making this sort of project accessible to someone like me!\nragingWater_:\nI had a similar problem which I solved the following way in another world:\n- if you have a list of files, you want something which says that edits were made in the last day, possibly looking at the last_update_time of the file should help you.\n- for decreasing the cost, I would suggest maybe doing a keyword extraction or summarization of your notes and generating an embedding for it. Take your NLP query and get the most similar file (cosine similarity by pinecone db should help, GPTIndex also has a faiss) this should help with your cost needs", "start_char_idx": 0, "end_char_idx": 1481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a377e25-32f6-45a1-a401-868172fbffe1": {"__data__": {"id_": "7a377e25-32f6-45a1-a401-868172fbffe1", "embedding": null, "metadata": {"date": "2023-01-02T17:59:04.141+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1059531287758655538", "node_type": "4", "metadata": {"date": "2023-01-02T17:59:04.141+00:00"}, "hash": "43584ef1067d868b76878504b621c7e5d86fa83f660624ccb7951106e37f1943", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad0b9bf8-040e-405f-8e9e-e48d1101a9c4", "node_type": "1", "metadata": {"date": "2023-01-02T03:36:04.191+00:00"}, "hash": "28c8ff8ff501da9456d894b54e82162a5bffb64bfe63b219f6bd80b118fc879a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a3e470f-9795-44ad-8e61-407cdd8c7262", "node_type": "1", "metadata": {}, "hash": "a98a596a421c51f593684305096a9177c969dc3fe9941d5639aebaa9ddd3f009", "class_name": "RelatedNodeInfo"}}, "text": "Ren Lu:\nHello! I run a technical writing agency that works with clients to produce technical blog posts, and would like to fine-tune gpt on clients' existing blog posts/technical documentation. This would allow us to use gpt to help with not just generic blog posts, but also \"product\" posts that refer to specific products, features, principles, and definitions. Would GPT-index be good for this application?\njerryjliu98:\nHi @Ren Lu , GPT Index doesn't offer finetuning, but instead builds an index over your data, so that you can use a pre-trained (non-finetuned) LLM model such as GPT over your data, no matter how big it is. Our tool helps you retrieve relevant info from your data to feed into GPT, so that even a pre-trained model would be able to act upon this data. \n\nI certainly think you could give this a shot to see if it helps your use case! GPT Index has advantages in that it's a lot quicker to setup, and it'll offer better out of the box performance. Finetuning imo requires you to prepare your data, and it will help in the later stages when you have large amounts of data that you'd want the network to \"memorize\"", "start_char_idx": 0, "end_char_idx": 1132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a3e470f-9795-44ad-8e61-407cdd8c7262": {"__data__": {"id_": "7a3e470f-9795-44ad-8e61-407cdd8c7262", "embedding": null, "metadata": {"date": "2023-01-03T01:13:29.735+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1059640614783828048", "node_type": "4", "metadata": {"date": "2023-01-03T01:13:29.735+00:00"}, "hash": "8b91d2dd80854fec928501bceec31bcf919d1dd5eebf9777be0ed0116579edd5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a377e25-32f6-45a1-a401-868172fbffe1", "node_type": "1", "metadata": {"date": "2023-01-02T17:59:04.141+00:00"}, "hash": "da7149c5a6e1af48e107c569a1d93b07a017ba44b8447913b48e26993ebc89e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6918dc88-6221-4b9f-8a49-2b477c0c6d99", "node_type": "1", "metadata": {}, "hash": "f9640d771919f43f51fa402c7ab30abf196623e6f78f6adbdd9f174856a5618b", "class_name": "RelatedNodeInfo"}}, "text": "hwchase17:\ngiven an index and query, is there a way to get the documents relevant to use when construting the answer? eg instead of returning the query, return the documents?\njerryjliu98:\nthat's currently a TODO to add attribution (to the underlying text chunk as well as the document)\n\nwill try to get to it sometime today or tmrw\nhwchase17:\ni dont even mean attribution, but rather just return the text pieces. eg return List[Document]\njerryjliu98:\nyeah maybe my idea of attribution was a bit simpler but i was going to start with that! ooc what's the use case?\nhwchase17:\noh nice! i want to use those documents to other things besides just the question functionality. \n\neg, some separation of the storage + fetching vs the usage would be very helpful in making this modular!", "start_char_idx": 0, "end_char_idx": 777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6918dc88-6221-4b9f-8a49-2b477c0c6d99": {"__data__": {"id_": "6918dc88-6221-4b9f-8a49-2b477c0c6d99", "embedding": null, "metadata": {"date": "2023-01-03T01:19:54.3+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1059642227766341653", "node_type": "4", "metadata": {"date": "2023-01-03T01:19:54.3+00:00"}, "hash": "c4f1be9ccb7fdd92c6de103fc92f8204784a635425357c62da634abee90f414a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a3e470f-9795-44ad-8e61-407cdd8c7262", "node_type": "1", "metadata": {"date": "2023-01-03T01:13:29.735+00:00"}, "hash": "6d0565231488aea6a914fbaf75087b66cc703bce76254c729ee8881818686d8e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "496561d5-a2df-48b3-9d76-2407e27ce23b", "node_type": "1", "metadata": {}, "hash": "39dd073b08a86587fbaa809889984eae75f2a39f232988673dc5523537469c34", "class_name": "RelatedNodeInfo"}}, "text": "hwchase17:\nchunk!\njerryjliu98:\nyeah i was thinking we'd probably do both", "start_char_idx": 0, "end_char_idx": 72, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "496561d5-a2df-48b3-9d76-2407e27ce23b": {"__data__": {"id_": "496561d5-a2df-48b3-9d76-2407e27ce23b", "embedding": null, "metadata": {"date": "2023-01-03T07:37:12.971+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1059737181234671676", "node_type": "4", "metadata": {"date": "2023-01-03T07:37:12.971+00:00"}, "hash": "e4f153904cb3b2ebd4b572dc7f47ece08386020d053f9e0af55682f10d542860", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6918dc88-6221-4b9f-8a49-2b477c0c6d99", "node_type": "1", "metadata": {"date": "2023-01-03T01:19:54.3+00:00"}, "hash": "5737e6eea77e49689b598635228889ba7df550767a53f3346dfc897d99aef614", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "160f54b4-9ba5-4696-a81a-2533560e241e", "node_type": "1", "metadata": {}, "hash": "8d32a340b4cef61300163cbe3f55e60effd4172bec93f78d3b7b2545e9adfae7", "class_name": "RelatedNodeInfo"}}, "text": "jerryjliu98:\ncc @hwchase17 , I have an initial version of returning the source nodes + document here! https://github.com/jerryjliu/gpt_index/pull/170.  Currently it's returned along with the query, I have a TODO to decouple them a bit (in case the user wants to save on the LLM call and use the source docs for other stuff). Will clean it up and land tmrw.\nhwchase17:\nsweet! ya i think decoupling would be helpful", "start_char_idx": 0, "end_char_idx": 413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "160f54b4-9ba5-4696-a81a-2533560e241e": {"__data__": {"id_": "160f54b4-9ba5-4696-a81a-2533560e241e", "embedding": null, "metadata": {"date": "2023-01-08T09:16:25.691+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1061574088079978586", "node_type": "4", "metadata": {"date": "2023-01-08T09:16:25.691+00:00"}, "hash": "a483055626bc25997fcf1ea233cd1178e33b8bde53c3186505f4da8579453307", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "496561d5-a2df-48b3-9d76-2407e27ce23b", "node_type": "1", "metadata": {"date": "2023-01-03T07:37:12.971+00:00"}, "hash": "124f28a4ec898caec61d34ead91b66e000357582118b5ec7863047f50c0541e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c941520e-8c1c-4b72-9bb1-9b7b68e0c6da", "node_type": "1", "metadata": {}, "hash": "1f3fd2392bff6e4fa88d08ddba59e89634eaf301e298c57f0c5cfaa599245b71", "class_name": "RelatedNodeInfo"}}, "text": "ravitheja:\nHello all! Thanks, @jerryjliu98  for creating a useful tool and giving it to the community. \n\nFollowing are some things I am facing issues around the queries:\n\n1. Unable to retrieve the numbers present in the document. \n    1. \u201cWhat is the valuation of the company?\u201d - the document has clear text on this question but sometimes it says I don\u2019t have any information and sometimes it just throws some numbers.\n    2. \u201cHow many engineers do you require to hire in next quarter?\u201d - the answer is clearly present in the document but throws random answers\n2. Unable to calculate based on existing information.\n    1. \u201cWhat is the total work experience of the person?\u201d - It is an indirect calculation but does not answer accurately.\n\nDid anyone face similar issues? Any help will be highly appreciated.\nmmz-001:\nI'm also facing similar issues.\n\nI indexed a long chapter of a book that explains 7 key levels of writing online and asked it to summarize those main points. (I used ListIndex). Although it got the first part of the answer partially right, it completely made up the last part. After debugging what's happening by setting `verbose=True` here's what I noticed:\n\n- The first part of the initial response was correct, however since it had only information about the first 3 key points, it completely made up the last part to finish the list of the 7 main points\n- During the refinement step, it didn't correct its mistakes but just added more stuff to the end of the main points with only minor adjustments to the previous responses.\n- After several refinements, all 7 points had stuff from all over the chapter\n\nAlthough I haven't tested this yet, the solution for this might be to change the refinement prompt to remind the LLM that a partial answer is okay and try to synthesize the answer using only the given information.\n\nIn a broader sense, \"taming\" LLMs to not make up stuff is a significant obstacle when it comes to extracting information from external knowledge bases.\nravitheja:\nInteresting. I faced similar issues but I asked it to answer keeping its answer as per the document, so for every query (q) my prompt will be -> query(q) + \"strictly keep your answer as per document otherwise just give the answer as NO\" -> this made the answer given to be stricter to the document in whatever experiments I did.", "start_char_idx": 0, "end_char_idx": 2331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c941520e-8c1c-4b72-9bb1-9b7b68e0c6da": {"__data__": {"id_": "c941520e-8c1c-4b72-9bb1-9b7b68e0c6da", "embedding": null, "metadata": {"date": "2023-01-08T18:40:03.976+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1061715932248035448", "node_type": "4", "metadata": {"date": "2023-01-08T18:40:03.976+00:00"}, "hash": "8ecc7baebf4dcefe79871981b856ed63ac58c850faee919f904feb91c9f2ea39", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "160f54b4-9ba5-4696-a81a-2533560e241e", "node_type": "1", "metadata": {"date": "2023-01-08T09:16:25.691+00:00"}, "hash": "8f1c3920a88025dbe2bb13822af80f3f49256492ce24388e946b3002e0025092", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "217abd49-cf1b-4a09-9885-cb526e4c6cd7", "node_type": "1", "metadata": {}, "hash": "0515423f2ce6544e58c7e51e5a4dd787eabeb35ed9ec5586702375b5a6c4f5a1", "class_name": "RelatedNodeInfo"}}, "text": "LZRS:\nanyone else getting issues with the faiss example notebook?\n\nwhen i run\n`index = GPTFaissIndex(documents, faiss_index=faiss_index)`\n\ni get this error:\n`TypeError: in method 'IndexFlatCodes_add', argument 3 of type 'float const *'`\n\nhappy to make a full github issue for this too\nacw500:\nSame issue here. Did you find a solution? I only found this: https://github.com/facebookresearch/faiss/issues/461", "start_char_idx": 0, "end_char_idx": 406, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "217abd49-cf1b-4a09-9885-cb526e4c6cd7": {"__data__": {"id_": "217abd49-cf1b-4a09-9885-cb526e4c6cd7", "embedding": null, "metadata": {"date": "2023-01-11T18:39:31.471+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1062802959508963439", "node_type": "4", "metadata": {"date": "2023-01-11T18:39:31.471+00:00"}, "hash": "f710a7a4c01f2284b817c7b2ddafbfeb309d4173574dd670a5b4eed224485964", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c941520e-8c1c-4b72-9bb1-9b7b68e0c6da", "node_type": "1", "metadata": {"date": "2023-01-08T18:40:03.976+00:00"}, "hash": "28396ee0ba896a7db834d8bb9b463a7caa2b59098707ab37472e970a9584a40b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a16ee3ec-1789-4712-b5b0-9c666b602c2c", "node_type": "1", "metadata": {}, "hash": "2d07fff00371eae0f54e935a5da7d48a88c920959d47aeccd7740b4b0581d201", "class_name": "RelatedNodeInfo"}}, "text": "scruffalubadubdub:\nHey, I'm getting this error to build a TreeIndex from a DiscordReader. I get it in concept, but I'm wondering if there's a way around the issue when I can't actually manipulate the data\njerryjliu98:\n@scruffalubadubdub super sorry, i totally missed this! Interesting...this means that the token itself is bigger than the chunk limit. We usually split by spaces, out of curiosity do you happen to know what this data is?", "start_char_idx": 0, "end_char_idx": 437, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a16ee3ec-1789-4712-b5b0-9c666b602c2c": {"__data__": {"id_": "a16ee3ec-1789-4712-b5b0-9c666b602c2c", "embedding": null, "metadata": {"date": "2023-01-12T18:32:21.99+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063163546000707725", "node_type": "4", "metadata": {"date": "2023-01-12T18:32:21.99+00:00"}, "hash": "6172aa9d04b9859ccdb10ac723d544034f3cd94479b7fbe12355ae60e495b89a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "217abd49-cf1b-4a09-9885-cb526e4c6cd7", "node_type": "1", "metadata": {"date": "2023-01-11T18:39:31.471+00:00"}, "hash": "5a6b15b396b45f1989d58f7c23472cd68222e986e17bdc058edc9207f3e8982a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83475daa-cff8-4ed1-afc9-c8d441a54a6f", "node_type": "1", "metadata": {}, "hash": "f9aeef4ae1a2ddc54d529a9e008dc0f19626f56d6dde58f497c51fa0b187288f", "class_name": "RelatedNodeInfo"}}, "text": "scuba.steve.0:\nHey @jerryjliu98 ! Just stumbled across GPTIndex today, and gotta say this is amazing stuff! I'm very interested in the example you tweeted about text to SQL and shown in this notebook (https://github.com/jerryjliu/gpt_index/blob/main/examples/struct_indices/SQLIndexDemo.ipynb). What is the best way to pull out just the SQL generated by the query in cell 12?\njerryjliu98:\nthat's a great question, you know I actually don't have explicit support for that yet. Want to open an issue in Github and/or #\ud83d\udca1feature-requests ? \ud83d\ude42\nscuba.steve.0:\nwill do! appreciate the responsiveness!", "start_char_idx": 0, "end_char_idx": 592, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83475daa-cff8-4ed1-afc9-c8d441a54a6f": {"__data__": {"id_": "83475daa-cff8-4ed1-afc9-c8d441a54a6f", "embedding": null, "metadata": {"date": "2023-01-13T15:14:44.46+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063476199780782100", "node_type": "4", "metadata": {"date": "2023-01-13T15:14:44.46+00:00"}, "hash": "920ab7aa56e55369fe9b3e738a6ecd6e05e24483dbefadf33f614d7a2c97b1f3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a16ee3ec-1789-4712-b5b0-9c666b602c2c", "node_type": "1", "metadata": {"date": "2023-01-12T18:32:21.99+00:00"}, "hash": "7b8edd2ce67411afa719ca792c535478868e72ca3c8646be5208331d2be3eb14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "157f0efa-205c-4fc3-82cc-71b17861e11f", "node_type": "1", "metadata": {}, "hash": "7dc4a233fa590454817a1bc4c169863df25f0903a6e03d939e5a4b391c44ce38", "class_name": "RelatedNodeInfo"}}, "text": "josecgomez:\nhello all,\nI am trying to get a basic sample running, I get Integer Division error when running an index query any idea?\njerryjliu98:\nInteresting, I haven't seen this before. Could you file a GH issue?", "start_char_idx": 0, "end_char_idx": 213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "157f0efa-205c-4fc3-82cc-71b17861e11f": {"__data__": {"id_": "157f0efa-205c-4fc3-82cc-71b17861e11f", "embedding": null, "metadata": {"date": "2023-01-14T18:14:26.797+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063883812045594724", "node_type": "4", "metadata": {"date": "2023-01-14T18:14:26.797+00:00"}, "hash": "e9da6a67bddad9ffddc2564a9fabd511c7053227c960003f905aeb5f142b3c31", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83475daa-cff8-4ed1-afc9-c8d441a54a6f", "node_type": "1", "metadata": {"date": "2023-01-13T15:14:44.46+00:00"}, "hash": "db6a8e9ed6339c1cd5652452657025f76f820b27711181e4c3568d6af859ab32", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "238bf44f-0e5a-4fa6-8935-8e72dd5c85b8", "node_type": "1", "metadata": {}, "hash": "2d2b163e42eee8a620a8c0a613488f9074f283fb2db0e56ebd0e6dba26a0bede", "class_name": "RelatedNodeInfo"}}, "text": "Napolean_Solo:\nHi, can someone please explain what's *prompt retrieval*?\njerryjliu98:\n@Napolean_Solo is this referring to a term in the documentation/readme?", "start_char_idx": 0, "end_char_idx": 157, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "238bf44f-0e5a-4fa6-8935-8e72dd5c85b8": {"__data__": {"id_": "238bf44f-0e5a-4fa6-8935-8e72dd5c85b8", "embedding": null, "metadata": {"date": "2023-01-14T18:16:08.498+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063884238610518126", "node_type": "4", "metadata": {"date": "2023-01-14T18:16:08.498+00:00"}, "hash": "a37d0367d47d0199815e6c843002d8102315ab3d391e7f7c950bc1bd5cc42bf8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "157f0efa-205c-4fc3-82cc-71b17861e11f", "node_type": "1", "metadata": {"date": "2023-01-14T18:14:26.797+00:00"}, "hash": "5150742d7f785424e61101902ef611a6f7d53a327072f17059f9ed05de6c9415", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "062238e7-a3af-42ff-9fbb-cf0a1b2573be", "node_type": "1", "metadata": {}, "hash": "fb24738b30747f132a1a5133173d151cbe6def1a181256dd89b3f8de2963b021", "class_name": "RelatedNodeInfo"}}, "text": "Napolean_Solo:\nNot really, i guess it might have something to do with though\njerryjliu98:\noh i was just asking, where did you find this term - just so i have context to better answer the question", "start_char_idx": 0, "end_char_idx": 195, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "062238e7-a3af-42ff-9fbb-cf0a1b2573be": {"__data__": {"id_": "062238e7-a3af-42ff-9fbb-cf0a1b2573be", "embedding": null, "metadata": {"date": "2023-01-14T18:18:10.794+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063884751557120030", "node_type": "4", "metadata": {"date": "2023-01-14T18:18:10.794+00:00"}, "hash": "3e39fe400399be3497361a62219c85a588e710ef6d7fa93524a6577c7cdb54e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "238bf44f-0e5a-4fa6-8935-8e72dd5c85b8", "node_type": "1", "metadata": {"date": "2023-01-14T18:16:08.498+00:00"}, "hash": "feb1dca479f32f03eae9b05e5158cfbcf4b536d3e2cf6bbd82ed0442130060de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d5679e5a-906c-4ef9-a134-9ff506e3b10d", "node_type": "1", "metadata": {}, "hash": "8b82050922a49f65c6b4de3178e399c3fc0895f799b9c535c4e8f8b843dfe75a", "class_name": "RelatedNodeInfo"}}, "text": "Napolean_Solo:\nIt's used in embeddings task\njerryjliu98:\noh! i see. seems like they're using \"prompts\" in this case to refer to examples used for in-context learning, not the overall \"input prompt\". You can think of \"examples\" as what GPT Index does too - through our data structures, we retrieve the relevant \"examples\" and put them in an overall input prompt.", "start_char_idx": 0, "end_char_idx": 361, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5679e5a-906c-4ef9-a134-9ff506e3b10d": {"__data__": {"id_": "d5679e5a-906c-4ef9-a134-9ff506e3b10d", "embedding": null, "metadata": {"date": "2023-01-14T20:13:48.115+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063913848790319136", "node_type": "4", "metadata": {"date": "2023-01-14T20:13:48.115+00:00"}, "hash": "22a0d48c53e5908a4de279c1bc4db7fc9ae798dbf91890b940058d763d1e333c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "062238e7-a3af-42ff-9fbb-cf0a1b2573be", "node_type": "1", "metadata": {"date": "2023-01-14T18:18:10.794+00:00"}, "hash": "06e84319dfe7fac5f2293f0b48fee0792d7eb2c947f84a157d5b59510f04f378", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b88a38b0-d2c8-4013-aec5-af865ef21ad6", "node_type": "1", "metadata": {}, "hash": "a3769226b92caa3fb50b525edf058fa0afe9c633010f732e47769d6dee549466", "class_name": "RelatedNodeInfo"}}, "text": "ThePlanMan:\nHey, this is the most basic problem, but I can't seem to pip install. I'm on Windows (anaconda), python 3.6.13. What am I missing?\njerryjliu98:\nI haven\u2019t tested windows extensively, what\u2019s the stack trace?", "start_char_idx": 0, "end_char_idx": 217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b88a38b0-d2c8-4013-aec5-af865ef21ad6": {"__data__": {"id_": "b88a38b0-d2c8-4013-aec5-af865ef21ad6", "embedding": null, "metadata": {"date": "2023-01-14T22:36:09.915+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063949675696234586", "node_type": "4", "metadata": {"date": "2023-01-14T22:36:09.915+00:00"}, "hash": "ba657480cb8c98ed1e19896d16e098234b2f437d7d4289cfe4bdf4f226c126a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5679e5a-906c-4ef9-a134-9ff506e3b10d", "node_type": "1", "metadata": {"date": "2023-01-14T20:13:48.115+00:00"}, "hash": "5f19f9a90bd7ea79f663bac44387eab5bfff021b2dbbe615b92818a927175441", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cb54e1b-f392-4321-a451-6a58cad4a56a", "node_type": "1", "metadata": {}, "hash": "7c5d24a8959b5577d8b15e14be1d0c498f9763119738e513cf5d364f27dcbb7e", "class_name": "RelatedNodeInfo"}}, "text": "danshipper:\nhey!! i love GPTIndex, it's such a cool project. i'm experimenting with using it to summarize journal entries with questions like, \"Can you summarize the author's relationship with X?\" or, \"What is something that causes the author to be happy?\" etc. \n\ncurious for your take on a few things:\n\n1. what index would be best for this use case? i'm using a TreeIndex in summarize mode and it seems pretty good...but I'm curious how that contrasts with other indexes, and modes. there's info in the docs but it's not clear exactly how it relates to my use case.\n\n2. how can i minimize cost? i have a ton of journal entries, so each time i run a query it looks like it's rebuilding the tree...so it's getting pretty expensive pretty quickly. curious what y'all tend to do in that scenario.\n\nthanks for any insight!\njerryjliu98:\nRe: (3), you can try `mode=\"embedding\"` but also with `response_mode=\"tree_summarize\"`! This will 1) fetch the relevant embedded chunks with top-k neighbor search, and then essentially create a tree index on the fly to summarize your answer for you. Your answers may be worse because you may also need to tune the `top_k_similarity` parameter (by default it's 1)", "start_char_idx": 0, "end_char_idx": 1194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cb54e1b-f392-4321-a451-6a58cad4a56a": {"__data__": {"id_": "3cb54e1b-f392-4321-a451-6a58cad4a56a", "embedding": null, "metadata": {"date": "2023-01-14T23:23:31.908+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1063961595878838385", "node_type": "4", "metadata": {"date": "2023-01-14T23:23:31.908+00:00"}, "hash": "84cb06e8f6b05a6956ddfbad52ff84a0b36a4d791d3bb56633b518b843019138", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b88a38b0-d2c8-4013-aec5-af865ef21ad6", "node_type": "1", "metadata": {"date": "2023-01-14T22:36:09.915+00:00"}, "hash": "2b4822b8e1a8efc85547cb10be6df9150ec4e13aa925ed55fe235f59c8add594", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4cfb4e15-7a37-4f27-a86c-ad8279d60d8c", "node_type": "1", "metadata": {}, "hash": "9e42cd10d79586bcb8c087e1f6df4c36b68ae619a54d3669d24423403babf59d", "class_name": "RelatedNodeInfo"}}, "text": "danshipper:\nso the top_k_similarity by default only pulls in the most relevant document chunk?\njerryjliu98:\nyep - you can set the top_k to something higher to fetch more relevant chunks\ndanshipper:\nis this what it's supposed to look like?\n\nindex = TreeIndex(documents=documents)\nresponse = index.query(query, mode=\"embedding\", response_mode=\"tree_summarize\", top_k_similarity=5, verbose=True)", "start_char_idx": 0, "end_char_idx": 392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4cfb4e15-7a37-4f27-a86c-ad8279d60d8c": {"__data__": {"id_": "4cfb4e15-7a37-4f27-a86c-ad8279d60d8c", "embedding": null, "metadata": {"date": "2023-01-15T03:09:07.27+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1064018367301812346", "node_type": "4", "metadata": {"date": "2023-01-15T03:09:07.27+00:00"}, "hash": "15a4ff2a8bd034300bfeb9ab4de643830d732956c5a96eaf213a25bc475bf23d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cb54e1b-f392-4321-a451-6a58cad4a56a", "node_type": "1", "metadata": {"date": "2023-01-14T23:23:31.908+00:00"}, "hash": "e1d014d8b9cecbc0838f08406d51e0375a36135156bfc51f5d3e2263cdbe945d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17d05f81-853b-44ea-9601-2f592261658f", "node_type": "1", "metadata": {}, "hash": "2159b5ee504a56453710400650fcc06846a321de0b465616ab4110b1c91a1fb8", "class_name": "RelatedNodeInfo"}}, "text": "RosyNoisy:\nhi! can I ask question about usage of `SimpleDirectoryReader('data').load_data()` ? I want to know syntax of text file (content must be splitted by space or something...)\njerryjliu98:\nwe do use space by default as a separator (in order to do text chunking), is that ok for your use case?\nRosyNoisy:\nThank you for answering! To be honest, I used different function when query sending, and it caused the problem. I hope the gpt-index community continues to larger.", "start_char_idx": 0, "end_char_idx": 473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17d05f81-853b-44ea-9601-2f592261658f": {"__data__": {"id_": "17d05f81-853b-44ea-9601-2f592261658f", "embedding": null, "metadata": {"date": "2023-01-15T09:20:07.75+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1064111734522134538", "node_type": "4", "metadata": {"date": "2023-01-15T09:20:07.75+00:00"}, "hash": "6ac73151d4cacf31560d856d7936649a635b5c1fd8fb204a9dc5e09888f84ff0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4cfb4e15-7a37-4f27-a86c-ad8279d60d8c", "node_type": "1", "metadata": {"date": "2023-01-15T03:09:07.27+00:00"}, "hash": "ed078d3de5a75d9e64891ceb04233993f8a9a90aa59134ae3ccd1d9c47059249", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dece5fe8-7a05-4f23-8a69-7a0ba598fe51", "node_type": "1", "metadata": {}, "hash": "ebcaee8512add474b5f1cbc13ee2c63d78e343991dd34f4abffb9b4151a18853", "class_name": "RelatedNodeInfo"}}, "text": "ThePlanMan:\nA few more questions (trying to really get to grips with this):\n1. Are the index embeddings just used locally to search the documents for content related to the question (eg. we don't actually send the embedding to chatGPT3?) - if so am I correct in thinking the embeddings are just word vectors that I could switch out for a local model?\n2. Is there an inbuilt method by which I can return the document filename rather than the document ID (as the document ID doesn't tell me which document, unless  I can convert it to filename)?\njerryjliu98:\n(1) Yep basically! We also use OpenAI to embed the text, though you can also customize the embeddings with https://discord.com/channels/1059199217496772688/1063411375189262356/1063984028509798451\n(2) Hmm good point. So you can set the document id manually after the Documents have been created (it's not a great UX, I can think about how to improve); if it's not set we autogenerate an ID. e.g. do something like \n```\nreader = SimpleDirectoryReader(directory)\ndocuments = reader.load_data()\nfor doc in documents:\n   doc.doc_id = <filename>\n```\nActually let me think of a better solution for this in SimpleDirectoryReader, i could just set the document id to the filename by default\nThePlanMan:\nFantastic! Thanks for the quick responses! I've got a fair amount of expertise in NLP (especially vectorisation), in the past I've always used a database rather than an index but this does feel sleek!", "start_char_idx": 0, "end_char_idx": 1451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dece5fe8-7a05-4f23-8a69-7a0ba598fe51": {"__data__": {"id_": "dece5fe8-7a05-4f23-8a69-7a0ba598fe51", "embedding": null, "metadata": {"date": "2023-01-19T00:30:31.03+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065428004760731718", "node_type": "4", "metadata": {"date": "2023-01-19T00:30:31.03+00:00"}, "hash": "bb3308823751d17b31470b504b6350ca784cd54cd7015d31302970c443e229dc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17d05f81-853b-44ea-9601-2f592261658f", "node_type": "1", "metadata": {"date": "2023-01-15T09:20:07.75+00:00"}, "hash": "b80c49b1549f7fab0a5f32a699d5aa88e2aef8650786aa344159dc2d742e14c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7683098-3856-47d7-b513-bece11f9b5f7", "node_type": "1", "metadata": {}, "hash": "6ee1a7efd949214db7f9a4048720550a44ab64ad74ee683e982b84a98f9df3d7", "class_name": "RelatedNodeInfo"}}, "text": "yourbuddyconner:\nIs there any way to quiet the output when inserting to an index? It's kind of verbose and verbose=False doesnt do it...\njerryjliu98:\nAh yeah there was a TODO somewhere to quiet the logging \ud83d\ude2c  apologies for the text dump so far, hopefully will get to this soon. In the meantime you could try https://stackoverflow.com/questions/8391411/how-to-block-calls-to-print (which is a total hack)\nyourbuddyconner:\nCool, I can probably contribute this, working fulltime on this project and super happy to contribute to the SOTA\njerryjliu98:\nup to you but that sounds amazing if you do get to it! the corresponding GH issue is here: https://github.com/jerryjliu/gpt_index/issues/181", "start_char_idx": 0, "end_char_idx": 687, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7683098-3856-47d7-b513-bece11f9b5f7": {"__data__": {"id_": "b7683098-3856-47d7-b513-bece11f9b5f7", "embedding": null, "metadata": {"date": "2023-01-19T03:22:59.243+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065471408311898153", "node_type": "4", "metadata": {"date": "2023-01-19T03:22:59.243+00:00"}, "hash": "5e038f7342d47407edbedacdd91e476894082c966b62cf1f060da6ed7825b971", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dece5fe8-7a05-4f23-8a69-7a0ba598fe51", "node_type": "1", "metadata": {"date": "2023-01-19T00:30:31.03+00:00"}, "hash": "4c818d105ba373d30d856e76700c07fe5987326f59a7e4d3eb5736f9aff32821", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "24c61c9e-78ad-43f3-a7e5-174a189d10df", "node_type": "1", "metadata": {}, "hash": "eff24f9ba2046f79adef1285141530a3b2b801f7959a016b1555f71897cebb70", "class_name": "RelatedNodeInfo"}}, "text": "takeura:\nWhen I run index.query, the response is cut off in the middle. Can I change the maximum length of response?\njerryjliu98:\nyep! if you're using openai, cohere, or AI21 LLM from langchain, just set max_tokens\ntakeura:\nIs there an option to change max tokens in Vector Store Index? I couldn't find it.\njerryjliu98:\nwe use langchain for the underlying LLM class https://gpt-index.readthedocs.io/en/latest/how_to/custom_llms.html\ntakeura:\nthanks", "start_char_idx": 0, "end_char_idx": 448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "24c61c9e-78ad-43f3-a7e5-174a189d10df": {"__data__": {"id_": "24c61c9e-78ad-43f3-a7e5-174a189d10df", "embedding": null, "metadata": {"date": "2023-01-19T10:27:58.111+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065578358315954246", "node_type": "4", "metadata": {"date": "2023-01-19T10:27:58.111+00:00"}, "hash": "67ac30c56772c8374e5cb2de7f994156865d2a996083ce0f94c93fcb0f74df6a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7683098-3856-47d7-b513-bece11f9b5f7", "node_type": "1", "metadata": {"date": "2023-01-19T03:22:59.243+00:00"}, "hash": "a8f3d5dc4d1384923e202ee5f0122b1a6344a24ec6a03fbd9f3538d372786ccf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c17514d9-0028-422d-963f-4e4a2d85f41a", "node_type": "1", "metadata": {}, "hash": "e0bc1da787fe2d20d0e3be7d982a4571dcaa8dfa5fbdd19e9e20d87d2d829aa1", "class_name": "RelatedNodeInfo"}}, "text": "0ptim:\nI use `SimpleWebPageReader` to scrape this page `https://www.defichainwiki.com/docs/auto/App_Sync_Boost`.\n\nThen I index it with `ListIndex(documents)` which throws `A single term is larger than the allowed chunk size.Term size: 7103Chunk size: 3714`.\n\nI think it must be because of the image which the scraper loads as base64 string (message.txt).\n\nHow to work around this issue?\nlet it all out of you \ud83d\ude11:\nthe default seprator use in text splitter is space, your txt file dnt have a space thats why it throws error\n0ptim:\nThank you.\nYes, I knew this already from the question you asked. But the page is scraped from a webpage. So either I have to split manually or GPT Index can somehow handle these cases. Or there's something I'm not seeing clearly.\nlet it all out of you \ud83d\ude11:\nI also scraped my data from a web page; what I did was clean my data a little bit. I fixed the lines where it doesn't have a space, or you can also play around on the text_splitter function and change the separator there. Right now it doesn't support \"\\n\" but I believe they are fixing the issue so that it can support both \"space\" and the \"\\n\" separator.\njerryjliu98:\n@0ptim @let it all out of you \ud83d\ude11 sorry about this behavior. I'll put out a PR today that hopefully fixes some of the text splitting, have been meaning to get to it\n0ptim:\nYou really don't have to be sorry. Great respect for doing this all. Take care! \ud83d\ude0a", "start_char_idx": 0, "end_char_idx": 1403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c17514d9-0028-422d-963f-4e4a2d85f41a": {"__data__": {"id_": "c17514d9-0028-422d-963f-4e4a2d85f41a", "embedding": null, "metadata": {"date": "2023-01-19T17:24:59.994+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065683307699904584", "node_type": "4", "metadata": {"date": "2023-01-19T17:24:59.994+00:00"}, "hash": "5538288c087bf33b3ed78292d67694db87f4af234d8730dcf1702a3e4b7fedb0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "24c61c9e-78ad-43f3-a7e5-174a189d10df", "node_type": "1", "metadata": {"date": "2023-01-19T10:27:58.111+00:00"}, "hash": "28e01dcd07d67577dc34bbd1a80fb7439d23f9461f62ec647679e25e65abc382", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a3e59177-c6a6-4ade-a61f-92ae6ac302e5", "node_type": "1", "metadata": {}, "hash": "b68648fb08e3d6c4f69be46799dc9c1baf9d12a996dd0c25534ac973f1441690", "class_name": "RelatedNodeInfo"}}, "text": "karamkhanna:\ndoes anyone have any tips or know anything to read about using gpt-index and langchain together? i want to build langchain agents, but want the functionality of going over prompt limits and data strutures with gpt-index\nBlockchain Man:\nI think you use langchain to process documents so that they can be added to the index, but I\u2019m just getting started.\njerryjliu98:\nactually this sounds like a bug in gpt index \ud83d\ude22  gpt index should be able to handle document processing / chunking under the hood (that's one of the main value props). can you file a GH issue cc @statsman @Blockchain Man\nBlockchain Man:\nNot sure what the bug is that you are referring to. Is this related to document summary text? The chunking is working fine.", "start_char_idx": 0, "end_char_idx": 738, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3e59177-c6a6-4ade-a61f-92ae6ac302e5": {"__data__": {"id_": "a3e59177-c6a6-4ade-a61f-92ae6ac302e5", "embedding": null, "metadata": {"date": "2023-01-19T18:21:21.097+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065697489073741915", "node_type": "4", "metadata": {"date": "2023-01-19T18:21:21.097+00:00"}, "hash": "09069dd3a0224248f5f7efa68b319a668e067f75d0a55f367988189c0cf49bd4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c17514d9-0028-422d-963f-4e4a2d85f41a", "node_type": "1", "metadata": {"date": "2023-01-19T17:24:59.994+00:00"}, "hash": "22c776406719e246af1c744192639282f91a77b96fb4fa3cbfb45e70f9f9a999", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac8d1944-cbac-41f0-a396-edbcaf90207f", "node_type": "1", "metadata": {}, "hash": "ec417df07e6908db7ec7ba31562a8b2c639bf65fa44a3df0d8fa3f316b6d949f", "class_name": "RelatedNodeInfo"}}, "text": "statsman:\nHi all.  I'm loving GPT_Index.  Quick question.  When asking a question, is the answer coming for a single source?  How can we have it injest a lot of data and synthesize an answer from multiple sources?\n0ptim:\nYou can just you can just create a document and scrape for different web pages for example.\n```\ndocuments = SimpleWebPageReader(html_to_text=True).load_data(urls)\n```", "start_char_idx": 0, "end_char_idx": 387, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac8d1944-cbac-41f0-a396-edbcaf90207f": {"__data__": {"id_": "ac8d1944-cbac-41f0-a396-edbcaf90207f", "embedding": null, "metadata": {"date": "2023-01-20T01:25:52.268+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065804322908164246", "node_type": "4", "metadata": {"date": "2023-01-20T01:25:52.268+00:00"}, "hash": "61a9c94df7a0d3993b436e66f7a6ce7787857f347f74869b4918c69a06c067c6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a3e59177-c6a6-4ade-a61f-92ae6ac302e5", "node_type": "1", "metadata": {"date": "2023-01-19T18:21:21.097+00:00"}, "hash": "82ea5d941dfd4a3ba588da8c74ced758aea9eb64a7240ccdb8554d8cc9a9a624", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50e8ecf6-e448-4a08-8d78-2e487b05d6c6", "node_type": "1", "metadata": {}, "hash": "2e879dac6d8cc84c7104281ce68d047afa9623d2fec24e8db982841bd7a64a87", "class_name": "RelatedNodeInfo"}}, "text": "stevewill99:\nHey there, does anybody know how to return multiple results?\nI tried the system against a folder of resumes, and queries against it work great. But I only get one result.\nExample question: \"Which people have changed jobs a lot?\" --> it just talks about one person, when I want a list.\njerryjliu98:\n@stevewill99 1) change similarity_top_k to a number greater than 1 during query-time. 2) can you specify that in the query? e.g. (\"Please give me a list of people..\" etc.)\nstevewill99:\n1) yep, works! but setting it to 10 makes it take a LOT more time to query. 2) I already tried specifying in the query, but it never worked. Just one result.\njerryjliu98:\nYou can also set chunk_size_limit to a smaller number (say 512) when creating the index, you\u2019ll get smaller chunks == cheaper and faster\nstevewill99:\nOkay, I'll try that! Thanks! Do I have to balance it carefully so a resume fits fully in a chunk?\njerryjliu98:\nnope! you don't have to worry about that\nstevewill99:\nAre there any tradeoffs? Why not set it to maybe 512 as default?", "start_char_idx": 0, "end_char_idx": 1046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50e8ecf6-e448-4a08-8d78-2e487b05d6c6": {"__data__": {"id_": "50e8ecf6-e448-4a08-8d78-2e487b05d6c6", "embedding": null, "metadata": {"date": "2023-01-20T01:43:58.887+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065808880518566010", "node_type": "4", "metadata": {"date": "2023-01-20T01:43:58.887+00:00"}, "hash": "1679feca1fe727f8fbd6aa89cf16699c99d937d2e0ebd5738f1835f962ea5d1e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac8d1944-cbac-41f0-a396-edbcaf90207f", "node_type": "1", "metadata": {"date": "2023-01-20T01:25:52.268+00:00"}, "hash": "e69ad621abf1ea4a730a3a1d87adbc6cecf5fb25fbe9df7989a8c2a31abfa472", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "968ad9f8-cd8b-4259-978d-791c38405a71", "node_type": "1", "metadata": {}, "hash": "c3f55207c437b4cbc4df5a29a2d6dc5ef5e29bfb7c8629da84e37d85a6bafe36", "class_name": "RelatedNodeInfo"}}, "text": "hypervik:\nHow can I insert text and embeddings into an empty SimpleVector Index? I already have embeddings for each text chunk (generated independently). The code is as follows:\n\n```from gpt_index import Document\nindex = GPTSimpleVectorIndex([])\ndoc_chunks = []\nfor index, row in df.iterrows():\n    doc = Document(row[\"sentence\"], embedding = row[\"ada_search\"])\n    doc_chunks.append(doc)\n\nfor doc_chunk in doc_chunks:\n    index.insert(doc_chunk)```\n\nI get the following error: AttributeError: 'int' object has no attribute 'insert'\nhypervik:\nOr is it not possible to insert Documents into an empty SimpleVectorIndex?", "start_char_idx": 0, "end_char_idx": 617, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "968ad9f8-cd8b-4259-978d-791c38405a71": {"__data__": {"id_": "968ad9f8-cd8b-4259-978d-791c38405a71", "embedding": null, "metadata": {"date": "2023-01-20T12:47:34.383+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065975878812696666", "node_type": "4", "metadata": {"date": "2023-01-20T12:47:34.383+00:00"}, "hash": "86cb34b11c5ab08caa662e46dfe811920a7f2e89184b6704800e9423e72c4fd8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50e8ecf6-e448-4a08-8d78-2e487b05d6c6", "node_type": "1", "metadata": {"date": "2023-01-20T01:43:58.887+00:00"}, "hash": "8eb8ecd786f4415a55242c60dacf2b058ed9621baf91ab06615d5cc694f89bb3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a811aac3-e999-42f0-845d-2edb1bcbc896", "node_type": "1", "metadata": {}, "hash": "fe25532a83f0a21b80ec1f1847edcd0b50e39f4558b0ac4f0377de21f0e111a8", "class_name": "RelatedNodeInfo"}}, "text": "stolpystolps:\nI\u2019m just getting started with the library, so apologies if this is just me doing something dumb. \n\nI have a directory of documents I want to index. It contains 65 text documents totaling about 60k characters. \n\nRan a pretty straightforward code:\n\n```from gpt_index import SimpleDirectoryReader\nfrom gpt_index import TreeIndex\nimport os\n\nwith open('openaiapikey.txt', 'r') as f:\n    os.environ['OPENAI_API_KEY'] = f.read()\n\n\ndocuments = SimpleDirectoryReader('transcripts').load_data()\nindex = TreeIndex(documents)\n\nindex.save_to_disk('index.json')```\n\nCode ran for a while (and used about 500,000 tokens) before erroring out with the following error message: \n\n`openai.error.ServiceUnavailableError: The server is overloaded or not ready yet.`\nKKT:\n@jerryjliu98 i can make a quick PR to add this exception type (and also a couple others from https://github.com/openai/openai-python/blob/main/openai/error.py) to the retry list", "start_char_idx": 0, "end_char_idx": 940, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a811aac3-e999-42f0-845d-2edb1bcbc896": {"__data__": {"id_": "a811aac3-e999-42f0-845d-2edb1bcbc896", "embedding": null, "metadata": {"date": "2023-01-20T12:52:38.251+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065977153327468575", "node_type": "4", "metadata": {"date": "2023-01-20T12:52:38.251+00:00"}, "hash": "10584ec54e883d0c8b87cd857f25a25ab7f478dfaf1fd2da193e4ec7e4424db9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "968ad9f8-cd8b-4259-978d-791c38405a71", "node_type": "1", "metadata": {"date": "2023-01-20T12:47:34.383+00:00"}, "hash": "8c5c5203b3d92faa593b65b38bfff6e375365fcd79c64701200aa6d1965f6b7a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "009495fc-69c7-450d-81b4-590d16364bd0", "node_type": "1", "metadata": {}, "hash": "4b0cf7243d2aa6f0a497a303885039bd50524d141f70a938fc2f9a336c761a26", "class_name": "RelatedNodeInfo"}}, "text": "bair82:\nWell, it's probably OpenAI servers being overloaded\nBlockchain Man:\nAnd Jerry, what's the plan to extend this repo to use other ML models? Company leadership is hesitant about proprietary info going through OpenAI, I was wondering how much trouble it would be to specify GPT-J or something like CloudNLP as the underlying LLM. Thoughts?\ngojira:\nIf GPT_Index uses LangChain, I recently added support for Azure OpenAI completions there.  Azure OpenAI (https://aka.ms/azure-openai) has same models as OpenAI but in a separate stack with cloud provider features like privacy & SLA.  If you're looking for OSS that's a different story, but check it out if it meets your use case.  Happy to get on a call - DM me if interested.", "start_char_idx": 0, "end_char_idx": 729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "009495fc-69c7-450d-81b4-590d16364bd0": {"__data__": {"id_": "009495fc-69c7-450d-81b4-590d16364bd0", "embedding": null, "metadata": {"date": "2023-01-20T13:02:21.434+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1065979599374262333", "node_type": "4", "metadata": {"date": "2023-01-20T13:02:21.434+00:00"}, "hash": "6d19f888f953df215b5a182bf8bf703f10f9f151033b344158125157895519f9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a811aac3-e999-42f0-845d-2edb1bcbc896", "node_type": "1", "metadata": {"date": "2023-01-20T12:52:38.251+00:00"}, "hash": "8db64a6d8941eee0c4b414be7d7fa5329c55d15b711c0956b042f8ec2f9a3e31", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72243f22-454e-43e3-9e4a-ef306ce1d393", "node_type": "1", "metadata": {}, "hash": "4274a0d07b78198953fbca72c8e51be58062f73530a65fd0c0031eec1fd07250", "class_name": "RelatedNodeInfo"}}, "text": "stolpystolps:\nI\u2019ve seen some posts suggesting it could be due to going over the rate limit with the request\u2014is there any way to throttle the gpttreeindex? Or at least have it save intermittently so if it does error out I don\u2019t have to start from scratch?\nerajasekar:\n@stolpystolps I am running into the same rate-limiting issue. How did you end up resolving it?\nstolpystolps:\nAre you using the free credit grant? I had to switch to a paid account and it started working just fine\nerajasekar:\nDo you mean switching to chatbot plus resolved the issue?\nstolpystolps:\nNo just adding a credit card for tokens instead of using the $18 they give for free when you sign up", "start_char_idx": 0, "end_char_idx": 664, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72243f22-454e-43e3-9e4a-ef306ce1d393": {"__data__": {"id_": "72243f22-454e-43e3-9e4a-ef306ce1d393", "embedding": null, "metadata": {"date": "2023-01-20T17:21:30.903+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1066044818574290964", "node_type": "4", "metadata": {"date": "2023-01-20T17:21:30.903+00:00"}, "hash": "cb9e41b6a1ed35d2d5afc1a07e622bd8ac7566d880cb516e2a1a534ee60a92bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "009495fc-69c7-450d-81b4-590d16364bd0", "node_type": "1", "metadata": {"date": "2023-01-20T13:02:21.434+00:00"}, "hash": "1062874f31c8721b72e667cd3500d166689318875c10a0ff8428bfe180f51caa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a3512bf0-7512-4a08-9616-62ef24f694ce", "node_type": "1", "metadata": {}, "hash": "98257633b492865acceab6ffa1b692ca69e68d8ad3e0c10f553583800a9bc101", "class_name": "RelatedNodeInfo"}}, "text": "gojira:\nHi friends - I'm new to GPTIndex - is there a way to do a Query and tell it to use top K search results in the context?\nBlockchain Man:\nLook at prompt helper, I think that's how the vector index works\ngojira:\nthanks i\u2019ll check that out", "start_char_idx": 0, "end_char_idx": 243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a3512bf0-7512-4a08-9616-62ef24f694ce": {"__data__": {"id_": "a3512bf0-7512-4a08-9616-62ef24f694ce", "embedding": null, "metadata": {"date": "2023-01-21T22:28:33.441+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1066484476164722748", "node_type": "4", "metadata": {"date": "2023-01-21T22:28:33.441+00:00"}, "hash": "dbf196cb6f0d55f5d0094c432fef9239e0c371783e3f555a7c73999aba2edf6c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72243f22-454e-43e3-9e4a-ef306ce1d393", "node_type": "1", "metadata": {"date": "2023-01-20T17:21:30.903+00:00"}, "hash": "a3eb95575fd004def05f46f7081ed52d10d5d7354371f44001f20b863e0a2606", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d41a8d3d-9bf9-41f9-9dce-251a26eb7fe8", "node_type": "1", "metadata": {}, "hash": "a73ad8622edcede32df78d939102f7574538cd32219cad129388b1520f386ef0", "class_name": "RelatedNodeInfo"}}, "text": "foggyeyes:\nIs there a way to feed in existing embeddings I've already generated? I just learned about gpt-index and want to use it, but I don't want to pay to re-embed all my documents.\nyourbuddyconner:\nLucky you was just reading this: https://docs.llamaindex.ai/en/stable/examples/embeddings/custom_embeddings.html", "start_char_idx": 0, "end_char_idx": 315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d41a8d3d-9bf9-41f9-9dce-251a26eb7fe8": {"__data__": {"id_": "d41a8d3d-9bf9-41f9-9dce-251a26eb7fe8", "embedding": null, "metadata": {"date": "2023-01-22T00:58:38.252+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1066522245079511140", "node_type": "4", "metadata": {"date": "2023-01-22T00:58:38.252+00:00"}, "hash": "e3973f7d0e8f0c4ba0be90ac11e2d6bb2971f9e9e14d56a0943d331f567684b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a3512bf0-7512-4a08-9616-62ef24f694ce", "node_type": "1", "metadata": {"date": "2023-01-21T22:28:33.441+00:00"}, "hash": "790345f822900d5d5286d4a9efc112d52d12eab33db98a79ecf7f615693c7cc8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73b86eeb-76da-4fc8-b505-8c94865ec2de", "node_type": "1", "metadata": {}, "hash": "1363164a11df9663e59c9c86caff64d049bd691dd666cd7936b08b5ec1d9b664", "class_name": "RelatedNodeInfo"}}, "text": "yourbuddyconner:\nIs there a way to query the vector index directly? I understand there's a way to get the nodes returned via embedding similarity, but I want to retrieve the similar nodes via a hypothetical embedding, then re-index the results to form the real answer as opposed to using the default behavior to refine an answer. \n\nTrying to kludge HyDE right now.\nyourbuddyconner:\nIn case anyone is interested, I am having a successful time in really refining my answers through the generation of hypothetical answers with `text-curie-001` that are then injected into a query over a SimpleVectorStore with `davinci-003`. \n\nMy hypothesis was that adding additional semantic context helps narrow down and select right document from the vector store and obviates the need to do a tree search over multiple results. \n\nNeat!\namy-why:\nWhat is your use case? I tried to use the HyDE approach on Wikipedia QA, didn\u2019t help. We have the entire English Wikipedia indexed, the fake answer pulls in a lot of things related to the fake answer, not helpful. I start to think these strategies depends a lot on specific dataset and use case. Particularly if you have a  small dataset vs large dataset. Things get a lot more challenging if you have millions or billions of vectors.\nyourbuddyconner:\nSpecifically pulling data out of TV show transcripts right now. I suspect I might run into issues down the line with more posh corpuses, but for now GPT3 knows a lot about generating hypothetical character dialogue it turns out. Less so for GPT2 and curie, but it still improves answer quality (somewhat). \n\nIssue still becomes, what if gpt_index returns the wrong result from the vector store, which is something I am going to have to work on.\n\nI am going to include stuff in document.extra_info which I learned is injected into prompt context for any document retrieved, so this might be a way to pin an agent looking over an index with some basic facts about the document itself. \n\nhttps://discord.com/channels/1059199217496772688/1066874461946646548/1066896571750416454", "start_char_idx": 0, "end_char_idx": 2055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73b86eeb-76da-4fc8-b505-8c94865ec2de": {"__data__": {"id_": "73b86eeb-76da-4fc8-b505-8c94865ec2de", "embedding": null, "metadata": {"date": "2023-01-22T10:23:54.525+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1066664500239015957", "node_type": "4", "metadata": {"date": "2023-01-22T10:23:54.525+00:00"}, "hash": "71987e760e6749e77fea1de5ce5582459ed44bb958fdefa1c1f813f282cccf5d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d41a8d3d-9bf9-41f9-9dce-251a26eb7fe8", "node_type": "1", "metadata": {"date": "2023-01-22T00:58:38.252+00:00"}, "hash": "cc3e2fe42a7a0efe11c68300bea95f87d90039d03a0be35aec111ca2c0c83679", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9dbde246-7013-46fb-a069-b064f073f207", "node_type": "1", "metadata": {}, "hash": "73e9c4be798b8be05fefd8b44377cfccab87c9cdc01e9c3347f8095758e9b5a7", "class_name": "RelatedNodeInfo"}}, "text": "vasanth:\nNot sure if this has been answered already but is there a way to answer queries and also provide a citation to the corresponding source document that was indexed?\nravitheja:\nYes. check parsing response here - https://docs.llamaindex.ai/en/stable/module_guides/models/prompts/usage_pattern.html", "start_char_idx": 0, "end_char_idx": 302, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dbde246-7013-46fb-a069-b064f073f207": {"__data__": {"id_": "9dbde246-7013-46fb-a069-b064f073f207", "embedding": null, "metadata": {"date": "2023-01-22T20:23:00.568+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1066815268870959125", "node_type": "4", "metadata": {"date": "2023-01-22T20:23:00.568+00:00"}, "hash": "fb16af753347df17263136406d61ebf0726484ec8890379852e3e9137d038964", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73b86eeb-76da-4fc8-b505-8c94865ec2de", "node_type": "1", "metadata": {"date": "2023-01-22T10:23:54.525+00:00"}, "hash": "7aaaf1081c2ceeac8e33fc501502182c4a4d2a420c5dc1705217c90a9c922415", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0105984b-2253-4d37-959c-75ab703fef40", "node_type": "1", "metadata": {}, "hash": "2f5bf062b6ed8a688d1173fd3691b65afc5680d44bc472c2313507faa1d4e150", "class_name": "RelatedNodeInfo"}}, "text": "ustoll:\nHi there, I'm asking question through query that hits different nodes and the response is correctly synthesized. but in the response source nodes object there is always only one node. What am I doing wrong?\njerryjliu98:\nTry upping similarity_top_k during the query call (by default it\u2019s 1)", "start_char_idx": 0, "end_char_idx": 297, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0105984b-2253-4d37-959c-75ab703fef40": {"__data__": {"id_": "0105984b-2253-4d37-959c-75ab703fef40", "embedding": null, "metadata": {"date": "2023-01-22T23:46:00.581+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1066866355548209172", "node_type": "4", "metadata": {"date": "2023-01-22T23:46:00.581+00:00"}, "hash": "fb0b98fffbcc746e1ce4b1f94654fcf08c4dfcfea2091bffa91db1b77c47cc1b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9dbde246-7013-46fb-a069-b064f073f207", "node_type": "1", "metadata": {"date": "2023-01-22T20:23:00.568+00:00"}, "hash": "1e6ef1e9eaa341efb707eb4c4b4086a2f1e402acb773ab6e6c36e736ec1cbc8c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a8f2ef7-6403-498e-96f2-0545082ca27a", "node_type": "1", "metadata": {}, "hash": "6f01523d250cf6b9e6108e4b27d41946453faa3ba795062b5670d8f2a99cafda", "class_name": "RelatedNodeInfo"}}, "text": "sword:\nHi! I'm trying to load up a docx file as a test case and am having trouble. When I load the docx through SimpleDirectoryReader it doesn't seem to invoke the docx parser - am I missing something basic? I've tested the underlying docx2txt module used there's 0 issue grabbing the text from the file\nsword:\nNevermind! I got COVID and missed a few pushes on the project while I was down and out. Sorted it all out with a module update", "start_char_idx": 0, "end_char_idx": 437, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a8f2ef7-6403-498e-96f2-0545082ca27a": {"__data__": {"id_": "6a8f2ef7-6403-498e-96f2-0545082ca27a", "embedding": null, "metadata": {"date": "2023-01-23T08:41:04.307+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067001008334589952", "node_type": "4", "metadata": {"date": "2023-01-23T08:41:04.307+00:00"}, "hash": "38485f3c27cb3d3fd5c0d3235e4f03263111e2957ed270dbf77f4f9fed8a4497", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0105984b-2253-4d37-959c-75ab703fef40", "node_type": "1", "metadata": {"date": "2023-01-22T23:46:00.581+00:00"}, "hash": "1fc91075900404670fe48e68cb0ca119f0ecd028d3daee5befff7825d49f2044", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb91d854-87cc-4f71-9349-52d99fc0d564", "node_type": "1", "metadata": {}, "hash": "9ca8079776dd97f749651376889c3406e9e57489ebd106a9a38fd95f61f94df5", "class_name": "RelatedNodeInfo"}}, "text": "Kensai:\nAny idea on how to avoid hallucinations ? I have a simplevector index. One text describe shortly all the company product and the other texts are each one for a single product detailed description. The issue is that a non existent product is been hallucinated in some cases. (It really sound like a real one, but do not exists) (have 512 chunk limit and 3 in top_k)\nBlockchain Man:\nMake sure your prompt includes directives like 'do not improvise', and check your temperature.", "start_char_idx": 0, "end_char_idx": 483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb91d854-87cc-4f71-9349-52d99fc0d564": {"__data__": {"id_": "eb91d854-87cc-4f71-9349-52d99fc0d564", "embedding": null, "metadata": {"date": "2023-01-23T17:54:46.864+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067140353838293033", "node_type": "4", "metadata": {"date": "2023-01-23T17:54:46.864+00:00"}, "hash": "8ca94f0098c6cdf5d76697f22e1f707298f555ea5ebf30876b406c95dea7099e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a8f2ef7-6403-498e-96f2-0545082ca27a", "node_type": "1", "metadata": {"date": "2023-01-23T08:41:04.307+00:00"}, "hash": "7d1b7848e53ef631b92eae3ebbbf016a70beef2ff435a1866033a61aa7087da4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f5cdc26-2dda-4b10-9413-d410db317a70", "node_type": "1", "metadata": {}, "hash": "97cc8b98141d4e3a99f44114e33c47f8e11458bb501b10c79f3f681076a00ff4", "class_name": "RelatedNodeInfo"}}, "text": "bobjoneswins:\nThis Page does NOT exist: https://gpt-index.readthedocs.io/en/latest/how_to/insert.html\njerryjliu98:\nyou're right! try this instead? https://gpt-index.readthedocs.io/en/latest/how_to/update.html - where did you find this link? i'll fix it", "start_char_idx": 0, "end_char_idx": 252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f5cdc26-2dda-4b10-9413-d410db317a70": {"__data__": {"id_": "0f5cdc26-2dda-4b10-9413-d410db317a70", "embedding": null, "metadata": {"date": "2023-01-24T09:42:45.921+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067378921894580264", "node_type": "4", "metadata": {"date": "2023-01-24T09:42:45.921+00:00"}, "hash": "4e0eab02ec45d2e69e9c7dd25ef5f6ab3374730fc578d073f728bf804dd2df78", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb91d854-87cc-4f71-9349-52d99fc0d564", "node_type": "1", "metadata": {"date": "2023-01-23T17:54:46.864+00:00"}, "hash": "c5a0d3afb3dd88a56a707aeec5868281a4fd586fe307ae5864cf626d9c567903", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd473c26-55c1-4f80-930e-de289796cbd3", "node_type": "1", "metadata": {}, "hash": "5940ed3bbb8202277bde622e27161d3a538472a360d48746d3061a1543de27f4", "class_name": "RelatedNodeInfo"}}, "text": "MrB:\nHi, I am new to GPT Index and  I was just reading through the documentation. I could not find any mention of supported (human) languages. Does that mean that language support depends entirely on the LLM used?\nKensai:\nYes it's depending on the embedding and the LLM", "start_char_idx": 0, "end_char_idx": 269, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd473c26-55c1-4f80-930e-de289796cbd3": {"__data__": {"id_": "bd473c26-55c1-4f80-930e-de289796cbd3", "embedding": null, "metadata": {"date": "2023-01-24T10:41:54.407+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067393805323612160", "node_type": "4", "metadata": {"date": "2023-01-24T10:41:54.407+00:00"}, "hash": "6a4ea9710373b4b2932ee41cae6b24d49ffdde0a5b7e74d63d9ba461db7ea629", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f5cdc26-2dda-4b10-9413-d410db317a70", "node_type": "1", "metadata": {"date": "2023-01-24T09:42:45.921+00:00"}, "hash": "39885bf07b86c72d4ba7d1e7c460931063cbbaadd69452d5fd28823e711141d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ece20304-b1b5-4c0e-9618-d4291b37cd5c", "node_type": "1", "metadata": {}, "hash": "7a7bdd70a990cf5a0b60673473c4e6dc3d4227a25afe2f3e224c4b3c19b02967", "class_name": "RelatedNodeInfo"}}, "text": "ephe_meral:\nNope. Data and question are in German\nKensai:\nWeird I do the same in french and don't get the issue\nBut when the data is in english it answer in english", "start_char_idx": 0, "end_char_idx": 164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ece20304-b1b5-4c0e-9618-d4291b37cd5c": {"__data__": {"id_": "ece20304-b1b5-4c0e-9618-d4291b37cd5c", "embedding": null, "metadata": {"date": "2023-01-24T11:01:12.151+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067398661253910589", "node_type": "4", "metadata": {"date": "2023-01-24T11:01:12.151+00:00"}, "hash": "edbfccd2ac7fd201abd55f05246fad8ba29019d72054403f59f89996491471f3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd473c26-55c1-4f80-930e-de289796cbd3", "node_type": "1", "metadata": {"date": "2023-01-24T10:41:54.407+00:00"}, "hash": "04f2494dd58c079e356d6a4e55cf1a90733d611092d60ff277cac48fe51abaa0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "498842ae-3343-4757-8a49-b03a043f9309", "node_type": "1", "metadata": {}, "hash": "c62c7adf5881c3afa282de4389ae8376c5b9c866c2f36ebaf919643316c1c7fa", "class_name": "RelatedNodeInfo"}}, "text": "MrB:\n\ud83d\ude2e https://community.openai.com/t/embeddings-for-non-english/34136\nKensai:\nI guess that it's working for me because English as a ton of French in it...", "start_char_idx": 0, "end_char_idx": 155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "498842ae-3343-4757-8a49-b03a043f9309": {"__data__": {"id_": "498842ae-3343-4757-8a49-b03a043f9309", "embedding": null, "metadata": {"date": "2023-01-24T11:04:56.946+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067399604112478249", "node_type": "4", "metadata": {"date": "2023-01-24T11:04:56.946+00:00"}, "hash": "e72948e02bb84c134276018da6e8e9f3c41bbe4579158f23ae9c31d3f9f983b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ece20304-b1b5-4c0e-9618-d4291b37cd5c", "node_type": "1", "metadata": {"date": "2023-01-24T11:01:12.151+00:00"}, "hash": "d7881c8859e57e5a8ed323888a9770fbd7f2aa5b2e86bea057e876018d801fff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b11ee36a-8da3-4396-bf1e-c8f052eeb6dd", "node_type": "1", "metadata": {}, "hash": "e0b5bc0e4cacb1f4604ae363211aacb8709e70f067e09b976287f70e6d641e77", "class_name": "RelatedNodeInfo"}}, "text": "MrB:\nI wonder how well it works with X -> english translated text.\nKensai:\nEven if you have a good translation you need to have a proper cross langual embedding in order to make similarity search\nIf your embedder cannot relate your X language query it won't find the proper results", "start_char_idx": 0, "end_char_idx": 281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b11ee36a-8da3-4396-bf1e-c8f052eeb6dd": {"__data__": {"id_": "b11ee36a-8da3-4396-bf1e-c8f052eeb6dd", "embedding": null, "metadata": {"date": "2023-01-25T05:35:57.47+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067679198614917182", "node_type": "4", "metadata": {"date": "2023-01-25T05:35:57.47+00:00"}, "hash": "bbe1df2d9685ca9ba78fd88158b4885412420094d25e23f4365fb026429e10b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "498842ae-3343-4757-8a49-b03a043f9309", "node_type": "1", "metadata": {"date": "2023-01-24T11:04:56.946+00:00"}, "hash": "4deaeae1f4428301e79635c66111f93664823037826d821f361e61f464b33b69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b037985-5d20-43d7-803c-043b821896cd", "node_type": "1", "metadata": {}, "hash": "99fababde6f6ec964ee94cb2fa9d6d3816b8f2f3f64f0bcb5ab4f023c3008b4d", "class_name": "RelatedNodeInfo"}}, "text": "tytou:\nCan someone explain to me what this project is?\nyourbuddyconner:\n> GPT Index is a project consisting of a set of data structures designed to make it easier to use large external knowledge bases with LLMs.\nhttps://gpt-index.readthedocs.io/en/latest/index.html", "start_char_idx": 0, "end_char_idx": 265, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b037985-5d20-43d7-803c-043b821896cd": {"__data__": {"id_": "7b037985-5d20-43d7-803c-043b821896cd", "embedding": null, "metadata": {"date": "2023-01-25T05:37:13.812+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067679518816477194", "node_type": "4", "metadata": {"date": "2023-01-25T05:37:13.812+00:00"}, "hash": "099e93d33f05c74402f3c9685fb42ea8826168dc1e44a036645af89bf48d25f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b11ee36a-8da3-4396-bf1e-c8f052eeb6dd", "node_type": "1", "metadata": {"date": "2023-01-25T05:35:57.47+00:00"}, "hash": "bf7e8736179bb0181cb379db330584a48e8e957b5aebd9e3331a135b31ef7a2b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf603371-2045-4bc1-a7d0-6e81b5d29661", "node_type": "1", "metadata": {}, "hash": "59590f6431e4785318b6c909cf55c75131178c7e6f052c04b4c817bf93a9e707", "class_name": "RelatedNodeInfo"}}, "text": "tytou:\nGpt is an llm?\nKensai:\nyes", "start_char_idx": 0, "end_char_idx": 33, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf603371-2045-4bc1-a7d0-6e81b5d29661": {"__data__": {"id_": "bf603371-2045-4bc1-a7d0-6e81b5d29661", "embedding": null, "metadata": {"date": "2023-01-25T17:31:21.292+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1067859234173235240", "node_type": "4", "metadata": {"date": "2023-01-25T17:31:21.292+00:00"}, "hash": "3442f02ee43f415b2731c1656aec2019d69424223aeee4cfab7e0708b34da1ec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b037985-5d20-43d7-803c-043b821896cd", "node_type": "1", "metadata": {"date": "2023-01-25T05:37:13.812+00:00"}, "hash": "8b934027b73c67550b5ab0ef961afe9f669f5927d5eb5b91a2214ceb8f0b42ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4f81299-72f5-4430-a00c-6e359eb9192b", "node_type": "1", "metadata": {}, "hash": "2bbb924a53839d79d46b2f16a842badab0bb5af204d2e4e951a14c91241db04b", "class_name": "RelatedNodeInfo"}}, "text": "knicker-bocker:\nHi @jerryjliu98 is there a notebook that provides examples on how to utilize prompt helper?\njerryjliu98:\nyeah it's not the clearest, right now the main example usage is in this page: https://gpt-index.readthedocs.io/en/latest/how_to/custom_llms.html\nknicker-bocker:\nThis is great, thanks!", "start_char_idx": 0, "end_char_idx": 304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4f81299-72f5-4430-a00c-6e359eb9192b": {"__data__": {"id_": "e4f81299-72f5-4430-a00c-6e359eb9192b", "embedding": null, "metadata": {"date": "2023-01-26T19:02:58.839+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068244680422199326", "node_type": "4", "metadata": {"date": "2023-01-26T19:02:58.839+00:00"}, "hash": "15f40099270a4c3c439ed3e54d4fc3720a3b2e6e491b0aa8d0a81f39f45fae51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf603371-2045-4bc1-a7d0-6e81b5d29661", "node_type": "1", "metadata": {"date": "2023-01-25T17:31:21.292+00:00"}, "hash": "73ddf02b5ad5aa5197e12384af6bd52055b8494cfce5d210283bdfbb4032ccf2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c022a5fb-2d96-4973-ae7e-d112cac9ea28", "node_type": "1", "metadata": {}, "hash": "b34642c9b622b0bd1e82b782003183ea091843c49073763bc013832db4085f7a", "class_name": "RelatedNodeInfo"}}, "text": "0x32e:\nIs Pinecone down?\n0x32e:\nFrom Pinecone: \n\nWe are currently investigating a partial outage in the us-east1-gcp and us-west1-gcp regions. \nPlease watch or subscribe to this page for updates https://status.pinecone.io/ as we work to resolve this issue.", "start_char_idx": 0, "end_char_idx": 256, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c022a5fb-2d96-4973-ae7e-d112cac9ea28": {"__data__": {"id_": "c022a5fb-2d96-4973-ae7e-d112cac9ea28", "embedding": null, "metadata": {"date": "2023-01-27T04:01:52.275+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068380296682147900", "node_type": "4", "metadata": {"date": "2023-01-27T04:01:52.275+00:00"}, "hash": "091592175bf4113cebd9b21ccab778e95fb079821ad0ccad86adae63445b573b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4f81299-72f5-4430-a00c-6e359eb9192b", "node_type": "1", "metadata": {"date": "2023-01-26T19:02:58.839+00:00"}, "hash": "4ef76d473bddf2c0c78660a5d4152c33ca35a66a653d53eafd3e8b71fa7b417c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86ddc833-1ce5-4698-8011-db59189a45c5", "node_type": "1", "metadata": {}, "hash": "bb5197c8b3a2e385be4a3e88fd51186d2a60ebb1a5a0f1e8c510ca2b38bae871", "class_name": "RelatedNodeInfo"}}, "text": "hgarg:\nIs it possible to split text from a single document into chunks and create multiple documents out of it?\njerryjliu98:\nnot officially in the docs but you could do `from gpt_index.langchain_helpers.text_splitter import TokenTextSplitter`, and do something like \n```\ntext_splitter = TokenTextSpitter(separator=\" \", chunk_size=1000, chunk_overlap=10)\ntext_chunks = text_splitter.split_text()\ndocs = [Document(t) for t in text_chunks]\n```\nhgarg:\nawesome. thank you @jerryjliu98", "start_char_idx": 0, "end_char_idx": 479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86ddc833-1ce5-4698-8011-db59189a45c5": {"__data__": {"id_": "86ddc833-1ce5-4698-8011-db59189a45c5", "embedding": null, "metadata": {"date": "2023-01-27T06:52:33.103+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068423249828007946", "node_type": "4", "metadata": {"date": "2023-01-27T06:52:33.103+00:00"}, "hash": "38c265525280a2948b1126e923345c8a2c88d05d2f8f25b1c8d10ee3af5779d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c022a5fb-2d96-4973-ae7e-d112cac9ea28", "node_type": "1", "metadata": {"date": "2023-01-27T04:01:52.275+00:00"}, "hash": "cc2fd5535e42b6c5c09074987deb1adc6e159991f4e444e7c7a21975413377ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca11e80b-9370-47a6-a591-8f64f9f84eed", "node_type": "1", "metadata": {}, "hash": "ec0724ad2449c2e6f74e1f2ab4a6510a203d1ae48e94c3e4f1a6c143f4cb6e8d", "class_name": "RelatedNodeInfo"}}, "text": "hgarg:\nIs it possible to add a timeout between calls to the embed api?\nindex = GPTSimpleVectorIndex(\n    docs, embed_model=embed_model, prompt_helper=prompt_helper, llm_predictor=llm_predictor\n)\nmaxchehab:\nHey, are you running into the Embedding API hanging?", "start_char_idx": 0, "end_char_idx": 258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca11e80b-9370-47a6-a591-8f64f9f84eed": {"__data__": {"id_": "ca11e80b-9370-47a6-a591-8f64f9f84eed", "embedding": null, "metadata": {"date": "2023-01-27T08:46:26.851+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068451912644558848", "node_type": "4", "metadata": {"date": "2023-01-27T08:46:26.851+00:00"}, "hash": "e063a517a4a986e5cf66e12832938dc2399368026475c907678094ce641f3637", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86ddc833-1ce5-4698-8011-db59189a45c5", "node_type": "1", "metadata": {"date": "2023-01-27T06:52:33.103+00:00"}, "hash": "7d1f98e8972b7b8b1ab4acf28e5256e40eefb1f16f4604e5d84694e2f0737441", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6e53d45-20a3-4896-b17a-5ba2fb8c17e5", "node_type": "1", "metadata": {}, "hash": "034545c088157331eeaaf6bae9267fd3d46afca768206ce47e88fab7bfbcfd71", "class_name": "RelatedNodeInfo"}}, "text": "ShantanuNair:\nWhen building  a ListIndex, I see \n```\n> [build_index_from_documents] Total LLM token usage: 0 tokens\n> [build_index_from_documents] Total embedding token usage: 0 tokens\n> Building index from nodes: 0 chunks\n``` \nEven thought there is a chunk.\njerryjliu98:\n@ShantanuNair this may just be that the output is confusing, building a ListIndex doesn't call LLM's or embedding API's. can you check number of nodes through `len(index.data_struct.nodes)`?", "start_char_idx": 0, "end_char_idx": 462, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6e53d45-20a3-4896-b17a-5ba2fb8c17e5": {"__data__": {"id_": "f6e53d45-20a3-4896-b17a-5ba2fb8c17e5", "embedding": null, "metadata": {"date": "2023-01-27T16:38:08.652+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068570619001712730", "node_type": "4", "metadata": {"date": "2023-01-27T16:38:08.652+00:00"}, "hash": "1541c7df09e1e3cba4aed94bc197d42aa63c430c4447ccd116d298d927d77a43", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca11e80b-9370-47a6-a591-8f64f9f84eed", "node_type": "1", "metadata": {"date": "2023-01-27T08:46:26.851+00:00"}, "hash": "b60b31d3e0604004c4f2d6045a3b7886687ffb72d25cc16ed6f9f544218dfdac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec8bb5eb-aca6-45ac-bc5a-59b4457e76c7", "node_type": "1", "metadata": {}, "hash": "724b2fa6154c77fa5b4e32b4413680c5816f0fef3d4444021eb350be719e98b8", "class_name": "RelatedNodeInfo"}}, "text": "Clayton:\nIs it possible to use JSON as a document source?\nravitheja:\nYes I guess. It has json parser.", "start_char_idx": 0, "end_char_idx": 101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec8bb5eb-aca6-45ac-bc5a-59b4457e76c7": {"__data__": {"id_": "ec8bb5eb-aca6-45ac-bc5a-59b4457e76c7", "embedding": null, "metadata": {"date": "2023-01-27T17:16:58.092+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068580389381210223", "node_type": "4", "metadata": {"date": "2023-01-27T17:16:58.092+00:00"}, "hash": "856281bb02603316e938481c5dc91afe3c7b96bee18bbf751ce6a19878d92f68", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6e53d45-20a3-4896-b17a-5ba2fb8c17e5", "node_type": "1", "metadata": {"date": "2023-01-27T16:38:08.652+00:00"}, "hash": "60d86cc8a4c7c0c13079c55c0f3274765ec4226ae01d497f2cf3291b9345b01c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6fdbe84e-5e82-4203-8b21-e63d601dff84", "node_type": "1", "metadata": {}, "hash": "033e2604f8c263e2f7a0d49bf8a6bd48ad740717d63e5e952aa42664966739cd", "class_name": "RelatedNodeInfo"}}, "text": "ravitheja:\nYou can look into readers folder.\nClayton:\nI'm not seeing a JSON parser/reader in there, unless it's included within something else I haven't been able to find yet. @jerryjliu98 Is JSON as a data source something you support or think you might support ahead?\nyourbuddyconner:\nI think the pattern right now is to just treat json as text. SimpleDirectoryReader should \"just work \u2122\ufe0f\"\njerryjliu98:\nyeah ^^ though there have been ideas floated around of doing a JSON parser! As in we extract the text from json into some other format you think is more readable", "start_char_idx": 0, "end_char_idx": 566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6fdbe84e-5e82-4203-8b21-e63d601dff84": {"__data__": {"id_": "6fdbe84e-5e82-4203-8b21-e63d601dff84", "embedding": null, "metadata": {"date": "2023-01-28T06:14:46.834+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068776132272472085", "node_type": "4", "metadata": {"date": "2023-01-28T06:14:46.834+00:00"}, "hash": "379f90e782ebdf2c19edf553ce3f20c3c108a1861f1842234b264144b2dd4eb1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec8bb5eb-aca6-45ac-bc5a-59b4457e76c7", "node_type": "1", "metadata": {"date": "2023-01-27T17:16:58.092+00:00"}, "hash": "3bbd1cf4bcd6519d805481dae8a5b51b5cddd10bb5f8006ab4e35e41330c339e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c1102b5-eca7-40c6-8bbb-9316b88a9161", "node_type": "1", "metadata": {}, "hash": "034bdb77d61a9c581d09b7a2057933c0d0674548fab49cc7724cc8bdcc8aa06e", "class_name": "RelatedNodeInfo"}}, "text": "gALEXy:\nHas anybody had any issues with serverless + gpt_index?\ngALEXy:\nare people just running everything in ec2 instead of serverless then?", "start_char_idx": 0, "end_char_idx": 141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c1102b5-eca7-40c6-8bbb-9316b88a9161": {"__data__": {"id_": "5c1102b5-eca7-40c6-8bbb-9316b88a9161", "embedding": null, "metadata": {"date": "2023-01-28T18:42:27.563+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068964291807555685", "node_type": "4", "metadata": {"date": "2023-01-28T18:42:27.563+00:00"}, "hash": "e7a0579bb3c1259bc3b3a096fe03f3f67795de21c6cf6d811b71f33b182ab85f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6fdbe84e-5e82-4203-8b21-e63d601dff84", "node_type": "1", "metadata": {"date": "2023-01-28T06:14:46.834+00:00"}, "hash": "6773f8a54e70f25c093de93f8aba53b94533368813caa99e009206750fec8945", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb40048a-10f8-4883-9e14-eee3ab213293", "node_type": "1", "metadata": {}, "hash": "f093055ef1714b28f01cfa221aeec7e2384fff04a5e54241268b21d46fe1b484", "class_name": "RelatedNodeInfo"}}, "text": "awesomeAB:\nHi @jerryjliu98 , I am wondering if there is a way to directly load an index at runtime? I am fetching the json content from say an S3 bucket, so it is in memory. As of right now, seems like the only way to go is to write the content to disk, and then read it again using  `GPTSimpleVectorIndex.load_from_disk`. What am I missing?\njerryjliu98:\nHey @awesomeAB sorry to understand, do you mean load from s3 as opposed to load_from_disk?\nawesomeAB:\nAssuming we have downloaded the index.json contents from some cloud storage and this content is stored in a variable x (bytes). It should be possible to then load this directly into an index? does that make sense?\njerryjliu98:\nAh yeah, makes sense. This shouldn't be too hard to add, i'm currently doing some general refactors but will try to include this as well\nbxnnx:\nlooking forward to this one! hit a hard wall due to only being limited to saving to and from disk instead of a bucket like google cloud or S3 bucket\njerryjliu98:\n@bxnnx if i just added a `to_string` and  `from_string` method in addition to `from_disk` and `to_disk` would that help?\ngALEXy:\nHave people figured out a way to read from s3? ik that s3 is on the list but is there something people have figured out in the meantime?\nherpaderp:\nS3 loader has been PR'ed! https://github.com/emptycrown/llama-hub/pull/18. Will be merged soon. Ping here if you have suggestions/issues, or just PR yourself after merge\ngALEXy:\ngetting an error with the s3 loader\nherpaderp:\ntaking a look now. The verbose thing might be it", "start_char_idx": 0, "end_char_idx": 1540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb40048a-10f8-4883-9e14-eee3ab213293": {"__data__": {"id_": "eb40048a-10f8-4883-9e14-eee3ab213293", "embedding": null, "metadata": {"date": "2023-01-28T19:54:15.778+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1068982361770950716", "node_type": "4", "metadata": {"date": "2023-01-28T19:54:15.778+00:00"}, "hash": "aad4b9600b39d933f9cbcaa182138a34b0e999df5356782b20f017b4518995ec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c1102b5-eca7-40c6-8bbb-9316b88a9161", "node_type": "1", "metadata": {"date": "2023-01-28T18:42:27.563+00:00"}, "hash": "e4e375109a042f3b68ef5a1c5faa4d5b1a6ff6f12a1e1384562057712f5315d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52a664a2-58f1-4bbd-9fd4-1eb9f86c03ad", "node_type": "1", "metadata": {}, "hash": "f6a66343582629d98af971243b7f09b5c43ca6af4e0bc145ec478306b4a68e68", "class_name": "RelatedNodeInfo"}}, "text": "marismaro:\nDo PineconeIndex queries support RefinePrompt to refine a previous response? or is this a limitation of the pinecone service?\njerryjliu98:\nyes they do! i just realized it's not reflected in the api docs: https://gpt-index.readthedocs.io/en/latest/reference/indices/vector_store_query.html - i will put out a fix. we have a default refine prompt under the hood; if you want to customize in the meantime use GPTSimpleVectorIndexQuery as a reference (e.g. do `index.query(..., refine_template=custom_refine_template)`)", "start_char_idx": 0, "end_char_idx": 526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52a664a2-58f1-4bbd-9fd4-1eb9f86c03ad": {"__data__": {"id_": "52a664a2-58f1-4bbd-9fd4-1eb9f86c03ad", "embedding": null, "metadata": {"date": "2023-01-28T22:15:48.632+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069017983382458438", "node_type": "4", "metadata": {"date": "2023-01-28T22:15:48.632+00:00"}, "hash": "f76297d31e3e94e3533c7163e1ab6742d92a8bc1d8b27888ad8f6597396fcd78", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb40048a-10f8-4883-9e14-eee3ab213293", "node_type": "1", "metadata": {"date": "2023-01-28T19:54:15.778+00:00"}, "hash": "ace3747ce23cbfb770be0e2e7c811747fc11c05c0cd7c7f2b85bc1ae034402be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f31412c-f6fb-42a1-b929-7e16848f5215", "node_type": "1", "metadata": {}, "hash": "4d373b194eda506d54833eb1eb0fa25496fbb0bf0a5f1766f4f2e62b93e6c2ac", "class_name": "RelatedNodeInfo"}}, "text": "bbornsztein:\nGetting this error when running a `GPTSimpleVectorIndex`: \n\n`A single term is larger than the allowed chunk size. Term size: 511 Chunk size: 512Effective chunk size: 476`\n\nWhat's going on there?\njerryjliu98:\nhmm what data are you using?", "start_char_idx": 0, "end_char_idx": 249, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f31412c-f6fb-42a1-b929-7e16848f5215": {"__data__": {"id_": "3f31412c-f6fb-42a1-b929-7e16848f5215", "embedding": null, "metadata": {"date": "2023-01-28T22:23:21.145+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069019881359544420", "node_type": "4", "metadata": {"date": "2023-01-28T22:23:21.145+00:00"}, "hash": "13ec370aa7b68856e56968e4c99851949556c2584f71fec28599316de1e163c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52a664a2-58f1-4bbd-9fd4-1eb9f86c03ad", "node_type": "1", "metadata": {"date": "2023-01-28T22:15:48.632+00:00"}, "hash": "5ad639ce19aa6195a2333181e48e95496b4d3bc74650800b5365590c94d3ab37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa88e2ac-99fd-4447-895a-b02d9b7bf9db", "node_type": "1", "metadata": {}, "hash": "d48cd180eea8d79308ae8a97f7154ddbd8a0ba0864d3dc398552d388a40dab91", "class_name": "RelatedNodeInfo"}}, "text": "bbornsztein:\nthis was pulling from an RSS feed\njerryjliu98:\ngot it - this was something i was hoping to have fixed :/ we usually split strings by spaces or newlines, but this means that you have one \"term\" that's larger than the chunk size. as a hack you could introduce spaces every 500 chars or so, but i understand that's also not ideal. let me investigate a fix", "start_char_idx": 0, "end_char_idx": 365, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa88e2ac-99fd-4447-895a-b02d9b7bf9db": {"__data__": {"id_": "fa88e2ac-99fd-4447-895a-b02d9b7bf9db", "embedding": null, "metadata": {"date": "2023-01-28T22:26:47.548+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069020747076468876", "node_type": "4", "metadata": {"date": "2023-01-28T22:26:47.548+00:00"}, "hash": "cf6a3a396dac5e3b550bdb24f6fa1151668d6aafdd70d0514cccb421d5796c61", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f31412c-f6fb-42a1-b929-7e16848f5215", "node_type": "1", "metadata": {"date": "2023-01-28T22:23:21.145+00:00"}, "hash": "cf47158adef16076d44ba6396b678d1b3dd88e9e175ce90a5630a0bd3bb3e65b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc66c10a-cd01-4dcd-9511-acddb9cef9f9", "node_type": "1", "metadata": {}, "hash": "01ccf1bb17876270a43ef5c616ba65ac810e9d3b8993de931e51cef35fdcae06", "class_name": "RelatedNodeInfo"}}, "text": "bbornsztein:\ngot it - I figured something like that. so that means there's one string in there longer than 500 chars with no newlines or spaces?\njerryjliu98:\nyep! hopefully i'll get a fix out today/tomorrow", "start_char_idx": 0, "end_char_idx": 206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc66c10a-cd01-4dcd-9511-acddb9cef9f9": {"__data__": {"id_": "dc66c10a-cd01-4dcd-9511-acddb9cef9f9", "embedding": null, "metadata": {"date": "2023-01-29T21:47:40.053+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069373288834412626", "node_type": "4", "metadata": {"date": "2023-01-29T21:47:40.053+00:00"}, "hash": "7429f7aaad55e75e2cfe5c5cf22325c166eb6995e5e3969b4dd4d9a71d3197d3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa88e2ac-99fd-4447-895a-b02d9b7bf9db", "node_type": "1", "metadata": {"date": "2023-01-28T22:26:47.548+00:00"}, "hash": "c9a8878fe1e0dfe45116b249cf9294ffa7deb5c3122bd4bed60b85de95aa027e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4b2ec13-3c97-49df-9d12-4ab56eb0a895", "node_type": "1", "metadata": {}, "hash": "bb7384dd43cef8e8068718ed21abd585be1ef4e05b256abb4d7a0527fa452cd2", "class_name": "RelatedNodeInfo"}}, "text": "DeEnabler:\nhow do you connect data of a local file directory (SimpleDirectoryReader)?\njerryjliu98:\nyou just specify a directory. does the quickstart tutorial help? https://gpt-index.readthedocs.io/en/latest/getting_started/starter_example.html", "start_char_idx": 0, "end_char_idx": 243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4b2ec13-3c97-49df-9d12-4ab56eb0a895": {"__data__": {"id_": "c4b2ec13-3c97-49df-9d12-4ab56eb0a895", "embedding": null, "metadata": {"date": "2023-01-29T23:57:10.313+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069405879666999346", "node_type": "4", "metadata": {"date": "2023-01-29T23:57:10.313+00:00"}, "hash": "b37f3629a31ef3c7cd434d9be706c2f26e93d393bf1f48972e64e717c6c75137", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc66c10a-cd01-4dcd-9511-acddb9cef9f9", "node_type": "1", "metadata": {"date": "2023-01-29T21:47:40.053+00:00"}, "hash": "11baa7580bcdd5fdb30e037fa224ba599162d1183d51c2198b2b557ac409606e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0d32942-7e7e-4645-ac7b-0f2a9a92d9e8", "node_type": "1", "metadata": {}, "hash": "00c7a018cba9d3bf8165592d0a2475fcd04aadac021831f5b083d8ca527928f7", "class_name": "RelatedNodeInfo"}}, "text": "Arshad:\nUse set instead of export if you\u2019re on windows\nDeEnabler:\nmac\nArshad:\n`export OPENAI_API_KEY=your api key` This will do it for you", "start_char_idx": 0, "end_char_idx": 138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0d32942-7e7e-4645-ac7b-0f2a9a92d9e8": {"__data__": {"id_": "e0d32942-7e7e-4645-ac7b-0f2a9a92d9e8", "embedding": null, "metadata": {"date": "2023-01-30T03:16:35.214+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069456064099143761", "node_type": "4", "metadata": {"date": "2023-01-30T03:16:35.214+00:00"}, "hash": "8dcb7af7d076ccce059d7e68799ddf54351b5b143284521eab6df3f068bb73af", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c4b2ec13-3c97-49df-9d12-4ab56eb0a895", "node_type": "1", "metadata": {"date": "2023-01-29T23:57:10.313+00:00"}, "hash": "bec154460cf499e453e2d1f4ef5aaed4737dedcdd55aff9ac4aac513867dc1e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7e71761b-fcab-4af5-b112-f08e2678c97e", "node_type": "1", "metadata": {}, "hash": "180136b1f7aea06ed1388dcc43f22e02263648c48e6e1db7253fc083f3e880a8", "class_name": "RelatedNodeInfo"}}, "text": "chimp69.420:\nHey guys, is it possible to get the document or documents which generated the given answer?\njerryjliu98:\nyes! https://gpt-index.readthedocs.io/en/latest/guides/usage_pattern.html#parsing-the-response", "start_char_idx": 0, "end_char_idx": 212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e71761b-fcab-4af5-b112-f08e2678c97e": {"__data__": {"id_": "7e71761b-fcab-4af5-b112-f08e2678c97e", "embedding": null, "metadata": {"date": "2023-01-31T01:27:06.149+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1069790899309138081", "node_type": "4", "metadata": {"date": "2023-01-31T01:27:06.149+00:00"}, "hash": "413fc2d4c635d63ce991ada87175677348835beeca13a336f11d9ff4538e7e3a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0d32942-7e7e-4645-ac7b-0f2a9a92d9e8", "node_type": "1", "metadata": {"date": "2023-01-30T03:16:35.214+00:00"}, "hash": "91b979abe505f22f62a7a468aecddb24449ad945c5ae8f9afa98202d4fbfd57b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "95e34ba8-b987-4318-9c76-0a17e8914176", "node_type": "1", "metadata": {}, "hash": "e4db2186b959d529fed415b3082073f026cd3509958c0f4fc25daeaa11cfa0ca", "class_name": "RelatedNodeInfo"}}, "text": "Soham:\nAnyone know how to feed an API key into GPTPineconeIndex? Haven't found any luck with `env[PINECONE_API_KEY]` or constructor args yet\njerryjliu98:\nyou have to do `pinecone.init` first (see https://github.com/jerryjliu/gpt_index/blob/main/examples/vector_indices/PineconeIndexDemo.ipynb)", "start_char_idx": 0, "end_char_idx": 293, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "95e34ba8-b987-4318-9c76-0a17e8914176": {"__data__": {"id_": "95e34ba8-b987-4318-9c76-0a17e8914176", "embedding": null, "metadata": {"date": "2023-02-01T15:06:07.657+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1070359401598287943", "node_type": "4", "metadata": {"date": "2023-02-01T15:06:07.657+00:00"}, "hash": "33b8060274740e0e2066f6b3e6caada2034adeee649aa74a991b1f87ffa1f625", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7e71761b-fcab-4af5-b112-f08e2678c97e", "node_type": "1", "metadata": {"date": "2023-01-31T01:27:06.149+00:00"}, "hash": "3d0738f658bb2c90d19b960c29b5d72717f589225d7ef78afbfaabda65367323", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cf33557-7e90-42c4-9a20-ee2666c9034f", "node_type": "1", "metadata": {}, "hash": "6296e02df9ce461fad4898ad6700d874efb73468a0f52c4dcf1b07b6ddd10fb3", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nIs there a general description _how_ the library and the indexes work?\nyourbuddyconner:\nQuestion thread: \n\nWondering what the people asking this question are the most confused about. I had a short call with @Clayton yesterday and discussed the high-level basics of \"why gpt_index?\" which produced some really good answers when laid out sequentially. \n\nShipping a tweet thread with the highlights later today, however would like to dig into the meat of gpt_index in a targeted way based on the questions users have. \n\nIf anyone has specific questions about the data structures and \"how 2 gpt_index?\" I would love to hear them as it will guide the next piece of content I produce there.\nzgott:\n@yourbuddyconner I'm bummed I missed the chat with @Clayton yesterday.   What I'm really struggling with is just understanding what GPT Index offers compared to just using the GPT3 API.  More specifically I would love to just have a better understanding of how the different indexes work.  \n\nI'm trying to use GPT Index to index a bunch of construction project docs.  Each document contains a mix of:\n1 Free form text\n2 Tables containing info like cost breakdown\n3 Hierarchical lists containing info like the steps involved in each phase of the project \n4 Biographies of the personnel leading the project. The bios are laid out like resumes and there can be multiple bios per document.\n\nThe documents can be anywhere from 50 to 350 pages. \n\nAt the moment, I'm just trying to understand what GTP Index is capable of  and how to best use the different indexes. I don't mind manually breaking them the documents into logical chunks, if that will yield better results.  We'll improve the ingestion process later.  \n\nSo... my top level questions are:\n1) How best to index just a few of these docs as a proof of concept.\n2) Since I'm willing to manually chunk the documents, should I use different Index types for different chunks?  Vector Index for text,  Table Index for the Biographies.  \n3) How best to index hierarchical lists?\n4) How best to maintain context across chunks", "start_char_idx": 0, "end_char_idx": 2071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cf33557-7e90-42c4-9a20-ee2666c9034f": {"__data__": {"id_": "3cf33557-7e90-42c4-9a20-ee2666c9034f", "embedding": null, "metadata": {"date": "2023-02-03T00:06:00.954+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1070857656799076352", "node_type": "4", "metadata": {"date": "2023-02-03T00:06:00.954+00:00"}, "hash": "15f06219baed7045ec725e57188bc809dd5d0610cf7ee606e15dd0525faa17d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "95e34ba8-b987-4318-9c76-0a17e8914176", "node_type": "1", "metadata": {"date": "2023-02-01T15:06:07.657+00:00"}, "hash": "5c061cd45e48860603282af71679884ef94d56c5247e7e2e6c239a6d664825da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ccdc59fc-7584-4124-a861-bf44e41f7218", "node_type": "1", "metadata": {}, "hash": "2903238448275496d3b4236ad0991c0ba29f2e46a9f7d3f06c976bce703a4592", "class_name": "RelatedNodeInfo"}}, "text": "JoshHartCreatedYou:\nKind of a silly question. Just starting off with GPT Index and going through the starter tutorial. I'm getting the error of 'can't find path specified of data' which just contains one document to index. Not sure what the issue is?\ndennisjm942:\nTry to CD into the directory\nJoshHartCreatedYou:\nAh thanks for the help lmao", "start_char_idx": 0, "end_char_idx": 340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccdc59fc-7584-4124-a861-bf44e41f7218": {"__data__": {"id_": "ccdc59fc-7584-4124-a861-bf44e41f7218", "embedding": null, "metadata": {"date": "2023-02-03T16:35:57.312+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071106783181029406", "node_type": "4", "metadata": {"date": "2023-02-03T16:35:57.312+00:00"}, "hash": "ceea6c65b7b698843148a073314ed034779b15e273064a69dc9b14014d95909c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cf33557-7e90-42c4-9a20-ee2666c9034f", "node_type": "1", "metadata": {"date": "2023-02-03T00:06:00.954+00:00"}, "hash": "16a07896e8f1aee7ae923ac50c94bb3fc5080bc7d79e79b9d38cb70104c03d95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "922d27df-a3b9-4e24-9ab2-93de644ac1e8", "node_type": "1", "metadata": {}, "hash": "ae10f0b7f7f590f8e400588b4f2438241e425c64f9ada15de7889361f8e84e00", "class_name": "RelatedNodeInfo"}}, "text": "nobii:\nHello guys do anyone knows how to deal with `Error: Got a larger chunk overlap (50) than chunk size (-30), should be smaller.. Retrying in 16.58 seconds.`\njeremy-analytics:\ni think you need to make your chunk size larger. what are your settings?\n```python\nmax_input_size = 2048\n# set number of output tokens\nnum_output = 512\n# set maximum chunk overlap\nmax_chunk_overlap = 256\nprompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\n```\noptimal settings will depend on your LLM", "start_char_idx": 0, "end_char_idx": 504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "922d27df-a3b9-4e24-9ab2-93de644ac1e8": {"__data__": {"id_": "922d27df-a3b9-4e24-9ab2-93de644ac1e8", "embedding": null, "metadata": {"date": "2023-02-03T19:42:43.477+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071153785243697234", "node_type": "4", "metadata": {"date": "2023-02-03T19:42:43.477+00:00"}, "hash": "9d4c84f2fca8b1d090d435464a9dcabd78b4972ed19da8792972dc6065a86cd1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccdc59fc-7584-4124-a861-bf44e41f7218", "node_type": "1", "metadata": {"date": "2023-02-03T16:35:57.312+00:00"}, "hash": "2672a87c6e3a3f1f991f46dab8a9bc21551438bd5e10390b91636f860e4a7c67", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b12f9c34-fff6-4557-91b1-6ae669516e13", "node_type": "1", "metadata": {}, "hash": "d94afe4731a9c5275b7281972588a3bfb3b70f9e83d6bd812153e83c8fea7de2", "class_name": "RelatedNodeInfo"}}, "text": "finalcall.eth:\nOK - I was able to take a bunch of insurance documentation, create the embedded json file, and have gpt answer correctly from that on questions - but it seems like I am pushing that file to gpt everytime - can you have a model based on the embeddings - any reference to show how that is done? I would think you would use embeddings to create the base model then fine tune that model. May be way off though\njeremy-analytics:\nare you talking about fine tuning a model using your documents? that's certainly a thing you can search for examples for. for instance openAI has docs for Fine Tuning. https://platform.openai.com/docs/guides/fine-tuning\nfinalcall.eth:\nThanks so much for the response. So i have built a model using fine tuning. But I would like to use embedding as the base of a model and then fine tune that furth through the fine tune process. I have 10k pages of insurance documentation in filestructures, I was hoping to use that as the foundation of the model and then fine tune the output over time. But right now if I use embedding it is uploading the ebedded file i think and the api goes over that to answer the question. and then i have to do that again and again and its alot of cost per query and i figure im just missing soemthing. Thanks again so much.\njeremy-analytics:\ni think i see what you're saying. you want ot build an embedding model using the embeddings you have already. Well, the embeddings for smaller models are actually pretty good. in fact, you can just use local ones and it does pretty good.: \n```python\n# this uses the huggingface embeddings: \nembed_max_length = 512\nmodel_name = \"sentence-transformers/all-mpnet-base-v1\"\nhf_embedding = HuggingFaceEmbeddings(model_name=model_name)\nembed_model = LangchainEmbedding(hf_embedding)\n```\n\nthen use them like this:\n```python\nindex = GPTSimpleVectorIndex(\n    documents, embed_model=embed_model\n)\n```\n\nYou might also need to make a prompt helper. not sure.", "start_char_idx": 0, "end_char_idx": 1953, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b12f9c34-fff6-4557-91b1-6ae669516e13": {"__data__": {"id_": "b12f9c34-fff6-4557-91b1-6ae669516e13", "embedding": null, "metadata": {"date": "2023-02-04T00:38:24.64+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071228197074632745", "node_type": "4", "metadata": {"date": "2023-02-04T00:38:24.64+00:00"}, "hash": "943ffa9e59275153bd05d772579d7577d2c85be213a4cbff47d8a932a0536c52", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "922d27df-a3b9-4e24-9ab2-93de644ac1e8", "node_type": "1", "metadata": {"date": "2023-02-03T19:42:43.477+00:00"}, "hash": "796ee0be1d124841d0d767f246974ca9be76e149187cd73cca243dd612354ed8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9d24c8dd-f116-4660-96d2-5fa5c04862d7", "node_type": "1", "metadata": {}, "hash": "bf6e57f5df9db7665cf4527bd071e33fb2cd4a6ce55c455c562af793afdc6b57", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\ni have a similar question to @finalcall.eth ! Is there a way to make GPT calls that reference a specific embedding without having to re-upload the document each time?\njeremy-analytics:\nah, so you want to cache the embeddings for a given text chunk? you could wrap the method with a LRU or other cache method.\nsmokeoX:\nthanks @jeremy-analytics , so something like `if index not in cache:` ? As in, the `index` stores a reference to the embedding of the document on openAI for later retrieval?\njeremy-analytics:\ni do that that it would be easier and cheaper for you to use the huiggingface embeddings. they work pretty well\nsmokeoX:\ndo you mean https://huggingface.co/spaces/rsunner/GPT-Index_simple_upload ?", "start_char_idx": 0, "end_char_idx": 715, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d24c8dd-f116-4660-96d2-5fa5c04862d7": {"__data__": {"id_": "9d24c8dd-f116-4660-96d2-5fa5c04862d7", "embedding": null, "metadata": {"date": "2023-02-04T01:37:15.527+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071243006688112730", "node_type": "4", "metadata": {"date": "2023-02-04T01:37:15.527+00:00"}, "hash": "89f5049a7d7892fa354b35890d8834ebc14871263cc6c3021f41c56c606fc3cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b12f9c34-fff6-4557-91b1-6ae669516e13", "node_type": "1", "metadata": {"date": "2023-02-04T00:38:24.64+00:00"}, "hash": "703129d304530ff54a974ca1e5058243302c2c32a4cf52d67659c3f8df47915d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f08c837-d8f8-40c7-84e8-f66d193639fd", "node_type": "1", "metadata": {}, "hash": "7fc8ffec1241de51cde2d22c9341d077fd2fe292bff8914cbad590b842cc87da", "class_name": "RelatedNodeInfo"}}, "text": "Krrish:\nWas anyone able to get the google docs reader integration setup within Google Colab? I keep running into oauth errors even after passing in credentials (and i think it has to do with colab not being able to run localhost)\nsmokeoX:\nsame!", "start_char_idx": 0, "end_char_idx": 244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f08c837-d8f8-40c7-84e8-f66d193639fd": {"__data__": {"id_": "7f08c837-d8f8-40c7-84e8-f66d193639fd", "embedding": null, "metadata": {"date": "2023-02-04T09:00:39.423+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071354591515516959", "node_type": "4", "metadata": {"date": "2023-02-04T09:00:39.423+00:00"}, "hash": "8f5043df13c8b3927a02fdc8562245af6e0227ef001f71308c0291b47c273bf6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d24c8dd-f116-4660-96d2-5fa5c04862d7", "node_type": "1", "metadata": {"date": "2023-02-04T01:37:15.527+00:00"}, "hash": "b91355e354fede13c4b5053b7c9aa0e901335369ea5b7d1cc0b59a73a8d745ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6624383a-d3a9-4cc3-95f9-9531f9b5b5ce", "node_type": "1", "metadata": {}, "hash": "444fbd690845edf6d8cce97d48d314659954ccc79e430a59c1b31e82d68d1891", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\n`query = GPTSimpleVectorIndexQuery(index)`\n\nthrows \n\n`ValueError: prompt_helper must be provided.`\n\nI think this is not documented\njerryjliu98:\nyeah you're not supposed to define the query class, you're mostly supposed to use index.query", "start_char_idx": 0, "end_char_idx": 244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6624383a-d3a9-4cc3-95f9-9531f9b5b5ce": {"__data__": {"id_": "6624383a-d3a9-4cc3-95f9-9531f9b5b5ce", "embedding": null, "metadata": {"date": "2023-02-04T10:34:53.698+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071378307263770685", "node_type": "4", "metadata": {"date": "2023-02-04T10:34:53.698+00:00"}, "hash": "810435663a244198b1f905b3e7b8f32ca26fa9b93021542a9bbdcc5946841ece", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f08c837-d8f8-40c7-84e8-f66d193639fd", "node_type": "1", "metadata": {"date": "2023-02-04T09:00:39.423+00:00"}, "hash": "127373ee34bf6f99b5e08233d406f05af65e09c845c7ddae9bcf2d0b73eacafb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3e1198e-1d9b-426c-aeac-0701c2f790ad", "node_type": "1", "metadata": {}, "hash": "23f1aa5e0ac68a911e59eb7992db5d01ccb70f6b0fe234a15be8d891a37a3789", "class_name": "RelatedNodeInfo"}}, "text": "Chris1123:\nIn the docs for querying, there's a function called get_nodes_and_similarities_for_response, but I can't see which object I would call this off?\n\nWhen increasing the similarity_top_k parameter for a Vector Index query, the runtime increases significantly, why is this?\nMikko:\nSee 3 messages above, it's on the Query object\nChris1123:\nAh thanks! So if it's on the query object, does that mean we don't really have access to it currently?", "start_char_idx": 0, "end_char_idx": 447, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3e1198e-1d9b-426c-aeac-0701c2f790ad": {"__data__": {"id_": "c3e1198e-1d9b-426c-aeac-0701c2f790ad", "embedding": null, "metadata": {"date": "2023-02-05T16:38:44.486+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071832260090794014", "node_type": "4", "metadata": {"date": "2023-02-05T16:38:44.486+00:00"}, "hash": "0a6b0b82725b19ba209a7b141bc0aa5e12d093d431e1391bcde176fb8be2d4b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6624383a-d3a9-4cc3-95f9-9531f9b5b5ce", "node_type": "1", "metadata": {"date": "2023-02-04T10:34:53.698+00:00"}, "hash": "e1d2bf3a164e147131f7f252cd55e9ac41f472c4e897dd3713dc25a1aedaf039", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08e908d4-24e7-44e0-989a-dc2a3ebe20f1", "node_type": "1", "metadata": {}, "hash": "2c1b945bda42ecc5d307b108e4334aabdafa4544275a6fe414b504bfdc9b0fea", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nHow do I make sure my text chunks don't overlap?\njerryjliu98:\ndefine a custom PromptHelper and set max_chunk_overlap=0 (you can see an example here https://gpt-index.readthedocs.io/en/latest/how_to/custom_llms.html)", "start_char_idx": 0, "end_char_idx": 222, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08e908d4-24e7-44e0-989a-dc2a3ebe20f1": {"__data__": {"id_": "08e908d4-24e7-44e0-989a-dc2a3ebe20f1", "embedding": null, "metadata": {"date": "2023-02-05T20:19:36.184+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071887841740738731", "node_type": "4", "metadata": {"date": "2023-02-05T20:19:36.184+00:00"}, "hash": "ab8c5a185ca1614bc923973111b5612cb5491515946a2e7ffe21c54b9c3af4f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3e1198e-1d9b-426c-aeac-0701c2f790ad", "node_type": "1", "metadata": {"date": "2023-02-05T16:38:44.486+00:00"}, "hash": "93b03a14def2c50fd217572f0dec9fc35a4dd8d5593cb3d773a95c5d1365f7be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "add0043e-8b54-43c8-a9d4-55ecf64cf888", "node_type": "1", "metadata": {}, "hash": "c0cf4f6919e4d2dceccce002cdf64bd7ef2a331f48e7fcad2a191786661ad325", "class_name": "RelatedNodeInfo"}}, "text": "samcwl:\nHi! Maybe I'm mistaken, but doesn't `GPTSimpleVectorIndex` require LLM call at build time? If so, it's not reflected here.\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/cost_analysis.html#overview-of-cost-structure\njerryjliu98:\nNope! It only calls the embedding api (we separate the two)", "start_char_idx": 0, "end_char_idx": 300, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "add0043e-8b54-43c8-a9d4-55ecf64cf888": {"__data__": {"id_": "add0043e-8b54-43c8-a9d4-55ecf64cf888", "embedding": null, "metadata": {"date": "2023-02-05T21:09:08.606+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1071900308982218783", "node_type": "4", "metadata": {"date": "2023-02-05T21:09:08.606+00:00"}, "hash": "ed259d81cb066e2d845a779bb36a882e6335b23d056f65d99c5afdb679f9e733", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08e908d4-24e7-44e0-989a-dc2a3ebe20f1", "node_type": "1", "metadata": {"date": "2023-02-05T20:19:36.184+00:00"}, "hash": "915ed09642fddc55b0a109607ebba6cc0e514577cc168260db087f8426086ed1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6aa9e8ec-3216-4e73-a594-64d28bc94409", "node_type": "1", "metadata": {}, "hash": "7ceb4cdc32118ab5f91c3ac6bb6c29961cd961783a562645d86d45991a5a6585", "class_name": "RelatedNodeInfo"}}, "text": "samcwl:\nAlso, could someone provide a bit more intuition for when `tree_summarize` is used vs `summarize` (and when to use `response_mode` and `mode`)? \n\nI read this (https://gpt-index.readthedocs.io/en/latest/guides/usage_pattern.html#setting-mode) but unclear when to use which one. I.e. what should I use for `GPTSimpleVectorStore`? I tried the latter set of options and it threw the following error\njerryjliu98:\nresponse_mode=\"summarize\" is only for the tree index (i know it's confusing). i would stick to response_mode=\"default\" or response_mode=\"tree_summarize\" for your purposes.\nsamcwl:\nGotcha - thanks!", "start_char_idx": 0, "end_char_idx": 612, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6aa9e8ec-3216-4e73-a594-64d28bc94409": {"__data__": {"id_": "6aa9e8ec-3216-4e73-a594-64d28bc94409", "embedding": null, "metadata": {"date": "2023-02-06T08:54:46.079+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072077885214556251", "node_type": "4", "metadata": {"date": "2023-02-06T08:54:46.079+00:00"}, "hash": "26db388641550c5cfe81a4c988dabab456153baa315da43239d8cafc90dc65f8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "add0043e-8b54-43c8-a9d4-55ecf64cf888", "node_type": "1", "metadata": {"date": "2023-02-05T21:09:08.606+00:00"}, "hash": "6e9a9198e0bf27d331fabb4037801a5571ef562efeea44f8cedaf2cbd38546dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "159416f0-8ad6-4aaa-8741-1bb2c6ffc987", "node_type": "1", "metadata": {}, "hash": "d3b1e0b12599c500d3a59bc6ece49ab81691bcd98b14112b748bb1de3be0b31d", "class_name": "RelatedNodeInfo"}}, "text": "NimraNoor:\nValidationError: 1 validation error for OpenAI\n__root__\n  Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)\nbbornsztein:\nYou need to set your OPENAI_API_KEY environment variable. You can set it inside your script like this:\n\n```\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"sk-123456\"\n```\n\nOr set it in your shell before running the script: `export OPENAI_API_KEY=sk-1234`", "start_char_idx": 0, "end_char_idx": 497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "159416f0-8ad6-4aaa-8741-1bb2c6ffc987": {"__data__": {"id_": "159416f0-8ad6-4aaa-8741-1bb2c6ffc987", "embedding": null, "metadata": {"date": "2023-02-06T16:06:58.018+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072186651650043995", "node_type": "4", "metadata": {"date": "2023-02-06T16:06:58.018+00:00"}, "hash": "54e3dcbc34f55a5e5a304f4730fe11c01220b5bf8ce75b0a5e6cb7dc401dd6aa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6aa9e8ec-3216-4e73-a594-64d28bc94409", "node_type": "1", "metadata": {"date": "2023-02-06T08:54:46.079+00:00"}, "hash": "d70e332c033b273ae110bdc228c0610583a9b41fa5b586ed63b1df7ea34589a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0b5a247-f046-44d7-aa22-b7305ef1ad67", "node_type": "1", "metadata": {}, "hash": "00e647e47d467c14e1a656111dca4e5b051ad5f1dcd388365dd4b89dea33c9bb", "class_name": "RelatedNodeInfo"}}, "text": "antonionardella:\nHello, does anyone know how to set the rate to avoid being rate limited by the API?\n\n```\nRate limit reached for default-global-with-image-limits in organization <REDACTED> on requests per min. Limit: 60.000000 / min. Current: 110.000000 / min\n```\n\nThank you\nantonionardella:\nIf anyone is interested, this is how I got around the rate limits:\n\nI uninstalled the packaged with `pip uninstall gpt-index`\n\nCloned the repo\n`git clone https://github.com/jerryjliu/gpt_index.git`\n\nchanged the `gpt_index/embeddings/openai.py` file as explained here:\n\nhttps://github.com/jerryjliu/gpt_index/issues/333#issuecomment-1415630136\n\nI set it like this in line #91\n```py\n@retry(wait=wait_random_exponential(min=60, max=120), stop=stop_after_attempt(100))\ndef get_embedding(\n```\n\nBuilt and installed the package \n\n```py\npip install -r requirements.txt\npip install .\n```\n\nAnd rerun the `read.py`\n\nIt's neither quick nor efficient, but it works so far.", "start_char_idx": 0, "end_char_idx": 951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0b5a247-f046-44d7-aa22-b7305ef1ad67": {"__data__": {"id_": "e0b5a247-f046-44d7-aa22-b7305ef1ad67", "embedding": null, "metadata": {"date": "2023-02-06T21:07:09.147+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072262195800449207", "node_type": "4", "metadata": {"date": "2023-02-06T21:07:09.147+00:00"}, "hash": "c27e089b227a2ac892aebdf46b3dcad138e853c6e909adde814acbac4e11a4fb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "159416f0-8ad6-4aaa-8741-1bb2c6ffc987", "node_type": "1", "metadata": {"date": "2023-02-06T16:06:58.018+00:00"}, "hash": "536959cdda711a66cd73d96ad17f8c1ed84a98b6e610dd2f5a56afded77e25b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "046c0069-fb8c-45be-aeae-a346f33e343b", "node_type": "1", "metadata": {}, "hash": "18ddec11518bbad0c7c4075781d8e5b72bc131497380623fe5076b8fe1bc92ef", "class_name": "RelatedNodeInfo"}}, "text": "yourbuddyconner:\nAnyone in here messed around with ElasticSearch RE: LLM context retrieval? \n\nHaving a hugely good time with it, think it would be interesting to add to the set of index abstractions in this library.\njerryjliu98:\ni'd love elastic support! it's always been a TODO, haven't had the chance to get to it fully yet", "start_char_idx": 0, "end_char_idx": 325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "046c0069-fb8c-45be-aeae-a346f33e343b": {"__data__": {"id_": "046c0069-fb8c-45be-aeae-a346f33e343b", "embedding": null, "metadata": {"date": "2023-02-07T02:07:47.966+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072337856091144323", "node_type": "4", "metadata": {"date": "2023-02-07T02:07:47.966+00:00"}, "hash": "969a9430b7a2db867a8e5b0f19a88fe89b458d46629fa8907cc4e551c97c3f56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0b5a247-f046-44d7-aa22-b7305ef1ad67", "node_type": "1", "metadata": {"date": "2023-02-06T21:07:09.147+00:00"}, "hash": "467ad475d2ecc69f6f9a537c9da8a38a70a6bd6eef4a423017a4ed017464e83f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c791a98-24e2-4981-92a9-e113bbdaabae", "node_type": "1", "metadata": {}, "hash": "476d5dbe2fa6e5cee6517ae09de19ecc8312591d09a6913eb1ddbdfd7066d7e6", "class_name": "RelatedNodeInfo"}}, "text": "Mister Swiss:\nHi! Is windows supported?\njerryjliu98:\nit should be! though i haven't tested thoroughly", "start_char_idx": 0, "end_char_idx": 101, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c791a98-24e2-4981-92a9-e113bbdaabae": {"__data__": {"id_": "4c791a98-24e2-4981-92a9-e113bbdaabae", "embedding": null, "metadata": {"date": "2023-02-07T13:14:09.472+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072505550681677864", "node_type": "4", "metadata": {"date": "2023-02-07T13:14:09.472+00:00"}, "hash": "c9b8dc4cd56f2def3a66e565d72283c40c7de3d858533ff2be340a7a906b12ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "046c0069-fb8c-45be-aeae-a346f33e343b", "node_type": "1", "metadata": {"date": "2023-02-07T02:07:47.966+00:00"}, "hash": "9030402979c4184c64223d0945b2d61733aa7cb51b6f378cbc59611c6c020bfa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70e1731e-06e3-449a-b6cc-14bd9f61b9fa", "node_type": "1", "metadata": {}, "hash": "2bbce037ec958c1888e9c149c9e2d39cb82c7868ed1d4b6acc9677387c5ac062", "class_name": "RelatedNodeInfo"}}, "text": "HiSonItsDad:\nHey all, asked this in knirgs thread but reposting for visibility.\n\nI'm still stuck at 256 token max output. I've messed around with llmpredictor and prompt_helper already. Adding the arguments to both the indexing step and the querying step.\n\nTool seems to be working fantastically, but cutting off my analysis at 256 on the nose ever time.\n\nAnyone running into something similar? Any suggestions?\n\nEDIT: just saw updated in the docs. Thank you @jerryjliu98 !\nsanjuhs123:\nhey even my answers get cut off , even after changing the token max output , could you please help @jerryjliu98\nHiSonItsDad:\nThere's a max_tokens arg you need to add to llm_predictor\nsanjuhs123:\nwoahh it worked !! thanks , sorry hadnt seen that , had gotten confused , but now its working", "start_char_idx": 0, "end_char_idx": 774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70e1731e-06e3-449a-b6cc-14bd9f61b9fa": {"__data__": {"id_": "70e1731e-06e3-449a-b6cc-14bd9f61b9fa", "embedding": null, "metadata": {"date": "2023-02-07T18:07:54.091+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072579473691652128", "node_type": "4", "metadata": {"date": "2023-02-07T18:07:54.091+00:00"}, "hash": "605e98e6edce394ef52dd5eff03a3f773c1e1d927f198b45b9721a6680b7656e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c791a98-24e2-4981-92a9-e113bbdaabae", "node_type": "1", "metadata": {"date": "2023-02-07T13:14:09.472+00:00"}, "hash": "00d97fde99ac5dcc0d2a9ac471a3bcec8bb916635a14d4632c8f804f577c663d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f03877ff-3f9b-4c3b-b8fb-0e3d9f5cc257", "node_type": "1", "metadata": {}, "hash": "15bf564391eccca78b44e9a311023e5c5459e078beba4d01489988c9d75be403", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nIs there a way to bring the accuracy of the other vector stores (e.g., qdrant, pinecone, etc) up to the level of the SimpleVectorStore?\njerryjliu98:\nthe simple vector store does brute-force embedding similarity with every document. it's possible pinecone/faiss are using an approximate nearest neighbors algorithm\nSandkoan:\nAhh, yeah that seems to be the case. At what point do you think it becomes worth it to use ANN?\njerryjliu98:\nyou can also do brute-force in pinecone/faiss! (I think)  \n\nwhat's the number of documents that you have? Given that it can fit into memory using the simple vector index you may always want to try brute-force for now\nerinnnn:\ncan you explain this further?", "start_char_idx": 0, "end_char_idx": 698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f03877ff-3f9b-4c3b-b8fb-0e3d9f5cc257": {"__data__": {"id_": "f03877ff-3f9b-4c3b-b8fb-0e3d9f5cc257", "embedding": null, "metadata": {"date": "2023-02-08T03:38:25.634+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072723051189391431", "node_type": "4", "metadata": {"date": "2023-02-08T03:38:25.634+00:00"}, "hash": "3b6d55808379b4fcca15c21687b728655c6b816f31e205343f8f1081910421ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70e1731e-06e3-449a-b6cc-14bd9f61b9fa", "node_type": "1", "metadata": {"date": "2023-02-07T18:07:54.091+00:00"}, "hash": "1957fce36b9825adb1887f826c998045ac575a9638ea54191353aa031e27d5f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ea3eedc-664c-4697-a24f-78d2fe38dd35", "node_type": "1", "metadata": {}, "hash": "b65fbb854957a65db7bebdf4bc5d07347f78b7577a52d26b1c75855518fdcb7c", "class_name": "RelatedNodeInfo"}}, "text": "qianminhu:\nnoob question, i'm playing around with llamahub.ai! when I try using the file_loader, I get this error: \" ImportError: cannot import name 'download_loader' from 'gpt_index' \"\nCurious what to do in this situation \ud83d\ude42\nsm:\n@qianminhu   did you get this resolved? stuck here as well. Thx.\njerryjliu98:\n@sm what version of gpt index are you on?\nsm:\nwas gpt-index-0.3.4, and upgraded to 0.4.6.  Reference download_loader() resolved. Thanks @jerryjliu98", "start_char_idx": 0, "end_char_idx": 455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ea3eedc-664c-4697-a24f-78d2fe38dd35": {"__data__": {"id_": "2ea3eedc-664c-4697-a24f-78d2fe38dd35", "embedding": null, "metadata": {"date": "2023-02-08T04:18:05.559+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072733033318318190", "node_type": "4", "metadata": {"date": "2023-02-08T04:18:05.559+00:00"}, "hash": "a29b8c502ca2fc8b0f0552b14605ea9380cd41b2d09ce0307360022771aabdeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f03877ff-3f9b-4c3b-b8fb-0e3d9f5cc257", "node_type": "1", "metadata": {"date": "2023-02-08T03:38:25.634+00:00"}, "hash": "45766767751594f2274b3f3ed4b848a498c97ef02f0990538a87ad68cb9cf9e0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3513f7d-53ec-428d-9365-6fe06293bd81", "node_type": "1", "metadata": {}, "hash": "cb33926505cdca6bb584d8f220473825e296954e6ee019a939ebc76f2903718f", "class_name": "RelatedNodeInfo"}}, "text": "Jonathan Elkobi:\nCan I operate only on flan-T5 with this? Or I have to use OpenAI LLM?\njeremy-analytics:\n```python\n## in another console you have to serve the model. e.g.\n## python3 -m manifest.api.app --model_type huggingface --model_name_or_path google/flan-t5-xl --fp16 --device 0\nmanifest = Manifest(\n    client_name = \"huggingface\",\n    client_connection = \"http://127.0.0.1:5000\",\n)\nprint(manifest.client.get_model_params())\n```", "start_char_idx": 0, "end_char_idx": 434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3513f7d-53ec-428d-9365-6fe06293bd81": {"__data__": {"id_": "d3513f7d-53ec-428d-9365-6fe06293bd81", "embedding": null, "metadata": {"date": "2023-02-08T12:48:19.395+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072861437053120512", "node_type": "4", "metadata": {"date": "2023-02-08T12:48:19.395+00:00"}, "hash": "7b1a6c982fe585d75046b04b8ca33e598a3e85712e4843f5a6118cb8b51050b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ea3eedc-664c-4697-a24f-78d2fe38dd35", "node_type": "1", "metadata": {"date": "2023-02-08T04:18:05.559+00:00"}, "hash": "b8fa5eccd38450225b52902e59ebc46264b2bdabf9e8141541176562bb440d1c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55b6080c-e667-4a92-878b-4e154202292a", "node_type": "1", "metadata": {}, "hash": "f079f60e701746993b5a2cebc05ee444e5b93b7704fa34f827fc4cbec4fe06d4", "class_name": "RelatedNodeInfo"}}, "text": "firasd:\nHey folks.. when using the wikipedia reader if I do \n\ndocuments = loader.load_data(pages=['Rome', 'Paris'])\nindex = GPTSimpleVectorIndex(documents)\nresponse = index.query(\"summarize\")\n\nit only seems to use the last document (eg Paris in this case). Am I missing something about the usage pattern\nravitheja:\nInteresting. Did you face same issue with ListIndex as well?\nfirasd:\nthat works better, thanks", "start_char_idx": 0, "end_char_idx": 409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55b6080c-e667-4a92-878b-4e154202292a": {"__data__": {"id_": "55b6080c-e667-4a92-878b-4e154202292a", "embedding": null, "metadata": {"date": "2023-02-08T13:05:32.804+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072865771484622878", "node_type": "4", "metadata": {"date": "2023-02-08T13:05:32.804+00:00"}, "hash": "940602a8e919da0bb33e6a41e2435b7c437be9119a36b0fca71241fdd1f06bfb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3513f7d-53ec-428d-9365-6fe06293bd81", "node_type": "1", "metadata": {"date": "2023-02-08T12:48:19.395+00:00"}, "hash": "4a18361dae252404991c62a19eb442a1c296438955ffe4215c50464ee6761596", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8d13645-48ca-487b-9b13-364216805be5", "node_type": "1", "metadata": {}, "hash": "966615801d0fabdb1d9af0e0e6b5e96e1c1ce924679199eeaecb3bf6a78e11a5", "class_name": "RelatedNodeInfo"}}, "text": "nobii:\nhey guys, what can be done to speed up the response time?\nmatt_a:\nDid you ever make any progress on this? Facing a similar issue with response time", "start_char_idx": 0, "end_char_idx": 154, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8d13645-48ca-487b-9b13-364216805be5": {"__data__": {"id_": "f8d13645-48ca-487b-9b13-364216805be5", "embedding": null, "metadata": {"date": "2023-02-08T16:34:51.07+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072918444669943858", "node_type": "4", "metadata": {"date": "2023-02-08T16:34:51.07+00:00"}, "hash": "04243510cdbec0138387fa249ec9300441200e27f9578966408c1d541db2072f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55b6080c-e667-4a92-878b-4e154202292a", "node_type": "1", "metadata": {"date": "2023-02-08T13:05:32.804+00:00"}, "hash": "058aed34a0644c2aa61ac233f6aeab5b5e2d69a082d5c2c9b810aa75272736ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f46c051-f076-43e4-ae77-21c501de40c2", "node_type": "1", "metadata": {}, "hash": "8b1d31d6aa82e89fa0a0cbf4e3b069b6485ebce8a194d1e6d1ef4cf721d56c41", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nHi! Totally ignorant question I\u2019m sure (and indicative of my lack of tech expertise). I\u2019m trying to build a bot using my own data as shown by Dan Shipper (link to follow). I\u2019m getting an error saying: TypeError: BaseIndex.__init__() got an unexpected keyword argument \u2018verbose\u2019. I wonder if anyone has encountered anything similar and knows how I can fix?? Grateful for help!\nthomoliver:\nCollab file here https://colab.research.google.com/drive/1p2AablavDkSXly6H-XNLoSylMtoz7NDG?usp=sharing and article here https://www.lennysnewsletter.com/p/i-built-a-lenny-chatbot-using-gpt\njerryjliu98:\nthanks to @danshipper for helping to edit the master notebook - it should be updated now!", "start_char_idx": 0, "end_char_idx": 691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f46c051-f076-43e4-ae77-21c501de40c2": {"__data__": {"id_": "2f46c051-f076-43e4-ae77-21c501de40c2", "embedding": null, "metadata": {"date": "2023-02-08T16:41:26.648+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1072920103844319232", "node_type": "4", "metadata": {"date": "2023-02-08T16:41:26.648+00:00"}, "hash": "be4535a5df82f8932511ab98a36fa6a03a6a65a68bfff49e0741817659f2ddf5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8d13645-48ca-487b-9b13-364216805be5", "node_type": "1", "metadata": {"date": "2023-02-08T16:34:51.07+00:00"}, "hash": "6e5f00bb44f8f4af8271857c2f639584385c366b6b50c12db3378d9e7f6d1fe8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be65e0c1-d4e8-4537-8a12-84bbd9522cae", "node_type": "1", "metadata": {}, "hash": "3b6ac1562d8666a8f308a6fbfc841c0ea1b9b35c2b3fa9675a29bf0599d8c013", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nSee #releases, the verbose keyword was just removed \ud83d\ude42\nthomoliver:\nty. So this means I should edit my code accordingly..?", "start_char_idx": 0, "end_char_idx": 127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be65e0c1-d4e8-4537-8a12-84bbd9522cae": {"__data__": {"id_": "be65e0c1-d4e8-4537-8a12-84bbd9522cae", "embedding": null, "metadata": {"date": "2023-02-09T00:45:40.561+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073041964787834880", "node_type": "4", "metadata": {"date": "2023-02-09T00:45:40.561+00:00"}, "hash": "7460c46901dbd7e3b68d20a19e4dca56046f0e646d5f961886887829c1507c8c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f46c051-f076-43e4-ae77-21c501de40c2", "node_type": "1", "metadata": {"date": "2023-02-08T16:41:26.648+00:00"}, "hash": "022fb4defcdf2892dc325d99c99fdf3deda7294d1299c295b61b5c04c68951f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "156a4ff2-85c2-414f-9862-6229aa1cd381", "node_type": "1", "metadata": {}, "hash": "230770f380f9421b1d3467000db710a12da23b38f2fef6f27f28fd78fe08cfa3", "class_name": "RelatedNodeInfo"}}, "text": "MrB:\nA quick question, I am having a bit of trouble to get my first example to run. I want to create an index that uses FAISS and fasttext embeddings instead. The first part seems to work, but I don't see how I can prevent GPTIndex to keep asking me for an OpenAI API key and instead use fasttext for the vector embeddings. I am sure I am missing something simple. Can someone point me into the right direction?\njerryjliu98:\nyou can define custom embeddings here https://gpt-index.readthedocs.io/en/latest/how_to/embeddings.html#custom-embeddings", "start_char_idx": 0, "end_char_idx": 546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "156a4ff2-85c2-414f-9862-6229aa1cd381": {"__data__": {"id_": "156a4ff2-85c2-414f-9862-6229aa1cd381", "embedding": null, "metadata": {"date": "2023-02-09T01:21:47.106+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073051051936202773", "node_type": "4", "metadata": {"date": "2023-02-09T01:21:47.106+00:00"}, "hash": "9cf46a98366876767359b355afd3d73493a31833d88d392ae0b493b13f5803f3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be65e0c1-d4e8-4537-8a12-84bbd9522cae", "node_type": "1", "metadata": {"date": "2023-02-09T00:45:40.561+00:00"}, "hash": "a28e42c3f0447370b48725ba1a9cfca5e8c3237d9f9d7b917b1570d8ef78829b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db6ad1a2-01c6-4e2f-ba73-8bf72d6ec8ea", "node_type": "1", "metadata": {}, "hash": "c4ca730143a7e1feffb1a21ab32a68e2a5e951177c5c15109044c8533b5e6ab0", "class_name": "RelatedNodeInfo"}}, "text": "MrB:\nBummer there is no sentence transformer from huggingface for fasttext, which means I can't use fasttext as an embeddings lib for this it seems.\njerryjliu98:\nyou can also try subclassing BaseEmbedding from gpt_index.embeddings.base and plugging this in if you want to use within gpt index", "start_char_idx": 0, "end_char_idx": 292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db6ad1a2-01c6-4e2f-ba73-8bf72d6ec8ea": {"__data__": {"id_": "db6ad1a2-01c6-4e2f-ba73-8bf72d6ec8ea", "embedding": null, "metadata": {"date": "2023-02-09T07:17:17.037+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073140516151103548", "node_type": "4", "metadata": {"date": "2023-02-09T07:17:17.037+00:00"}, "hash": "1f2a917ac854c93db1cba05d7474e03c7a56c93da9936c301a203ee5e27edba0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "156a4ff2-85c2-414f-9862-6229aa1cd381", "node_type": "1", "metadata": {"date": "2023-02-09T01:21:47.106+00:00"}, "hash": "6b2232e08f22ad45f9fa2569547e2955b0ffa040c56db6dffa4a862a23bda882", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f9d2f99c-bd77-4648-af4f-45bcfca8f9ee", "node_type": "1", "metadata": {}, "hash": "269bf56a5792bb6da8dcaef639081600ad0594c469eca0fab3704cb284e91cca", "class_name": "RelatedNodeInfo"}}, "text": "Vikky:\nCan we do keyword+embedding search while querying?\njerryjliu98:\nwe do offer required_keywords=[\"keyword1\",...] as an option for every `index.query` call. for vector store indices this means we first fetch top k, and then we filter by keyword", "start_char_idx": 0, "end_char_idx": 248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9d2f99c-bd77-4648-af4f-45bcfca8f9ee": {"__data__": {"id_": "f9d2f99c-bd77-4648-af4f-45bcfca8f9ee", "embedding": null, "metadata": {"date": "2023-02-09T07:30:05.632+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073143739872194590", "node_type": "4", "metadata": {"date": "2023-02-09T07:30:05.632+00:00"}, "hash": "71d8c4e1887e84e45b9c611b0063eb5e22cf812a0723594739c3c68a8352d774", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db6ad1a2-01c6-4e2f-ba73-8bf72d6ec8ea", "node_type": "1", "metadata": {"date": "2023-02-09T07:17:17.037+00:00"}, "hash": "17fd2e48142b8f8ed96d2a3eac3dd25b93cfdb28726071777908dab4781f5db8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc572593-f37d-4fd9-b4a3-81a3d00b0d3d", "node_type": "1", "metadata": {}, "hash": "3d5b4afe65ea08a2e0ec42ad254ca13a6443403ce27b57f03f467671ef4e96d3", "class_name": "RelatedNodeInfo"}}, "text": "Vikky:\nCan we reverse this process? \ni.e filter by keyword -> semantic search from vectorstore\njerryjliu98:\ngood point. let me take a look, should be possible", "start_char_idx": 0, "end_char_idx": 158, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc572593-f37d-4fd9-b4a3-81a3d00b0d3d": {"__data__": {"id_": "cc572593-f37d-4fd9-b4a3-81a3d00b0d3d", "embedding": null, "metadata": {"date": "2023-02-09T12:15:24.559+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073215541856182332", "node_type": "4", "metadata": {"date": "2023-02-09T12:15:24.559+00:00"}, "hash": "8d294235498141c638d835c4c4ff32bff2b1138134b3cc816e95d319c5c914bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9d2f99c-bd77-4648-af4f-45bcfca8f9ee", "node_type": "1", "metadata": {"date": "2023-02-09T07:30:05.632+00:00"}, "hash": "a2becd3b4c0ca01ef1ffe80f6de9440d919d8c59bedca7faa3f91181f7dca53e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8b782ee-f4dd-43f5-9832-3cfb649373a2", "node_type": "1", "metadata": {}, "hash": "69541440ac166197ca215094a57e7b2c8f79a5c1db4534f18fa53f8860c20be2", "class_name": "RelatedNodeInfo"}}, "text": "LarryHudson:\nDo people have a recommended Docker image setup for working with GPT Index / other Python libraries?\n\nI've been using the default python:3.9 image like this:\n```Dockerfile\nFROM python:3.9\n```\n\nBut I've been having issues with some pip installs (like 'missing Rust compiler', so I'm manually installing Rust too), and couldn't get the UnstructuredReader working either. So keen if there is a recommended Docker image to start with.\nMikko:\nI've used slim-buster images succesfully!\nLarryHudson:\nNice, I'll try that out now. Do you still need to manually install things like 'gcc' etc? I'm not sure how much manual config is normal in Docker-land", "start_char_idx": 0, "end_char_idx": 656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8b782ee-f4dd-43f5-9832-3cfb649373a2": {"__data__": {"id_": "d8b782ee-f4dd-43f5-9832-3cfb649373a2", "embedding": null, "metadata": {"date": "2023-02-09T12:39:26.181+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073221588457099295", "node_type": "4", "metadata": {"date": "2023-02-09T12:39:26.181+00:00"}, "hash": "5bdc916bce05458faaa20244a8aadef5ad37fb7aba68293c1eb2e58ab7e6d9a3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc572593-f37d-4fd9-b4a3-81a3d00b0d3d", "node_type": "1", "metadata": {"date": "2023-02-09T12:15:24.559+00:00"}, "hash": "f9cbd183b8bec3ae9a5a8e1d87c809617977d0b771cb183a76767c0f32d06aff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8706269-a2f6-4158-a3d2-6f5e12d45c5f", "node_type": "1", "metadata": {}, "hash": "a960070eb45740aabad6290e712dec1e2655a863e4a39b70e9f0ec6df5896087", "class_name": "RelatedNodeInfo"}}, "text": "leny32:\nHi,\n\nI'm trying to load a large document into GPT Index, but I'm only met with ratelimits. Got any suggestions? The document has 42000 words.\nMikko:\nThere is a github issue about this \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 193, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8706269-a2f6-4158-a3d2-6f5e12d45c5f": {"__data__": {"id_": "c8706269-a2f6-4158-a3d2-6f5e12d45c5f", "embedding": null, "metadata": {"date": "2023-02-09T12:52:00.088+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073224750572245042", "node_type": "4", "metadata": {"date": "2023-02-09T12:52:00.088+00:00"}, "hash": "9545934c350db1167a45ea9a6d209d0e3f7e58363cb83781d4425f8ee75be8d3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8b782ee-f4dd-43f5-9832-3cfb649373a2", "node_type": "1", "metadata": {"date": "2023-02-09T12:39:26.181+00:00"}, "hash": "0614b04f37e217f76d8af1761204ccb1b344589274cffa658dc14d1713526ff6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa7b5073-607a-4619-bebb-2b26b74abfc0", "node_type": "1", "metadata": {}, "hash": "50d8d2c28d2211cb991072bfbb1ff4783a3959866733bd63decebb416e03f266", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nNice, maybe it was inferring ARM from the M1\nLarryHudson:\nYep I think that's right - shows how little I actually understand about Docker!", "start_char_idx": 0, "end_char_idx": 144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa7b5073-607a-4619-bebb-2b26b74abfc0": {"__data__": {"id_": "fa7b5073-607a-4619-bebb-2b26b74abfc0", "embedding": null, "metadata": {"date": "2023-02-09T14:33:01.424+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073250173658083508", "node_type": "4", "metadata": {"date": "2023-02-09T14:33:01.424+00:00"}, "hash": "c3f968f05a0c0cf6f20f7b3356a9fbe47295d2e614ce19bef3698a130af25084", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8706269-a2f6-4158-a3d2-6f5e12d45c5f", "node_type": "1", "metadata": {"date": "2023-02-09T12:52:00.088+00:00"}, "hash": "e5a8e0a3cd1af106f7ab6655fa6f071233b3e8d58b4bb5eaeaf1649820bc03ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7246b00-16dc-4644-a550-590b8ef8cb4d", "node_type": "1", "metadata": {}, "hash": "70bafac28559645b0b09fab83f4b6e8e735cad9bca20f67fbc842f78a348a54a", "class_name": "RelatedNodeInfo"}}, "text": "flolas:\nHi! it is normal to found find in a TreeIndex like this??\n```\nIndexGraph(text='answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer answer', doc_id=[...]\n```\nflolas:\nnvm, was the LLM Mock, Lol.", "start_char_idx": 0, "end_char_idx": 1933, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7246b00-16dc-4644-a550-590b8ef8cb4d": {"__data__": {"id_": "e7246b00-16dc-4644-a550-590b8ef8cb4d", "embedding": null, "metadata": {"date": "2023-02-09T20:33:08.332+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073340799598735373", "node_type": "4", "metadata": {"date": "2023-02-09T20:33:08.332+00:00"}, "hash": "cf76eba70e4cf23fca844adbb3f8a01e7ab2155f09d71c20845f8626d910e2fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa7b5073-607a-4619-bebb-2b26b74abfc0", "node_type": "1", "metadata": {"date": "2023-02-09T14:33:01.424+00:00"}, "hash": "5d9c0fad8fe3f91b97973de629d5d89ff5fea2d33472a2487f60de956639ff03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f314dbd-02f5-443f-a9b3-b415d5c9ab65", "node_type": "1", "metadata": {}, "hash": "0b88d8cb4e794d2db2c8fc2f6338f2eff8651ea0fefbabf5bdfe15177b90c741", "class_name": "RelatedNodeInfo"}}, "text": "metahash:\nHi everyone! Im building a web app using gpt_index, when I run the app, I get this \n```from langchain.utilities import RequestsWrapper\n22:03:11 worker.1 | ModuleNotFoundError: No module named 'langchain.utilities'```\nIm importing like so:\n```from gpt_index import ListIndex, GoogleDocsReader```\nAnyone has seen this before?\nstef:\nI'm facing the same problem. Works locally and now I'm trying to get this onto a server somewhere I'm hitting this problem.", "start_char_idx": 0, "end_char_idx": 463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f314dbd-02f5-443f-a9b3-b415d5c9ab65": {"__data__": {"id_": "2f314dbd-02f5-443f-a9b3-b415d5c9ab65", "embedding": null, "metadata": {"date": "2023-02-09T22:14:23.762+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073366281799086220", "node_type": "4", "metadata": {"date": "2023-02-09T22:14:23.762+00:00"}, "hash": "c6409686d3bcbab9125637dff73d695bc59aaf0f4a4ac37a0de8c24ecf981977", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7246b00-16dc-4644-a550-590b8ef8cb4d", "node_type": "1", "metadata": {"date": "2023-02-09T20:33:08.332+00:00"}, "hash": "dae55ef827b906da9f72fbb6d2e0355ddd1a04c24eb2ffe737d83522bf9b6a83", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1b615e6-1c28-4f2b-9b54-b6221f5c3bd6", "node_type": "1", "metadata": {}, "hash": "77bca6c34ed487a9c2cb8a1b921b0cfe15692cd6545187d9603268724ae58e0b", "class_name": "RelatedNodeInfo"}}, "text": "metta:\nQuestion about GoogleDocReader, I am getting a `Error 400: redirect_uri_mismatch` what is the correct url that we set as the redirect url? Thanks\njerryjliu98:\nhow are you setting up the google app? are you setting it as a desktop app?\nmetta:\nhi! I created. the OAuth 2.0 Client ID as a web application originally and now it works as a desktop app, thanks!", "start_char_idx": 0, "end_char_idx": 362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1b615e6-1c28-4f2b-9b54-b6221f5c3bd6": {"__data__": {"id_": "b1b615e6-1c28-4f2b-9b54-b6221f5c3bd6", "embedding": null, "metadata": {"date": "2023-02-10T03:14:57.213+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073441919574745129", "node_type": "4", "metadata": {"date": "2023-02-10T03:14:57.213+00:00"}, "hash": "501aefc7f68c5c2399c9fec37031e33fe1830cbca2d05414e1abc52cab76557d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f314dbd-02f5-443f-a9b3-b415d5c9ab65", "node_type": "1", "metadata": {"date": "2023-02-09T22:14:23.762+00:00"}, "hash": "4d47f3f19626964cda744dc885cc7ba7739cdbe225c1a450de510913bd58bd69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7940338-ed3e-4f0e-9d09-d3b07ac8ee56", "node_type": "1", "metadata": {}, "hash": "38fd1ea895ff0f0822e24d8376198174d9dece88a7b2bbefa131c2bf2a750839", "class_name": "RelatedNodeInfo"}}, "text": "chimp69.420:\nHi Guys, I was trying Pinecone index example. But the response generation is taking a while to query the index. Is there any way to speed it up or is there any other index which could be useful. I want to build an index on large set of documents and want to keep the query time low for user experience. Thanks in advance\nmetta:\nare you building the index and saving it or just running it as a cold start?", "start_char_idx": 0, "end_char_idx": 417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7940338-ed3e-4f0e-9d09-d3b07ac8ee56": {"__data__": {"id_": "c7940338-ed3e-4f0e-9d09-d3b07ac8ee56", "embedding": null, "metadata": {"date": "2023-02-10T04:03:41.621+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073454185430913105", "node_type": "4", "metadata": {"date": "2023-02-10T04:03:41.621+00:00"}, "hash": "6e05fcfd058d0ffec72d5142a01b0bbfb7432c738c2c0c0b41898fda7ca0c071", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1b615e6-1c28-4f2b-9b54-b6221f5c3bd6", "node_type": "1", "metadata": {"date": "2023-02-10T03:14:57.213+00:00"}, "hash": "4b55d18e923ace22df16758225391358c7c06db3188bf9c0c60fa5180c428746", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ec0b41c-10ee-451d-8df4-22247ff4f7a9", "node_type": "1", "metadata": {}, "hash": "ba9e878a62f68951495ce896e5e7c35b6097f397694528a0b20894c9b656d45c", "class_name": "RelatedNodeInfo"}}, "text": "haodoyoufly:\nHow does gptindex currently separate the document into nodes?\njerryjliu98:\ngood question. by default (if you don't manually specify the chunk size), we split the text into chunks such that each chunk will roughly fit within the prompt limit", "start_char_idx": 0, "end_char_idx": 253, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ec0b41c-10ee-451d-8df4-22247ff4f7a9": {"__data__": {"id_": "4ec0b41c-10ee-451d-8df4-22247ff4f7a9", "embedding": null, "metadata": {"date": "2023-02-10T05:06:33.379+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073470005330591796", "node_type": "4", "metadata": {"date": "2023-02-10T05:06:33.379+00:00"}, "hash": "2adf07b3b6cd8f9bd58748748d798db222dd281e9048879c1903ed999dcf000b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7940338-ed3e-4f0e-9d09-d3b07ac8ee56", "node_type": "1", "metadata": {"date": "2023-02-10T04:03:41.621+00:00"}, "hash": "eb3a4a2c82370a6c8e7c5f9149c2eaad870a1dc039e43f2e542d0195e7346af4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "784dcf86-30c2-4a21-b2f2-495fff011a18", "node_type": "1", "metadata": {}, "hash": "ccabd0b7e3feec0984afec4946ca43eeafcbbaf8f95d794eceee06c5facc0830", "class_name": "RelatedNodeInfo"}}, "text": "haodoyoufly:\nI do see there is a way to set the max chunk overlap in the prompt helper. Does the chunking have any semantic rules, like it will stop at a period, or will stop at new lines? Would that even affect the results at all if theres chunk overlap enabled?\njerryjliu98:\nAtm no, the chunking is basic. Looking into adding better text chunking though!", "start_char_idx": 0, "end_char_idx": 356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "784dcf86-30c2-4a21-b2f2-495fff011a18": {"__data__": {"id_": "784dcf86-30c2-4a21-b2f2-495fff011a18", "embedding": null, "metadata": {"date": "2023-02-10T06:24:02.736+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073489506147258450", "node_type": "4", "metadata": {"date": "2023-02-10T06:24:02.736+00:00"}, "hash": "2a480cbbb485baacaee9ee73ed7e7660301ff4eeeae89b17ec238bae9a391505", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ec0b41c-10ee-451d-8df4-22247ff4f7a9", "node_type": "1", "metadata": {"date": "2023-02-10T05:06:33.379+00:00"}, "hash": "c3e38ad818b1f954377fe3803fa8561515194f71a8963243c83426d3d89e1855", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1977b405-f518-4e66-a973-2e57f34052c8", "node_type": "1", "metadata": {}, "hash": "251166975a1da7ca9f61af4410ba904b0e33de1f7aa082bf8d47be517dfaff53", "class_name": "RelatedNodeInfo"}}, "text": "jleeds:\nHello all, when querying a SimpleVectorIndex is there a parameter I can set to only return the highest k source nodes and not return the llm generated response?\n\nI\u2019m looking to reduce the number of tokens used and I only require the exact chunks rather than a processed response.\nMikko:\nThat would be response_mode=\"no_text\" in the query \ud83d\ude42\njleeds:\nPerfect, cheers \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1977b405-f518-4e66-a973-2e57f34052c8": {"__data__": {"id_": "1977b405-f518-4e66-a973-2e57f34052c8", "embedding": null, "metadata": {"date": "2023-02-10T20:41:53.691+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073705390979698829", "node_type": "4", "metadata": {"date": "2023-02-10T20:41:53.691+00:00"}, "hash": "222f2120335376970e28c73d115950cc05254f7253327be5d91bddf36981ae2d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "784dcf86-30c2-4a21-b2f2-495fff011a18", "node_type": "1", "metadata": {"date": "2023-02-10T06:24:02.736+00:00"}, "hash": "245dee1b12b4023ac1e73a8c1e6454fc2ce9729d3d62176138ecf58576b43d34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55b4d14a-db18-406e-887f-1e259752c0a3", "node_type": "1", "metadata": {}, "hash": "e2e9dcde9a5f1fb5c044e41255342819707700be59d980689611f08e5c04fa25", "class_name": "RelatedNodeInfo"}}, "text": "Brian Berneker:\nI'm using composition api to make multiple passes on the same content from various ontological contexts, but these are grouped in separate indices. How can I retain connectedness of each piece of content with respect to the various composition indices? If I create an index for each \"chunk\" with multiple ontological summaries then it becomes harder to query against. Or am I overthinking it and should I just let general summaries suffice instead of composing contexts?\njeremy-analytics:\nthis sounds like an interesting problem. I don;t quite understand what you mean by \"from various ontological contexts\" could you make that more concrete? perhaps with an example? The overall structure you're describing sounds like it might be a graph problem. I might be interested in helping figure out a structure with you.", "start_char_idx": 0, "end_char_idx": 830, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55b4d14a-db18-406e-887f-1e259752c0a3": {"__data__": {"id_": "55b4d14a-db18-406e-887f-1e259752c0a3", "embedding": null, "metadata": {"date": "2023-02-10T23:07:51.657+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073742124551512104", "node_type": "4", "metadata": {"date": "2023-02-10T23:07:51.657+00:00"}, "hash": "e73b9d86d02a369ba1f9bdc6357810ba9f779f1065bf76d3d25bc021fb4cbcf0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1977b405-f518-4e66-a973-2e57f34052c8", "node_type": "1", "metadata": {"date": "2023-02-10T20:41:53.691+00:00"}, "hash": "99b5894a275c41783a47913506ae4cc11f6d899d4e8900a1e21a2fd2e8aa8028", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35d9ca0d-227d-4f65-b178-52c2aca50be3", "node_type": "1", "metadata": {}, "hash": "b94d616ffa737091d76c7009aff8efe7f25e3e16161e9df07eb100f8352d4e39", "class_name": "RelatedNodeInfo"}}, "text": "gALEXy:\nuninstalled and reinstalled with `botocore==1.29.69`\nherpaderp:\ngreat!", "start_char_idx": 0, "end_char_idx": 78, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35d9ca0d-227d-4f65-b178-52c2aca50be3": {"__data__": {"id_": "35d9ca0d-227d-4f65-b178-52c2aca50be3", "embedding": null, "metadata": {"date": "2023-02-10T23:24:23.693+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073746285452070953", "node_type": "4", "metadata": {"date": "2023-02-10T23:24:23.693+00:00"}, "hash": "8ac911c44d45463ad8d90e90e907d90d9c833b4fa4aec5b8ec7848a9f04bbdcc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55b4d14a-db18-406e-887f-1e259752c0a3", "node_type": "1", "metadata": {"date": "2023-02-10T23:07:51.657+00:00"}, "hash": "cc5df52843224931e8b963e9bf78cd969ca385beb46baa021396b2b6a328c5ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7fcb01da-aa9f-4191-a999-d873dddcc1a5", "node_type": "1", "metadata": {}, "hash": "2f5f33fbf4044889d7e67e5b5c0519b600554667f722343c0b986c1dc0c8ea04", "class_name": "RelatedNodeInfo"}}, "text": "herpaderp:\nif you need both, just use the loader twice and append the docs\ngALEXy:\nhmm, I have input.txt under a subdirectory and it seems to not like that", "start_char_idx": 0, "end_char_idx": 155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7fcb01da-aa9f-4191-a999-d873dddcc1a5": {"__data__": {"id_": "7fcb01da-aa9f-4191-a999-d873dddcc1a5", "embedding": null, "metadata": {"date": "2023-02-10T23:30:23.573+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073747794898211006", "node_type": "4", "metadata": {"date": "2023-02-10T23:30:23.573+00:00"}, "hash": "ff3af0fc47c62c38612f6222124d38a324f9e90143da1b5b6e9855438d55716c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35d9ca0d-227d-4f65-b178-52c2aca50be3", "node_type": "1", "metadata": {"date": "2023-02-10T23:24:23.693+00:00"}, "hash": "527411b17c8e9a8a026246e2ef01d151ea6cb1b4110c662bd2569dd61c160cf5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3205d19-8104-4882-a9c1-fb035df79e1b", "node_type": "1", "metadata": {}, "hash": "663db4339105cb17a563ac0fbcff1ea7301275c11b1414fd81402662de4b36dc", "class_name": "RelatedNodeInfo"}}, "text": "herpaderp:\nyeah so if you have the subdirectory, key would just be `subdirectory/input.txt`\ngALEXy:\nI think I tried that too?", "start_char_idx": 0, "end_char_idx": 125, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3205d19-8104-4882-a9c1-fb035df79e1b": {"__data__": {"id_": "c3205d19-8104-4882-a9c1-fb035df79e1b", "embedding": null, "metadata": {"date": "2023-02-11T07:55:04.597+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1073874802718285834", "node_type": "4", "metadata": {"date": "2023-02-11T07:55:04.597+00:00"}, "hash": "aadbe1adc699cc70eb49b9424aaafff3cf9d99ac5fbde32b5ee0e528856dd7df", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7fcb01da-aa9f-4191-a999-d873dddcc1a5", "node_type": "1", "metadata": {"date": "2023-02-10T23:30:23.573+00:00"}, "hash": "439f05ef1f0a4ffa20b17992f0360af8808cf8409f58aad5ad56faef8506a3b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "190117f4-1228-43a5-8e57-67ef9c0b9026", "node_type": "1", "metadata": {}, "hash": "18b103d08bf1b8d602ea72f903fc3194ea387cbb1e3649fac9da59d7afe306c1", "class_name": "RelatedNodeInfo"}}, "text": "sarmientoj24:\nit works when i do thi but i cannot make it to provide more than one\n```\nresponse = index.query(\"Create a multiple choice question from the article.\")\n```\njerryjliu98:\noh i see...by default we assume that there's one output per input", "start_char_idx": 0, "end_char_idx": 247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "190117f4-1228-43a5-8e57-67ef9c0b9026": {"__data__": {"id_": "190117f4-1228-43a5-8e57-67ef9c0b9026", "embedding": null, "metadata": {"date": "2023-02-11T16:29:47.531+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074004335131893780", "node_type": "4", "metadata": {"date": "2023-02-11T16:29:47.531+00:00"}, "hash": "64cd7c5170c1fd2b9490bfabc4b448c4151aa9691c35a80bbdd53f5a90b1a20a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3205d19-8104-4882-a9c1-fb035df79e1b", "node_type": "1", "metadata": {"date": "2023-02-11T07:55:04.597+00:00"}, "hash": "03f6154329edcf0601613279344ef1173db7465048587c896d3617eda5849ac4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "012079d9-7734-4175-987e-6c075391354f", "node_type": "1", "metadata": {}, "hash": "efc828e3dcf732eb9d1c95efabc878b283090601bf5ec519b14ad524da47d423", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nIs there a way to do q&a in just a particular document in an index as opposed to the entire index?\ndisiok:\nAFAIK the current API doesn't support this super well. \n\nFor your use-case, I'd suggest looking into the composability feature: https://gpt-index.readthedocs.io/en/latest/how_to/composability.html One idea is to build a sub-index for each document you have, and then a top level index on top of those. This would allow you to both query at per-document level, and also the all-documents level.\nSandkoan:\nYeah, that's what I was planning on doing\u2014but how significant a performance/monetary cost would that incur?", "start_char_idx": 0, "end_char_idx": 628, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "012079d9-7734-4175-987e-6c075391354f": {"__data__": {"id_": "012079d9-7734-4175-987e-6c075391354f", "embedding": null, "metadata": {"date": "2023-02-11T17:05:23.531+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074013294165245972", "node_type": "4", "metadata": {"date": "2023-02-11T17:05:23.531+00:00"}, "hash": "99184107ccb2138b85fe14421dc86e239989815bef5becc06caf7a6147d05220", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "190117f4-1228-43a5-8e57-67ef9c0b9026", "node_type": "1", "metadata": {"date": "2023-02-11T16:29:47.531+00:00"}, "hash": "6cc47997644aafdb2d293ccd3182cb4c58c2e242582931d0d09087e4aec039fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d5dea8c7-9dee-4d69-86be-9f3eb2fda36d", "node_type": "1", "metadata": {}, "hash": "f923aaea8a6118e0abbfe0e3dc8c0573461bb24ed0b04c39542bbe5bbc58c96c", "class_name": "RelatedNodeInfo"}}, "text": "Napolean_Solo:\nHi, does GPT index directly support pandas dataframe or it has to be converted into a list to be fed into it?\njerryjliu98:\nwe support a csv reader! it's not that fancy though, by default it just dumps the raw csv text into a document", "start_char_idx": 0, "end_char_idx": 248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5dea8c7-9dee-4d69-86be-9f3eb2fda36d": {"__data__": {"id_": "d5dea8c7-9dee-4d69-86be-9f3eb2fda36d", "embedding": null, "metadata": {"date": "2023-02-11T20:28:50.518+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074064493979643934", "node_type": "4", "metadata": {"date": "2023-02-11T20:28:50.518+00:00"}, "hash": "746f431105b4c6ede87f6a0a25a225a8569f8483fd8bfb187a2e22557784b607", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "012079d9-7734-4175-987e-6c075391354f", "node_type": "1", "metadata": {"date": "2023-02-11T17:05:23.531+00:00"}, "hash": "1a88decb1a509e71368d9e25028d145543a251afd9942c4c903a6836fb22eeb5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8f70ede-bd7b-4564-9e89-2feeb171c9eb", "node_type": "1", "metadata": {}, "hash": "6064d59dd30b5296615103857ad45d722866959688f0264a9f9cad1a619ea233", "class_name": "RelatedNodeInfo"}}, "text": "chimp69.420:\nHi Guys, where can I configure max tokens used by LLM while answering the question\nsanjuhs123:\nlike this", "start_char_idx": 0, "end_char_idx": 117, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8f70ede-bd7b-4564-9e89-2feeb171c9eb": {"__data__": {"id_": "e8f70ede-bd7b-4564-9e89-2feeb171c9eb", "embedding": null, "metadata": {"date": "2023-02-11T20:36:49.807+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074066504263401533", "node_type": "4", "metadata": {"date": "2023-02-11T20:36:49.807+00:00"}, "hash": "4a1a32b50b9f86e32db82b1b64f08f3f22fdfb8a6942279ab57e67e9d82cc41d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5dea8c7-9dee-4d69-86be-9f3eb2fda36d", "node_type": "1", "metadata": {"date": "2023-02-11T20:28:50.518+00:00"}, "hash": "4f2c28a6d87853516f5f15f9eb69590ad67e66f1180dcc6bb953402ff9437abf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38394d33-8304-40ba-b379-d7d30375898d", "node_type": "1", "metadata": {}, "hash": "8dd862e3585806fbd1e394fe704901185c090b6dd2a0d2adc5d2ddcd8d6b34ac", "class_name": "RelatedNodeInfo"}}, "text": "sanjuhs123:\nso guys i had anither question with regards to one of my previous doubts as well , here we see in the first screenshot the query works properly, In the second screenshot it breaks .. with  ```This model's maximum context length is 4097 tokens, however you requested 5502 tokens (3454 in your prompt; 2048 for the completion). Please reduce your prompt; or completion length.```\n.... this was my inital parameter can i change anything, \n\nPlease help guys !!\ndisiok:\nI think if you set `max_tokens` on the LLM, you also need to pass the corresponding value as `num_output` into `PromptHelper`  (or you can just not pass a value as well, in which case it automatically figures it out from the LLM metadata)", "start_char_idx": 0, "end_char_idx": 715, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38394d33-8304-40ba-b379-d7d30375898d": {"__data__": {"id_": "38394d33-8304-40ba-b379-d7d30375898d", "embedding": null, "metadata": {"date": "2023-02-12T09:39:15.358+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074263408175755274", "node_type": "4", "metadata": {"date": "2023-02-12T09:39:15.358+00:00"}, "hash": "36c45c17e3a4a0397fbc0f259086124098126dca9c3c69681a043fe78aa2da7e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8f70ede-bd7b-4564-9e89-2feeb171c9eb", "node_type": "1", "metadata": {"date": "2023-02-11T20:36:49.807+00:00"}, "hash": "e9c0bb6f792522f735aba38cf949c4f5235624f68f662f34d42846e9b0c14464", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "57002f7f-39f0-4c77-a162-278ce28111b6", "node_type": "1", "metadata": {}, "hash": "cce00f40a13a1b307ee0310ced90d46b4919ad1d0569cab5fd4eef65f6a5a382", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nHey everyone,  any idea how I can obtain the VectorStore vectors for anomaly detection? Also happy to hear your thoughts on how to cluster them\njerryjliu98:\nwhich index are you using? we don't officially expose this but i can help point you to the right code\nyoelk:\n@jerryjliu98  I'm using the GPTSimpleVectorIndex. I think the vectors are important for detecting anomalies and such", "start_char_idx": 0, "end_char_idx": 389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57002f7f-39f0-4c77-a162-278ce28111b6": {"__data__": {"id_": "57002f7f-39f0-4c77-a162-278ce28111b6", "embedding": null, "metadata": {"date": "2023-02-12T20:43:53.055+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074430667359797268", "node_type": "4", "metadata": {"date": "2023-02-12T20:43:53.055+00:00"}, "hash": "54900e0661989ef60cbc3c0f9bcec2005540a88df98225d77465be8bec6af2e8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38394d33-8304-40ba-b379-d7d30375898d", "node_type": "1", "metadata": {"date": "2023-02-12T09:39:15.358+00:00"}, "hash": "b5015a1da7cbb92734deaa0b57bb72b140b0028eaa8c63497322ae9ae8062a7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d87307ef-0556-43b1-b3f2-b377d3bd7c3b", "node_type": "1", "metadata": {}, "hash": "405e6dfd788717981d8c3ec88c58b5afa926d31400224cae88a617266561c691", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\nwhat is the recommended best practice for storing a `GPTSimpleVectorIndex` JSON object? I have looked into using something like pinecone but I am unable to bridge the gap from a regular 30 page document into a pinecone vector DB. Currently I just using `index.save_to_disk` but I am thinking of setting up a mongoDB to store these?\njerryjliu98:\nhave you tried our GPTPineconeIndex?", "start_char_idx": 0, "end_char_idx": 390, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d87307ef-0556-43b1-b3f2-b377d3bd7c3b": {"__data__": {"id_": "d87307ef-0556-43b1-b3f2-b377d3bd7c3b", "embedding": null, "metadata": {"date": "2023-02-13T00:18:41.665+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074484726108266577", "node_type": "4", "metadata": {"date": "2023-02-13T00:18:41.665+00:00"}, "hash": "eb6bc1b855c19a8e82e8c28e84c494abed0ba94413bbaf7b6fcf7f99742c3ba2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "57002f7f-39f0-4c77-a162-278ce28111b6", "node_type": "1", "metadata": {"date": "2023-02-12T20:43:53.055+00:00"}, "hash": "2661f01d52937ccc0c7b349f18c3d55d2064df3977025fb6922cbc129151b0b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e3215d7-1795-4850-8a3d-a62321dcdd05", "node_type": "1", "metadata": {}, "hash": "26d96c5963d904478375c79b38715f66548deb00fb1f21598c91af7a469d1a3a", "class_name": "RelatedNodeInfo"}}, "text": "jerryjliu98:\nThe default way for saving a GPTSimpleVectorIndex is to save to json, our our GPTPineconeIndex and GPTWeaviateIndex offer alternative means of storage\nsmokeoX:\nThanks @jerryjliu98 , I think I'm close...i was able to store a document in pinecone and retrieve the index, but I am confused by the gpt_index syntax around retrieval. For example if I want to do this in two separate API calls. For now I have something like this, which looks like it still needs to load the original documents? I am not a python dev so i may be missing somthing obvious here\n```    \nindex = pinecone.Index(\"<pinecone-index-name>\")\nindex2 = GPTPineconeIndex(**documents**, pinecone_index=index)\nresponse = index2.query(\"<my query string>?\")\n```", "start_char_idx": 0, "end_char_idx": 734, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e3215d7-1795-4850-8a3d-a62321dcdd05": {"__data__": {"id_": "6e3215d7-1795-4850-8a3d-a62321dcdd05", "embedding": null, "metadata": {"date": "2023-02-13T02:04:31.026+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074511357258518538", "node_type": "4", "metadata": {"date": "2023-02-13T02:04:31.026+00:00"}, "hash": "d9d99ffcf6c67f2ffed0ba9c151798a769d23adfc1003cf1cd751fa2e47870cc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d87307ef-0556-43b1-b3f2-b377d3bd7c3b", "node_type": "1", "metadata": {"date": "2023-02-13T00:18:41.665+00:00"}, "hash": "adfd1d783f6a16a5948591e52a4ac0add91b26131dae765c3cc66c65bec3a234", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8a054e5-c721-45a1-8da4-2e777c1076a8", "node_type": "1", "metadata": {}, "hash": "d710771e31a484a3f43d8f1ca7508e7df5dd4fae01e5f022639b95645fab8cf8", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nWhat's the optimal method for storing ListIndex data? How most efficient/wise to store the JSON files?\njerryjliu98:\nwe currently just offer saving to json + saving to disk. how big is the document set you're using this over? generally gpt list index operations are slower since you're combining information across every node\nSandkoan:\nMaybe fifty to a hundred documents  or so, each with maybe 10 to 20 pages.", "start_char_idx": 0, "end_char_idx": 419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8a054e5-c721-45a1-8da4-2e777c1076a8": {"__data__": {"id_": "e8a054e5-c721-45a1-8da4-2e777c1076a8", "embedding": null, "metadata": {"date": "2023-02-13T03:23:04.888+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074531128628756590", "node_type": "4", "metadata": {"date": "2023-02-13T03:23:04.888+00:00"}, "hash": "f02dd38225c44e8200723d4d7bba1c8c303ef70d8924299ab0d6d92a52ffd033", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e3215d7-1795-4850-8a3d-a62321dcdd05", "node_type": "1", "metadata": {"date": "2023-02-13T02:04:31.026+00:00"}, "hash": "e031b267a3ace305a7919a5c9db4117e89966411ed80fb608d319a48c865fbb6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a337f08-31a7-4674-9aa7-5f935c72ccc8", "node_type": "1", "metadata": {}, "hash": "f8f49c2bb6a4aca437adc5d8d31b66d745b8e791f1f899b09d18158b840a50ce", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nWould it be monetarily foolish to even try to index that with GPT List?\njerryjliu98:\ni'd probably try a vector store for this! the list index is super simple, since it combines everything from every document, it's better for summarization tasks. too expensive/slow for normal retrieval tasks\nSandkoan:\nAhh, okay, what would you say is an upper limit on ListIndex's capabilities?", "start_char_idx": 0, "end_char_idx": 388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a337f08-31a7-4674-9aa7-5f935c72ccc8": {"__data__": {"id_": "8a337f08-31a7-4674-9aa7-5f935c72ccc8", "embedding": null, "metadata": {"date": "2023-02-13T03:27:04.461+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074532133470732308", "node_type": "4", "metadata": {"date": "2023-02-13T03:27:04.461+00:00"}, "hash": "a374ce245ac037db3dff5af4885479fa8e0bdc02f999bdce6a03a343347a0170", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8a054e5-c721-45a1-8da4-2e777c1076a8", "node_type": "1", "metadata": {"date": "2023-02-13T03:23:04.888+00:00"}, "hash": "9d2540c0eb175a86083fb73f40ef8df3a661e627e9798ca6790893525b55121b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b8c1cddd-f836-4cdd-a8a8-066499789e4b", "node_type": "1", "metadata": {}, "hash": "81abbce689f2046b85b071a2b688bee24e4904bbb73d26670a7fb9c6b8592d11", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nAs a general heuristic, at what point would you recommend choosing to just switch from list to vector? A grand total of 200 pages too much?\njerryjliu98:\ni'd probably start out using vector index for most things and only use the list index if you explicitly need to perform summarization queries\nsangy:\nthanks! and when would you recommend to use a TreeIndex? \nI know how the query process works with the TreeIndex but not sure how it would compare to a vector store for a usecase like Q-A bot.\njerryjliu98:\ni wouldn't use the tree index directly over data for now \ud83d\ude42 it's better for routing (as a parent index in a ComposableGraph for instance), but in general it's more of an explorator yfeature\nsangy:\nOh got it. thanks. \nso ideally, a TreeIndex over vector stores would be better than just a vector index for looking up relevant nodes, correct? (it would reduce the similarity computation from N to log N ?)\njerryjliu98:\nyou could try that, or you could try other vector store indices that allow approximate lookup (e.g. try GPTFaissIndex)\nsangy:\ngot it thank you \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 1077, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8c1cddd-f836-4cdd-a8a8-066499789e4b": {"__data__": {"id_": "b8c1cddd-f836-4cdd-a8a8-066499789e4b", "embedding": null, "metadata": {"date": "2023-02-13T12:50:36.796+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074673952682672210", "node_type": "4", "metadata": {"date": "2023-02-13T12:50:36.796+00:00"}, "hash": "bc9b8db36f15754d2bb9e7fc7f3837f81942818f70443574e7239eb10b8e22d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a337f08-31a7-4674-9aa7-5f935c72ccc8", "node_type": "1", "metadata": {"date": "2023-02-13T03:27:04.461+00:00"}, "hash": "5c3d30f41d443d5feb6453a8abbdbbe30f006e392913dd1eb6256e22164aeade", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1b3bc2f-b0a2-410d-9da8-a305f9d9c8a1", "node_type": "1", "metadata": {}, "hash": "88d0627a247d897efcdb050f93039529bf1a76f12e274a6989137dfbbf38f86c", "class_name": "RelatedNodeInfo"}}, "text": "failfast:\nI have a very large corpus (~115k documents, ~15k words per document) that I'd like to build a search engine against. Would GPT-Index be suitable? What index architecture would you recommend for a corpus of this size?\nravitheja:\nI agree with @jeremy-analytics . You could probably try with this as well - https://github.com/jerryjliu/gpt_index/blob/main/examples/vector_indices/PineconeIndexDemo.ipynb.", "start_char_idx": 0, "end_char_idx": 412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1b3bc2f-b0a2-410d-9da8-a305f9d9c8a1": {"__data__": {"id_": "b1b3bc2f-b0a2-410d-9da8-a305f9d9c8a1", "embedding": null, "metadata": {"date": "2023-02-13T13:57:03.147+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074690672650633327", "node_type": "4", "metadata": {"date": "2023-02-13T13:57:03.147+00:00"}, "hash": "574ac60adc6ccd3a7aa6205d150ddd8a732286d364e06953008fe39b3f6a54d0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b8c1cddd-f836-4cdd-a8a8-066499789e4b", "node_type": "1", "metadata": {"date": "2023-02-13T12:50:36.796+00:00"}, "hash": "1e8d95a0f3267577f321001f3aaad4f18fdcb50ca9d581a1b6078583dc44680b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3ef83da-7e57-4ac4-8750-0fa2df82d3fb", "node_type": "1", "metadata": {}, "hash": "7bee33d5a126e54c2c89d3ba0b6e3e9f7ff167ff53045a97922cdea805fba953", "class_name": "RelatedNodeInfo"}}, "text": "sebastian_laverde:\nHi guys! I am a data scientist at Unstructured.io. We are very excited on the new Unstructured.io File Loader (https://llamahub.ai/l/file-unstructured) to extract the text from a variety of unstructured text files. It is designed to load data into GPT Index and/or subsequently used as a Tool in a LangChain Agent! \ud83e\udd29 . From your experience, where are people mostly interested in pulling source text from (i.e. S3, GDrive, SharePoint, Confluence, Notion, etc)? and (2) what kind of documents they'd like to ingest (i.e. pdf, docx, pptx, etc)? Thanks for the insights \ud83d\ude0e\nravitheja:\nwhat kind of documents they'd like to ingest (i.e. pdf, docx, pptx, etc)? - pdf, docx, txt, markdown, googledocs", "start_char_idx": 0, "end_char_idx": 710, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3ef83da-7e57-4ac4-8750-0fa2df82d3fb": {"__data__": {"id_": "f3ef83da-7e57-4ac4-8750-0fa2df82d3fb", "embedding": null, "metadata": {"date": "2023-02-13T15:21:09.184+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074711837263790131", "node_type": "4", "metadata": {"date": "2023-02-13T15:21:09.184+00:00"}, "hash": "d6e9d8d1532ea8ce420f1a4e77350665ff018902757737db3542c7cdf3afa8da", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1b3bc2f-b0a2-410d-9da8-a305f9d9c8a1", "node_type": "1", "metadata": {"date": "2023-02-13T13:57:03.147+00:00"}, "hash": "d30774d898a005ef087afaecdc2543522814a08f558aa0cd6c06f4e566cb7035", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be43a632-802d-4b8d-b45b-83c5732973a4", "node_type": "1", "metadata": {}, "hash": "d12343e24a775d043ccfcfed286374e74e15fc054c491c9883f57b025d03db54", "class_name": "RelatedNodeInfo"}}, "text": "failfast:\n@jeremy-analytics @ravitheja Thanks for your inputs! 95% of my documents are powerpoints, so i was planning on chunking slide by slide and generating an embedding per slide. is that the same concept as using sentence transformers?\n\nmy main question though is what should the GPT-Index index structure be? because of the vast amount of data, would I need to go in a mult-level tree direction? would this hinder performance?\nravitheja:\nis that the same concept as using sentence transformers? - yes, it's the same concept. GPT-Index index structure, I am not totally sure of it.", "start_char_idx": 0, "end_char_idx": 586, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be43a632-802d-4b8d-b45b-83c5732973a4": {"__data__": {"id_": "be43a632-802d-4b8d-b45b-83c5732973a4", "embedding": null, "metadata": {"date": "2023-02-13T16:11:22.412+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074724475658043474", "node_type": "4", "metadata": {"date": "2023-02-13T16:11:22.412+00:00"}, "hash": "792ea4889e654cd722e43e47f37c4e300bb40c4d7f7be859cb51c5a8f150c92e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3ef83da-7e57-4ac4-8750-0fa2df82d3fb", "node_type": "1", "metadata": {"date": "2023-02-13T15:21:09.184+00:00"}, "hash": "d9fcd3493e94562f7b4dcf91a0c53421433505c0ce38ba9dfca1e3b209b134e2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "099bfcea-b2c9-4cac-85be-0c1520340a86", "node_type": "1", "metadata": {}, "hash": "d64f73adf2e72ea99b2ef72b9c6e21639695bad890993a683be21ef6b4d7293b", "class_name": "RelatedNodeInfo"}}, "text": "botzilla:\nHey guys, glad to be part of this group. I'm trying to get my head around how GPT Index works with GPT models. Does GPT Index chunk up the source data and send it as the prompt text to the GPT completion endpoint? Or is something else happening? Thanks for any feedback. Cheers\nravitheja:\nHey @botzilla . Yes GPT Index chunks up the data and send it to GPT but to answer the query it goes through each chunk (some of the relevant chunks) and tries to refine the answer. probably you can look into it here - https://gpt-index.readthedocs.io/en/latest/guides/index_guide.html\nhsm207:\nhow does GPT Index chunk the document? I'm curious to know how the prompt changes given the initial query and as it processes each chunk\nbotzilla:\nme too", "start_char_idx": 0, "end_char_idx": 745, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "099bfcea-b2c9-4cac-85be-0c1520340a86": {"__data__": {"id_": "099bfcea-b2c9-4cac-85be-0c1520340a86", "embedding": null, "metadata": {"date": "2023-02-13T22:28:21.424+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074819346670563459", "node_type": "4", "metadata": {"date": "2023-02-13T22:28:21.424+00:00"}, "hash": "af8bd894cd67d558178e582350c22ad03c219efd8d63f161a80083e30e26a4b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be43a632-802d-4b8d-b45b-83c5732973a4", "node_type": "1", "metadata": {"date": "2023-02-13T16:11:22.412+00:00"}, "hash": "d0f15ddd48e4b1e1df443a6c39ea91702a2609b26ad1134dd8911e5dcb47fe5c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22bf4fdf-903b-41f8-9918-f3933e6817cc", "node_type": "1", "metadata": {}, "hash": "e8180e3d07c1f8935a16abada4999990339fa747acd5455350b4c086410cc93c", "class_name": "RelatedNodeInfo"}}, "text": "failfast:\nIs there a way to ensure the response is only based on the knowledge it has indexed? i have the following code:\n\n```\nresponse = index.query(\"Using ONLY the context provided and without using ANY prior knowledge, answer the following prompt: what is python\",\n                       llm_predictor=llm_predictor)\n```\n\nPython is not mentioned anywhere in the 1 document i have indexed, and it is responding with:\n\"Python is a high-level programming language that is used to create software applications and is often used for data science and machine learning. It is a popular language among developers due to its simple and easy-to-read syntax and its wide range of libraries and frameworks that help make development faster and more efficient.\"\njeremy-analytics:\nthis is actually quite difficult to do. I've not been completely successful. You can add in a section to your prompt that says something along the lines of \"if you can't tell based on the information below, respond with N/A\" that's worked OK for me before.\nfailfast:\nthis seems to work fairly well:\n\n```\nresponse = index.query(\"\"\"Forget everything you know. Create a final answer to the given question ONLY using the given context as reference. If you are unable to answer the question, simply state that you cannot provide an answer based on the data you were given.\n---------\nQUESTION: what is python?\n=========\nFINAL ANSWER:\"\"\", llm_predictor=llm_predictor)\n```\n\nthis printed \"I cannot provide an answer based on the data I was given.\"", "start_char_idx": 0, "end_char_idx": 1508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22bf4fdf-903b-41f8-9918-f3933e6817cc": {"__data__": {"id_": "22bf4fdf-903b-41f8-9918-f3933e6817cc", "embedding": null, "metadata": {"date": "2023-02-14T02:46:52.995+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1074884406914842634", "node_type": "4", "metadata": {"date": "2023-02-14T02:46:52.995+00:00"}, "hash": "31864aa3f9ba40a2195ca14ca3e5c09c574be9d207092f7acc7a1894dc06458c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "099bfcea-b2c9-4cac-85be-0c1520340a86", "node_type": "1", "metadata": {"date": "2023-02-13T22:28:21.424+00:00"}, "hash": "371d476a4e204955c207546f5bb882bcf384e8bbc7acf6349cd74eba5ad70c0b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "523e2d31-602b-4284-bb7b-4e5d0e442bb6", "node_type": "1", "metadata": {}, "hash": "6d6836bf8626a33e075991aa10f5ea452d02a7b179a3f9806192a6526c392b52", "class_name": "RelatedNodeInfo"}}, "text": "failfast:\nwhen creating a simple vector store with 1 pdf with GPTSimpleVectorIndex, and then running a davinci query against it, how does gpt-index work under the hood? how does it decide how many chunks to use as context for davinci?\n\nreason i ask is because i wrote an equivalent program using only openai api's and i'm getting much worse results than doing it in gpt-index\njerryjliu98:\nwe chunk up your text into chunks (by default the chunk sizes are very big). then when you query, we fetch the top-k chunks (in this case it's 1!), and put it into the prompt", "start_char_idx": 0, "end_char_idx": 563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "523e2d31-602b-4284-bb7b-4e5d0e442bb6": {"__data__": {"id_": "523e2d31-602b-4284-bb7b-4e5d0e442bb6", "embedding": null, "metadata": {"date": "2023-02-14T12:34:43.329+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075032341417840761", "node_type": "4", "metadata": {"date": "2023-02-14T12:34:43.329+00:00"}, "hash": "9a153fd55c92529612bcecd4d0a7e11d4fa2576f639095703a6a61005c2cb4e9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "22bf4fdf-903b-41f8-9918-f3933e6817cc", "node_type": "1", "metadata": {"date": "2023-02-14T02:46:52.995+00:00"}, "hash": "4d893e78246e4008b2bd7f82bde389e1a4f0e9b7b35dbf96d8290cf708fc5e2c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0bec1b3-6880-4a89-aff9-699996fa12c9", "node_type": "1", "metadata": {}, "hash": "f8070cb488bd9aafc2a12da161e8c8be20087f169a261705c1b02884e310c441", "class_name": "RelatedNodeInfo"}}, "text": "radioactive:\nHey is there a way to log all the requests going to OpenAI or llm?\nhwchase17:\nsince gptindex builds on top of langchain, you can actually use the langchain built in tracing! https://langchain.readthedocs.io/en/latest/tracing.html\nradioactive:\nAlright thank you so much!", "start_char_idx": 0, "end_char_idx": 282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0bec1b3-6880-4a89-aff9-699996fa12c9": {"__data__": {"id_": "c0bec1b3-6880-4a89-aff9-699996fa12c9", "embedding": null, "metadata": {"date": "2023-02-14T20:57:25.845+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075158852179349594", "node_type": "4", "metadata": {"date": "2023-02-14T20:57:25.845+00:00"}, "hash": "b20e7ef6c65e2aa5d1272cf9068fcf521dc0ba45f2198051dd50a115544c0d22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "523e2d31-602b-4284-bb7b-4e5d0e442bb6", "node_type": "1", "metadata": {"date": "2023-02-14T12:34:43.329+00:00"}, "hash": "a1ba50b7b72c17c5fb1375a4be4f4b6737cda17c19ebc6ba8d1026695a282b75", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6976be85-132b-48be-949c-c62bdb11954d", "node_type": "1", "metadata": {}, "hash": "dee8179ad5b11056f3e709583fb729e27bcb14807bc6c85f81ee0b66b80512d5", "class_name": "RelatedNodeInfo"}}, "text": "VZ94:\nHello! How can I set the input variables using the default prompt templates? I'm trying to use the keyword extract template like so:\n```py\nDEFAULT_KEYWORD_EXTRACT_TEMPLATE = KeywordExtractPrompt(\n    DEFAULT_KEYWORD_EXTRACT_TEMPLATE_TMPL\n)\n\nindex_with_query = TreeIndex(documents, summary_template=DEFAULT_KEYWORD_EXTRACT_TEMPLATE)\n\nResponse_KEYWORD_PROMPT = index_with_query.query(question, mode=\"retrieve\")\n```\nI'm getting the error `KeyError: 'max_keywords'`\njerryjliu98:\ndid you want to use our keyword table index or the tree index? the tree index shouldn't take in a keyword extract prompt", "start_char_idx": 0, "end_char_idx": 601, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6976be85-132b-48be-949c-c62bdb11954d": {"__data__": {"id_": "6976be85-132b-48be-949c-c62bdb11954d", "embedding": null, "metadata": {"date": "2023-02-15T05:47:27.022+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075292235983224842", "node_type": "4", "metadata": {"date": "2023-02-15T05:47:27.022+00:00"}, "hash": "70a51ee9b948c10fff062ff0a712fa50d44f601860c3822cd599d31ab5b70ce8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0bec1b3-6880-4a89-aff9-699996fa12c9", "node_type": "1", "metadata": {"date": "2023-02-14T20:57:25.845+00:00"}, "hash": "e77eee4170ecd74bca8b4fd95722c8e6abee639b1f7e2d1b9aa3bb15e88dcc21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0362f1a1-0a6b-4736-baa9-6d61d00ac686", "node_type": "1", "metadata": {}, "hash": "8c285e078e9f6b568c16f73f8ed92b247bb69c2e41fefd373c529881715d5f8c", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\nhow do you get the source text from gpt_index using GPTSimpleVectorIndex. I am not getting the exact source text.\nherpaderp:\nare you talking about like the sentence itself?", "start_char_idx": 0, "end_char_idx": 178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0362f1a1-0a6b-4736-baa9-6d61d00ac686": {"__data__": {"id_": "0362f1a1-0a6b-4736-baa9-6d61d00ac686", "embedding": null, "metadata": {"date": "2023-02-15T06:08:55.526+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075297640360706048", "node_type": "4", "metadata": {"date": "2023-02-15T06:08:55.526+00:00"}, "hash": "006c048f5f81dced1962b7e18112312cf498b8cebddbd551063090b1ec2842bb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6976be85-132b-48be-949c-c62bdb11954d", "node_type": "1", "metadata": {"date": "2023-02-15T05:47:27.022+00:00"}, "hash": "a8c6ef9f43faf553a796c7b59919d75dfea58a6c498a9cfd7b0c5c264a13a610", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "540c139c-40cf-451a-bb3a-8baa95a6e42d", "node_type": "1", "metadata": {}, "hash": "d51138f93bcf4cdfd330694878e9f9022dd0225bbd9ccb96008320a6f3041385", "class_name": "RelatedNodeInfo"}}, "text": "herpaderp:\ncurrently, all we can get is the source nodes, which is the entire chunk of text that was referenced\ntshu:\nwhat is meant by source nodes. is it the document itself. lets say i only have one document. So will it return the document's address itself.\n\nor will it return the smaller nodes that were created while making the embeddings.\nand if this is the case how to get the details of the source node\nherpaderp:\nIf the document is small, it'll be the whole document. If it's large, it'll be whatever chunk (~4000 tokens) that is found. We're working on some more options for how to split up documents so that you can have more fine-grained chunks. stay tuned for that\ntshu:\nrn the chunk is being shown in this way\n\n> Source (Doc id: 4d670db2-0fbf-45da-857e-8b3e72d7cbe3): may extend to three months, or with fine which may extend to five hundred rupees, or with both....", "start_char_idx": 0, "end_char_idx": 879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "540c139c-40cf-451a-bb3a-8baa95a6e42d": {"__data__": {"id_": "540c139c-40cf-451a-bb3a-8baa95a6e42d", "embedding": null, "metadata": {"date": "2023-02-15T08:12:14.253+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075328672870957076", "node_type": "4", "metadata": {"date": "2023-02-15T08:12:14.253+00:00"}, "hash": "96045de29f86347f325a9c7d00757856a3a68ddc1d42074fe4c442fc9e33ba65", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0362f1a1-0a6b-4736-baa9-6d61d00ac686", "node_type": "1", "metadata": {"date": "2023-02-15T06:08:55.526+00:00"}, "hash": "341b9f6ec3af3740d427010bba509092bb2c0fd8aae657895a486178df9cb3bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f943e581-7d64-4977-9785-83ac05889250", "node_type": "1", "metadata": {}, "hash": "930c7fe688c4ef814948a705d659e0c04a21115fc4010fd8f8150e1d0ae5ffac", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\nis there any way to expand it or show the line number from where it is taken\nherpaderp:\nYeah if you just grab the source note object itself, you can look inside to see the full text", "start_char_idx": 0, "end_char_idx": 187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f943e581-7d64-4977-9785-83ac05889250": {"__data__": {"id_": "f943e581-7d64-4977-9785-83ac05889250", "embedding": null, "metadata": {"date": "2023-02-15T08:18:52.235+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075330342128472126", "node_type": "4", "metadata": {"date": "2023-02-15T08:18:52.235+00:00"}, "hash": "a98a5bb202cfef0096cd62d0c143fb05901dfb8324461beca5d128e3e13f9c27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "540c139c-40cf-451a-bb3a-8baa95a6e42d", "node_type": "1", "metadata": {"date": "2023-02-15T08:12:14.253+00:00"}, "hash": "1af4ed72ced0877b30ca0532757b73db3f1d79c1d8ef319701fff55b250f4f03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03155c65-e206-4e08-a061-ec3c56455cf1", "node_type": "1", "metadata": {}, "hash": "f3a377a17e6eb3a32b046650fef6c8cffaefe9678ab6f2d702ef273d71bcc5a3", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\nAlso what is the difference between vector stores like pinecone and faiss and simple vector index\njerryjliu98:\npinecone is a vector db service, the texts are stored in the cloud. faiss is an in-memory index, you can use all the different indices/traversal algorithms that faiss offers. simple vector index is a very simple in-memory store that we made up that's good for initial use, it does brute-force top-k embedding search during query-time", "start_char_idx": 0, "end_char_idx": 450, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03155c65-e206-4e08-a061-ec3c56455cf1": {"__data__": {"id_": "03155c65-e206-4e08-a061-ec3c56455cf1", "embedding": null, "metadata": {"date": "2023-02-15T13:30:50.726+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075408853170147418", "node_type": "4", "metadata": {"date": "2023-02-15T13:30:50.726+00:00"}, "hash": "0097439954ba97959ad836d1d6b6089861d35eb46a0b1eb5a36d049a5310147a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f943e581-7d64-4977-9785-83ac05889250", "node_type": "1", "metadata": {"date": "2023-02-15T08:18:52.235+00:00"}, "hash": "19dc6c8adc0a23f68d210f0e67300f57f5f0cf70ead8b874f1c4fab75e0639d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1934fcd1-6a8b-4c1f-beb7-1ea14a5f7a4e", "node_type": "1", "metadata": {}, "hash": "e7a1f309ee6702f2fc254df910af9c72683fbcd9b321ebbf8d1f02eaa2137ee1", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nCan I safely initialize a GPTQdrantIndex on an existing Qdrant database by just creating a new index with empy document list?\nMikko:\nWould like some clarification on this, is it a good pattern and is there significant overhead?\njerryjliu98:\nHey @Mikko , i think this should work! it's similar to how people use an existing pinecone index", "start_char_idx": 0, "end_char_idx": 344, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1934fcd1-6a8b-4c1f-beb7-1ea14a5f7a4e": {"__data__": {"id_": "1934fcd1-6a8b-4c1f-beb7-1ea14a5f7a4e", "embedding": null, "metadata": {"date": "2023-02-15T16:19:15.455+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075451235475402764", "node_type": "4", "metadata": {"date": "2023-02-15T16:19:15.455+00:00"}, "hash": "8e573bbfcf38c546c88f13e04ae2e3d207abfd95cc7713c6b2ad2b2c5053ddb1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03155c65-e206-4e08-a061-ec3c56455cf1", "node_type": "1", "metadata": {"date": "2023-02-15T13:30:50.726+00:00"}, "hash": "d5691151df5184f32360940ccaf356e532d30d2ccae11b777abb4a53e0a3c119", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "663d017e-20a6-4dee-a05d-1e12d1132fce", "node_type": "1", "metadata": {}, "hash": "27c34383709acd08aa1ffa64e361c9fbb86673511a97019ba64ea9bd79f2621e", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nDoes anyone else have token limitation issues? I'm using GPTSimplevectorindex. My question was something along the lines (very simple) of \"What is the profession of Jack? Still spits out this error: \n\nraise self.handle_error_response(\nopenai.error.InvalidRequestError: This model's maximum context length is 4097 tokens, however you requested 4099 tokens (3843 in your prompt; 256 for the completion). Please reduce your prompt; or completion length.\ntshu:\nare you using custom query while making the model\nTeemu:\nDo your queries also generate a large amount of tokens?", "start_char_idx": 0, "end_char_idx": 576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "663d017e-20a6-4dee-a05d-1e12d1132fce": {"__data__": {"id_": "663d017e-20a6-4dee-a05d-1e12d1132fce", "embedding": null, "metadata": {"date": "2023-02-15T20:23:34.702+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075512720813719563", "node_type": "4", "metadata": {"date": "2023-02-15T20:23:34.702+00:00"}, "hash": "1e9ada9c878675bb02d175cd9d3dbe5fb046162b85b8e7cce5f2c63d939b9966", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1934fcd1-6a8b-4c1f-beb7-1ea14a5f7a4e", "node_type": "1", "metadata": {"date": "2023-02-15T16:19:15.455+00:00"}, "hash": "28029255cde7c9020a036fc5baed70ab625a5a36031299c0c8d36683800d4bc1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "04eed960-07db-4576-9751-d6050220f06f", "node_type": "1", "metadata": {}, "hash": "7ee7d1405f4567a40872f8ff1eb9d01558363454bb234b347f567910c6088a06", "class_name": "RelatedNodeInfo"}}, "text": "omari:\nI'm currently using GPT Simple Vector Index to construct my index and then uploading the json file (150mb) to an S3 bucket and querying it that way. Should I use one of the other vector stores instead and why?\njeremy-analytics:\nhow's the performance? if it's good enough, why change it?\nomari:\nseems to be working, I just assumed there was some  benefit to using pinecone or the others\nMikko:\nYeah like @jeremy-analytics said, vector dbs add performance but the basic query logic is the same with all vector indices. Internally they may have different implementations of vector search which may affect the context used in queries though. But really shouldn't matter much.", "start_char_idx": 0, "end_char_idx": 678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "04eed960-07db-4576-9751-d6050220f06f": {"__data__": {"id_": "04eed960-07db-4576-9751-d6050220f06f", "embedding": null, "metadata": {"date": "2023-02-16T12:01:34.323+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075748774653198366", "node_type": "4", "metadata": {"date": "2023-02-16T12:01:34.323+00:00"}, "hash": "b378499e1c42767e15cf3a1d52176bde43af1f7afab03cea4463aeed6b5e5cb0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "663d017e-20a6-4dee-a05d-1e12d1132fce", "node_type": "1", "metadata": {"date": "2023-02-15T20:23:34.702+00:00"}, "hash": "4a466b70774a55dd7c8874f8ef155402851d0aa492f58e482c8d5eee80cb5e51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4391c8e-6fdb-4b69-a3e8-e367576350e8", "node_type": "1", "metadata": {}, "hash": "f98afbc31cda216b1623b36fe45b9bed6812a91660c222905085e8a5d9c18d66", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\nis this kind of token usage for such a small response normal? is there any way of decreasing it\n4bidden:\nDid you change the default tokens ?I think there's a max_token query", "start_char_idx": 0, "end_char_idx": 179, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4391c8e-6fdb-4b69-a3e8-e367576350e8": {"__data__": {"id_": "f4391c8e-6fdb-4b69-a3e8-e367576350e8", "embedding": null, "metadata": {"date": "2023-02-16T12:04:00.305+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075749386946093096", "node_type": "4", "metadata": {"date": "2023-02-16T12:04:00.305+00:00"}, "hash": "3a35639eacca5c19b9e14a8fae209f181dbea167419f4d5fbe2c9acd305f1e68", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "04eed960-07db-4576-9751-d6050220f06f", "node_type": "1", "metadata": {"date": "2023-02-16T12:01:34.323+00:00"}, "hash": "ad8365004495bd0f4a886852e60e37a890f4f4599c7b793bc754f5164a9b67bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00ea0ca0-cb8a-4f6b-8dfb-8d15fc267fa4", "node_type": "1", "metadata": {}, "hash": "5a256e6c1e65d3df19ebceb05255e851179405def4cbddf5788574b01d0c037a", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nHas anyone else had issues with deploying a streamlit app? I have trouble with streamlit not recognising the import modules. Specifically those of gpt_index and GPTSimpleVectorIndex.\n\nOr is there maybe a better alternative way to deploy an app?\nsmokeoX:\nI actually got this working last night!\nTeemu:\nI can get it running on my local host but I cant get it uploaded to streamlit...", "start_char_idx": 0, "end_char_idx": 388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00ea0ca0-cb8a-4f6b-8dfb-8d15fc267fa4": {"__data__": {"id_": "00ea0ca0-cb8a-4f6b-8dfb-8d15fc267fa4", "embedding": null, "metadata": {"date": "2023-02-16T15:15:02.433+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075797462595403817", "node_type": "4", "metadata": {"date": "2023-02-16T15:15:02.433+00:00"}, "hash": "301d619ecf9fb51b9f358e09f31d9520655656d2bd4c08fbee14a7b36332e4b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4391c8e-6fdb-4b69-a3e8-e367576350e8", "node_type": "1", "metadata": {"date": "2023-02-16T12:04:00.305+00:00"}, "hash": "e2b000709fe271a135d608d1c50e4cab17b47c18d5e613af31c451aaae1ed0e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b90250d-f221-46ce-ba78-941ebcd924f3", "node_type": "1", "metadata": {}, "hash": "d54e25be34d2ba7c810b241d1ba55340b6ef6586cafebb3d3ff0fd23e944c567", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nAny idea if gpt-index can be deployed on AWS lambda? It seems to exceed the size limitation\njeremy-analytics:\nyou probably need to build a container and try to get the size down.", "start_char_idx": 0, "end_char_idx": 185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b90250d-f221-46ce-ba78-941ebcd924f3": {"__data__": {"id_": "1b90250d-f221-46ce-ba78-941ebcd924f3", "embedding": null, "metadata": {"date": "2023-02-16T18:02:06.499+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075839506575544481", "node_type": "4", "metadata": {"date": "2023-02-16T18:02:06.499+00:00"}, "hash": "81cc899181066d816fe7750bd1ee227966369dac47525231c42fe3492b865699", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00ea0ca0-cb8a-4f6b-8dfb-8d15fc267fa4", "node_type": "1", "metadata": {"date": "2023-02-16T15:15:02.433+00:00"}, "hash": "ac8adb1d4963ff5cfc1511e616e4f414827c2d166aa688f5902ce68038db720e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a0b2473-edb9-4c7f-b862-ef8f06439b1f", "node_type": "1", "metadata": {}, "hash": "2594749b809b9541e78b20312420f7fa3b947c5295f6f658f89d7b0609faf778", "class_name": "RelatedNodeInfo"}}, "text": "Zamaru:\nThe hard version requirements is making this loader break for me out of the box, but it does work if i clone locally and run with the (newer) versions of the dependencies i already have. What is the right way to be doing this?\n4bidden:\nI also noticed this", "start_char_idx": 0, "end_char_idx": 263, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a0b2473-edb9-4c7f-b862-ef8f06439b1f": {"__data__": {"id_": "6a0b2473-edb9-4c7f-b862-ef8f06439b1f", "embedding": null, "metadata": {"date": "2023-02-16T18:18:15+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075843568763162797", "node_type": "4", "metadata": {"date": "2023-02-16T18:18:15+00:00"}, "hash": "a74f6ae3ec38aacfa62ffa359a1d08a08f4bec2a5b3ef526a85abb194f2ebbf5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b90250d-f221-46ce-ba78-941ebcd924f3", "node_type": "1", "metadata": {"date": "2023-02-16T18:02:06.499+00:00"}, "hash": "c8bfd1a26f504f0cbae5c36173cdf8dc43c41951c4eded4a3484058b327660c9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "998109bd-53f6-4294-8091-6b206e58dc9c", "node_type": "1", "metadata": {}, "hash": "d63902d627e55b996f7be0cf3a79b566ae448c7e6812a36bae085203d8481993", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nBut it seems the default chunk size is very large (LLM usage tends to be around 4000 tokens)\njeremy-analytics:\nand this: https://gpt-index.readthedocs.io/en/latest/guides/usage_pattern.html#customizing-llm-s\nTeemu:\nThank you for responding. I read through all the docs and I just can't get it to work", "start_char_idx": 0, "end_char_idx": 307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "998109bd-53f6-4294-8091-6b206e58dc9c": {"__data__": {"id_": "998109bd-53f6-4294-8091-6b206e58dc9c", "embedding": null, "metadata": {"date": "2023-02-16T19:43:58.854+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075865143650558054", "node_type": "4", "metadata": {"date": "2023-02-16T19:43:58.854+00:00"}, "hash": "14e6743c3700d3e9423e0364831f067c49c9219e62572cc03430830a1fcae339", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a0b2473-edb9-4c7f-b862-ef8f06439b1f", "node_type": "1", "metadata": {"date": "2023-02-16T18:18:15+00:00"}, "hash": "b489e2d07b199398c05f05596565d68a573ca7d99e9a827db3886b4c7ee2a500", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3b10f734-f815-4e6e-bab9-84c95b3ceece", "node_type": "1", "metadata": {}, "hash": "0ebe54764d09eda95499ee9e27b641e36d65f8ada67011f9a5480c4e0a93afc4", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\nmy pre-prompt is this:\n```\"Forget everything you know. Create a final answer to the given question ONLY using the given context as reference. If you are unable to answer the question, simply state that you cannot provide an answer based on the data you were given. Provide all responses in plain grade 5 english, as if you were explaining to a child. Do not use repetitive language to answer. Only use 4 mid-length sentences to answer. Question: \"```\nomari:\ni'm in the same boat, but I think I need to index better data first. where did you add the pre-prompt?\nsmokeoX:\nyeah I am trying a double sized pinecone index, and gonna try a simplevectorindex JSON file as well, but that would be less ideal. I added my preprompt right before the user prompt in the query\nomari:\ntry it without the preprompt. I just did a side-by-side with mine, and the preprompt led to hallucinating.  Without it, I got a direct answer from my index.\nsmokeoX:\nThanks @omari , it actually works way better without the preprompt. Kind of weird. I guess its optimized for regular text input without a ton of context around it?\nomari:\nyea I guess. I'm gonna keep experimenting, maybe there's a sweet spot.", "start_char_idx": 0, "end_char_idx": 1187, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b10f734-f815-4e6e-bab9-84c95b3ceece": {"__data__": {"id_": "3b10f734-f815-4e6e-bab9-84c95b3ceece", "embedding": null, "metadata": {"date": "2023-02-16T19:51:55.707+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075867143717011576", "node_type": "4", "metadata": {"date": "2023-02-16T19:51:55.707+00:00"}, "hash": "dcc6eba42d9c8b5da94e1a25294b6a15cded48ca2909482c734b97102d2a8d33", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "998109bd-53f6-4294-8091-6b206e58dc9c", "node_type": "1", "metadata": {"date": "2023-02-16T19:43:58.854+00:00"}, "hash": "e58ccfa5af0d863411e52ed774473d1f4d079263e2b1fa3a2dc4dc1290bf4cc7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f68719c-4250-4c00-ac96-615e93e77e19", "node_type": "1", "metadata": {}, "hash": "6bddd4e09f53018fa84755298e3eada6f55b9b690047d3bb0687f28927702d2a", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\nalso, does anyone here use streamlit purely as an API layer? I am wondering if thats a better option for me than a lambda or flask server in a container\nomari:\nI'm using streamlit but only because I couldn't get flask server to work. gonna give it another try\nsmokeoX:\nim shocked at how difficult flask was to set up lol", "start_char_idx": 0, "end_char_idx": 329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f68719c-4250-4c00-ac96-615e93e77e19": {"__data__": {"id_": "9f68719c-4250-4c00-ac96-615e93e77e19", "embedding": null, "metadata": {"date": "2023-02-16T21:07:08.723+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075886072678060163", "node_type": "4", "metadata": {"date": "2023-02-16T21:07:08.723+00:00"}, "hash": "c25dfaa8965bd1d7868562b88cc94abf93d9cc95d48ac4afa727890bf1622ac6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3b10f734-f815-4e6e-bab9-84c95b3ceece", "node_type": "1", "metadata": {"date": "2023-02-16T19:51:55.707+00:00"}, "hash": "7388a2d3e95936326279f6db9ed7d4a61b25288bfd5f47d8539729c7959bd3a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a620754-1c38-4851-a14e-4304a8e53beb", "node_type": "1", "metadata": {}, "hash": "75bbe640524df6912ea4bcf76e176fc08d56bbf8066870c02f7bf4e913c045e0", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nHow would we go about defining a custom method for creating nodes from a given document?\nSandkoan:\nIs there some way of defining a custom/alternate TextSplitter (https://github.com/jerryjliu/gpt_index/blob/main/gpt_index/langchain_helpers/text_splitter.py)?", "start_char_idx": 0, "end_char_idx": 267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a620754-1c38-4851-a14e-4304a8e53beb": {"__data__": {"id_": "2a620754-1c38-4851-a14e-4304a8e53beb", "embedding": null, "metadata": {"date": "2023-02-16T23:58:06.856+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1075929098406338711", "node_type": "4", "metadata": {"date": "2023-02-16T23:58:06.856+00:00"}, "hash": "ae252ce1219283c9cf583f19f70e26fd07cdea56eddf23cce819e06e9f743c81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f68719c-4250-4c00-ac96-615e93e77e19", "node_type": "1", "metadata": {"date": "2023-02-16T21:07:08.723+00:00"}, "hash": "a29f3efe057c5f871ce1ad28fbe1a09f6431f3e843999323fd96556f7cdc8af5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65cc65fe-10e4-4a2a-aa28-6f34f3a7fd7d", "node_type": "1", "metadata": {}, "hash": "1324c57e25e99855983789bf2e2019c42140bb4c1deda2bb3b58b3f5490d890c", "class_name": "RelatedNodeInfo"}}, "text": "sangy:\nHi, how can I pass metadata for text entities to pinecone via GPTIndex which I can later use to pre-filter before vector search? specifically trying to implement this via GPTIndex (https://docs.pinecone.io/docs/metadata-filtering)\n\n\nIm looking at https://github.com/jerryjliu/gpt_index/blob/main/gpt_index/indices/vector_store/pinecone.py but not sure how to pass the metadata..\nomari:\ndid you figure this out?", "start_char_idx": 0, "end_char_idx": 417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65cc65fe-10e4-4a2a-aa28-6f34f3a7fd7d": {"__data__": {"id_": "65cc65fe-10e4-4a2a-aa28-6f34f3a7fd7d", "embedding": null, "metadata": {"date": "2023-02-19T08:33:10.367+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1076783492857348166", "node_type": "4", "metadata": {"date": "2023-02-19T08:33:10.367+00:00"}, "hash": "69855a3b16b26d4fed4cab7cc6d6356f718b8b1981d112ee2437855d5c53bb85", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a620754-1c38-4851-a14e-4304a8e53beb", "node_type": "1", "metadata": {"date": "2023-02-16T23:58:06.856+00:00"}, "hash": "4b94fcf55c1270a500e51e73d72dfda6376b00108c96d63d7983733d57d4839e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53991171-7c7a-40c9-83a3-b641f289e6d7", "node_type": "1", "metadata": {}, "hash": "641bd6291c5bdc449402349260bdc74d380604cddfade9c2d9ed5d7cabc5ba5a", "class_name": "RelatedNodeInfo"}}, "text": "suhasbr:\nHey everyone, is there a minimum system specification for creating indices using GPT-Index ? Also has anyone tried deploying it on a cloud server ?\nNapolean_Solo:\nit all happens on cloud buddy", "start_char_idx": 0, "end_char_idx": 201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53991171-7c7a-40c9-83a3-b641f289e6d7": {"__data__": {"id_": "53991171-7c7a-40c9-83a3-b641f289e6d7", "embedding": null, "metadata": {"date": "2023-02-19T08:33:20.343+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1076783534699716629", "node_type": "4", "metadata": {"date": "2023-02-19T08:33:20.343+00:00"}, "hash": "5f884754192600f5b4c054193980cb4daff37cd92a66a7d36459cd7e2f25b69c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65cc65fe-10e4-4a2a-aa28-6f34f3a7fd7d", "node_type": "1", "metadata": {"date": "2023-02-19T08:33:10.367+00:00"}, "hash": "fae3e4387b7dd0a47a1ab815c82ae82ff7dc62b9fdf2f4d297a5c2a06db1a386", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e8b9622-a16c-4311-97a7-b79cfc806048", "node_type": "1", "metadata": {}, "hash": "18af958b7fab7ebfea6c40b21df4cfb41b6480df6ef8db8586d716276e3abc05", "class_name": "RelatedNodeInfo"}}, "text": "Napolean_Solo:\nHi, when loading documents, is it not possible to load it as a list directly without having to load it as a file?\nNapolean_Solo:\nstill looking for this please", "start_char_idx": 0, "end_char_idx": 173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e8b9622-a16c-4311-97a7-b79cfc806048": {"__data__": {"id_": "4e8b9622-a16c-4311-97a7-b79cfc806048", "embedding": null, "metadata": {"date": "2023-02-19T16:11:16.688+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1076898778843467776", "node_type": "4", "metadata": {"date": "2023-02-19T16:11:16.688+00:00"}, "hash": "7d8746d31a5f9d7e3c7a60f1fec9a878633c1b1e0162ec1f19490a946b353dbd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53991171-7c7a-40c9-83a3-b641f289e6d7", "node_type": "1", "metadata": {"date": "2023-02-19T08:33:20.343+00:00"}, "hash": "5c400864e79c0bb0cd166170ef5aa0fee252e9bcfddf51e9fae98776ef96982b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ec9b843-a45b-48e3-8643-891c0d745aed", "node_type": "1", "metadata": {}, "hash": "724efc1d56c10e15370e6ae8e2b94297b65a170e6052cc570290ccca6a4fac14", "class_name": "RelatedNodeInfo"}}, "text": "sm:\n?\nsm:\nNevermind @qianminhu   ... got it to work.. reinstalled gpt-index.", "start_char_idx": 0, "end_char_idx": 76, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ec9b843-a45b-48e3-8643-891c0d745aed": {"__data__": {"id_": "5ec9b843-a45b-48e3-8643-891c0d745aed", "embedding": null, "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1077358811934896198", "node_type": "4", "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}, "hash": "ef392aa68f36e65d63cd88622ce4ff1a1dbcc654ed8fdfefbdca92de1ca2d2ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e8b9622-a16c-4311-97a7-b79cfc806048", "node_type": "1", "metadata": {"date": "2023-02-19T16:11:16.688+00:00"}, "hash": "a58490251ceaaba5a50f265b97222033703257310e7b77f43c20c2fa9eb6d7b2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1cd01fd-ede6-43b2-ad67-6c4c09e7e07a", "node_type": "1", "metadata": {}, "hash": "4cf1d57c939f725bc2e645974ec508de72408a8b4cd0e81e82c99013aed5cc56", "class_name": "RelatedNodeInfo"}}, "text": "erajasekar:\n@jerryjliu98 I am using `GPTSimpleVectorIndex` to index documents chapter by chapter. I have included the chapter name int the passage. Now I am prompting gpt to summarize a specific chapter by name. But top first similarity matches different chapter name.  I also tried QueryBuddle api with chapter name in `custom_embedding_strs` . But still it didn't match text of correct chapter for querying.\n\nEg text in index. (sorry I am using English transliteration of a different language Tamil. Adhigaram in Tamil means chapter in english)\n\n```\nId : 6\nAdhigaram Tamil : \u0bb5\u0bbe\u0bb4\u0bcd\u0b95\u0bcd\u0b95\u0bc8\u0ba4\u0bcd \u0ba4\u0bc1\u0ba3\u0bc8\u0ba8\u0bb2\u0bae\u0bcd\nAdhigaram English : The Worth of a Wife\nAdhigraram Transliteration : Vaazhkkaith Thunainalam\nKurals in Format Kural Number | Kural in tamil | English Meaning | English Translation| Transliteration : \n\n51 | \u0bae\u0ba9\u0bc8\u0b95\u0bcd\u0ba4\u0b95\u0bcd\u0b95 \u0bae\u0bbe\u0ba3\u0bcd\u0baa\u0bc1\u0b9f\u0bc8\u0baf\u0bb3\u0bcd \u0b86\u0b95\u0bbf\u0ba4\u0bcd\u0ba4\u0bb1\u0bcd \u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bbe\u0ba9\u0bcd \\n \u0bb5\u0bb3\u0ba4\u0bcd\u0ba4\u0b95\u0bcd\u0b95\u0bbe\u0bb3\u0bcd \u0bb5\u0bbe\u0bb4\u0bcd\u0b95\u0bcd\u0b95\u0bc8\u0ba4\u0bcd \u0ba4\u0bc1\u0ba3\u0bc8. | She who has the excellence of home virtues, and can expend within the means of her husband, is a help in the domestic state | Manaikdhakka Maanputaiyal Aakiththar\n```\nHere chapter name is Vaazhkkaith Thunainalam.\n\nThe query I am using:\n\n```\nquery_bundle = QueryBundle(query_str=\"Summarize kurals in Adhigaram 'Vaazhkkaith Thunainalam'\" ,\n                            custom_embedding_strs=['Vaazhkkaith Thunainalam'])\n```\n\nSimilarity score from logs:\n\n```\n[Node 47fdbb3d-0796-43ed-9b4f-4fe231e5e014] [Similarity score:                     0.812227] Id : 2\nAdhigaram Tamil : \u0bb5\u0bbe\u0ba9\u0bcd\u0b9a\u0bbf\u0bb1\u0baa\u0bcd\u0baa\u0bc1\nAdhigaram English : The Blessing of Rain\nAdhigraram Translit...\n> [Node 918552d2-072b-414c-9196-ada0820bece0] [Similarity score:                     0.809707] Id : 25\nAdhigaram Tamil : \u0b85\u0bb0\u0bc1\u0bb3\u0bc1\u0b9f\u0bc8\u0bae\u0bc8\nAdhigaram English : Compassion\n\n```\nAm I doing something wrong? Can you suggest the correct approach to my problem? \nAppreciate your help.\njerryjliu98:\nhey @erajasekar , thanks for raising this. my immediate thought is that openai embeddings (which we use by default), may not work well for Tamil, it seems like a lot of this vocabulary is specific to Tamil, which may be why the embedding similarity does not match. Do you happen to know any good text embedding models trained over Tamil? (e.g. from huggingface)\nerajasekar:\nThanks @jerryjliu98 . I can't find a good embedding model for Tamil. Let me describe my use case. I hope you can help me figure out using the right index combination. I am trying to use GPT for Tamil literature [Thirukkural](https://en.wikipedia.org/wiki/Kural) . It has 133 chapters with each chapter containing 10  short poems. So 1330 poems altogether. I have English translation and transliteration for all couplets and chapter names. I want to support the following type of queries over the document.\n\n1.  Answer a question by searching across the meaning of all poems and the provide best suitable answer. For eg. query could be \"How to live a happy life?\" The answer could be from some 14 poems across different chapters.\n2. Answer a question based on poems from only a specific chapter. For eg. summarize the meanings of all poems in one chapter. \n3. Answer a question based on a single poem. For eg. explain the meaning  of one of the poems using a story.\n\nThe query for 1 will be completely in English.", "start_char_idx": 0, "end_char_idx": 3195, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1cd01fd-ede6-43b2-ad67-6c4c09e7e07a": {"__data__": {"id_": "a1cd01fd-ede6-43b2-ad67-6c4c09e7e07a", "embedding": null, "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1077358811934896198", "node_type": "4", "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}, "hash": "ef392aa68f36e65d63cd88622ce4ff1a1dbcc654ed8fdfefbdca92de1ca2d2ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ec9b843-a45b-48e3-8643-891c0d745aed", "node_type": "1", "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}, "hash": "4075de2b7cf0aa6d086f613857346b32237d5c1db847fce3da211cbc95073600", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b648728-2bc8-4b27-b27d-41d71893638e", "node_type": "1", "metadata": {}, "hash": "7339fbae9473b0bae03f19507d7b12f498299db7e8eb6f493262a2220b646167", "class_name": "RelatedNodeInfo"}}, "text": "It has 133 chapters with each chapter containing 10  short poems. So 1330 poems altogether. I have English translation and transliteration for all couplets and chapter names. I want to support the following type of queries over the document.\n\n1.  Answer a question by searching across the meaning of all poems and the provide best suitable answer. For eg. query could be \"How to live a happy life?\" The answer could be from some 14 poems across different chapters.\n2. Answer a question based on poems from only a specific chapter. For eg. summarize the meanings of all poems in one chapter. \n3. Answer a question based on a single poem. For eg. explain the meaning  of one of the poems using a story.\n\nThe query for 1 will be completely in English. The query for 2 and 3 will use English transliteration for chapter names and poem words. So I need a way to find the correct chapter or poem to use in prompt context based on English transliterated words.\n\nThank you for your guidance.", "start_char_idx": 2447, "end_char_idx": 3430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b648728-2bc8-4b27-b27d-41d71893638e": {"__data__": {"id_": "5b648728-2bc8-4b27-b27d-41d71893638e", "embedding": null, "metadata": {"date": "2023-02-21T06:13:54.351+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1077473220917219328", "node_type": "4", "metadata": {"date": "2023-02-21T06:13:54.351+00:00"}, "hash": "d9551a073515bcdb8ec059a9eae17da3a86b33ce11ad84065db8115879441999", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1cd01fd-ede6-43b2-ad67-6c4c09e7e07a", "node_type": "1", "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}, "hash": "ddabfd268a97b7b85f697ad6e367d18f33a975e63258324ea0b15bdae300f885", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df1c8070-44b0-473e-9b7b-768d88352b4a", "node_type": "1", "metadata": {}, "hash": "e0f6a71a98779f8f38223e6192b2eff93f47b42048be549a1d69a001ebd12422", "class_name": "RelatedNodeInfo"}}, "text": "vkdiscord:\nWhat does this warning mean : Token indices sequence length is longer than the specified maximum sequence length for this model (105189 > 1024). Running this sequence through the model will result in indexing errors\njerryjliu98:\nyeah @vkdiscord are you customizing the prompt helper at all? 105k token length is a lot", "start_char_idx": 0, "end_char_idx": 328, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df1c8070-44b0-473e-9b7b-768d88352b4a": {"__data__": {"id_": "df1c8070-44b0-473e-9b7b-768d88352b4a", "embedding": null, "metadata": {"date": "2023-02-21T08:28:01.912+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1077506974834495568", "node_type": "4", "metadata": {"date": "2023-02-21T08:28:01.912+00:00"}, "hash": "95bc12133d6e5cfd20f38ff8bfa948b6fb5600ff620efa580e2822a1c3ba7bcf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b648728-2bc8-4b27-b27d-41d71893638e", "node_type": "1", "metadata": {"date": "2023-02-21T06:13:54.351+00:00"}, "hash": "3ad85e4fe3b22e79a48eb03089e90dc8d53ebe73c9f4860ff7aca44bac55e75e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "045c0e48-a6ac-4fd7-89b7-77a0169e9b04", "node_type": "1", "metadata": {}, "hash": "fd7fed9598bed29fdaa3efcf414fb600501eaeeb3130f0ffb5e3f6aea98aa5d4", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nhttps://status.openai.com/ right now openai is having outages, may explain your errors as well\nmephisto:\nexplains a lot", "start_char_idx": 0, "end_char_idx": 126, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "045c0e48-a6ac-4fd7-89b7-77a0169e9b04": {"__data__": {"id_": "045c0e48-a6ac-4fd7-89b7-77a0169e9b04", "embedding": null, "metadata": {"date": "2023-02-21T20:01:50.794+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1077681579020791880", "node_type": "4", "metadata": {"date": "2023-02-21T20:01:50.794+00:00"}, "hash": "97fc77414e67d37c684fa3284f1b7ce96cda6dc9fc772afc48e862b46ea57d7a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df1c8070-44b0-473e-9b7b-768d88352b4a", "node_type": "1", "metadata": {"date": "2023-02-21T08:28:01.912+00:00"}, "hash": "58a4a0fad25e747affa3987ed48df5c58971df2f06930bb3181a6a392fbe5a10", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9610eaf9-0d81-47ac-916e-a8c5e8c7e705", "node_type": "1", "metadata": {}, "hash": "9cb7f03360af295cb4ab7acfe3303c262bf373075cbdf0546dbd60bb8fca1042", "class_name": "RelatedNodeInfo"}}, "text": "ryanglambert:\nI intend to use namespaces on pinecone to index different customers in a shard index. \n\nIf I'm using `GPTPineconeIndex` and I pass in \n\n```\n        self.index = GPTPineconeIndex(\n            [],\n            llm_predictor=self.llm_predictor,\n            embed_model=self.embed_model,\n            pinecone_index=self.pinecone_index,\n**            pinecone_kwargs=dict(namespace=self.pinecone_namespace),**\n        )\n```\n\nHow do I make a query against **only** that namespace?\noguntadej:\nYou need to use the namespace in the query also. Something along this line:\n\n`index.query(**query**, pinecone_kwargs={'namespace': namespace})`\nryanglambert:\nI discovered I was just on an older version, this library is changing quickly!", "start_char_idx": 0, "end_char_idx": 735, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9610eaf9-0d81-47ac-916e-a8c5e8c7e705": {"__data__": {"id_": "9610eaf9-0d81-47ac-916e-a8c5e8c7e705", "embedding": null, "metadata": {"date": "2023-02-22T07:54:53.495+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1077861022674735184", "node_type": "4", "metadata": {"date": "2023-02-22T07:54:53.495+00:00"}, "hash": "c8b35a16dc00cb701d5ef9276d7c1d279161e1ab7aeb597cadc0d6cfde8d995c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "045c0e48-a6ac-4fd7-89b7-77a0169e9b04", "node_type": "1", "metadata": {"date": "2023-02-21T20:01:50.794+00:00"}, "hash": "09154e88b1f6af4472de1e822d10efe8e87f302a27ef68d5f20d0338ed246bba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2435a33-e866-4662-a52d-183cea7aef67", "node_type": "1", "metadata": {}, "hash": "4bb02fe7892367da0d9957032bcf0df4992b2d86d4b58d3c8aba5996dabeeb17", "class_name": "RelatedNodeInfo"}}, "text": "chaityacs:\nHi everyone, I need some help with summarizing my vector indexes. I have a bunch of indexes and I'm trying to make a list index out of them, but I keep getting an error. I've checked the documentation at https://gpt-index.readthedocs.io/en/latest/guides/use_cases.html#use-case-summarization-over-documents, but I'm still having trouble. Here's a screenshot of the error message I'm seeing: https://prnt.sc/0rtt8taF_JTH. Can anyone help me troubleshoot this? Thanks!\njerryjliu98:\nhi, if you are trying to build a list index over vector indices, you're need to define a ComposableGraph. https://gpt-index.readthedocs.io/en/latest/how_to/composability.html\nchaityacs:\nThanks for the suggestion! I actually checked out the ComposableGraph documentation, but I'm still having trouble. I'm stuck at this code where I'm trying to generate a summary of my document:\n\nsummary = index1.query(\"What is a summary of this document?\", mode=\"summarize\") index1.set_text(str(summary))\n\nIt's giving me an error and I'm not sure what's going wrong. Can you help me troubleshoot this code? Thanks!\"\njerryjliu98:\nah. this is a bit confusing but mode=\"summarize\" only exists on the tree index (i should rename this..). in general if you are tyring to summarize your document, you should use a list index over that document. just do `index.query(\"<query_str>\")` assuming you have the proper index\nchaityacs:\nit's giving me an error. Here's the code I'm using:\nsummary = index1.query(\"What is a summary of this document?\",mode=\"summarize\")\nindex1.set_text(str(summary))\n....\nListIndex = ListIndex([index1,index2,index3])\n\nHere's a screenshot of the error I'm getting: https://prnt.sc/Lzh5v7A9VeTp.\nso I  have to use \n\"index1.query(\"What is a summary of this document?\") \nindex1.set_text(str(summary))\"\nis this what you are suggesting?\njerryjliu98:\nyes. mode=\"summarize\" will not work for any index except a tree index\nchaityacs:\nok, will do, thanks for the help.", "start_char_idx": 0, "end_char_idx": 1951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2435a33-e866-4662-a52d-183cea7aef67": {"__data__": {"id_": "f2435a33-e866-4662-a52d-183cea7aef67", "embedding": null, "metadata": {"date": "2023-02-23T13:12:59.56+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078303463299096617", "node_type": "4", "metadata": {"date": "2023-02-23T13:12:59.56+00:00"}, "hash": "3a32f28db5fc141621e5da82b203438a0b893075b9bd2aaa89743fdc39298994", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9610eaf9-0d81-47ac-916e-a8c5e8c7e705", "node_type": "1", "metadata": {"date": "2023-02-22T07:54:53.495+00:00"}, "hash": "a35e0c694e5af11fbdf3fc73571a60303923f4ce52e809bf791be7702934f4cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9245979c-f960-46d3-82b0-9600601e284e", "node_type": "1", "metadata": {}, "hash": "da0a891f558c269fb0d2cd085d87c53e98d810995c8bad5b79f71b65a25a8a69", "class_name": "RelatedNodeInfo"}}, "text": "kas84:\nI think this could be used for that: https://llamahub.ai/l/web-knowledge_base\njerryjliu98:\nyep! exactly", "start_char_idx": 0, "end_char_idx": 110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9245979c-f960-46d3-82b0-9600601e284e": {"__data__": {"id_": "9245979c-f960-46d3-82b0-9600601e284e", "embedding": null, "metadata": {"date": "2023-02-24T00:30:29.556+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078473961739915334", "node_type": "4", "metadata": {"date": "2023-02-24T00:30:29.556+00:00"}, "hash": "4b78c4d3cb631773159d099fb45bf9e0311b0befbb27467354464ac5341bd367", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2435a33-e866-4662-a52d-183cea7aef67", "node_type": "1", "metadata": {"date": "2023-02-23T13:12:59.56+00:00"}, "hash": "6773dfda50ec8ca388ef314f0342c83f58d7db014c71702aba15b2b83d25c9bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "39ff5a8e-38ff-498a-a82f-93569761e5f2", "node_type": "1", "metadata": {}, "hash": "d490fd768c148c20ff2a56a31d3f494e4d28c570b82cfa9b49b36edb47aed0b2", "class_name": "RelatedNodeInfo"}}, "text": "holodeck:\nhi, I'm getting the error \"coroutine was expected, got <_GatheringFuture pending>\" when using \"response = index.query(query, response_mode='tree_summarize', use_async=True)\" on a SimpleVectorIndex - anyone else have this issue? works fine for async=false.\njerryjliu98:\n@holodeck do you have a stack trace?", "start_char_idx": 0, "end_char_idx": 315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39ff5a8e-38ff-498a-a82f-93569761e5f2": {"__data__": {"id_": "39ff5a8e-38ff-498a-a82f-93569761e5f2", "embedding": null, "metadata": {"date": "2023-02-24T14:07:50.108+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078679652723335228", "node_type": "4", "metadata": {"date": "2023-02-24T14:07:50.108+00:00"}, "hash": "46dd196b9a8b53d61a0a6c47254a7e3a6c1a6c4dcf3754c7914ad2629513f553", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9245979c-f960-46d3-82b0-9600601e284e", "node_type": "1", "metadata": {"date": "2023-02-24T00:30:29.556+00:00"}, "hash": "2ba738b349613d17a9ed9de687a8e8e85986f8061a0c912bc6924c092da4026f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a9b475d-d2af-46e2-a887-60da7e9069d2", "node_type": "1", "metadata": {}, "hash": "2f30cf43d33e95724cb47f1be83b0a881687ec2c97e5bb10bbf097758f874447", "class_name": "RelatedNodeInfo"}}, "text": "oguntadej:\nHello @jerryjliu98 I noticed the `google_doc` reader requires a `credentials.json` file. Is it possible to use authentication tokens (similar to notion reader) ?\njerryjliu98:\nperhaps, we mostly just followed the authenticatiion setup listed here: https://developers.google.com/workspace/guides/create-credentials\noguntadej:\nGot it. I suppose the reader defaults to the service account authentication. Thanks for the clarification", "start_char_idx": 0, "end_char_idx": 440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a9b475d-d2af-46e2-a887-60da7e9069d2": {"__data__": {"id_": "3a9b475d-d2af-46e2-a887-60da7e9069d2", "embedding": null, "metadata": {"date": "2023-02-24T16:23:19.636+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078713750435151872", "node_type": "4", "metadata": {"date": "2023-02-24T16:23:19.636+00:00"}, "hash": "7460bd1c66f0431485c06c3cb6c762cfdd2a61e2092e844017a4fc154b6fb1ed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39ff5a8e-38ff-498a-a82f-93569761e5f2", "node_type": "1", "metadata": {"date": "2023-02-24T14:07:50.108+00:00"}, "hash": "bee45df9c5350f0f14628427943f403e53dab115bc2821dfe25ce2d61814667b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ee6cbc8-83d9-4093-a520-c26ae334f65f", "node_type": "1", "metadata": {}, "hash": "a3e416a90588d8cfb95e897d90319b87d2a690fa416364dfcc79e7e3b397ffad", "class_name": "RelatedNodeInfo"}}, "text": "Krrish:\nseeing an error while loading a gpt simple vector index in 0.4.12 that i wasn't in 0.4.9. Sanity checking in case this is just me\njerryjliu98:\noh weird. @Krrish i thought this was working, but this may be a bug on our end. let me take a lok asap", "start_char_idx": 0, "end_char_idx": 253, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ee6cbc8-83d9-4093-a520-c26ae334f65f": {"__data__": {"id_": "2ee6cbc8-83d9-4093-a520-c26ae334f65f", "embedding": null, "metadata": {"date": "2023-02-24T20:25:17.71+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078774643650986136", "node_type": "4", "metadata": {"date": "2023-02-24T20:25:17.71+00:00"}, "hash": "aac9a59fec0c1855e7c0449f21993fd79cf4d40ebd8d259a8dbec11e85f7259a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a9b475d-d2af-46e2-a887-60da7e9069d2", "node_type": "1", "metadata": {"date": "2023-02-24T16:23:19.636+00:00"}, "hash": "97007904ebe837cf7c6e71a27f1058150dd053e46256e4d1af8e9ecc002f50e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8070bcfd-5da8-45a0-be1d-a94eb759dfec", "node_type": "1", "metadata": {}, "hash": "0cd6b0cd7ebd3068e26f8d866249f256a40e4acec608cac1be1dc44e17c144e8", "class_name": "RelatedNodeInfo"}}, "text": "dx31:\nthis is directly from the documentation and produces an empty response. what am i doing wrong?\n\n` \nfrom llama_index import (\n    KeywordTableIndex, \n    SimpleDirectoryReader, \n    LLMPredictor,\n)\nfrom langchain import OpenAI\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-[APIKEY]\"\ndocuments = SimpleDirectoryReader('data').load_data()\n\n# define LLM\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"text-davinci-002\", max_tokens=1000))\n\n# build index\nindex = KeywordTableIndex(documents, llm_predictor=llm_predictor)\n\n# get response from query\nresponse = index.query(\"Summarize the text, use bullet points\")\n\n# Print the response to the console\nprint(response)` \n\nThe output\n\n`[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\18186\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\nINFO:root:> [build_index_from_documents] Total LLM token usage: 18532 tokens\nINFO:root:> [build_index_from_documents] Total embedding token usage: 0 tokens\nINFO:root:> Starting query: Summarize the text, use bullet points\nINFO:root:query keywords: ['summarize', 'points', 'bullet', 'text']\nINFO:root:> Extracted keywords: []\nINFO:root:> [query] Total LLM token usage: 92 tokens     \nINFO:root:> [query] Total embedding token usage: 0 tokens\nEmpty Response\nPS C:\\Users\\18186\\gpt_index\\examples\\paul_graham_essay>`\nsmokeoX:\nhave you tried debugging with another index type?", "start_char_idx": 0, "end_char_idx": 1432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8070bcfd-5da8-45a0-be1d-a94eb759dfec": {"__data__": {"id_": "8070bcfd-5da8-45a0-be1d-a94eb759dfec", "embedding": null, "metadata": {"date": "2023-02-24T21:23:25.875+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078789274075402251", "node_type": "4", "metadata": {"date": "2023-02-24T21:23:25.875+00:00"}, "hash": "25e7f902612a19f29a8de9fe9eac3aafea84dd18255f336900406352e492f52d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ee6cbc8-83d9-4093-a520-c26ae334f65f", "node_type": "1", "metadata": {"date": "2023-02-24T20:25:17.71+00:00"}, "hash": "5723809e91308040fdbb6f5a00414b74b26ed1d3ee1516db5f4896f087a00178", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03065805-e1bc-43e2-a211-326ef63e15c3", "node_type": "1", "metadata": {}, "hash": "8c1bb1150e165f530a1b95c0c77f4debd2aa3ab28ebc9add457287d81fdbb2a3", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nGuys thank you for everything you\u2019re doing. I have a naive problem. With langchain i define a \u201copenai_api_key\u201d when a chain is defined. I\u2019m just starting to use llama index, but when i run GPTSimpleVectorIndex i got \u201cdid not find openai_api_key, please add etc\u201d. Then i add it and i got \u2018__init__() got an unexpected keyword argument \u201copenai_api_key\u201d\u2019. How can i do?\nTeemu:\nI use this one:\nimport os\nos.environ[\"OPENAI_API_KEY\"] = 'your_api_key_here'\nAndreaSel93:\nI knew it was naive\ud83d\ude02 but many thanks you saved me a lot of time insisting in that solution\nTeemu:\nYou're welcome!", "start_char_idx": 0, "end_char_idx": 590, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03065805-e1bc-43e2-a211-326ef63e15c3": {"__data__": {"id_": "03065805-e1bc-43e2-a211-326ef63e15c3", "embedding": null, "metadata": {"date": "2023-02-24T21:26:07.954+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078789953884000428", "node_type": "4", "metadata": {"date": "2023-02-24T21:26:07.954+00:00"}, "hash": "a0c56b1ce4e02e9280de48fee490805856e5ec3f13e0cfa31bb4be5b51a25544", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8070bcfd-5da8-45a0-be1d-a94eb759dfec", "node_type": "1", "metadata": {"date": "2023-02-24T21:23:25.875+00:00"}, "hash": "ff4e2351e52d72efe48e64e5816d354aedd3e6447063cdccf926162551101216", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "737611f1-7245-40ba-abc3-662aa8e7e023", "node_type": "1", "metadata": {}, "hash": "1d7138291548eca5725fc8068b1599f43a8b45339df1783c32741eb6e904f43d", "class_name": "RelatedNodeInfo"}}, "text": "dx31:\nyes, it doesnt seem to do anything.\nTeemu:\nWhat happens when you change the llm predictor model?\ndx31:\nnothing. ive literally put the max_tokens=1\nTeemu:\nI actually don't know, I just initiated the llm predictor model to try it and I have the same issue", "start_char_idx": 0, "end_char_idx": 259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "737611f1-7245-40ba-abc3-662aa8e7e023": {"__data__": {"id_": "737611f1-7245-40ba-abc3-662aa8e7e023", "embedding": null, "metadata": {"date": "2023-02-24T21:30:33.579+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078791067996000296", "node_type": "4", "metadata": {"date": "2023-02-24T21:30:33.579+00:00"}, "hash": "0e15f57825bd860447adbe00abb134c24308f2a958937809574690c965c81151", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03065805-e1bc-43e2-a211-326ef63e15c3", "node_type": "1", "metadata": {"date": "2023-02-24T21:26:07.954+00:00"}, "hash": "5226e55152451d8dcc5c95d7e3f3f795f9d6f8f811bf6c22ab57c5f553eb1964", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7bd6e236-47cc-4be8-926e-17e34eeb5804", "node_type": "1", "metadata": {}, "hash": "3f6a8f0a708ec2a7263a8faaaff9e6c88cdfe5334d573450cce5077317e15d26", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nill try to work out a solution\ndx31:\ni dm'd you my code if you want to take a look.\nTeemu:\nFound solution", "start_char_idx": 0, "end_char_idx": 112, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bd6e236-47cc-4be8-926e-17e34eeb5804": {"__data__": {"id_": "7bd6e236-47cc-4be8-926e-17e34eeb5804", "embedding": null, "metadata": {"date": "2023-02-24T22:06:38.793+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078800149561737277", "node_type": "4", "metadata": {"date": "2023-02-24T22:06:38.793+00:00"}, "hash": "1be32bfd9220969d8711e3053edbff9aa3139a343688867a0f8b74af9f8831da", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "737611f1-7245-40ba-abc3-662aa8e7e023", "node_type": "1", "metadata": {"date": "2023-02-24T21:30:33.579+00:00"}, "hash": "c1b43150ba8024ac478aaec03d18079d7d60025b5e4237a82d637e999d432e80", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b702ce2-f14d-43cd-a73e-a5ea418877d3", "node_type": "1", "metadata": {}, "hash": "6964ea66520f2d4da11bf8897b4cd5c111170c5df3a01583c5c62730105d4d25", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nI sent the code you need to run it properly\nAndreaSel93:\nI just opened discord again for the same issue\ud83d\ude05 can you share the solution to prevent the answer been truncated?\nTeemu:\nThis worked for me:\n\nfrom llama_index import GPTSimpleVectorIndex, LLMPredictor\nfrom langchain import OpenAI\nimport os\nos.environ[\"OPENAI_API_KEY\"] = 'your_api_key_here'\n\n# define LLM\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"text-davinci-003\", max_tokens=10))\n\n# load from disk\nindex = GPTSimpleVectorIndex.load_from_disk('index.json', llm_predictor=llm_predictor)\n\n# get response from query\nprint(index.query(\"Ask a question\"))\nAndreaSel93:\nHey! I\u2019ve just looked carefully at your answer. You added the max_tokens keyword but it actually doesn\u2019t do anything (it cuts off the answer again). What it\u2019s hard to get to me it\u2019s the fact that using openai directly I can use a long prompt and receive a long answer if requested, but most importantly, a finished answer. Why is this not possible with Llama index which is based on openai models?", "start_char_idx": 0, "end_char_idx": 1049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b702ce2-f14d-43cd-a73e-a5ea418877d3": {"__data__": {"id_": "7b702ce2-f14d-43cd-a73e-a5ea418877d3", "embedding": null, "metadata": {"date": "2023-02-24T23:49:30.663+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1078826036260773958", "node_type": "4", "metadata": {"date": "2023-02-24T23:49:30.663+00:00"}, "hash": "91aeb0de26f56daaa356a8bad07367b21acc574dbfcfa18fb1692791fbe997ec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7bd6e236-47cc-4be8-926e-17e34eeb5804", "node_type": "1", "metadata": {"date": "2023-02-24T22:06:38.793+00:00"}, "hash": "6d5f594545427cb945b395838d3e40a2dd217d01296ef2e520e402f91b30fbe0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17a8ca58-4fd5-40cf-b4b9-99972f50606e", "node_type": "1", "metadata": {}, "hash": "49775aa0a4a86e44e257be9de11cf36bcc8062e4f3f7706eb5c3c1b2220e69d5", "class_name": "RelatedNodeInfo"}}, "text": "dx31:\nis there any way to get more than 315 word outputs?\njerryjliu98:\n@dx31 do you mean responses are getting cut off?\ndx31:\nYes. But I'd also like them longer. Around 600 words", "start_char_idx": 0, "end_char_idx": 178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17a8ca58-4fd5-40cf-b4b9-99972f50606e": {"__data__": {"id_": "17a8ca58-4fd5-40cf-b4b9-99972f50606e", "embedding": null, "metadata": {"date": "2023-02-25T16:25:44.771+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1079076747041050715", "node_type": "4", "metadata": {"date": "2023-02-25T16:25:44.771+00:00"}, "hash": "a5b0baebf5081bcb2ada7aa503b182c45222281b5dac06f6502921a0672e5dd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b702ce2-f14d-43cd-a73e-a5ea418877d3", "node_type": "1", "metadata": {"date": "2023-02-24T23:49:30.663+00:00"}, "hash": "dadd709085b110680316b15e89dd9cc7f76e1dbcad4bacf33ddb807dbd62cb88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25b7ac9f-8f32-4061-9578-874d4cfcb7d9", "node_type": "1", "metadata": {}, "hash": "cf32d2f1daa057750279e9f9d701cbfb6bf8d1fdfcad6770f8a8728edd9d1fea", "class_name": "RelatedNodeInfo"}}, "text": "oguntadej:\nHello @jerryjliu98 , I was able to use `pinecone_kwargs` with gpt_index earlier but I get the following error when I try to use a pinecone namespace with `llama_index`:\n\n`TypeError: __init__() got an unexpected keyword argument 'pinecone_kwargs'`\n\nWhen I check the docs, I no longer see `pinecone_kwargs` in the parameters anymore, how do you pass a pinecone namespace when creating a new index on `llama_index`?\njerryjliu98:\nHey @oguntadej , thanks for flagging this. We're working on making the UX better - in the meantime try defining a pinecone vector store object: https://github.com/jerryjliu/gpt_index/blob/main/gpt_index/vector_stores/pinecone.py, and then passing this is as a vector store argument when you initialize GPTPineconeIndex e.g. `index = GPTPineconeIndex(documents, ..., vector_store=vector_store)`", "start_char_idx": 0, "end_char_idx": 830, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25b7ac9f-8f32-4061-9578-874d4cfcb7d9": {"__data__": {"id_": "25b7ac9f-8f32-4061-9578-874d4cfcb7d9", "embedding": null, "metadata": {"date": "2023-02-26T00:00:06.378+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1079191090508345435", "node_type": "4", "metadata": {"date": "2023-02-26T00:00:06.378+00:00"}, "hash": "a10404091bfaef8ee3c141d2bf3b6d5d6e5af764dff41054631786bef64f419e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17a8ca58-4fd5-40cf-b4b9-99972f50606e", "node_type": "1", "metadata": {"date": "2023-02-25T16:25:44.771+00:00"}, "hash": "0b0578603324c1fabe2481740e91afbd6b0a051b262ddffe066b2614969379db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cdcbe4c2-6c71-4e56-bc23-a663aaf9fbbb", "node_type": "1", "metadata": {}, "hash": "f7f790b431da869eb469407f29e4cbd5a3fe6a075f0a2554d1524bf5cd992675", "class_name": "RelatedNodeInfo"}}, "text": "Navo:\nHello everyone,\n\nI built a tool which trains GPT3 with a github repo and answers questions about that repo.\n\nI heard there is a limitation for context and this llama tool can solve this problem.\n\nIs that correct?\n\nBtw: The repo: https://github.com/askrella/git-gpt\n\nIt works for the first couple questions but loses context..\njerryjliu98:\nyes! @Navo this is a good tool for storing context that you can then feed into LLM's\nNavo:\nI will try it out now, amazing project", "start_char_idx": 0, "end_char_idx": 474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cdcbe4c2-6c71-4e56-bc23-a663aaf9fbbb": {"__data__": {"id_": "cdcbe4c2-6c71-4e56-bc23-a663aaf9fbbb", "embedding": null, "metadata": {"date": "2023-02-26T16:39:04.82+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1079442490555383938", "node_type": "4", "metadata": {"date": "2023-02-26T16:39:04.82+00:00"}, "hash": "065de0565b3c3061c1cf2d2796474d57e7875b516bf96a72e1ff7a4f3a267a5f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25b7ac9f-8f32-4061-9578-874d4cfcb7d9", "node_type": "1", "metadata": {"date": "2023-02-26T00:00:06.378+00:00"}, "hash": "ed1d4cb6cf91a90c74bad8a95370ff64fe801f0639545c9eb604a03ade1c90d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "adf2a8de-3d2d-4fad-973e-ef30a5ae56bc", "node_type": "1", "metadata": {}, "hash": "edc88c70a3fff03552807f762d3b83c811f8fe569e5f6f38914c43a2207e0bbb", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nHow to concat two indices ? Say I created two SimpleVectorIndex from two document stores that I want to concatenate.\nNote that I'm not referring to creating several hierarchies of indices, just concatenating the two json indices as if they were created from a merged document store\nyoelk:\nOne use case for this may be that new files are being added overtime,  thus creating a separate index  (json) per file when uploaded. \nWhen querying, all jsons need to be combined first,  otherwise the query will fetch top_k from each index instead of global top_k from all of them", "start_char_idx": 0, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "adf2a8de-3d2d-4fad-973e-ef30a5ae56bc": {"__data__": {"id_": "adf2a8de-3d2d-4fad-973e-ef30a5ae56bc", "embedding": null, "metadata": {"date": "2023-02-27T01:29:18.183+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1079575925471068230", "node_type": "4", "metadata": {"date": "2023-02-27T01:29:18.183+00:00"}, "hash": "c863da8392cfe1430ea0f95f6352a709ae3d9f6712819de03a36a8f3c0d79632", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cdcbe4c2-6c71-4e56-bc23-a663aaf9fbbb", "node_type": "1", "metadata": {"date": "2023-02-26T16:39:04.82+00:00"}, "hash": "b9d091429073d439e517c949715510baa4da218ccfdbe82bb93645b9cad49474", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1884aeb9-fdb8-42c8-b186-5315d6e35133", "node_type": "1", "metadata": {}, "hash": "ea468d96a98dca9586f71416314478d1e7fe57765e718d5669591ae9ac54b663", "class_name": "RelatedNodeInfo"}}, "text": "foggyeyes:\nIs there a way to get the N most similar results from GPTVectorIndex\njerryjliu98:\nyep! just set response_mode=\"no_text\" and we won't call the LLM. then just parse `response.source_nodes`", "start_char_idx": 0, "end_char_idx": 197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1884aeb9-fdb8-42c8-b186-5315d6e35133": {"__data__": {"id_": "1884aeb9-fdb8-42c8-b186-5315d6e35133", "embedding": null, "metadata": {"date": "2023-02-28T23:03:07.824+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080263915650416811", "node_type": "4", "metadata": {"date": "2023-02-28T23:03:07.824+00:00"}, "hash": "70ffacf4c803982b009cf9215d49c686106963eae7b23c0f0081c6b629b801ea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "adf2a8de-3d2d-4fad-973e-ef30a5ae56bc", "node_type": "1", "metadata": {"date": "2023-02-27T01:29:18.183+00:00"}, "hash": "c78947776a1305683f7b865cb700f5656775cc7c2b302527c2c0020396b2ce87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5975a91-8a12-4aea-99d2-c6918c05e60a", "node_type": "1", "metadata": {}, "hash": "5207b017e55bb575e6fa2cccc9f00aba6b6c79c60624d7bcd033dd404bcb50a4", "class_name": "RelatedNodeInfo"}}, "text": "feliperaitano:\nHi everyone,\n\nI'm looking to develop some tools using a no-code front-end tool (bubble.io) and connect them to cloud functions that use gpt-index via API calls. Does anyone know how I can do this in a simple way? I don't have much experience with developing a function that runs in the cloud.\n\nAny tips would be greatly appreciated!\nBatman:\nYou might need to find some no code AI tools that can integrate with bubble or no code tools to create APIs that you can use with bubble\nBatman:\nhttps://huggingface.co/autotrain", "start_char_idx": 0, "end_char_idx": 533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5975a91-8a12-4aea-99d2-c6918c05e60a": {"__data__": {"id_": "f5975a91-8a12-4aea-99d2-c6918c05e60a", "embedding": null, "metadata": {"date": "2023-03-01T01:26:23.092+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080299966817374250", "node_type": "4", "metadata": {"date": "2023-03-01T01:26:23.092+00:00"}, "hash": "fe6ec0b27291c02ed7f5c9a3129b769d5cea830cf7e13fc9d4c4ce3cfeb6bd44", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1884aeb9-fdb8-42c8-b186-5315d6e35133", "node_type": "1", "metadata": {"date": "2023-02-28T23:03:07.824+00:00"}, "hash": "5829805dd9b241bdf4e41fedafdbbfaf63a1bdcccd38379bef188808b95680bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ea3759f-190e-4891-afe9-f84ded59b55c", "node_type": "1", "metadata": {}, "hash": "43273f2f217aa5651f04c0372e451cf0de235667f938315201931b012097af74", "class_name": "RelatedNodeInfo"}}, "text": "Nilu:\nanyone know the best way to store the json generated from gpt-index into a pgvector via supabase?  @Crag @jerryjliu98 ? the output json is 500 mb and obviously can't keep calling it everytime I want to do a query\n\nhttps://supabase.com/blog/openai-embeddings-postgres-vector\nnkeating:\nEver make any progress here? Have the same question!\nNilu:\ndecided to just do it manually, works much better tbh https://www.stori.gg/s/dragonage\npdupanov:\nHow do you call the 500MB JSON index that you mentioned earlier?", "start_char_idx": 0, "end_char_idx": 510, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ea3759f-190e-4891-afe9-f84ded59b55c": {"__data__": {"id_": "5ea3759f-190e-4891-afe9-f84ded59b55c", "embedding": null, "metadata": {"date": "2023-03-01T06:24:01.847+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080374871864922212", "node_type": "4", "metadata": {"date": "2023-03-01T06:24:01.847+00:00"}, "hash": "cadc6f439bb4ef971dcbf17c56d34aed358465faf7fc2077923590732e335573", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5975a91-8a12-4aea-99d2-c6918c05e60a", "node_type": "1", "metadata": {"date": "2023-03-01T01:26:23.092+00:00"}, "hash": "cfe943974a992f321abb9f6d162a18eb613e82e0db76bf6e05543c1390bfa1bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cdc00f7a-99ed-418a-8147-21b6d9a7de80", "node_type": "1", "metadata": {}, "hash": "31318fd9f3b95cbd992bd171f86119da71bf7ecd732ae391405a9df5390de469", "class_name": "RelatedNodeInfo"}}, "text": "foggyeyes:\nIs there any advice on good ways to compose indices? The documentation shows a list index on top of tree indices, but not sure if that's the best way. In my case, I have two types of documents. I have about 200 documents of each type, about 20 pages each on average. I was thinking of wrapping each document in it's own list index to force the model to use the entire document. Then, I'd probably put all the documents into two vector or tree indices (one for each type), and then a list index on top of the two vector/tree indices to force the model to look at both types of documents. Any thoughts on better ways to compose would be greatly appreciated.\nfoggyeyes:\n@jerryjliu98 in case you have any suggestions", "start_char_idx": 0, "end_char_idx": 723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cdc00f7a-99ed-418a-8147-21b6d9a7de80": {"__data__": {"id_": "cdc00f7a-99ed-418a-8147-21b6d9a7de80", "embedding": null, "metadata": {"date": "2023-03-01T18:05:58.225+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080551520757612594", "node_type": "4", "metadata": {"date": "2023-03-01T18:05:58.225+00:00"}, "hash": "f907e4193233e00874781a630f729fe78c5a261bffd851c4e236bbc7dc14f4b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ea3759f-190e-4891-afe9-f84ded59b55c", "node_type": "1", "metadata": {"date": "2023-03-01T06:24:01.847+00:00"}, "hash": "dca60034d4e92d158f9b1cbe44fd9df05bd147b734a84ad42332404a175297b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1070d48f-8347-422c-bab7-f1079ec4ea63", "node_type": "1", "metadata": {}, "hash": "1c1a2886dde2a4cbbdf27f4e03c6ad6c435cf83f80bb5d02cf6f45cca21361fd", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\ni previously made a model using simplevectorindex using pdf1 and pdf2. lets say now i want to add more resources to the model. whats the best way to do it?\nTeemu:\nCant you just create a new index from the data folder with new documents if you're storing those pdfs in the data folder?\ntshu:\nthen i will have to retrain the new index with pdf1 and pdf2 again which were already dealt with.\nTeemu:\nI also tagged you in the append function, didnt try it yet though\ntshu:\nok i will look into that. thx\nTeemu:\nhttps://gpt-index.readthedocs.io/en/latest/how_to/update.html", "start_char_idx": 0, "end_char_idx": 572, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1070d48f-8347-422c-bab7-f1079ec4ea63": {"__data__": {"id_": "1070d48f-8347-422c-bab7-f1079ec4ea63", "embedding": null, "metadata": {"date": "2023-03-01T18:09:37.417+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080552440115499128", "node_type": "4", "metadata": {"date": "2023-03-01T18:09:37.417+00:00"}, "hash": "6f8df23c85c3e88e9a20fd1d0e41d8d1f3aac831e810770ba5889466783ca5e8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cdc00f7a-99ed-418a-8147-21b6d9a7de80", "node_type": "1", "metadata": {"date": "2023-03-01T18:05:58.225+00:00"}, "hash": "f6c57bc03169f94647075fbf79e84b1fa09058a4c0e9bd39877039de551c3ab3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07c3f2a5-7114-4766-975c-c7c3e6be9bc8", "node_type": "1", "metadata": {}, "hash": "d223a66736ef394969324742dd7a10fda140493d1cfab9a9b4f454456d45a9b0", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\nand i need to do this in scale. like i will keep adding resources every day\nravitheja:\nanother solution is that you can create index for each pdf and whenever new pdf comes...create new index and then create an index on top of all the indexes and start querying.", "start_char_idx": 0, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07c3f2a5-7114-4766-975c-c7c3e6be9bc8": {"__data__": {"id_": "07c3f2a5-7114-4766-975c-c7c3e6be9bc8", "embedding": null, "metadata": {"date": "2023-03-01T23:55:38.449+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080639518195073054", "node_type": "4", "metadata": {"date": "2023-03-01T23:55:38.449+00:00"}, "hash": "50eeda757b99694c7bc403135102ebcd3923b3f7c2ec73ab1900a7c9eef56328", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1070d48f-8347-422c-bab7-f1079ec4ea63", "node_type": "1", "metadata": {"date": "2023-03-01T18:09:37.417+00:00"}, "hash": "61db984edbea289eb402465d9254107512f3ff0758d92a8bcd7c302c7f4e0ba1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11949e00-0abb-48cb-b4fe-852007625c24", "node_type": "1", "metadata": {}, "hash": "d241f2769092d2c3ff433f8bb0a260bfc5cc54082e24923fdd9d5fdf37226d38", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nHas anyone figured out a fix for the poor quality ChatGPT API responses?\nb0203:\nDid you get any success in improving accuracy of \"gpt-3.5-turbo\". It seems like for some datasets, the \"text-davinci-003\" model returns accurate answers whereas \"gpt-3.5-turbo\" says something like \"not present in the given context information..\"?\nTeemu:\nI haven't really had time yet, do you know the command for changing the prompt with gpt index?", "start_char_idx": 0, "end_char_idx": 435, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11949e00-0abb-48cb-b4fe-852007625c24": {"__data__": {"id_": "11949e00-0abb-48cb-b4fe-852007625c24", "embedding": null, "metadata": {"date": "2023-03-02T00:29:44.625+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080648100479254568", "node_type": "4", "metadata": {"date": "2023-03-02T00:29:44.625+00:00"}, "hash": "c5b76c9001b3e70d69b5e79177089a398c9320cc4e7b7d565f89be3debe2561d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07c3f2a5-7114-4766-975c-c7c3e6be9bc8", "node_type": "1", "metadata": {"date": "2023-03-01T23:55:38.449+00:00"}, "hash": "9f5e3561022337c8a57dd0fc8837c26a4c586f55395aed6a30444e14898691d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf28bc3c-bcd4-4fe8-99df-3c5cd11064ca", "node_type": "1", "metadata": {}, "hash": "d2b188413f9076572165f57ceabf6ee8d53ea2c35737f475b599b36877e11027", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\n@4bidden did you update your openai installation?\n4bidden:\nresolved it", "start_char_idx": 0, "end_char_idx": 79, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf28bc3c-bcd4-4fe8-99df-3c5cd11064ca": {"__data__": {"id_": "bf28bc3c-bcd4-4fe8-99df-3c5cd11064ca", "embedding": null, "metadata": {"date": "2023-03-02T01:57:17.868+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080670134177370142", "node_type": "4", "metadata": {"date": "2023-03-02T01:57:17.868+00:00"}, "hash": "051df649c5588c8fba0b37e9264664078a1d50b07b6d3c21bd205ad2bb011537", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11949e00-0abb-48cb-b4fe-852007625c24", "node_type": "1", "metadata": {"date": "2023-03-02T00:29:44.625+00:00"}, "hash": "be565d9f41f5e8fa78be7d8bc8729168aba3c35dbbee220ac328103147c5b139", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ee5d42e-7f98-49fd-a4fd-ca2ab16f5db7", "node_type": "1", "metadata": {}, "hash": "dbceb538b45ce670f62122ca26287632afe0bd6b61fac58d807b020d4b0ef533", "class_name": "RelatedNodeInfo"}}, "text": "b0203:\nWhy would I could get this error \"No module named 'gpt_index.langchain_helpers.chatgpt'\"? Any thoughts?\nLogan M:\nAs a first step, make sure you update your llama_index installation (loooots of changes the past couple of days)", "start_char_idx": 0, "end_char_idx": 232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ee5d42e-7f98-49fd-a4fd-ca2ab16f5db7": {"__data__": {"id_": "1ee5d42e-7f98-49fd-a4fd-ca2ab16f5db7", "embedding": null, "metadata": {"date": "2023-03-02T02:40:02.517+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080680891094945893", "node_type": "4", "metadata": {"date": "2023-03-02T02:40:02.517+00:00"}, "hash": "074eab95ab3195e35c515bc47ed86a228095069e657587aca8690914ece2eaf4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf28bc3c-bcd4-4fe8-99df-3c5cd11064ca", "node_type": "1", "metadata": {"date": "2023-03-02T01:57:17.868+00:00"}, "hash": "53d84cb1b042d8da9fc1dc26d90533a7d8ed88f254071b27bb15d2c1e7626ad1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d1794b5-e6b3-4a4c-96f9-4ed77a75ae1d", "node_type": "1", "metadata": {}, "hash": "bec0f6e77c052bac8df10ebfdb94ccd8415f7c0416e9b6fc38d50f4b333373a3", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\npython dependency management truly is 7 circles of hell\nLogan M:\nJust gotta put a version for everything in your requirements.txt \ud83d\ude09", "start_char_idx": 0, "end_char_idx": 140, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d1794b5-e6b3-4a4c-96f9-4ed77a75ae1d": {"__data__": {"id_": "6d1794b5-e6b3-4a4c-96f9-4ed77a75ae1d", "embedding": null, "metadata": {"date": "2023-03-02T02:47:50.618+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080682854452834395", "node_type": "4", "metadata": {"date": "2023-03-02T02:47:50.618+00:00"}, "hash": "654e32f2f5e7161707b33d8119a16038ce6c50bef41ba279dce2d31b916e46ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ee5d42e-7f98-49fd-a4fd-ca2ab16f5db7", "node_type": "1", "metadata": {"date": "2023-03-02T02:40:02.517+00:00"}, "hash": "b3cbb840cd21adf1ee6529f1a02d7de440343ed25ae7186814ace73543527757", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a47ab701-94be-4f15-87e2-e0cea8d32571", "node_type": "1", "metadata": {}, "hash": "47bd44d61b7f13b8204bc43ea884223efeb46d5e26a2ee4f27008ff48e2cfbd9", "class_name": "RelatedNodeInfo"}}, "text": "ali:\nI am attempting to use llama_index in pythonanywhere. I keep getting the following error when i try to compile ```TypeError: issubclass() arg 1 must be a class\n```\n\nAny ideas on why this might be?\nI_cool:\ntry use python 3.10.10", "start_char_idx": 0, "end_char_idx": 232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a47ab701-94be-4f15-87e2-e0cea8d32571": {"__data__": {"id_": "a47ab701-94be-4f15-87e2-e0cea8d32571", "embedding": null, "metadata": {"date": "2023-03-02T04:13:50.775+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080704497719984180", "node_type": "4", "metadata": {"date": "2023-03-02T04:13:50.775+00:00"}, "hash": "128e1a52231ed631939d3f0fdc5fd1f9394aadc8aa01c1af72b9ae88f3626a63", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d1794b5-e6b3-4a4c-96f9-4ed77a75ae1d", "node_type": "1", "metadata": {"date": "2023-03-02T02:47:50.618+00:00"}, "hash": "90c4064c213e21547c51f13b65879d27789b923b07a341f48e22fe0333165731", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7c9e92c-6565-40f9-888d-bd9bfc06b23a", "node_type": "1", "metadata": {}, "hash": "fa7d22b5864f5c643df0deb8193fefee4791f62b8f5ad7541639cce7f1ae52a3", "class_name": "RelatedNodeInfo"}}, "text": "holodeck:\nIt looks like it works fine.\nLogan M:\nYes, the embeddings and LLM operate independently -- they aren't dependent on eachother\nholodeck:\ngreat! makes sense!", "start_char_idx": 0, "end_char_idx": 165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7c9e92c-6565-40f9-888d-bd9bfc06b23a": {"__data__": {"id_": "f7c9e92c-6565-40f9-888d-bd9bfc06b23a", "embedding": null, "metadata": {"date": "2023-03-02T05:07:49.965+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080718083867553822", "node_type": "4", "metadata": {"date": "2023-03-02T05:07:49.965+00:00"}, "hash": "726fdce216cf6fd5aa36b5ea2b562a15fc249851536f96f6d0c279d881b46f4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a47ab701-94be-4f15-87e2-e0cea8d32571", "node_type": "1", "metadata": {"date": "2023-03-02T04:13:50.775+00:00"}, "hash": "ce631f3945fce4c9a02fcfba304dd28d09213757da1405da5206af4c189efc98", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64add6ed-114d-487b-9ece-161efb186520", "node_type": "1", "metadata": {}, "hash": "3c67937b28bc4255be18e4faa1de71119273d0d63f5ef4ec69d61d85b8653ae1", "class_name": "RelatedNodeInfo"}}, "text": "bmax:\nHere is some code I have to write some summaries.. I removed response_mode=tree_summarize because I feel like it produces better summaries without it. However, it's returning way too long of texts and going past my max_tokens. It's not listening to my \"No longer than x words or tokens\" instruction. Any idea?\n\n```python\n prompt = \"\"\"Write three concise summaries, make sure each of them are unique.\\n Make sure the length of each summary is no greater than 200 tokens. \\n The podcast name: The Casey Adams Show \\n If necessary the host names are: Casey Adams, Brandon Max\\n If necessary the guest speaker's names are: Elon Musk, George Hotz\\n Return the format in a JSON Object {{\"summaries\": [\"Summary 1\", \"Summary 2\", \"Summary 3\"]}}:\"\"\"\n\n    queryBundle = QueryBundle(prompt, [\"Write it as an exciting podcast description\", \"Act as an Copywriter\", \"Try to include all topics\", \"No longer than 200 tokens\"])\n```\nshoosh:\nTry to limit the number of sentences. I. e. write smth in 5 sentences", "start_char_idx": 0, "end_char_idx": 997, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64add6ed-114d-487b-9ece-161efb186520": {"__data__": {"id_": "64add6ed-114d-487b-9ece-161efb186520", "embedding": null, "metadata": {"date": "2023-03-02T09:47:54.038+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080788565258154044", "node_type": "4", "metadata": {"date": "2023-03-02T09:47:54.038+00:00"}, "hash": "dc971275816a5c8e3b4145986392bc3222f3637d5e9d8d0e94156ee5a967c7b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7c9e92c-6565-40f9-888d-bd9bfc06b23a", "node_type": "1", "metadata": {"date": "2023-03-02T05:07:49.965+00:00"}, "hash": "43be903c19ff72cbe3386466ffab7c67e0ff128b7360589820c59e747f1f0b05", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3221280-8fc2-44b3-8c66-e732db0965cd", "node_type": "1", "metadata": {}, "hash": "e11b329af51fcd3e7da25d8ef3ac8d1182485d5340bcf2c9ac850dbdf2923e12", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nI know it should be easy but i\u2019m losing a lot of time: how can I get the nodes and similarity using GPTSimpleVectorIndex? Is it possible?\n4bidden:\nmaybe https://discord.com/channels/1059199217496772688/1080790012498563092", "start_char_idx": 0, "end_char_idx": 234, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3221280-8fc2-44b3-8c66-e732db0965cd": {"__data__": {"id_": "b3221280-8fc2-44b3-8c66-e732db0965cd", "embedding": null, "metadata": {"date": "2023-03-02T10:05:49.34+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080793075401633823", "node_type": "4", "metadata": {"date": "2023-03-02T10:05:49.34+00:00"}, "hash": "5609fb2e65fb27757042009c88e7fcc65fe9071c489501cb59fb4168922b71fc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "64add6ed-114d-487b-9ece-161efb186520", "node_type": "1", "metadata": {"date": "2023-03-02T09:47:54.038+00:00"}, "hash": "0382dd0dc7c10d9be2eea911eaa7bb1a811df8160663fcf0eb8dd6e8c64efcd4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ef7d2e0-dfeb-4828-a4e0-07ab8647dcc7", "node_type": "1", "metadata": {}, "hash": "7528ef3b673ee9ccb51e1b43464d4c55866edc8d74199588286ec03e073d5996", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\n@4bidden Where should I use the \u201cget_nodes_and_similarities_for_response\u201d? Im not using Weaviate\n4bidden:\nno clue, haven't tried it", "start_char_idx": 0, "end_char_idx": 144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ef7d2e0-dfeb-4828-a4e0-07ab8647dcc7": {"__data__": {"id_": "2ef7d2e0-dfeb-4828-a4e0-07ab8647dcc7", "embedding": null, "metadata": {"date": "2023-03-02T10:17:47.802+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080796088849678357", "node_type": "4", "metadata": {"date": "2023-03-02T10:17:47.802+00:00"}, "hash": "e64f302a6eff02ddfbd30facf3c4061108056e75ff7e49afc0e56ce521501646", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3221280-8fc2-44b3-8c66-e732db0965cd", "node_type": "1", "metadata": {"date": "2023-03-02T10:05:49.34+00:00"}, "hash": "6e445d40d379ecbd4c502cc0a76d3ce6d9bf8ca3d6eb1ee68922828e7b16a900", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86f359fd-8d94-48c9-93f2-141043c44ab7", "node_type": "1", "metadata": {}, "hash": "996a25bbbf5a71f3b63d07c1f4c932d2f99e0f049d798272124c43a4bb049d8a", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nOk i got that with ListIndex is straightforward. But it does an LLM call when it\u2019s actually not useful at all, since I would like to get just the node and the similarity\u2026\nMikko:\nSo with the list index there is no similarity at all because it's not based on finding similar nodes.\n\nYou can send queries with response_mode=\"no_text\" and then inspect the nodes included in the response: https://github.com/jerryjliu/gpt_index/issues/440#issuecomment-1434049741\nAndreaSel93:\nThis is awesome. Thx for addressing me to this @Mikko", "start_char_idx": 0, "end_char_idx": 537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86f359fd-8d94-48c9-93f2-141043c44ab7": {"__data__": {"id_": "86f359fd-8d94-48c9-93f2-141043c44ab7", "embedding": null, "metadata": {"date": "2023-03-02T11:00:16.255+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080806777836281877", "node_type": "4", "metadata": {"date": "2023-03-02T11:00:16.255+00:00"}, "hash": "988ee933af9ef42fb4749d0ee0b706534e1d786f92030c023d58141125c0c67e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ef7d2e0-dfeb-4828-a4e0-07ab8647dcc7", "node_type": "1", "metadata": {"date": "2023-03-02T10:17:47.802+00:00"}, "hash": "f21eecfae63db2786f11ab7186cf21857a00d5f74d53af366462aba3327b63da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d6ccdae-1084-4d56-96e2-b9f108e5f077", "node_type": "1", "metadata": {}, "hash": "31345784cf1cb8288214cebfb93e4c25141d3e71d746fe5547bc94b619701592", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nHello! Anyone got any good tutorials for building out a UI for a product using index? No technical background and trying to do it!! Any help welcome\nhamish:\nI had similar question last week, I stayed with the python stack using Flask web framework, this tutorial shows you how to use ChatGPT to write the code for you https://www.youtube.com/watch?v=FLoUEzG4ByU", "start_char_idx": 0, "end_char_idx": 373, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d6ccdae-1084-4d56-96e2-b9f108e5f077": {"__data__": {"id_": "2d6ccdae-1084-4d56-96e2-b9f108e5f077", "embedding": null, "metadata": {"date": "2023-03-02T13:43:46.585+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080847925342642218", "node_type": "4", "metadata": {"date": "2023-03-02T13:43:46.585+00:00"}, "hash": "c78709910d0bc7ba89988746cd1b34e7f783c07bbd09d7d2f66a27384cf8070e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86f359fd-8d94-48c9-93f2-141043c44ab7", "node_type": "1", "metadata": {"date": "2023-03-02T11:00:16.255+00:00"}, "hash": "d56cc87d751872c07f0f88dfd3730a5daacb5c5ccaf9cc2bf4905589dd844d88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e74698a8-a130-4855-875e-c033e6a11686", "node_type": "1", "metadata": {}, "hash": "2fcae28bcd78fec496218f18efe9b367982789616091251c137ce5f9df5632bb", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nHey! Any way to keep concise and short answer without truncating them? Max_token just makes a truncation. Im using GPTSImpleVectorIndex\nAndreaSel93:\nPrompt engineering and thats it?", "start_char_idx": 0, "end_char_idx": 194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e74698a8-a130-4855-875e-c033e6a11686": {"__data__": {"id_": "e74698a8-a130-4855-875e-c033e6a11686", "embedding": null, "metadata": {"date": "2023-03-02T18:01:03.24+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080912671366467827", "node_type": "4", "metadata": {"date": "2023-03-02T18:01:03.24+00:00"}, "hash": "3f1b17f7dfae166d7796576d4098658f6b34ea25b01e8d1bfce086050dd32031", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d6ccdae-1084-4d56-96e2-b9f108e5f077", "node_type": "1", "metadata": {"date": "2023-03-02T13:43:46.585+00:00"}, "hash": "c9a28ccdccf81ec16635e019341195a4cc34f6fa2d33ae26e385dee2965b85d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9428958d-ed08-416e-add6-91cd97a0bc03", "node_type": "1", "metadata": {}, "hash": "157c1bc1c480a3309864020487e2c2d9e7d70da8b905e2340cc38ef170662b47", "class_name": "RelatedNodeInfo"}}, "text": "kaveen:\nI also just wanted to start a discussion about the new ChatGPT LLM predictor, it seems like even with temperature 0 it seems unreliable for use in gpt-index's query pipelines, what's the plan for this in the future? https://github.com/jerryjliu/gpt_index/issues/590 Is this something that others have noticed too? Are there any things I can change (q&a prompt, etc) that might help?\nTeemu:\nDid you get the gpt_index version working? I've only managed to get the langchain one working\n4bidden:\nis the agent and memory working?", "start_char_idx": 0, "end_char_idx": 533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9428958d-ed08-416e-add6-91cd97a0bc03": {"__data__": {"id_": "9428958d-ed08-416e-add6-91cd97a0bc03", "embedding": null, "metadata": {"date": "2023-03-02T19:20:20.924+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080932626539483258", "node_type": "4", "metadata": {"date": "2023-03-02T19:20:20.924+00:00"}, "hash": "f1f20eb490c45c40e41055522c4cc09bd7cf555bb31d238bd4c4bea752d3cd6f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e74698a8-a130-4855-875e-c033e6a11686", "node_type": "1", "metadata": {"date": "2023-03-02T18:01:03.24+00:00"}, "hash": "1ea64e61c9de07ba46772cad064379fc58599ccbb91f4c2087aab89097dd8e52", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63f1a3ea-5c48-42aa-831f-c6f14f1ade41", "node_type": "1", "metadata": {}, "hash": "e008dff63fc9bfe5b0c4974bc12d01f0bada51315abbf360f946f6734ea07522", "class_name": "RelatedNodeInfo"}}, "text": "kaveen:\nIts not the best in what sense?\nTeemu:\nIt struggles when interacting with the embeddings, it's not as accurate. I also think the issue might be the prompt but I guess the gpt_index version doesn't have any presets either?\nb0203:\nDid you get any success in improving accuracy of \"gpt-3.5-turbo\". It seems like for some datasets, the \"text-davinci-003\" model returns accurate answers whereas \"gpt-3.5-turbo\" says something like \"not present in the given context information..\"?", "start_char_idx": 0, "end_char_idx": 483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63f1a3ea-5c48-42aa-831f-c6f14f1ade41": {"__data__": {"id_": "63f1a3ea-5c48-42aa-831f-c6f14f1ade41", "embedding": null, "metadata": {"date": "2023-03-02T19:22:15.969+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080933109073186826", "node_type": "4", "metadata": {"date": "2023-03-02T19:22:15.969+00:00"}, "hash": "bcbba90d0f027b211a41dc83df20ba93333f1cb30e554b122be82ba1bd33296c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9428958d-ed08-416e-add6-91cd97a0bc03", "node_type": "1", "metadata": {"date": "2023-03-02T19:20:20.924+00:00"}, "hash": "148ae4a19870b5100c5963f1fa64bb3a209bd01a7e1f3d296f685b97645f6093", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "281f2c6c-fa08-46a0-9ce6-ee898eca8805", "node_type": "1", "metadata": {}, "hash": "a150ed622d992ff6b2373d2ea018caf7ec8bea328a8a448f36f0b1f9098e88e4", "class_name": "RelatedNodeInfo"}}, "text": "kaveen:\nI think prompt changes + the temperature 0 change will fix it up to be like TD3\nTeemu:\nLets hope so, otherwise the model is great. Would it also make sense to then make it the preset model for llama?", "start_char_idx": 0, "end_char_idx": 207, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "281f2c6c-fa08-46a0-9ce6-ee898eca8805": {"__data__": {"id_": "281f2c6c-fa08-46a0-9ce6-ee898eca8805", "embedding": null, "metadata": {"date": "2023-03-02T19:39:29.257+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1080937442997190676", "node_type": "4", "metadata": {"date": "2023-03-02T19:39:29.257+00:00"}, "hash": "7b1fd7ee70bc5dea2eb78e0572a5bfa3b8192f820857b2a2289b6b8b723f336a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63f1a3ea-5c48-42aa-831f-c6f14f1ade41", "node_type": "1", "metadata": {"date": "2023-03-02T19:22:15.969+00:00"}, "hash": "74e8a9371dd7eaf66d810fcef1ef93ed44a46f4e4a25741e1af884a66172a8e0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00c905ab-374a-44f8-b2d7-98bead96d4d9", "node_type": "1", "metadata": {}, "hash": "7dc1b4888112dc754bd7b305de3e3475466493b360e3083689642cedf7d925de", "class_name": "RelatedNodeInfo"}}, "text": "kaveen:\nbut when the prompt is improved and the stubbornness of the model is circumvented i think it's a good idea\nTeemu:\nWhat do you mean by stubbornness?", "start_char_idx": 0, "end_char_idx": 155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00c905ab-374a-44f8-b2d7-98bead96d4d9": {"__data__": {"id_": "00c905ab-374a-44f8-b2d7-98bead96d4d9", "embedding": null, "metadata": {"date": "2023-03-03T07:15:22.433+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081112568510292018", "node_type": "4", "metadata": {"date": "2023-03-03T07:15:22.433+00:00"}, "hash": "687c3acfed7cbd07f2d6a68122f200e08655cc8b7267792f9d40fe8d47fc0af0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "281f2c6c-fa08-46a0-9ce6-ee898eca8805", "node_type": "1", "metadata": {"date": "2023-03-02T19:39:29.257+00:00"}, "hash": "eaa09eceefdaf39bebe4eb533aae19d2c29e24d14365f8e2302c3b55c7c615ce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2216ef9-2608-4ece-9037-9a38ce85b440", "node_type": "1", "metadata": {}, "hash": "04d95a7791915b99ee5bc2154d4c27bfc1bdce76ba4f8ea7ab7ac330933a35c1", "class_name": "RelatedNodeInfo"}}, "text": "ps:\nI'm trying to follow the steps in https://llamahub.ai/l/file-unstructured and while running `SimpleDirectoryReader = download_loader(\"SimpleDirectoryReader\")`, I get the following error `No such file or directory: '/Users/some_username/opt/anaconda3/lib/python3.9/site-packages/llama_index/readers/llamahub_modules/file/base.py'`  Any  ideas what I'm doing wrong and suggestions to fix it? Thank you in advance!\nRyanTed:\nsame error\uff0cthat seems the download url  404 now.  https://raw.githubusercontent.com/emptycrown/loader-hub/main/loader_hub", "start_char_idx": 0, "end_char_idx": 546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2216ef9-2608-4ece-9037-9a38ce85b440": {"__data__": {"id_": "c2216ef9-2608-4ece-9037-9a38ce85b440", "embedding": null, "metadata": {"date": "2023-03-03T09:39:58.943+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081148960430886933", "node_type": "4", "metadata": {"date": "2023-03-03T09:39:58.943+00:00"}, "hash": "302e3be90ba82cd0d3e1e42066d27b086331ac27c697ab598df7c9cafa3fef9b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00c905ab-374a-44f8-b2d7-98bead96d4d9", "node_type": "1", "metadata": {"date": "2023-03-03T07:15:22.433+00:00"}, "hash": "c26419877f9950562f18b718f9a1aa26c8a9bad3687a362d08c90461447e294a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "029526d7-3880-4704-ab7d-0c3871c03468", "node_type": "1", "metadata": {}, "hash": "3b84352f7737b8027114bc47a9d2bf845d7be7f9bf52887b89f1c0ffa528e3f2", "class_name": "RelatedNodeInfo"}}, "text": "Krumil:\nHi guys! Probably it was asked already, but is there any way to query an index while using the chat feature of the new ChatGPT model? In other words, can i have a conversation about an index while remembering the previous answer? Or every question will be isolated from the others?\nkaveen:\nNo way to have a full conversation using gpt-index natives I think, gotta build in that functionality to your app \ud83d\ude42\nKrumil:\nThanks!", "start_char_idx": 0, "end_char_idx": 429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "029526d7-3880-4704-ab7d-0c3871c03468": {"__data__": {"id_": "029526d7-3880-4704-ab7d-0c3871c03468", "embedding": null, "metadata": {"date": "2023-03-03T19:21:44.416+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081295364595908790", "node_type": "4", "metadata": {"date": "2023-03-03T19:21:44.416+00:00"}, "hash": "3d1d20bead839e0278539768359bf2ae72ee5da79076410819a6b914b20b3dc1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2216ef9-2608-4ece-9037-9a38ce85b440", "node_type": "1", "metadata": {"date": "2023-03-03T09:39:58.943+00:00"}, "hash": "d86e4e039db7a1a51231385f56f37826705f2a1c0eee9d0795f8aed98388e5c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08264b07-9918-48e6-8ca7-891f6b77e371", "node_type": "1", "metadata": {}, "hash": "7cf747b3c6c46777ac8f6cddf7c91d2422a593c0fdfbf7391c44e55674968212", "class_name": "RelatedNodeInfo"}}, "text": "\ud835\udcec\ud835\udcf1\ud835\udcfe\ud835\udceb\ud835\udceb\ud835\udd02\ud835\udcd5\ud835\udcfb\ud835\udcee\ud835\udcea\ud835\udcf4:\nanyone have any luck with the `file/unstructured` loader? after running `pip install \"unstructured[local-inference]\"` i get this error:\n\n```Exception: unstructured_inference module not found... try running pip install unstructured[local-inference] if you installed the unstructured library as a package. If you cloned the unstructured repository, try running make install-local-inference from the root directory of the repository.```\nAntonioJimeno:\nHi, we made changes to the unstructured packages that probably solved your problem.", "start_char_idx": 0, "end_char_idx": 545, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08264b07-9918-48e6-8ca7-891f6b77e371": {"__data__": {"id_": "08264b07-9918-48e6-8ca7-891f6b77e371", "embedding": null, "metadata": {"date": "2023-03-03T21:34:53.34+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081328872571801680", "node_type": "4", "metadata": {"date": "2023-03-03T21:34:53.34+00:00"}, "hash": "6e7f4ebccbfde9cb6478baded30e8a68c2ea1dd0790dd2a97cb3a0da65aa90f4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "029526d7-3880-4704-ab7d-0c3871c03468", "node_type": "1", "metadata": {"date": "2023-03-03T19:21:44.416+00:00"}, "hash": "46f11cec1685e2d1b84b95ef9ad68fe46a484818b3c11e71a162cd88f6bbec29", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d5099ff-1edb-4f09-b6fb-b7abcdd72bc7", "node_type": "1", "metadata": {}, "hash": "5f5140bf5a178190c407dbc853edbb91c51a0997a7df74dd51a5f7034b9fd651", "class_name": "RelatedNodeInfo"}}, "text": "eduardcn:\n@Teemu are you tmmtt ?\nTeemu:\nWhat's that?", "start_char_idx": 0, "end_char_idx": 52, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d5099ff-1edb-4f09-b6fb-b7abcdd72bc7": {"__data__": {"id_": "6d5099ff-1edb-4f09-b6fb-b7abcdd72bc7", "embedding": null, "metadata": {"date": "2023-03-03T21:36:47.597+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081329351800406107", "node_type": "4", "metadata": {"date": "2023-03-03T21:36:47.597+00:00"}, "hash": "f1d0679d54c6bcb60f1a53d11f860a8ee3e2cea266e309ebb7334f7b21f55ce9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08264b07-9918-48e6-8ca7-891f6b77e371", "node_type": "1", "metadata": {"date": "2023-03-03T21:34:53.34+00:00"}, "hash": "fc33a67644c2d4e3e34c270c61aa4393a6f98ee3a3ff6cc29d0ed63a742fc44d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2bc34d6b-4b9b-4fbf-a303-38df2668e487", "node_type": "1", "metadata": {}, "hash": "d59d68e020a62f35eaa1a047b083a6d344442023335d87c96fb9974a9c67b3e6", "class_name": "RelatedNodeInfo"}}, "text": "eduardcn:\nwas reading something from another teemu today, coincidence i guess\nTeemu:\nYeah probably, that's not me :capybarathink:", "start_char_idx": 0, "end_char_idx": 129, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2bc34d6b-4b9b-4fbf-a303-38df2668e487": {"__data__": {"id_": "2bc34d6b-4b9b-4fbf-a303-38df2668e487", "embedding": null, "metadata": {"date": "2023-03-03T22:04:58.59+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081336444339109948", "node_type": "4", "metadata": {"date": "2023-03-03T22:04:58.59+00:00"}, "hash": "ceb9f76cd636ab7b0e3968554aab4035292b911cc3a4c9451d789b900a109ca6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d5099ff-1edb-4f09-b6fb-b7abcdd72bc7", "node_type": "1", "metadata": {"date": "2023-03-03T21:36:47.597+00:00"}, "hash": "8d84684234054a98f97e0f801b3f93c4924c6408c23f1094152e747aee7c9419", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63a9723f-6d4c-4d39-8961-f44d9e50679e", "node_type": "1", "metadata": {}, "hash": "8d76334b628dc19ed6c15d5e368166d0d6f6fa72d35df5ab6e3b29ca03ce4de9", "class_name": "RelatedNodeInfo"}}, "text": "Martok:\nHi everyone. I'm just getting started with this, and I've got it up and running, however I'm having an issue with the \"create and refine\" process. Sometimes I get a response like \"Return the original answer. The new context is not relevant...\" I've looked through the documentation but was unable to find any way to capture the intermediate responses that are being generated.\nTeemu:\nAre you using the Chat API?\nMartok:\nYes. I was using \"from langchain import OpenAI\" but it seems I should have been using \"from langchain.llms import OpenAIChat\"\nSeems to be working as expected now.", "start_char_idx": 0, "end_char_idx": 590, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63a9723f-6d4c-4d39-8961-f44d9e50679e": {"__data__": {"id_": "63a9723f-6d4c-4d39-8961-f44d9e50679e", "embedding": null, "metadata": {"date": "2023-03-04T00:04:28.328+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081366516399882340", "node_type": "4", "metadata": {"date": "2023-03-04T00:04:28.328+00:00"}, "hash": "3283e01c8a5cd8e31631f79c9c0f0a6399fb7ff401c79e1a9d0b624a6be2212d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2bc34d6b-4b9b-4fbf-a303-38df2668e487", "node_type": "1", "metadata": {"date": "2023-03-03T22:04:58.59+00:00"}, "hash": "9632d0f09164351de0e75dc283c58c90e3e68606426750a830a2e333a6073b71", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f81febf-5601-4af7-a815-5c6b469668fe", "node_type": "1", "metadata": {}, "hash": "78bcf1f506ade9e4b2610068e70bcecfa6c1f7fac8af19455e646b655b77b959", "class_name": "RelatedNodeInfo"}}, "text": "erajasekar:\nAre there any backward compatibility issues with querying index created in older version using latest version? I created vector index using version llama-index-0.4.8, after I upgraded to latest 0.4.19, the top_k results returned nothing. I tried to install each version and on version 0.4.13, I got this error:\n\n```\nTraceback (most recent call last):\nFile \"/Users/relango/Documents/Raja/projects/thirukkural-bot/kural-bot-server/scripts/QueryTester.py\", line 34, in <module>\nvector_index = GPTSimpleVectorIndex.load_from_disk(VECTOR_INDEX_FILE)\nFile \"/opt/miniconda3/envs/untitled/lib/python3.10/site-packages/llama_index/indices/base.py\", line 469, in load_from_disk\nreturn cls.load_from_string(file_contents, **kwargs)\nFile \"/opt/miniconda3/envs/untitled/lib/python3.10/site-packages/llama_index/indices/base.py\", line 445, in load_from_string\nreturn cls.load_from_dict(result_dict, **kwargs)\nFile \"/opt/miniconda3/envs/untitled/lib/python3.10/site-packages/llama_index/indices/vector_store/base.py\", line 242, in load_from_dict\nreturn super().load_from_dict(result_dict, **config_dict, **kwargs)\nFile \"/opt/miniconda3/envs/untitled/lib/python3.10/site-packages/llama_index/indices/base.py\", line 416, in load_from_dict\ndocstore = DocumentStore.load_from_dict(\nFile \"/opt/miniconda3/envs/untitled/lib/python3.10/site-packages/llama_index/docstore.py\", line 59, in load_from_dict\nraise ValueError(\nValueError: doc_type simple_dict not found in type_to_struct. Make sure that it was registered in the index registry.\n```\n\nAlso, I would like to know if recreating indexes in latest version will fix this problem, so that I can recreate indexes.\nLogan M:\nYea there's been quite a few changes/refactors. If you don't have a lot of documents, reconstructing the index will be the easiest way to go", "start_char_idx": 0, "end_char_idx": 1805, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f81febf-5601-4af7-a815-5c6b469668fe": {"__data__": {"id_": "3f81febf-5601-4af7-a815-5c6b469668fe", "embedding": null, "metadata": {"date": "2023-03-04T01:54:27.126+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081394193764712488", "node_type": "4", "metadata": {"date": "2023-03-04T01:54:27.126+00:00"}, "hash": "3326d81b575227a7768a7fc6e1f44cf100c9c0010201aeab07e8c687b6f6c7f3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63a9723f-6d4c-4d39-8961-f44d9e50679e", "node_type": "1", "metadata": {"date": "2023-03-04T00:04:28.328+00:00"}, "hash": "b68ae81d031d0de82e83f8e751a34128ced2dab598e62d96ce3f78552e1304ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1e324fc-9d8a-4ab8-9a9d-febfeac337a7", "node_type": "1", "metadata": {}, "hash": "e396ae9bbf080af5be010657549b314451ef19f537c100025c91ba36494339cd", "class_name": "RelatedNodeInfo"}}, "text": "lianqiao:\nbut I got error of `TypeError: unsupported operand type(s) for +: 'GPTSimpleVectorIndex' and 'GPTSimpleVectorIndex'`\nAndreaSel93:\nYes i\u2019m interested too! I\u2019m not sure if constructing multiple indexes and then using a langchain agent as a router or a general index with all my documentation. To keep it flexible i would like to have multiple indices and being free to decide if merging them (like the @lianqiao request) or using a router. I have a lot of docs so i have to decide before \ud83d\ude04", "start_char_idx": 0, "end_char_idx": 497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1e324fc-9d8a-4ab8-9a9d-febfeac337a7": {"__data__": {"id_": "d1e324fc-9d8a-4ab8-9a9d-febfeac337a7", "embedding": null, "metadata": {"date": "2023-03-04T13:27:30.926+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081568608863391824", "node_type": "4", "metadata": {"date": "2023-03-04T13:27:30.926+00:00"}, "hash": "bf48b599a4b97f575c9a76300d57c34a7f2db55812bb51a54bcef28da74af73e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f81febf-5601-4af7-a815-5c6b469668fe", "node_type": "1", "metadata": {"date": "2023-03-04T01:54:27.126+00:00"}, "hash": "c7d74a426d880c1b6ed4f052f086682ca2da0fc14bc50b3dcd6cb96b72c50d0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34e8f2ac-e6e0-47b2-a176-b01dea43b296", "node_type": "1", "metadata": {}, "hash": "b26eb3d49a4906e58c0bd160e9b476c8759b41cb2caf097368c004c2237f7525", "class_name": "RelatedNodeInfo"}}, "text": "epicshardz:\nSo, having issues with inaccurate responses. I uploaded a book of the bible to embed and the ChatGPTLLMPredictor can only answer super vaguely. I asked specific questions that are easy to get context and answer and it replies with the typical \"The new context provided is not related...\" Anyone else seeing the issue that context is not properly being queried?\nzeynab:\nI have the same problem", "start_char_idx": 0, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34e8f2ac-e6e0-47b2-a176-b01dea43b296": {"__data__": {"id_": "34e8f2ac-e6e0-47b2-a176-b01dea43b296", "embedding": null, "metadata": {"date": "2023-03-05T00:59:00.378+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1081742628237881494", "node_type": "4", "metadata": {"date": "2023-03-05T00:59:00.378+00:00"}, "hash": "9dcdba02e3c69ee1cccf68fbbcefb1f06ec1803c92f654bb010c36cd758ea887", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1e324fc-9d8a-4ab8-9a9d-febfeac337a7", "node_type": "1", "metadata": {"date": "2023-03-04T13:27:30.926+00:00"}, "hash": "9900abed8035b049e2faee5fff50dace430e378a73678bd2931996f2b58a0514", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8a6a5cd5-b781-4fda-b072-992cadb878c3", "node_type": "1", "metadata": {}, "hash": "bd61b8ac8294a671b1c357e1e163480851df329a054505d5504ce5412b245098", "class_name": "RelatedNodeInfo"}}, "text": "metahash:\nHi all, I want to use the GoogleDocsReader but I want to pass it my own access_token instead of using the built in auth flow, is there a way to do that?\nsmokeoX:\ni did something like this a few weeks ago, but i would imagine its changed a lot since then", "start_char_idx": 0, "end_char_idx": 263, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8a6a5cd5-b781-4fda-b072-992cadb878c3": {"__data__": {"id_": "8a6a5cd5-b781-4fda-b072-992cadb878c3", "embedding": null, "metadata": {"date": "2023-03-05T23:06:35.724+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1082076726974234737", "node_type": "4", "metadata": {"date": "2023-03-05T23:06:35.724+00:00"}, "hash": "ef47eba0355114dc135098f55a77a6c5e2bdf544db1e8b77edaa2005279157e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34e8f2ac-e6e0-47b2-a176-b01dea43b296", "node_type": "1", "metadata": {"date": "2023-03-05T00:59:00.378+00:00"}, "hash": "46be49d7189f3a65471a12a0edaa3c3b497d41eee0325c0de2d177b0829d6777", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d10af1ae-a22b-4e0a-804c-f124de0a3ef2", "node_type": "1", "metadata": {}, "hash": "68e39697399ee2c1749ea9bb936c61f426c66618f40e335b8ab80668411ea5bb", "class_name": "RelatedNodeInfo"}}, "text": "mister_poodle:\nI\u2019m getting really bad results with the CSV loader, both simple and pandas. Records with clearly labeled fields don\u2019t seem to be able to searched or returned consistently. For example, with a field for \u201ccity\u201d I\u2019m unable to get results for records with that city (i.e. list five records ids that are in San Francisco). Any tips?\nps:\nIf you look into the `documents` created with the loader, looks like the column names (headers) aren't at all a part of the document at all. It just seems to take the values. This might be the reason why you're getting bad responses.", "start_char_idx": 0, "end_char_idx": 580, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d10af1ae-a22b-4e0a-804c-f124de0a3ef2": {"__data__": {"id_": "d10af1ae-a22b-4e0a-804c-f124de0a3ef2", "embedding": null, "metadata": {"date": "2023-03-06T07:37:21.184+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1082205263349678151", "node_type": "4", "metadata": {"date": "2023-03-06T07:37:21.184+00:00"}, "hash": "aa4c38cecd6c3cb2b982dc292643ba6a6d5b55b6e56f518344e2fcb36c2ba78e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8a6a5cd5-b781-4fda-b072-992cadb878c3", "node_type": "1", "metadata": {"date": "2023-03-05T23:06:35.724+00:00"}, "hash": "7242e73d82d9ea6fdc13b23a11adf3144e200f874310dfec75519e7a8ddf5be7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa879dee-1279-491d-93f4-abfab8c8a7ca", "node_type": "1", "metadata": {}, "hash": "f65b1a17b903f58c9211173b70147fb5469eb43f7bc9934809e387f8338367d7", "class_name": "RelatedNodeInfo"}}, "text": "holodeck:\nIs it my imagination or am I getting worse results with embeddings and queries EVEN with davinci. The previous versions of GPT-Index seemed magical, however the queries against generated embeddings seem to result in \"The context information does not mention anything about....\"... did the internal prompts change or should i use some optimized settings for the Vector creation, I've been using the library for over a month and def see a difference. hopefully a simple fix. I'm using documents = SimpleWebPageReader(html_to_text=True).load_data([url]) and index = GPTSimpleVectorIndex(..)\nSandkoan:\nI've actually felt the same. The conspiracy theorist in me believes it may be an attempt at driving us towards turbo.\nholodeck:\nThe openai playground still works well for my use case on davinci, this seems more like the embedding search returned 'text chunk' not containing the correct information... i.e. I know the keyword is there in the embedding however it's not creating a useful answer as frequently. This def started happening around the time of the gpt version upgrade for turbo, but after the llama rename.\nSandkoan:\nThe playground seems to work fine, but API calls are for whatever reason not as consistent. Are you messing with the `should_use_node_filter` by any chance? Because if not, it may be time to jump ship to better quality embeddings, as I myself am considering.", "start_char_idx": 0, "end_char_idx": 1393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa879dee-1279-491d-93f4-abfab8c8a7ca": {"__data__": {"id_": "fa879dee-1279-491d-93f4-abfab8c8a7ca", "embedding": null, "metadata": {"date": "2023-03-06T08:03:22.925+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1082211813766213692", "node_type": "4", "metadata": {"date": "2023-03-06T08:03:22.925+00:00"}, "hash": "77d71e52d9847611cf1b593ef17f7aa05dc9abf130e168875d08a1bef932459c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d10af1ae-a22b-4e0a-804c-f124de0a3ef2", "node_type": "1", "metadata": {"date": "2023-03-06T07:37:21.184+00:00"}, "hash": "103e84ac27a1b89a5b69eae9bf25aa2abb9a8e654a3b3585c9f41c0a53ebd4d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f9dc698-114f-4595-ac80-9b87b7ac6666", "node_type": "1", "metadata": {}, "hash": "eb0dd8e546ece30fc6571806b0ae0efa661cac0cbcae86f4fa80e7973c1901a7", "class_name": "RelatedNodeInfo"}}, "text": "holodeck:\nlove GPT-index, def want to make it work. Not changing that node_filter option right now.  @jerryjliu98  hopefully you can help!\nSandkoan:\nOf course, continue using gpt_index. Just swap out the embeddings.", "start_char_idx": 0, "end_char_idx": 215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f9dc698-114f-4595-ac80-9b87b7ac6666": {"__data__": {"id_": "4f9dc698-114f-4595-ac80-9b87b7ac6666", "embedding": null, "metadata": {"date": "2023-03-06T14:08:02.411+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1082303582981869649", "node_type": "4", "metadata": {"date": "2023-03-06T14:08:02.411+00:00"}, "hash": "b97836a09b927f9b6127f5dce31cab144d27347c863932a2d81b2fad0d6dbc00", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa879dee-1279-491d-93f4-abfab8c8a7ca", "node_type": "1", "metadata": {"date": "2023-03-06T08:03:22.925+00:00"}, "hash": "ddca8f80b6b3cc60f0df6f8ab322dd93f3069d0371c8f097c883d454e721f82f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad3d827b-5969-4685-91d2-69e2cf66e513", "node_type": "1", "metadata": {}, "hash": "01d69c73c33f9296cbee5baa487e12be8ea28fc99996adff45d0258a11c0b3ef", "class_name": "RelatedNodeInfo"}}, "text": "Craiglal:\nHi everyone, is there a way to user gpt-3.5-turbo model with GPTSimpleVectorIndex in a chat format, so the app will remember all answer and will be able to query the docs?\nSmth like in this example https://github.com/jerryjliu/gpt_index/blob/main/examples/langchain_demo/LangchainDemo.ipynb, but with another model. Or may be another approach to this problem?\nLogan M:\nOne approach, in cell 5 of that notebook, you can set the llm to accordingly: `llm=OpenAI(temperature=0, model_name='gpt-3.5-turbo')`\nCraiglal:\nI tried it, and got an error that agency calls v1/completion not v1/chat/completion\nLogan M:\nIs your langchain package up to date? `pip install --upgrade langchain`\nCraiglal:\nI\u2019ll try to update it, maybe it is the problem", "start_char_idx": 0, "end_char_idx": 744, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad3d827b-5969-4685-91d2-69e2cf66e513": {"__data__": {"id_": "ad3d827b-5969-4685-91d2-69e2cf66e513", "embedding": null, "metadata": {"date": "2023-03-07T20:57:11.353+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1082768936573075606", "node_type": "4", "metadata": {"date": "2023-03-07T20:57:11.353+00:00"}, "hash": "0d9844b9386bbfb7388d373841cc63b1d6b6b764f908ff98d65cda68c2d77596", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4f9dc698-114f-4595-ac80-9b87b7ac6666", "node_type": "1", "metadata": {"date": "2023-03-06T14:08:02.411+00:00"}, "hash": "84a71ec1685168ff60245893c2e5ce86d4f7ec530779dc55d3b32adc098fe3ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "051c2198-3649-455e-9c93-aef783b352c8", "node_type": "1", "metadata": {}, "hash": "b3def4d5863062fff838e274e046e8851a4538bc534cafdd04389975a0e106fe", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nIs the knowledge graph the right tool to choose the right index among a series of indices? Or a tree index is better? Ive been stick on that for days\ud83e\udd26\ud83c\udffb\u200d\u2642\ufe0f i mean tree index with simple indices \u201cworks\u201d (with just few documents) but its completely based on the set_text\u2026and with thousands of documents is hard define a right description! Is there a solution for that?\nLogan M:\nI totally agree! I don't think there's a clear or straightforward answer here sadly. Depending on what your documents are, there might be a way to pick out key attributes ahead of time to use for set_text, otherwise, relying on the LLM to make a summary for the set_text should also work", "start_char_idx": 0, "end_char_idx": 675, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "051c2198-3649-455e-9c93-aef783b352c8": {"__data__": {"id_": "051c2198-3649-455e-9c93-aef783b352c8", "embedding": null, "metadata": {"date": "2023-03-08T16:50:14.484+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083069177985765386", "node_type": "4", "metadata": {"date": "2023-03-08T16:50:14.484+00:00"}, "hash": "ed1e2ea1e50748b888970869a03d11b1b2a972a071ceb6c2d4abb7cfa3733a37", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad3d827b-5969-4685-91d2-69e2cf66e513", "node_type": "1", "metadata": {"date": "2023-03-07T20:57:11.353+00:00"}, "hash": "4dab02669477f6e4d7771b565b532ed1fb046d659fca9b195deb6a3e1828f106", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1d0d185-9140-46f8-b47c-94ee98de1934", "node_type": "1", "metadata": {}, "hash": "4510cf41ad030f43e516fb221b8d7b8654ed2a42e7683d541dad918e0983a308", "class_name": "RelatedNodeInfo"}}, "text": "Ishaan - berri.ai:\nHey I've been getting this error when trying to run GPT index imports \n\nfrom llama_index import PromptHelper, SimpleWebPageReader, GPTSimpleVectorIndex\n  File \"/usr/local/lib/python3.8/site-packages/llama_index/__init__.py\", line 47, in <module>\n    from llama_index.langchain_helpers.memory_wrapper import GPTIndexMemory\n  File \"/usr/local/lib/python3.8/site-packages/llama_index/langchain_helpers/memory_wrapper.py\", line 5, in <module>\n    from langchain.chains.base import Memory\nImportError: cannot import name 'Memory' from 'langchain.chains.base' (/usr/local/lib/python3.8/site-packages/langchain/chains/base.py)\n\nI'm on llama_index 0.4.22\nLogan M:\nTry upgrading both langchain and llama_index", "start_char_idx": 0, "end_char_idx": 719, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1d0d185-9140-46f8-b47c-94ee98de1934": {"__data__": {"id_": "e1d0d185-9140-46f8-b47c-94ee98de1934", "embedding": null, "metadata": {"date": "2023-03-08T18:41:38.474+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083097212671766590", "node_type": "4", "metadata": {"date": "2023-03-08T18:41:38.474+00:00"}, "hash": "e77cd3ab35f0890a4e567629322399649990f10276baaf325a34b57ba629c772", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "051c2198-3649-455e-9c93-aef783b352c8", "node_type": "1", "metadata": {"date": "2023-03-08T16:50:14.484+00:00"}, "hash": "c65b6e42e9fd3c81e1ccdf2dcd47db762f87b5063510970c83c6f6b1c828100c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32ee192a-33d3-4def-b9c6-57cc59f14b6b", "node_type": "1", "metadata": {}, "hash": "0adb4c6aff7095fb3f8df265bc8fe223d082a4a7fcd83876245eead41c36d832", "class_name": "RelatedNodeInfo"}}, "text": "evets:\nRunning into the issue `ModuleNotFoundError: No module named 'langchain.memory'` when importing from `llama_index`. did `pip install langchain`.\nLogan M:\nTry `pip install --upgrade langchain llama_index` instead\nracheykat:\nI feel like I must be missing something. Getting a \"ModuleNotFoundError\" for 'llama_index' when I do ```from llama_index import GPTSimpleVectorIndex, SimpleDirectoryReader```\n\nI'm using the latest version of miniconda3, on Python 3.11.0, and I made sure to upgrade to the latest version of llama_index and langchain. \n\nWhen I run this on colab, it seems to work, but I'm wondering if I've got something configured wrong on my machine.\nFairlyAverage:\nPerhaps something related to a Python venv?", "start_char_idx": 0, "end_char_idx": 723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32ee192a-33d3-4def-b9c6-57cc59f14b6b": {"__data__": {"id_": "32ee192a-33d3-4def-b9c6-57cc59f14b6b", "embedding": null, "metadata": {"date": "2023-03-08T18:51:21.398+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083099657632223342", "node_type": "4", "metadata": {"date": "2023-03-08T18:51:21.398+00:00"}, "hash": "0a71ace7c4805a582c56ac76ea6e7f7a071db1fca5580aad24ac46155e3fae96", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e1d0d185-9140-46f8-b47c-94ee98de1934", "node_type": "1", "metadata": {"date": "2023-03-08T18:41:38.474+00:00"}, "hash": "0dabf4c28a248c68ae5b2b0f6362b958606a5b95514fd7e2af640b085b5a93a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "314e15fe-e7fd-464b-b211-92402afdc101", "node_type": "1", "metadata": {}, "hash": "6edc6aed3709e03fc8aa20bd887a4299d87f65865e33404647381907d1e3df41", "class_name": "RelatedNodeInfo"}}, "text": "racheykat:\nI've been having this same issue and so I just tried the upgrade suggestion. I have this message: \"ImportError: cannot import name 'AI21' from 'langchain.llms' (/usr/local/lib/python3.7/site-packages/langchain/llms/__init__.py)\"\nMikko:\nLangchain needs Python >= 3.8 most likely", "start_char_idx": 0, "end_char_idx": 288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "314e15fe-e7fd-464b-b211-92402afdc101": {"__data__": {"id_": "314e15fe-e7fd-464b-b211-92402afdc101", "embedding": null, "metadata": {"date": "2023-03-08T19:25:14.419+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083108184740339742", "node_type": "4", "metadata": {"date": "2023-03-08T19:25:14.419+00:00"}, "hash": "19238d73d2d30531b6257c1f45848bf4d1ea024b56e07a6fd6b6c649ce22fcde", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32ee192a-33d3-4def-b9c6-57cc59f14b6b", "node_type": "1", "metadata": {"date": "2023-03-08T18:51:21.398+00:00"}, "hash": "1cb67818bff3e746017e3763a2fb319b2dab9ac5320798ace83ca0935ed2f263", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0be76cdf-42fe-491d-bcc7-096a73e82108", "node_type": "1", "metadata": {}, "hash": "9d320807423164fc4a71a1f256a9f9a914bb2036e1009d28ef328a8eb11683cd", "class_name": "RelatedNodeInfo"}}, "text": "racheykat:\nI downgraded my Python to version 3.7.9 since the directory path in the error message says \"python3.7\" \n\nBut I'm still getting the message \ud83d\ude26\nMikko:\nIt's still less than 3.8.1 which is listed as a requirement by Langchain in Pypi https://pypi.org/project/langchain/. Try 3.9 or 3.10 \ud83d\ude42\nracheykat:\nAh! I read your greater than/equal to wrong. I was on Python 3.11.2. I'll try 3.10", "start_char_idx": 0, "end_char_idx": 388, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0be76cdf-42fe-491d-bcc7-096a73e82108": {"__data__": {"id_": "0be76cdf-42fe-491d-bcc7-096a73e82108", "embedding": null, "metadata": {"date": "2023-03-08T19:57:15.31+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083116241541156945", "node_type": "4", "metadata": {"date": "2023-03-08T19:57:15.31+00:00"}, "hash": "469fd96c7fec438ab96e0fdd989043d3e90191fe69c281761cf4d381ede59ddd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "314e15fe-e7fd-464b-b211-92402afdc101", "node_type": "1", "metadata": {"date": "2023-03-08T19:25:14.419+00:00"}, "hash": "fc2d3f79b10a8ccb1a1ce79894c6f4338f517870ca12fa09a01f55167d58eee7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9978d0b-6640-4cc9-9387-c0ea050fe323", "node_type": "1", "metadata": {}, "hash": "6ea7a0eaf9c41030fa82f1bc0c931cbd91fcbf969261d917f254c409fd26831f", "class_name": "RelatedNodeInfo"}}, "text": "racheykat:\nOkay, I'm on Python 3.10.10. I uninstalled and reinstalled both the langchain and llama_index packages. When I reinstalled those packages, I got the message \"gpt-index 0.4.6 requires tenacity<8.2.0, but you have tenacity 8.2.2 which is incompatible\"\n\nI did **python3 -m pip uninstall \"tenacity==8.2.2** and then **python3 -m pip install \"tenacity==8.1.0\"**\n\nAfter doing that, I tried uninstalling and reinstalling the langchain and llama_index packages. Again, I got the message about \"gpt-index 0.4.6 requires tenacity<8.2.0, but you have tenacity 8.2.2 which is incompatible\" I have no idea if that's what's causing my issue, which is that I am still getting this error: \"ImportError: cannot import name 'AI21' from 'langchain.llms' (/usr/local/lib/python3.7/site-packages/langchain/llms/__init__.py)\"\nLogan M:\nThat error still has python3.7 in the path \ud83e\udd14\n\nAre you using conda? Might be easier to start with a fresh env\n\n`conda create --name llama_index python=3.11`\n`conda activate llama_index`\n`pip install llama_index langchain`\nracheykat:\nI just checked and I'm not \ud83d\ude05  I don't have any package management system installed that I know of. I'm not really a programmer and only do this kind of thing sporadically. I'll try that!", "start_char_idx": 0, "end_char_idx": 1242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9978d0b-6640-4cc9-9387-c0ea050fe323": {"__data__": {"id_": "a9978d0b-6640-4cc9-9387-c0ea050fe323", "embedding": null, "metadata": {"date": "2023-03-08T20:20:57.713+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083122207531749426", "node_type": "4", "metadata": {"date": "2023-03-08T20:20:57.713+00:00"}, "hash": "2f20890b95b7098ce5f1b0bded8e1a94cb8876c5627095a7a548676a2a17405a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0be76cdf-42fe-491d-bcc7-096a73e82108", "node_type": "1", "metadata": {"date": "2023-03-08T19:57:15.31+00:00"}, "hash": "a6551e95368c5fd51e8d230ac10eed8021c88b7326f2bdb192e1fb17db39d746", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e6ddccd-d742-42d2-a958-f7a1f3c8fc0b", "node_type": "1", "metadata": {}, "hash": "9b8757952a0b6d9d8d6f6c453a470244f14af215c2d45a71aa7ccb74eeedf9bd", "class_name": "RelatedNodeInfo"}}, "text": "evets:\nI have about ~40,000 rows from a database with some basic chat logs from a discord. Running `GPTSimpleVectorIndex()` on the dataset and it's been running for 42+ minutes. Fairly standard?\nLogan M:\nSounds about right, it has to send ~40,000 requests to openAI \ud83d\ude05\nevets:\nmakes sense -- I'm guessing that's hitting the embeddings API?", "start_char_idx": 0, "end_char_idx": 337, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e6ddccd-d742-42d2-a958-f7a1f3c8fc0b": {"__data__": {"id_": "8e6ddccd-d742-42d2-a958-f7a1f3c8fc0b", "embedding": null, "metadata": {"date": "2023-03-09T09:36:58.098+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083322529105575956", "node_type": "4", "metadata": {"date": "2023-03-09T09:36:58.098+00:00"}, "hash": "b228e13520f098269c2978adcdd71a6d66b5dd967a7cafe053babca67392a610", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9978d0b-6640-4cc9-9387-c0ea050fe323", "node_type": "1", "metadata": {"date": "2023-03-08T20:20:57.713+00:00"}, "hash": "7e6618ed870e8733a04738c867fc9576a0a3dab839efee1f3d4b46365e432214", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba383ded-7ac1-4191-8894-9f7db7aaaf3a", "node_type": "1", "metadata": {}, "hash": "b5b5c83a5f178b6f7d1082f1cef4d6b7692c294402fa192b5aa9977690be7a22", "class_name": "RelatedNodeInfo"}}, "text": "tomoyo:\nany idea about \" A single term is larger than the allowed chunk size. \"\ntomoyo:\ni split a long sentence to two sentences, it works\nafewell:\nanother way of handling this if you run into it again is to adjust your text splitter, you can see the llamaindex setting in the base index class: https://gpt-index.readthedocs.io/en/latest/reference/indices.html  ... this uses splitters from langchain, and you can learn more about the different splitter options here: https://langchain.readthedocs.io/en/latest/reference/modules/text_splitter.html?highlight=splitter\ntomoyo:\nthanks a lot \ud83e\udd29", "start_char_idx": 0, "end_char_idx": 589, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba383ded-7ac1-4191-8894-9f7db7aaaf3a": {"__data__": {"id_": "ba383ded-7ac1-4191-8894-9f7db7aaaf3a", "embedding": null, "metadata": {"date": "2023-03-09T19:39:23.15+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083474132441772113", "node_type": "4", "metadata": {"date": "2023-03-09T19:39:23.15+00:00"}, "hash": "c82995951e28585de01f19e3efd684118184060e76d09394a8a624f527d94235", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e6ddccd-d742-42d2-a958-f7a1f3c8fc0b", "node_type": "1", "metadata": {"date": "2023-03-09T09:36:58.098+00:00"}, "hash": "79990940482492b826fb29f5b09f666195b64db4bd7fcda09606cea9aef5aada", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec2c95de-4d17-411c-b6db-d85b99d869ad", "node_type": "1", "metadata": {}, "hash": "6d82e3dc7a51eab3c9a10470f27ff9f836f2465b79a586517f8930a0220419fa", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nWhenever I attempt to upload a document with metadata with QdrantIndex, it seems as though the metadata is stripped and embedded into the text of the document, as opposed to acting as a separate field. For instance, this\n```\nDocument(text=\"\\n\\nAlter this list to specify the scope of permissions your application is requesting access to\\nscopes = ['read_vehicle_info', 'read_odometer', ...]\\n\\n\", doc_id='466572aa-2ffd-477f-88f5-63b71b233e6c', embedding=None, extra_info={'path': 'tests/e2e/test_smartcar.py'})\n```\nbecomes something like\n```\nDocument(text=\"path: tests/unit/test_smartcar.py\\n\\n\\n\\nAlter this list to specify the scope of permissions your application is requesting access to\\nscopes = ['read_vehicle_info', 'read_odometer', ...]\\n\\n\", doc_id='466572aa-2ffd-477f-88f5-63b71b233e6c', embedding=None})\n```\nIs this by design?\nSandkoan:\nMade pr to fix this", "start_char_idx": 0, "end_char_idx": 877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec2c95de-4d17-411c-b6db-d85b99d869ad": {"__data__": {"id_": "ec2c95de-4d17-411c-b6db-d85b99d869ad", "embedding": null, "metadata": {"date": "2023-03-09T22:40:48.42+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083519788573261864", "node_type": "4", "metadata": {"date": "2023-03-09T22:40:48.42+00:00"}, "hash": "424574ca72bf2d1257567d09c8efab1eaf170ae29d613015c0bdae5398a9bb1b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba383ded-7ac1-4191-8894-9f7db7aaaf3a", "node_type": "1", "metadata": {"date": "2023-03-09T19:39:23.15+00:00"}, "hash": "98d2a448bea7ab0a98e2988c84f2307f3883cea0311df47995df89c32422ab06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67bcda7d-2f1a-42b7-a88e-544f799ed618", "node_type": "1", "metadata": {}, "hash": "2fa85646268897f9d05d80967bb9026cdb72c26b2d6a20636e5cef97e22a757b", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\ni am seeing: `FileNotFoundError: [Errno 2] No such file or directory: '/Users/me/.pyenv/versions/3.9.2/lib/python3.9/site-packages/llama_index/readers/llamahub_modules/file/base.py'` after upgrading to latest version\nLogan M:\nMaybe open a github issue for this one... \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67bcda7d-2f1a-42b7-a88e-544f799ed618": {"__data__": {"id_": "67bcda7d-2f1a-42b7-a88e-544f799ed618", "embedding": null, "metadata": {"date": "2023-03-10T01:28:22.418+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083561958097289216", "node_type": "4", "metadata": {"date": "2023-03-10T01:28:22.418+00:00"}, "hash": "048130c1c50fdda32abffc14c20e30f86711b30175c1bfcc492896aaeba8cd45", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec2c95de-4d17-411c-b6db-d85b99d869ad", "node_type": "1", "metadata": {"date": "2023-03-09T22:40:48.42+00:00"}, "hash": "7881cff6285ed8fdd5dceec10ca8a4d1f901c71feccfacdc82416e7c4651bffc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0238478e-c1d2-47f7-ae7f-60fa58523fe4", "node_type": "1", "metadata": {}, "hash": "2444e1013a7c447af276e453731131bdab8b99cd7e5dd60a4a15a5cc6b3b739a", "class_name": "RelatedNodeInfo"}}, "text": "metahash:\nHi all, I cant seem to figure out how to load and query a pinecone index. I have a pinecone index stored in pinecone. I want to load that index and query it at a different time than index construction. I get an error when I use the vanilla query.index() function, it expects the query to come in vector form. How can I resolve this issue?\nintvijay:\nAny support on same query ?", "start_char_idx": 0, "end_char_idx": 386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0238478e-c1d2-47f7-ae7f-60fa58523fe4": {"__data__": {"id_": "0238478e-c1d2-47f7-ae7f-60fa58523fe4", "embedding": null, "metadata": {"date": "2023-03-10T02:11:44.936+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083572873848963154", "node_type": "4", "metadata": {"date": "2023-03-10T02:11:44.936+00:00"}, "hash": "7ceed07e5c0f817f0bdcc3fb3ee05d996a168806a502592dcad6240d4d2b4dc0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67bcda7d-2f1a-42b7-a88e-544f799ed618", "node_type": "1", "metadata": {"date": "2023-03-10T01:28:22.418+00:00"}, "hash": "c8ed3cfd36f4580f5dde6bc9db095e733dac1930c7fce62535c72176a02ef549", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25d3dc39-ebc5-4488-865a-bbf06c0193bb", "node_type": "1", "metadata": {}, "hash": "02baed8f061b7763b16ed0b171d7504b42b3f092b139eab05f054d8f8beef151", "class_name": "RelatedNodeInfo"}}, "text": "Danielh Carranza:\nHow do you save and load a GPTChromaIndex correctly? I tried with save_to_disk but didn't save my vectore store\nTomTom101:\nNo need to save, it persists on exit, by default in the .chromadb folder", "start_char_idx": 0, "end_char_idx": 213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25d3dc39-ebc5-4488-865a-bbf06c0193bb": {"__data__": {"id_": "25d3dc39-ebc5-4488-865a-bbf06c0193bb", "embedding": null, "metadata": {"date": "2023-03-10T05:15:43.976+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083619174938595388", "node_type": "4", "metadata": {"date": "2023-03-10T05:15:43.976+00:00"}, "hash": "ce980c013b8d051ee5a863dbd2a624fae24f96c906f346efaa91c6550036638d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0238478e-c1d2-47f7-ae7f-60fa58523fe4", "node_type": "1", "metadata": {"date": "2023-03-10T02:11:44.936+00:00"}, "hash": "8a2f0d1cbf63557bbeb422dba1bf3c7ada127a0aa07e3c4e932cf04ad76d8885", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7002a959-e16c-4f6e-8a2e-784d3819982e", "node_type": "1", "metadata": {}, "hash": "b07ca77b9df8c0cfbb808c0ac98b6f2049a34957b98289220d133b68e890b5fc", "class_name": "RelatedNodeInfo"}}, "text": "Danielh Carranza:\nEvery time I try save a GPTChromaIndex and persist  the db in client settings, then I try to load it, and it says that my \"Index is not initialized\", Does anyone knows how to properly load a GPTChromaIndex?\nxevgeny:\nIt was answered earlier, see this thread https://discord.com/channels/1059199217496772688/1085257567686635630/1085564011908714506", "start_char_idx": 0, "end_char_idx": 363, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7002a959-e16c-4f6e-8a2e-784d3819982e": {"__data__": {"id_": "7002a959-e16c-4f6e-8a2e-784d3819982e", "embedding": null, "metadata": {"date": "2023-03-10T14:13:15.04+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083754445705326673", "node_type": "4", "metadata": {"date": "2023-03-10T14:13:15.04+00:00"}, "hash": "bd23f0462e23bea25312f415a7c64c6c8338e4afcf46cd443a1f2052324c6845", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25d3dc39-ebc5-4488-865a-bbf06c0193bb", "node_type": "1", "metadata": {"date": "2023-03-10T05:15:43.976+00:00"}, "hash": "6cd9a22192600304bf5c80eec32b01b7eb7d953542b238e906a2e03c742fbcf7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e916b02-a69f-486e-bec0-5e02f5f7cf54", "node_type": "1", "metadata": {}, "hash": "2422c2f3dd8a230de343b5b4e2b3c45c0c3019e0c9fa4897cd2f5d90a836b97b", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\ncan i use javascript for llamaindex?\nLogan M:\nSadly no (for now)\n\nLlama index is a pretty data heavy tool, which is a perfect fit for the backend. I suggest making a flask api (or fastAPI, very similar library) in python and serve requests coming from javascript. \n\nHere's a an example if you need one: https://github.com/logan-markewich/llama_index_starter_pack\nMeathead:\nIt's very quick and easy to do with FastAPI to Javascript. @tshu  Take you an hour to learn FastAPI.\ntshu:\nand where do u host fast api servers for free", "start_char_idx": 0, "end_char_idx": 531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e916b02-a69f-486e-bec0-5e02f5f7cf54": {"__data__": {"id_": "3e916b02-a69f-486e-bec0-5e02f5f7cf54", "embedding": null, "metadata": {"date": "2023-03-10T14:32:49.558+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083759371990859888", "node_type": "4", "metadata": {"date": "2023-03-10T14:32:49.558+00:00"}, "hash": "59f1ed7d5f3d8d4fc4fbb932a038fcf950e601bdf0375bd3446d7990ba53ed56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7002a959-e16c-4f6e-8a2e-784d3819982e", "node_type": "1", "metadata": {"date": "2023-03-10T14:13:15.04+00:00"}, "hash": "e50b37f954f6f7b3e6faa22feec1edd556468a5ba6466373765139479c8b190e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "178bc042-4ee9-4e5c-ac33-45f7f571f897", "node_type": "1", "metadata": {}, "hash": "a3be1c0dc52134477ac2266d5c29a1e01511b057e15accc054eab1adf84791a7", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\nMaybe even submit a fastapi example to the starter pack? \ud83d\ude4f\ud83d\ude06\nMeathead:\nWould like to get my head around how this works first. haha\nLogan M:\nDM me if you have any questions! Hopefully it's mostly self-explanatory (i hope). The most complicated thing was setting up the server with the lock around the index in that separate index server (it's only needed if you are letting people insert new documents)\nsmokeoX:\ni struggled a lot with the dependencies on this :/", "start_char_idx": 0, "end_char_idx": 469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "178bc042-4ee9-4e5c-ac33-45f7f571f897": {"__data__": {"id_": "178bc042-4ee9-4e5c-ac33-45f7f571f897", "embedding": null, "metadata": {"date": "2023-03-10T14:36:32.795+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083760308314706031", "node_type": "4", "metadata": {"date": "2023-03-10T14:36:32.795+00:00"}, "hash": "310a915127650713c5d799b0ac16ac57e8d85c8dcd180837aed30ead1faa4c00", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e916b02-a69f-486e-bec0-5e02f5f7cf54", "node_type": "1", "metadata": {"date": "2023-03-10T14:32:49.558+00:00"}, "hash": "a28959dbde8ffcbb9e3efbf86763449ac26f397d04d040b450d8b5cc5b6db8c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2549f8fa-ee84-4bd8-9922-49c97a940359", "node_type": "1", "metadata": {}, "hash": "adedf2eae320d8433c0193dfd1039ce9714411f8919a6d292061075f806b60d7", "class_name": "RelatedNodeInfo"}}, "text": "kkkkkkk:\nCan you give an example of a conversation using chatGPT? Everything on the Internet is wrong\ud83d\ude29\ntshu:\ni ned this too.\nhttps://github.com/jerryjliu/gpt_index/blob/main/examples/vector_indices/SimpleIndexDemo-ChatGPT.ipynb\ni found this somewhere but it does not work like chat interface", "start_char_idx": 0, "end_char_idx": 291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2549f8fa-ee84-4bd8-9922-49c97a940359": {"__data__": {"id_": "2549f8fa-ee84-4bd8-9922-49c97a940359", "embedding": null, "metadata": {"date": "2023-03-10T15:50:43.882+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083778977526722611", "node_type": "4", "metadata": {"date": "2023-03-10T15:50:43.882+00:00"}, "hash": "8fa54fcf01e3c92299b8c5e9a9467fab1bbd02e353daf09d2f3a22d0fc9f7029", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "178bc042-4ee9-4e5c-ac33-45f7f571f897", "node_type": "1", "metadata": {"date": "2023-03-10T14:36:32.795+00:00"}, "hash": "b41f74070d99c201a1ba7a1cb912279ebec8aa2bc3ecae56bc085f3cbdfb3353", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6f5f444-0ca1-4bc7-b7e6-45e336c32526", "node_type": "1", "metadata": {}, "hash": "0dd3a97eb9c22583ff003124c8f06aad11cef07c3726d35cef243b37699322cf", "class_name": "RelatedNodeInfo"}}, "text": "pdupanov:\nHi. Can we read a PDF file directly from a URL, like the one here: http://eblues.eu/wp-content/uploads/2019/07/TOPIC-5.1.-Defining-the-product-and-the-brand.pdf ? Can it be parsed with SimpleDirectoryReader() or another data connector, without saving it to disk and reading it from there?\nI tried with BytesIO() and loading it with SimpleDirectoryReader(), but there is an error:\nTypeError: expected str, bytes or os.PathLike object, not _io.BytesIO\npdupanov:\nTo answer the question above:\nThere is a question here about SimpleDirectoryReader() and the formats it supports: https://github.com/jerryjliu/gpt_index/issues/647\nIt has a reply with a link to a file with the readers: https://github.com/jerryjliu/gpt_index/blob/main/gpt_index/readers/file/base.py\nAmong the readers, there is PDFParser() too, that is in docs_parser.py: https://github.com/jerryjliu/gpt_index/blob/c9ee3eb18226c985884f0b1e452207a1c8669b5a/gpt_index/readers/file/docs_parser.py#L12\n\nInside, PDFParser() uses PyPDF2.PdfReader(), that can take\nio.BytesIO(response.content) from\nresponse = requests.get(url)\nand parse the PDF to text string. Instead of using SimpleDirectoryReader(), as it takes a path but not bytes stream, PyPDF2.PdfReader() can be used directly, and then the text added to a Document, and specifying doc_id too.", "start_char_idx": 0, "end_char_idx": 1314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6f5f444-0ca1-4bc7-b7e6-45e336c32526": {"__data__": {"id_": "d6f5f444-0ca1-4bc7-b7e6-45e336c32526", "embedding": null, "metadata": {"date": "2023-03-10T16:45:46.397+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1083792829278584843", "node_type": "4", "metadata": {"date": "2023-03-10T16:45:46.397+00:00"}, "hash": "3ee432c49f3fd6325064da9f65a219156597324bbf57358db504e5659ebd564e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2549f8fa-ee84-4bd8-9922-49c97a940359", "node_type": "1", "metadata": {"date": "2023-03-10T15:50:43.882+00:00"}, "hash": "83a8a43d6b70ddac12ce6c62346571ee0d31debcc581c027e90985a58a74a138", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2464655d-221b-42da-aea0-59de1e1a51bd", "node_type": "1", "metadata": {}, "hash": "a8d5594da35ee96f4c8eb3a899bd4bb586b9987b01749ee679155a1e0c7db78a", "class_name": "RelatedNodeInfo"}}, "text": "richardblythman | Algovera.ai:\nTrying: from gpt_index import SimpleDirectoryReader\nGives: ImportError: cannot import name 'AIMessage' from 'langchain.schema' (/home/richard/miniconda3/lib/python3.8/site-packages/langchain/schema.py)\n\nMaybe because of recent updates to LangChain?\ntshu:\ndid u find the solution", "start_char_idx": 0, "end_char_idx": 309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2464655d-221b-42da-aea0-59de1e1a51bd": {"__data__": {"id_": "2464655d-221b-42da-aea0-59de1e1a51bd", "embedding": null, "metadata": {"date": "2023-03-11T12:09:16.14+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084085632562888734", "node_type": "4", "metadata": {"date": "2023-03-11T12:09:16.14+00:00"}, "hash": "6bae9d0a0103927385ccd7dfb697ed968a8789555b76bc40560c3232806fd5a0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6f5f444-0ca1-4bc7-b7e6-45e336c32526", "node_type": "1", "metadata": {"date": "2023-03-10T16:45:46.397+00:00"}, "hash": "5a65b247dd1cd867f60129e610c4ede3dcd25edf8f42a2b8faac6175674ba308", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a393f9c8-80a7-4402-a6c6-58761f00f8c3", "node_type": "1", "metadata": {}, "hash": "5e3d7f1402e3a828fb2074e136ed8b36a269d9dfaf0f47ec7a7b9583ea709e09", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\nhey everyone NEW DAY NEW ISSUE:\nhow to catch these kinds of errors while querying? \nthey are not a part of response of index.query function. they just directly print on terminal and continue to try again and again\nMeathead:\nRe-issue a new API key\ntshu:\noh man. i purposely put up a wrong api key to encounter this error.\n\ni want to know how to catch these errors which are coming due to open ai api\nLogan M:\nI think your best bet is probably to put a timeout on the function? But even though you won't know \"why\" it timed out \ud83e\udd14\nLogan M:\nOr you can write all the console output to a file and have something parsing that file for these warnings lol", "start_char_idx": 0, "end_char_idx": 652, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a393f9c8-80a7-4402-a6c6-58761f00f8c3": {"__data__": {"id_": "a393f9c8-80a7-4402-a6c6-58761f00f8c3", "embedding": null, "metadata": {"date": "2023-03-11T18:20:44.813+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084179118033227836", "node_type": "4", "metadata": {"date": "2023-03-11T18:20:44.813+00:00"}, "hash": "6602f76c780f59fcce8b190fb6ccf83e853151dada713686e937c4f39d2bd7c1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2464655d-221b-42da-aea0-59de1e1a51bd", "node_type": "1", "metadata": {"date": "2023-03-11T12:09:16.14+00:00"}, "hash": "9f8aa0aeff248a83e4f29b06fc8806f3c8e8a861006814e251adaea9bbe2d6c2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "963f46d1-fd35-4b1b-9ad6-5b6bedd07d07", "node_type": "1", "metadata": {}, "hash": "9073d70bb5943acf7404ebc3438aa4a6948342be70e1d355c9d62103325c58f4", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nHow can I query a cloud hosted Qdrant Index without recreating the index each time? I tried without and it keeps demanding an index_struct but the documentation doesn't specify well what that requires.\nMikko:\nYou can just give an empty list to the documents\nTeemu:\nThank you!", "start_char_idx": 0, "end_char_idx": 282, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "963f46d1-fd35-4b1b-9ad6-5b6bedd07d07": {"__data__": {"id_": "963f46d1-fd35-4b1b-9ad6-5b6bedd07d07", "embedding": null, "metadata": {"date": "2023-03-11T22:50:45.136+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084247067112779898", "node_type": "4", "metadata": {"date": "2023-03-11T22:50:45.136+00:00"}, "hash": "546b26e462738dc02a5d03d93d8030aecbf412c57e6cbb33d9f7db263a8a431d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a393f9c8-80a7-4402-a6c6-58761f00f8c3", "node_type": "1", "metadata": {"date": "2023-03-11T18:20:44.813+00:00"}, "hash": "eaa841810417a531322d772eab46bd75922917f64673ace16ce67cd66c75d4b2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f97cc97f-f176-426f-ac67-16564183822a", "node_type": "1", "metadata": {}, "hash": "673dc5f5c27c8886ffe5b4fef723a107ee6dc6570c2d6cc00983ebc853dc8744", "class_name": "RelatedNodeInfo"}}, "text": "smokeoX:\nwhen i had a few hundred lines it worked fine, but i thought gpt_index could help index the larger documents?\nhesselgesser:\nI've been able to ingest 7k+ lines of csv without issue. Do you have any malformed content that could possibly trip up the ingest process?", "start_char_idx": 0, "end_char_idx": 271, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f97cc97f-f176-426f-ac67-16564183822a": {"__data__": {"id_": "f97cc97f-f176-426f-ac67-16564183822a", "embedding": null, "metadata": {"date": "2023-03-11T22:50:51.221+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084247092635107438", "node_type": "4", "metadata": {"date": "2023-03-11T22:50:51.221+00:00"}, "hash": "e0aad312342ddb139e53d73291088bd7789b3c59cfaf3b37cc057ddc68954f05", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "963f46d1-fd35-4b1b-9ad6-5b6bedd07d07", "node_type": "1", "metadata": {"date": "2023-03-11T22:50:45.136+00:00"}, "hash": "a6aeba5816831af6d45d46d33656935df4a904a4c564f43bc93ce1ac5d74b8f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80dd1486-43b2-4e1c-8900-7e2398b1a0ab", "node_type": "1", "metadata": {}, "hash": "f69344c1b46ffa508c3d18f9956e1af1db44ca55a4fc69d342cc7eb4d396335a", "class_name": "RelatedNodeInfo"}}, "text": "hesselgesser:\nAny one try using model_name=\"gpt-3.5-turbo\" within the llm_predictor, particularly with large indices? I'm finding that the results of the LLM don't conform well to the prompts associated with the prior answer, additional content and the question.\nLogan M:\nYou arent the first person to mention a problem with the refine process and chatgpt today, I suspect openai updated something recently \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80dd1486-43b2-4e1c-8900-7e2398b1a0ab": {"__data__": {"id_": "80dd1486-43b2-4e1c-8900-7e2398b1a0ab", "embedding": null, "metadata": {"date": "2023-03-12T02:43:01.68+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084305521215033444", "node_type": "4", "metadata": {"date": "2023-03-12T02:43:01.68+00:00"}, "hash": "9c3f4c5b21d9478e68d550d45878ca3abd06d4c7d475e86eb555a5cf1f1a3bdd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f97cc97f-f176-426f-ac67-16564183822a", "node_type": "1", "metadata": {"date": "2023-03-11T22:50:51.221+00:00"}, "hash": "0c9769ccf0b2526083468455e0908ba07cd695179139282e00e14fc0efc953ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba623c04-a525-4576-b58b-4bb17b6c091d", "node_type": "1", "metadata": {}, "hash": "4e92915d41d5b9e1c909a481c5a051c42aaeb2fb3b91b6e0447216128e681a65", "class_name": "RelatedNodeInfo"}}, "text": "kaveen:\nIs it a known issue that cost analysis doesn't work with `aquery`? am I doing something wrong? \nhttps://github.com/jerryjliu/gpt_index/issues/705\nkaveen:\nAnd to add on to this, the new native async support seems much worse than running a sync call with use_async=True inside an executor, I'm currently implementing this in a discord bot and using the new async, it blocks for the entire duration of the query and doesn't allow for execution pauses if another bot command is run while a query is happening, whereas using an executor and use_async, it successfully pauses execution in an async style to allow for new things to run", "start_char_idx": 0, "end_char_idx": 636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba623c04-a525-4576-b58b-4bb17b6c091d": {"__data__": {"id_": "ba623c04-a525-4576-b58b-4bb17b6c091d", "embedding": null, "metadata": {"date": "2023-03-12T23:06:05.688+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084613316053311489", "node_type": "4", "metadata": {"date": "2023-03-12T23:06:05.688+00:00"}, "hash": "98691750b7140963e0b3c9881fa520500d0a4ae76befed1f1c1fc4ec86f266b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80dd1486-43b2-4e1c-8900-7e2398b1a0ab", "node_type": "1", "metadata": {"date": "2023-03-12T02:43:01.68+00:00"}, "hash": "726e0e3726da66b9ec7c837a1f2f4b235fc6b20b371f886e99fda754c9e59eec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02992e9e-f6e5-4b6e-86bc-8b540f686494", "node_type": "1", "metadata": {}, "hash": "a47517c0eaabff140c5b16ccea8425ba3683f28fd0011475936e18fde9312aab", "class_name": "RelatedNodeInfo"}}, "text": "Herr:\nhow can I use llama index with a locally hosted llama?\nLogan M:\nTagged you in another thread \ud83d\udcaa", "start_char_idx": 0, "end_char_idx": 100, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02992e9e-f6e5-4b6e-86bc-8b540f686494": {"__data__": {"id_": "02992e9e-f6e5-4b6e-86bc-8b540f686494", "embedding": null, "metadata": {"date": "2023-03-13T06:04:56.898+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084718723987947571", "node_type": "4", "metadata": {"date": "2023-03-13T06:04:56.898+00:00"}, "hash": "8df0507d85f9fb2eece638add739a6f7ba9fe3a592953447c7a1418b5e293af5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba623c04-a525-4576-b58b-4bb17b6c091d", "node_type": "1", "metadata": {"date": "2023-03-12T23:06:05.688+00:00"}, "hash": "637e9c68118e00bc2c6dc9d39d089f9157772d8ec441d777c72b9a40a9f98f11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e82514b-8276-4462-9c47-68f2fff0800c", "node_type": "1", "metadata": {}, "hash": "adac1bb9150c2f87f250f8e1da1ff0ca758036a2f3df34183c081e59334aa592", "class_name": "RelatedNodeInfo"}}, "text": "Chancellor Hands LLC:\nAny reason why my index query defaults to using text-davinci even when I specify model_name=gpt-3.5-turbo?\n\nHere's my code for reference:\n\n`def construct_index(directory_path):\n  # set maximum input size\n  max_input_size = 4096\n  # set number of output tokens\n  num_outputs = 256\n  # set maximum chunk overlap\n  max_chunk_overlap = 20\n  # set chunk size limit\n  chunk_size_limit = 600\n\n  prompt_helper = PromptHelper(max_input_size, num_outputs, max_chunk_overlap, chunk_size_limit=chunk_size_limit)\n\n  # define LLM\n  llm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"gpt-3.5-turbo\", max_tokens=num_outputs))\n\n         \n  documents = SimpleDirectoryReader(directory_path).load_data()\n  \n\n  index = GPTSimpleVectorIndex(documents, llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\n  file_path = glob.glob(f\"{directory_path}/*\")[0]\n  file_name = file_path.split('\\\\')[-1]\n  \n  index.save_to_disk(f'{file_name}.json')\n  \n  return index\n\ndef ask_bot(input_index = 'index.json'):\n  index = GPTSimpleVectorIndex.load_from_disk(input_index)\n  while True:\n    query = input('What do you want to ask the bot?   \\n')\n    response = index.query(query, response_mode=\"compact\")\n    print (\"\\nBot says: \\n\\n\" + response.response + \"\\n\\n\\n\")\n\n`\nMikko:\nYou are using OpenAI class as llm, but you want OpenAIChat\nChancellor Hands LLC:\nOkay here's the problem (I think):  It seems that when you load a vector index from disk `index = GPTSimpleVectorIndex.load_from_disk(input_index,)`, the llm defaults to text-davinci\ntimconnors:\nthats really weird!", "start_char_idx": 0, "end_char_idx": 1581, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e82514b-8276-4462-9c47-68f2fff0800c": {"__data__": {"id_": "0e82514b-8276-4462-9c47-68f2fff0800c", "embedding": null, "metadata": {"date": "2023-03-13T08:23:50.388+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084753677178376222", "node_type": "4", "metadata": {"date": "2023-03-13T08:23:50.388+00:00"}, "hash": "c1c0b1e5d70ade647402fbfea7909bcd19ce037ebf86111dd47ae632bd37b0ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02992e9e-f6e5-4b6e-86bc-8b540f686494", "node_type": "1", "metadata": {"date": "2023-03-13T06:04:56.898+00:00"}, "hash": "398c338edb91edaebaf458c0152df9e0f69a01c66acdce8c0505937316ebca43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bdb945be-e646-4be9-86a6-9f47f33f2f94", "node_type": "1", "metadata": {}, "hash": "96eeb7cc1df0e340decd1f5805bce2aa1d610a257248fe49189b80f901439dfa", "class_name": "RelatedNodeInfo"}}, "text": "Stefatorus:\nDoes Llama automatically do document parsing and paragraph splitting?\njerryjliu98:\nwe have a (somewhat naive) text splitter under the hood. if you want to explicitly split by paragraphs, you can either use 1) unstructured.io https://llamahub.ai/l/file-unstructured or 2) a langchain text splitter and plug it into gpt index", "start_char_idx": 0, "end_char_idx": 335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bdb945be-e646-4be9-86a6-9f47f33f2f94": {"__data__": {"id_": "bdb945be-e646-4be9-86a6-9f47f33f2f94", "embedding": null, "metadata": {"date": "2023-03-13T16:33:36.768+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084876932589555783", "node_type": "4", "metadata": {"date": "2023-03-13T16:33:36.768+00:00"}, "hash": "e8cb9d41bcd266de58daf8c235fc02cae6d67cae449b1441df900a8dd344ff75", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e82514b-8276-4462-9c47-68f2fff0800c", "node_type": "1", "metadata": {"date": "2023-03-13T08:23:50.388+00:00"}, "hash": "c45b924811ad2db33e31a16fd14dec8afa7853e17c84fddc05f61713c0d27394", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58a703e0-393d-4720-a869-787ec0e59fa5", "node_type": "1", "metadata": {}, "hash": "57dda56f815f5f09449e0e7131bc4353aa5f9986169e24ec7943db505de2d6f6", "class_name": "RelatedNodeInfo"}}, "text": "kimyin:\nHello, does anyone get `InvalidRequestError: logprobs, best_of and echo parameters are not available on gpt-35-turbo model. Please remove the parameter and try again.` \n\nMy code\n```python\nfrom langchain.llms import AzureOpenAI\nllm = AzureOpenAI(deployment_name=\"gpt-35-turbo\") \nllm(\"Tell me a joke\")\n```\nIt's actually a `langchain` question, but I'm wondering if anyone in this amazing channel saw the same error\nRichie:\nLooks like langchain have just added a new function AzureChatOpenAI to address this.", "start_char_idx": 0, "end_char_idx": 513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58a703e0-393d-4720-a869-787ec0e59fa5": {"__data__": {"id_": "58a703e0-393d-4720-a869-787ec0e59fa5", "embedding": null, "metadata": {"date": "2023-03-13T21:50:33.655+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1084956695194775592", "node_type": "4", "metadata": {"date": "2023-03-13T21:50:33.655+00:00"}, "hash": "6ff06c5ca19a7d22b7e8f59e0f341c8ab43f5ac324cbfd183be219024cacb7c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bdb945be-e646-4be9-86a6-9f47f33f2f94", "node_type": "1", "metadata": {"date": "2023-03-13T16:33:36.768+00:00"}, "hash": "9f6ff228015b0747212b1678b837d474f0a1941feee95620a2f22289a0cb9d90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2cd679d2-b9a9-40fe-90ec-fcc55c76e0eb", "node_type": "1", "metadata": {}, "hash": "f8616811d005ca30004e771fa0c0e2c883e0614a8693a28afd7848f2c247a64a", "class_name": "RelatedNodeInfo"}}, "text": "Carlos Fonseca:\nHello everyone, I'm facing this error when I try to run llama index download_loader function but I 'm getting this error running on AWS Linux with Python 3.8. With some research I found that this problem is often related to python trying to open a folder as a file.\n\nNote: this error is happening just calling **S3Reader **function from download_loader.\n--->  S3Reader = download_loader(\"S3Reader\")  <---\n\nSomeone could help me with this? thks\nCarlos Fonseca:\nI open a issue on this S3Reader repository on GitHub, but if someone here could help I appreciate! \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cd679d2-b9a9-40fe-90ec-fcc55c76e0eb": {"__data__": {"id_": "2cd679d2-b9a9-40fe-90ec-fcc55c76e0eb", "embedding": null, "metadata": {"date": "2023-03-14T06:28:45.518+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085087103920132197", "node_type": "4", "metadata": {"date": "2023-03-14T06:28:45.518+00:00"}, "hash": "9eaf15858845c0b72429138ade5ec11af517467ba479049eabb519d5d02056f6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58a703e0-393d-4720-a869-787ec0e59fa5", "node_type": "1", "metadata": {"date": "2023-03-13T21:50:33.655+00:00"}, "hash": "07972f969d953108db3458986611c748299a3baa27ca6825da5a93e18b035356", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6df134c0-52c5-49eb-ab40-79383f3daf95", "node_type": "1", "metadata": {}, "hash": "feb9e8ca58796ad9ee63741ecd264aeee06ab3c446f0398e1c96cde8d1224504", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nHey everyone, \nIs there a better embedding model than OpenAI's ada? Unfortunately I often don't get the relevant documents even though I query a term that is explicitly mentioned in one of them.  I use Langchain's RecursiveTextSplitter with up to 1024 characters per chunk\ntshu:\ntry increasing similarity_top_k and decreasing chunk size. maybe it will help\nyoelk:\nI tried, the relevant document usually appears in my top_5, but I don't understand why it's not ranked #1 when my query only contains a term that is explicitly mentioned in the relevant document. My chunk size is already rather small - up to 1024 characters ( not tokens)\nMikko:\nbecause embedding-based search is not really looking for keywords, and with long chunks the importance of single-word matches decreases", "start_char_idx": 0, "end_char_idx": 785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6df134c0-52c5-49eb-ab40-79383f3daf95": {"__data__": {"id_": "6df134c0-52c5-49eb-ab40-79383f3daf95", "embedding": null, "metadata": {"date": "2023-03-14T07:21:08.476+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085100286441439273", "node_type": "4", "metadata": {"date": "2023-03-14T07:21:08.476+00:00"}, "hash": "3c5a2bfb80220dfceaf0dc48220c74d4b4f74ce8ee6d04982b7c98abf39bb514", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cd679d2-b9a9-40fe-90ec-fcc55c76e0eb", "node_type": "1", "metadata": {"date": "2023-03-14T06:28:45.518+00:00"}, "hash": "56f96bb0fc2ca7c076f8e3b6fcc12628d7d66d3fa96bd7b5428251682a22a464", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6071ec5c-6e1a-48de-bbbd-d94786cb4cb6", "node_type": "1", "metadata": {}, "hash": "874f5a035ea858ba9a73ee5625e508df8db3bcee51e5a4d3881d746d543cc8c8", "class_name": "RelatedNodeInfo"}}, "text": "HAHA:\nDoes LlamaIndex support azure openai?\nAndreaSel93:\nYes, there\u2019s a code in the \u201cexamples\u201d section in github\nAndreaSel93:\nIf you need ask, i solved my errors just yesterday \ud83d\ude04\nHAHA:\nunfortunately, the azure demo can't run on my machine, it says \"ValidationError: 1 validation error for AzureOpenAI\n__root__\n  Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)\"\nAndreaSel93:\nDo you have a piece of code to share?\nHAHA:", "start_char_idx": 0, "end_char_idx": 536, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6071ec5c-6e1a-48de-bbbd-d94786cb4cb6": {"__data__": {"id_": "6071ec5c-6e1a-48de-bbbd-d94786cb4cb6", "embedding": null, "metadata": {"date": "2023-03-14T08:49:59.898+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085122648046063636", "node_type": "4", "metadata": {"date": "2023-03-14T08:49:59.898+00:00"}, "hash": "fb3994e0d767f1cfd05c26cb9fbfc38e975785cff4b9a4cdf4202a2f308f9416", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6df134c0-52c5-49eb-ab40-79383f3daf95", "node_type": "1", "metadata": {"date": "2023-03-14T07:21:08.476+00:00"}, "hash": "b0191159fa6bf5a70f5804b7085c47b7709e97e22471ef218bc3c37816f67e5f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d225c8b9-4a5d-436a-a7e1-1ed8a0e0e3cf", "node_type": "1", "metadata": {}, "hash": "22821b0cb2076a646ee3210c37f19cef6ba638697b9299c148dae269b50c5433", "class_name": "RelatedNodeInfo"}}, "text": "TUWM:\nI have a problem with langchain integration. When I use OpenAIChat as llm I get this error sometimes:\n\n`raise ValueError(f\"Could not parse LLM output: {llm_output}\")`\n`ValueError: Could not parse LLM output: Do I need to use a tool? Yes`\n\nWhen I use the regular davinci model then the the agent almost never decides to use the tool. I am super confused.\n\nI can show the entire code that I am using.\nLogan M:\nThis is a langchain issue, chatgpt doesn't always follow the proper ouput format (and langchain is using regexes to parse output, causing this error)\n\nWhether or not the model decides to use a tool depends entirely on the tool description, you might have to tweak it for davinci", "start_char_idx": 0, "end_char_idx": 692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d225c8b9-4a5d-436a-a7e1-1ed8a0e0e3cf": {"__data__": {"id_": "d225c8b9-4a5d-436a-a7e1-1ed8a0e0e3cf", "embedding": null, "metadata": {"date": "2023-03-14T15:03:53.249+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085216740339875991", "node_type": "4", "metadata": {"date": "2023-03-14T15:03:53.249+00:00"}, "hash": "58f6367c78c847cc33c8a8aef9c1fc3dd507fc1b8584ea4060fff55ed5724988", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6071ec5c-6e1a-48de-bbbd-d94786cb4cb6", "node_type": "1", "metadata": {"date": "2023-03-14T08:49:59.898+00:00"}, "hash": "dd5a7f4626003adb4d626b19ff445c137d14a71af337d9c988262692ab169aac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc12b1e2-17f5-41f8-b2c7-f689a471445b", "node_type": "1", "metadata": {}, "hash": "b7f5e7c6ba9ddb24ff146bfb33418b1c253fe0c54d46b426809c7243f7c1f588", "class_name": "RelatedNodeInfo"}}, "text": "otto_alotto:\nhas anyone figured out how to ask a question like \"how many rows in the DB meet X criteria?\" It's a lot more complicated than it seems, And I think LLama index is part of the solution, but I'm struggling to figure it out. Any notebooks or examples much appreciated.\naldrin:\n+1\n\nI have been playing with this same idea and have found the following:\n\n1. The current approach is to take the table schema + any user or document provided context and provide it to the LLM and then ask questions which typically result in the LLM producing SQL for data manipulation tasks (e.g. which record has the highest value etc). This I've been able to do for many simple (what record has the highest value) and some advanced use cases (e.g. in a database of eCommerce transactions, How many records have the word Amazon in them?).\n\n2. Create embeddings for your table which can be fed to model and used at run time to run natural language queries. I don't believe llama-index supports this out of the box right now. I believe this approach is likely the best solution because the schema approach (what is powering the text-to-sql) is fundamentally limited because there is row/cell level information as well as relationships between rows (ie X happened after Y bc X createdAt after Y) that is valuable for model to know when answering queries. I'm exploring this on the weekend when I get some free time from the day job but I think this is the future of LLMs on structured data especially for enterprise use cases (less cost sensitivity more interest in business specific applications of LLM technology).\notto_alotto:\nThanks so much for your reply. So think we'll need a nice SQL embedding first, and might be able to get away with Llama index few shot learning next as the part 2 of an (at least) 2 part langchain... so much to do", "start_char_idx": 0, "end_char_idx": 1829, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc12b1e2-17f5-41f8-b2c7-f689a471445b": {"__data__": {"id_": "bc12b1e2-17f5-41f8-b2c7-f689a471445b", "embedding": null, "metadata": {"date": "2023-03-14T21:52:38.786+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085319607897821195", "node_type": "4", "metadata": {"date": "2023-03-14T21:52:38.786+00:00"}, "hash": "d5ab0740b27554db382a942bcfcc8d0b6b675576d365d11b364c6928a19f30c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d225c8b9-4a5d-436a-a7e1-1ed8a0e0e3cf", "node_type": "1", "metadata": {"date": "2023-03-14T15:03:53.249+00:00"}, "hash": "5eb15d04006619553c0598d9a0a09c9ea330fb4e4b355464665ae19c45733a65", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc3ef2a2-9ef5-425b-a11e-eccf4476846d", "node_type": "1", "metadata": {}, "hash": "484ad4defc57bdea141c69254043f1b6c9ebabcfe6e0088ddddbf3b1ded61f0a", "class_name": "RelatedNodeInfo"}}, "text": "dx31:\n@jerryjliu98 im trying to use gpt tree and list index but the ai doesnt understand it. can you please take a look at my code?\n\n\"I'm sorry, but as an AI language model, I do not have access to the content of the docstore or any information about the index_struct_id. Therefore, I cannot provide a description of chapters 1, 2, and 3 with bullet points or long descriptions. Please provide me with more specific information or context to assist you better.\n\"\ndx31:\n@KKT @hwchase17 do you have any experience with this?", "start_char_idx": 0, "end_char_idx": 522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc3ef2a2-9ef5-425b-a11e-eccf4476846d": {"__data__": {"id_": "bc3ef2a2-9ef5-425b-a11e-eccf4476846d", "embedding": null, "metadata": {"date": "2023-03-14T22:13:25.873+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085324838559821974", "node_type": "4", "metadata": {"date": "2023-03-14T22:13:25.873+00:00"}, "hash": "5a9f5267e5a626abd422615f1c6ed7ba222c51010783b2b7b5eba90923fff98e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc12b1e2-17f5-41f8-b2c7-f689a471445b", "node_type": "1", "metadata": {"date": "2023-03-14T21:52:38.786+00:00"}, "hash": "16b547b13430c7db0beb557dff6eefd453fdee1465809033e2686ae4f2d78865", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2ef1a71-b3ea-4c3c-875a-7a737ab45daf", "node_type": "1", "metadata": {}, "hash": "fb4494cf2129a6d6266d093dd0b74a04cf62c0473386fe4d08bc2602a0fd42b7", "class_name": "RelatedNodeInfo"}}, "text": "dx31:\nit's like the ai cant read the json for some reason\n4bidden:\nThere's a jsonloader for langchain and GPTindex.", "start_char_idx": 0, "end_char_idx": 115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2ef1a71-b3ea-4c3c-875a-7a737ab45daf": {"__data__": {"id_": "b2ef1a71-b3ea-4c3c-875a-7a737ab45daf", "embedding": null, "metadata": {"date": "2023-03-15T01:20:38.082+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085371949858947123", "node_type": "4", "metadata": {"date": "2023-03-15T01:20:38.082+00:00"}, "hash": "88dc24839f3e854f705ff39547ef2c12499f41a2ad7f376af9c1bb07d23e69ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc3ef2a2-9ef5-425b-a11e-eccf4476846d", "node_type": "1", "metadata": {"date": "2023-03-14T22:13:25.873+00:00"}, "hash": "2f54a18dc3e90c47711fc128d019e43d4cb6cb44c7677227bf45735883be38ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f6fb565-be6a-4373-8429-e37bf5134ae8", "node_type": "1", "metadata": {}, "hash": "dc8dcd7fdbf852b7fb4122365c89bcd22501ed52423d7e24ba87eb026e15b2f8", "class_name": "RelatedNodeInfo"}}, "text": "timconnors:\nIs this a mistake in the \"get_chunk_size_given_prompt\" function?\n\nwondering if it should be addition instead of subtraction @jerryjliu98\nLogan M:\nI think this is still correct? \n\nMax input size, minus the number of prompt token, minus the max number of expected output tokens, leaves you with the space that is left for each text chunk (I.e. the context) \ud83e\udd14\ntimconnors:\nim so confused \ud83d\ude48 that doesn't make any sense to me. maybe im misunderstanding the meaning of one of more of these parameters", "start_char_idx": 0, "end_char_idx": 505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f6fb565-be6a-4373-8429-e37bf5134ae8": {"__data__": {"id_": "9f6fb565-be6a-4373-8429-e37bf5134ae8", "embedding": null, "metadata": {"date": "2023-03-15T03:05:12.761+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085398267770183760", "node_type": "4", "metadata": {"date": "2023-03-15T03:05:12.761+00:00"}, "hash": "11d045fe753e2f638d45ba9097e08b3e8c6c8c115fba2097490528480f983131", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2ef1a71-b3ea-4c3c-875a-7a737ab45daf", "node_type": "1", "metadata": {"date": "2023-03-15T01:20:38.082+00:00"}, "hash": "f4558ceab59b5804d56e1044f0c813ffc20320f85671cee0b86714bc6003cfe2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12ea90d4-e35f-417e-ad7f-51fa38bfc5ad", "node_type": "1", "metadata": {}, "hash": "f16e6646efd08c8f3cdbff565f75f7e2ce01c792aaed9a2b647ca010046407c1", "class_name": "RelatedNodeInfo"}}, "text": "HAHA:\nI think llama-index does not support azure openai, the code does not work\nLogan M:\nTagged you in a thread \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 113, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12ea90d4-e35f-417e-ad7f-51fa38bfc5ad": {"__data__": {"id_": "12ea90d4-e35f-417e-ad7f-51fa38bfc5ad", "embedding": null, "metadata": {"date": "2023-03-15T10:33:14.676+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085511018693804113", "node_type": "4", "metadata": {"date": "2023-03-15T10:33:14.676+00:00"}, "hash": "7a65023ec7a3c08f92c272c5acf1432d32e4926f128eb8537bcab7c67b8dffcf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f6fb565-be6a-4373-8429-e37bf5134ae8", "node_type": "1", "metadata": {"date": "2023-03-15T03:05:12.761+00:00"}, "hash": "0ee778497423aa60de42bef943e9a4de79ed5c8e18b794c9e247e7ea96b4ccca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a3180be-2b0b-445b-b5af-3f2de75eba2c", "node_type": "1", "metadata": {}, "hash": "e313bc27490d22320d13413701066aaa20cee8ce0205fb29bbb4f15e28e89e16", "class_name": "RelatedNodeInfo"}}, "text": "Nilu:\ndidn't, got rid of it and put all my data into a vector db manaually\npdupanov:\nThanks.", "start_char_idx": 0, "end_char_idx": 92, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a3180be-2b0b-445b-b5af-3f2de75eba2c": {"__data__": {"id_": "4a3180be-2b0b-445b-b5af-3f2de75eba2c", "embedding": null, "metadata": {"date": "2023-03-15T12:31:18.897+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085540732070285353", "node_type": "4", "metadata": {"date": "2023-03-15T12:31:18.897+00:00"}, "hash": "2f9371565ec1aa464302185155c84819c710b278191df42c240a271f308113af", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12ea90d4-e35f-417e-ad7f-51fa38bfc5ad", "node_type": "1", "metadata": {"date": "2023-03-15T10:33:14.676+00:00"}, "hash": "ea5f69d2eb31912ce9339ddefffe9780483db5994236ab6444a4debf3d7a78c3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f99eee2-db41-47f1-8fa0-e5b5eab74de8", "node_type": "1", "metadata": {}, "hash": "6c73a31973a8f2e7cbe4703faac12df96c3442f06d6eee0882062055a082a37c", "class_name": "RelatedNodeInfo"}}, "text": "Tobi-De:\nHi y'all, hope everyone is doing great. \nI have a small question, I'm currently building a simple QA documents (using pdf right now) with llma_index and from time to time I get this in my responses \nThe context provided is not useful in refining the original answer, which remains......\nand when it doesn't find the answer I get : The context information does not provide the answer to this question.\nIs there something I'm doing wrong here ? my code is pretty basic and straightforward\n```python\ndef main():\n    llm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"gpt-3.5-turbo\"))\n    pdf_file = Path(\"data/TSD3x-07-08-alpha.pdf\")\n    loader = PDFReader()\n    documents = loader.load_data(file=pdf_file)\n    index = GPTSimpleVectorIndex(documents, llm_predictor=llm_predictor)\n    #index.save_to_disk(str(index_json))\n    summary = index.query(\n        \"summarize the content\",\n    )\n    print(summary.response)\n    index.set_text(summary.response)\n    while question := input(\"Question: \"):\n        print(index.query(question))\n\n```\nMikko:\nIt's most likely the 3.5-turbo. Have you tried other models?\nTobi-De:\nI just tried without specifying a model so it used the default, I haven't managed to get it to say *The context provided is not useful in refining the original answer, which remains......* yet but it still throws quite often *The context information does not provide a clear answer to this question.* for even simple question", "start_char_idx": 0, "end_char_idx": 1461, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f99eee2-db41-47f1-8fa0-e5b5eab74de8": {"__data__": {"id_": "3f99eee2-db41-47f1-8fa0-e5b5eab74de8", "embedding": null, "metadata": {"date": "2023-03-15T13:21:27.339+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085553350390583307", "node_type": "4", "metadata": {"date": "2023-03-15T13:21:27.339+00:00"}, "hash": "d39186c2705244a3d2d87ec6a46b90692372b01b7cc509041db3f60f64ea0b96", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a3180be-2b0b-445b-b5af-3f2de75eba2c", "node_type": "1", "metadata": {"date": "2023-03-15T12:31:18.897+00:00"}, "hash": "86c87297c76bf3cdbbaf5037114ddf8f4276cc3b4f5d81fde78ef92ecf091e55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2b31664-24cf-4f85-9d22-81d98d0d2b86", "node_type": "1", "metadata": {}, "hash": "17863083abf892bdcb6dc4531fbf5c97f636ed109799d02c57038edfc2e47500", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nYou should also try similarity_top_k parameter in your query, make it 2-5\nTobi-De:\nI tried, not sure if it changed anything but I realized something, I was asking meta questions about the document, things like *Who is the author of the book?* (yes literally, without giving the name of said book) which I realize now is dumb since the model doesn't have knowledge of me uploading a book or a document, I just feed it some data, if I ask something more specific like *Who is the author of X book* then I get a correct answer.\nThis is a good start, but I still often  get in my answers:\n*Return the original answer as the new context is not related to the question.*\n*The original answer is already accurate and does not need to be refined*\nWhat does that mean ?\ndavidds:\nyou need to change the prompt. can't find jerry's post. i'm using \nfrom llama_index.prompts.chat_prompts import CHAT_REFINE_PROMPT\nTobi-De:\nThanks, will try", "start_char_idx": 0, "end_char_idx": 933, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2b31664-24cf-4f85-9d22-81d98d0d2b86": {"__data__": {"id_": "b2b31664-24cf-4f85-9d22-81d98d0d2b86", "embedding": null, "metadata": {"date": "2023-03-15T15:04:06.148+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085579182307807313", "node_type": "4", "metadata": {"date": "2023-03-15T15:04:06.148+00:00"}, "hash": "a192db4b7e9f00d5d3b0178787d966c9e16cce70a06c6ce8cac315d520b325bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f99eee2-db41-47f1-8fa0-e5b5eab74de8", "node_type": "1", "metadata": {"date": "2023-03-15T13:21:27.339+00:00"}, "hash": "4f23e048e18fab6cc27f21e756716641614c5e925a13c3301024b0f0ecc442cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c0fefd8-7d32-4f51-9bda-05bb7097210e", "node_type": "1", "metadata": {}, "hash": "a55ccb35160defdb184076777ae533cf4d6b29a20c45cc96531572273317b163", "class_name": "RelatedNodeInfo"}}, "text": "supagroova:\nHi Everyone, \ud83d\udc4b \n\nI've spent some time going through the docs and in here but haven't found an answer so will ask: *Are there bindings to query a llama-index from other languages?*\nsupagroova:\nI guess no-one here has any idea regarding llama-index bindings?\nRerox:", "start_char_idx": 0, "end_char_idx": 275, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c0fefd8-7d32-4f51-9bda-05bb7097210e": {"__data__": {"id_": "1c0fefd8-7d32-4f51-9bda-05bb7097210e", "embedding": null, "metadata": {"date": "2023-03-15T15:33:17.4+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085586527591075860", "node_type": "4", "metadata": {"date": "2023-03-15T15:33:17.4+00:00"}, "hash": "08fa29fd336336eaa6e5ec6b430ae0ea5354b1c10e1b66f677f57900acb8c612", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2b31664-24cf-4f85-9d22-81d98d0d2b86", "node_type": "1", "metadata": {"date": "2023-03-15T15:04:06.148+00:00"}, "hash": "c9e764fcc29bd02aac2a992dc90c937df1709a6777b95ca0bc6be91db2d12f9e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ee3d94b-a2fa-43ef-baef-88152273c377", "node_type": "1", "metadata": {}, "hash": "a23a1a119123c62da68d3a92b0706058182c6d44f841b127b88fb8059448f2b0", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\n@jerryjliu98  @Logan M @hwchase17 what is the difference between declaring llm_predictor while defining the index like this:\n`VectorIndex = GPTSimpleVectorIndex(documents, llm_predictor=llm_predictor)`\nand while querying the index\n`response = index.query(question,llm_predictor=llm_predictor)`\nLogan M:\nBasically, you can declare the LLM for index construction, and the LLM for answering the query.\n\nNot every index uses the LLM during index construction (I think only knowledge graph and tree index need it for construction)\n\nSaving the index does not save the LLM that was used. The defaults are all davinici openAI", "start_char_idx": 0, "end_char_idx": 623, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ee3d94b-a2fa-43ef-baef-88152273c377": {"__data__": {"id_": "7ee3d94b-a2fa-43ef-baef-88152273c377", "embedding": null, "metadata": {"date": "2023-03-15T19:41:08.415+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085648901148770478", "node_type": "4", "metadata": {"date": "2023-03-15T19:41:08.415+00:00"}, "hash": "d96eed660afb94342af3b926d1c287b0e357de9c110f39a8300300ff51e252be", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c0fefd8-7d32-4f51-9bda-05bb7097210e", "node_type": "1", "metadata": {"date": "2023-03-15T15:33:17.4+00:00"}, "hash": "168d31b32679e5231afaa56bfae2aff20a587dda10ff51e66b804560523b37ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2cc19d61-2bba-4bdb-b31b-ee34bf86f48c", "node_type": "1", "metadata": {}, "hash": "603a0c0914904a8e72208553bca2b43be3cfd027d879dc3c660dc050ead9d196", "class_name": "RelatedNodeInfo"}}, "text": "Guille:\nHi everyone!\n\nI'm struggling to find a way to save documents, or extract documents from a generated index.\n\nI'm scrapping documentation from our product, using BeautifulSoupWebReader, but that process insumes 1 hour. \n\nIt's something like this:\n\n    documents = loader.load_data(urls=urls_subset, custom_hostname='ayudas.myproduct.com')\n    index = GPTSimpleVectorIndex(documents)\n\nBut if creation of index fails (because Cohere rate limit, for example), I lost all documents already scrapped (I'm not working in a Jupyter notebook). And later, I need to access documents and maybe group documents by product type, to create separate index.\n\nIs there a way to acomplish that?\nAndreaSel93:\nScraped documents shouldn\u2019t be in documents if the error is index? Anyway I looped both, the documents list (using Document class) and index construction (using index.insert). This way you can also build exceptions\nGuille:\nYes, scrapped documents are in documents, but I didn't find a way to persist that documents, for a later use.\nAndreaSel93:\nGot it, sorry don\u2019t know since I have my docs saved in disk\nGuille:\nYeah, it could be a workaround, but I just created a specific reader for BeautifulSoupWebReader, it's like I just need to save those documents to file and load later to reindex or whatever.\npdupanov:\nThe documents can be saved as .pkl with Pickle to disk and later loaded.\nGuille:\nThat worked! Thanks!!!", "start_char_idx": 0, "end_char_idx": 1414, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cc19d61-2bba-4bdb-b31b-ee34bf86f48c": {"__data__": {"id_": "2cc19d61-2bba-4bdb-b31b-ee34bf86f48c", "embedding": null, "metadata": {"date": "2023-03-15T22:20:27.262+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085688993858981909", "node_type": "4", "metadata": {"date": "2023-03-15T22:20:27.262+00:00"}, "hash": "a531d5b908d3deb72e003bd2b6f3d65c6cbf01e1635217b3b533a428db8bd7fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ee3d94b-a2fa-43ef-baef-88152273c377", "node_type": "1", "metadata": {"date": "2023-03-15T19:41:08.415+00:00"}, "hash": "4ae37226e83cf7434dfbbd4474ddcd40767135649f865b3240bb55ef3ce45c57", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc0725d5-ed82-4ad2-ba75-1b3d53c77599", "node_type": "1", "metadata": {}, "hash": "42a1c86d66ad9d0ae84adda8100c3205b061a0fb9417fd24858c5bb88b6feb43", "class_name": "RelatedNodeInfo"}}, "text": "sheresaidon:\nHi, im new here but curious how can I specify which model used when passing the information to open ai?\nGary Xu:\nYou can specify it in the llm_predictor: \n```\nfrom langchain import OpenAI\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"gpt-3.5-turbo\"))\n```", "start_char_idx": 0, "end_char_idx": 288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc0725d5-ed82-4ad2-ba75-1b3d53c77599": {"__data__": {"id_": "cc0725d5-ed82-4ad2-ba75-1b3d53c77599", "embedding": null, "metadata": {"date": "2023-03-16T02:04:25.853+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085745359394979860", "node_type": "4", "metadata": {"date": "2023-03-16T02:04:25.853+00:00"}, "hash": "bb41cb648fd34f49c758bc3017764513ac4c893897a379dfd449edc85e135d34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cc19d61-2bba-4bdb-b31b-ee34bf86f48c", "node_type": "1", "metadata": {"date": "2023-03-15T22:20:27.262+00:00"}, "hash": "070c472e6aa09e68d570dba1828e194d7b913cc1170776f35101de075b81f806", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3c96ec5-1a4b-49a3-b7f0-31edc3769252", "node_type": "1", "metadata": {}, "hash": "d4432a4d66077403a7f85b7df975acd94e24ed67fd4346196d1136a926684bab", "class_name": "RelatedNodeInfo"}}, "text": "ali:\nHello everyone i am getting this error, I got this on 0.4.28 and 0.4.27, I thought this got patched:\n\n```\nfrom llama_index import SQLStructStoreIndex, SQLDatabase, SimpleDirectoryReader, WikipediaReader, Document\nfrom llama_index.indices.struct_store import SQLContextContainerBuilder\nfrom IPython.display import Markdown, display\n```\n\nerror: \n\n```\nImportError                               Traceback (most recent call last)\n/var/folders/8b/5hr067yj3v99mw1t_yy3vz_c0000gn/T/ipykernel_30671/1614078562.py in <module>\n----> 1 from llama_index import SQLStructStoreIndex, SQLDatabase, SimpleDirectoryReader, WikipediaReader, Document\n      2 from llama_index.indices.struct_store import SQLContextContainerBuilder\n      3 from IPython.display import Markdown, display\n\n~/opt/anaconda3/lib/python3.9/site-packages/llama_index/__init__.py in <module>\n     45 # langchain helper\n     46 from llama_index.langchain_helpers.chain_wrapper import LLMPredictor\n---> 47 from llama_index.langchain_helpers.memory_wrapper import GPTIndexMemory\n     48 from llama_index.langchain_helpers.sql_wrapper import SQLDatabase\n     49 \n\n~/opt/anaconda3/lib/python3.9/site-packages/llama_index/langchain_helpers/memory_wrapper.py in <module>\n      3 from typing import Any, Dict, List, Optional\n      4 \n----> 5 from langchain.chains.base import Memory\n      6 from pydantic import Field\n      7 \n\nImportError: cannot import name 'Memory' from 'langchain.chains.base' (/Users/aliagha/opt/anaconda3/lib/python3.9/site-packages/langchain/chains/base.py\n\n```\nLogan M:\nTry `pip install --upgrade langchain`\nali:\n~~not luck :(. @jerryjliu98 does this need to be patched again? \n\nAnyone else running into issues?~~\n\nSolution: was able to solve this by reinstalling all deps.\nali:\nI think its an issue on my end. I am stuck in some kind of dependency hell.", "start_char_idx": 0, "end_char_idx": 1830, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3c96ec5-1a4b-49a3-b7f0-31edc3769252": {"__data__": {"id_": "c3c96ec5-1a4b-49a3-b7f0-31edc3769252", "embedding": null, "metadata": {"date": "2023-03-16T04:43:12.923+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085785318822785064", "node_type": "4", "metadata": {"date": "2023-03-16T04:43:12.923+00:00"}, "hash": "a3a7eb0787762d71851afb3afac8b2d6d47a93065455d6be9610e49eab3a819a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc0725d5-ed82-4ad2-ba75-1b3d53c77599", "node_type": "1", "metadata": {"date": "2023-03-16T02:04:25.853+00:00"}, "hash": "638ff1b404c9a735957949a509be0bee0c4a7cbe846d0c859bd2267e66c98090", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5783eccd-6802-4d29-a10b-b40af78a82fe", "node_type": "1", "metadata": {}, "hash": "f654b5b32b0843d8b2ddc724410b312bc722dc99a875702cc2a9f77ff6c30f0b", "class_name": "RelatedNodeInfo"}}, "text": "stampedelin:\nhi I want QA with a lot of pdf and want to know where the answer is from, like which pdf and page number. What is the best practice to do so? Thanks\ndavidds:\nin the response object you can check .source_nodes and .extra_info (depending on your data loader)\nstampedelin:\nThank you. I did try to put file name into extra_info. Still trying to figure out how to deal with page number.\nLogan M:\nMaybe create the documents with the page number on your own? The function looks very simple to copy and add that \n\nhttps://github.com/emptycrown/llama-hub/blob/main/loader_hub/file/pdf/base.py\nstampedelin:\nThat is exactly how I added file name. The question is if it is a good way to make every page a document so I can put page into document's  `extra_info`\nLogan M:\nThat might just take some experimentation. If you can manually split the document into defindd sections ahead of time, that might also work well.", "start_char_idx": 0, "end_char_idx": 917, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5783eccd-6802-4d29-a10b-b40af78a82fe": {"__data__": {"id_": "5783eccd-6802-4d29-a10b-b40af78a82fe", "embedding": null, "metadata": {"date": "2023-03-16T05:00:36.956+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085789697814564914", "node_type": "4", "metadata": {"date": "2023-03-16T05:00:36.956+00:00"}, "hash": "d782bb66651eb807deedbd0d8f51dbea526e74e44219e5222143efd004a189cd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3c96ec5-1a4b-49a3-b7f0-31edc3769252", "node_type": "1", "metadata": {"date": "2023-03-16T04:43:12.923+00:00"}, "hash": "ca92ca879ac46ed9fb9ea9381a8e3487910f495f13577f93175fcd5105e5f5d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebb24d8b-bcf3-428d-a3a6-dd2499b1ad1c", "node_type": "1", "metadata": {}, "hash": "67932352c7c692e3f61198eb704e9a9f4534217ad2e9bb1394549a9780ecb2bf", "class_name": "RelatedNodeInfo"}}, "text": "JPM777:\nAnyone been connecting to SQL DBs?\n\nI'm using the Sqlcontextbuilder but it is hallucinating columns and tables.\n\nI've modified the query template but don't know exactly how that template is being used with the table information.\n\nCould anyone guide me on how exactly is that context_query_template being used with respect to the tables in the index? How is the info of the tables extracted by the query in the context_builder\nGary Xu:\nWhat I did was \n```\nsql_database = SQLDatabase(db_engine, include_tables=[\"budget\",'user_role','users'])\ntable_context_dict={'budget':\u2018<Some Context for budget table>\u2019 ,'user_role':'<Context for user_role table>'}\ncontext_builder = SQLContextContainerBuilder(sql_database, context_dict=table_context_dict)\ncontext_container = context_builder.build_context_container()\n\nindex = SQLStructStoreIndex(\n    sql_database=sql_database,\n    llm_predictor=llm_predictor,\n    sql_context_container=context_container\n)```\nSo I passed in the `sql_database` and `context_dict` to the `SQLContextContainerBuilder`, `sql_database` provides the columns of the table, e.g. ```Schema of table users:\nTable 'users' has columns: username (VARCHAR(30)), name (VARCHAR(50)).\n``` And in the `context_dict` you could provide explanations, such as a data dictionary, to each table in the database. Hope this helps.", "start_char_idx": 0, "end_char_idx": 1332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebb24d8b-bcf3-428d-a3a6-dd2499b1ad1c": {"__data__": {"id_": "ebb24d8b-bcf3-428d-a3a6-dd2499b1ad1c", "embedding": null, "metadata": {"date": "2023-03-16T06:29:59.001+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085812187861352498", "node_type": "4", "metadata": {"date": "2023-03-16T06:29:59.001+00:00"}, "hash": "c650ccf7234ccb28cca746a480fa050c05f49e77f8133149c575e514410b8243", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5783eccd-6802-4d29-a10b-b40af78a82fe", "node_type": "1", "metadata": {"date": "2023-03-16T05:00:36.956+00:00"}, "hash": "7c692bfc82f4f4f60f4ac595a54acf02089b7d6d05d61e5f6cccaf7df365114e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f6245e1-3d80-48f6-879d-fa61856520a6", "node_type": "1", "metadata": {}, "hash": "9f7f7f9f0f2a28e9e280e3dd1bb96a4ded99d2b4a65b3fee9d2f625c343bd888", "class_name": "RelatedNodeInfo"}}, "text": "TUWM:\nHow do I use a large index in deployment? I have a index over thousands of files so the final index json file size is 2GB. I would like to use this index to let users ask questions and find the answers from that data.\n\nHow I have implemented it now is just by downloading the index file from cloud storage platform and then creating an index and storing it as a variable. This though uses a lot of memory and is pretty expensive on the hosting side. I am not an expert on this. Is there a better/more efficient way of doing that?\nemil_s:\nFriendly heads up that you can always ask the kapa.ai bot in #\ud83d\ude4bask-kapa-gpt-index - here's a link to the response to your question \ud83d\ude80 \ud83e\udd99 https://discord.com/channels/1059199217496772688/1085941081063051414/1085941084124876860", "start_char_idx": 0, "end_char_idx": 767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f6245e1-3d80-48f6-879d-fa61856520a6": {"__data__": {"id_": "3f6245e1-3d80-48f6-879d-fa61856520a6", "embedding": null, "metadata": {"date": "2023-03-16T06:33:54.714+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085813176513347704", "node_type": "4", "metadata": {"date": "2023-03-16T06:33:54.714+00:00"}, "hash": "d8bc97c0995a896212962104601233547e3bf289a8abc001f37c2f2e64ecd30c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebb24d8b-bcf3-428d-a3a6-dd2499b1ad1c", "node_type": "1", "metadata": {"date": "2023-03-16T06:29:59.001+00:00"}, "hash": "05865febc18a7e3320abc8fd986548b5ef3871d92a329e7632bfd19c19837f41", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a7df105c-80ba-4472-816c-f2e2ddf06f3f", "node_type": "1", "metadata": {}, "hash": "81744da5b18f7690f7a3f626312c09a6220719c2cf4d61a565cb1a38544bf67b", "class_name": "RelatedNodeInfo"}}, "text": "Mikko:\nDepends on what index types you need though\nTUWM:\nI am using simple vector index. Is there a way to save index json file to the vector databases directly instead of making a new index again?", "start_char_idx": 0, "end_char_idx": 197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7df105c-80ba-4472-816c-f2e2ddf06f3f": {"__data__": {"id_": "a7df105c-80ba-4472-816c-f2e2ddf06f3f", "embedding": null, "metadata": {"date": "2023-03-16T14:36:36.802+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1085934652314877983", "node_type": "4", "metadata": {"date": "2023-03-16T14:36:36.802+00:00"}, "hash": "9f5de0a2ef8e34b12c6f54ef3ecd99a2eb7f0c5087922fa4294f71e07de1f26f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f6245e1-3d80-48f6-879d-fa61856520a6", "node_type": "1", "metadata": {"date": "2023-03-16T06:33:54.714+00:00"}, "hash": "472d1d211e5c7c541c2ddf911d3f266b408524bdefb9f76cf00ea700b015b36d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1cac087-30cb-4add-866f-61dd6ed2b822", "node_type": "1", "metadata": {}, "hash": "ce98b046ffa72212466cb054b2f6624985b7d1f31b7b1755c434c16db85f97e3", "class_name": "RelatedNodeInfo"}}, "text": "durden:\nis there a trick to getting the kapaai bot to respond to queries in #\ud83d\ude4bask-kapa-gpt-index ?\ntshu:\ni asked the question for u", "start_char_idx": 0, "end_char_idx": 131, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1cac087-30cb-4add-866f-61dd6ed2b822": {"__data__": {"id_": "a1cac087-30cb-4add-866f-61dd6ed2b822", "embedding": null, "metadata": {"date": "2023-03-16T19:46:39.353+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086012677068959776", "node_type": "4", "metadata": {"date": "2023-03-16T19:46:39.353+00:00"}, "hash": "b4147ac59eddc0610f7abc415e3ae41af60b463ba0bd08a51261761c22a496c9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a7df105c-80ba-4472-816c-f2e2ddf06f3f", "node_type": "1", "metadata": {"date": "2023-03-16T14:36:36.802+00:00"}, "hash": "9cd0068505bbc72f1f356d9d0a9321340ec420e2f4ea8148102bfbcc07f60bf3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a38e208b-91ed-446e-81b6-60db82d8c340", "node_type": "1", "metadata": {}, "hash": "a00b29492b45e65afe90243051e956bf6aee89c07168bb6ab96e8f51fc2f0817", "class_name": "RelatedNodeInfo"}}, "text": "Krulknul:\nI just made a composed index, and tried querying it. It takes AGES. Is that normal or did I do something wrong perhaps?\nKrulknul:\nI\u2019ll ask my question differently\n\nI figured out why it was slow. I was using a list index full of tree indices, which of course is slow because it goes through the whole list and then through all the trees.\n\nBut what would be a good way then to index a set of web pages? I have about ~140 webppages (tech documentation) and I would like to put them into a chatbot. It should be pretty quick, so I might need to use a very simple data structure or filtering. How would you go about finding the right data structure for the use case? There are so many different options to tweak!\nomari:\nsimplevectorindex should do\nKrulknul:\nSo I would just concatenate all the pages into one big lump of text and put it in a simplevectorstore?\n\nwould there be no benefit in introducing another layer?\nfor example: a vectorstore of vectorstores where each page gets its own vectorstore\nomari:\nno, you'd use simpledirectoryreader. it will add each page as its own document. that's how i've been doing it.\nKrulknul:\nSure yeah I\u2019ve been using beautifulsoup, but would i then put the documents in separate vectorstores and index those or?", "start_char_idx": 0, "end_char_idx": 1255, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a38e208b-91ed-446e-81b6-60db82d8c340": {"__data__": {"id_": "a38e208b-91ed-446e-81b6-60db82d8c340", "embedding": null, "metadata": {"date": "2023-03-16T20:16:13.28+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086020117458079925", "node_type": "4", "metadata": {"date": "2023-03-16T20:16:13.28+00:00"}, "hash": "742fe1e09a4f6c99b75365ab92adc564560680c3c3272c192ecd8800b39a7a62", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1cac087-30cb-4add-866f-61dd6ed2b822", "node_type": "1", "metadata": {"date": "2023-03-16T19:46:39.353+00:00"}, "hash": "f3cdc9b879ee65fd66b89224dc435dc81944eaa367774678fa8a0d2dbb8ea704", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a27bba67-64e7-4d83-8f42-1bd91b994a9d", "node_type": "1", "metadata": {}, "hash": "61f44fb90206203d7aeb8af1eb81a4c822dc21a6e9357c0bd6c5fccad189661f", "class_name": "RelatedNodeInfo"}}, "text": "ali:\nHey llama gang! \n\nI wanted to reach out to the community regarding a use case we have been trying to hack. We have an application that is able to record user meetings and create transcripts, summaries based off that recording.  We are attempting to use llama and GPT to query against that data thus making more accessible vs digging thru meeting notes etc. \n\nThus far our results have been poor and I suspect that we are doing something wrong.  The data we are using is saved as .json and looks like the screen shot attached. When this data is loaded in via \"SimpleDirectoryReader\" and fed into GPTSimpleVectorIndex (or any of the other modules) and queried against we get really poor results with the modal confusing different meetings, details etc. \n\nQuestions like: \"who is xyz\" , \"what is xyz working on\" , \"when did i meet with xyz\" seem to fail most of the time. \n\nI think we are structuring the data incorrectly by loading the whole table in as one document.\n\nIn any-case if anyone has any feedback it would be much appreciated.\nomari:\nnot an expert but you probably want to look into the sql index or you can try turning each row into a doc and then using simpledirectoryreader on that and feeding it into simplevector\nali:\nThat was exactly it! You cant just have one big doc! \ud83d\ude80", "start_char_idx": 0, "end_char_idx": 1291, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a27bba67-64e7-4d83-8f42-1bd91b994a9d": {"__data__": {"id_": "a27bba67-64e7-4d83-8f42-1bd91b994a9d", "embedding": null, "metadata": {"date": "2023-03-16T21:24:46.806+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086037370836615259", "node_type": "4", "metadata": {"date": "2023-03-16T21:24:46.806+00:00"}, "hash": "de1188ee4ac500edd7e96833d634ee7f231e8b58a659485434db3457b793dbb8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a38e208b-91ed-446e-81b6-60db82d8c340", "node_type": "1", "metadata": {"date": "2023-03-16T20:16:13.28+00:00"}, "hash": "1249fa2fa399eb89dbbc26c181d8320f639634c20009e9279b846201c971685f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fedfdce-a172-42fa-ab92-d739ddab864b", "node_type": "1", "metadata": {}, "hash": "c0351776d4ddbf4bdb4799619534a59f19c4bdc1d49250531d91fb34ed7015d1", "class_name": "RelatedNodeInfo"}}, "text": "cwoolum:\nHey all! I'm trying to use `KnowledgeBaseWebReader` but am running into issues. The docs are out of date(I'm going to PR the update) and it seems all of the parameters that used to be passed into `load_data` are now passed in via a constructor. I've made the updates so it at least runs. I'm no trying to parse a website but getting the following error:\n\n```\n  File \"C:\\Users\\woolumc\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\gpt_index\\indices\\base.py\", line 182, in _process_documents\n    raise ValueError(f\"Invalid document type: {type(doc)}.\")\nValueError: Invalid document type: <class 'llama_index.readers.schema.base.Document'>.\n```\n\nI'm wondering if I might have some other version mismatch going on.\n\nMy actual code looks like this\n\n```\nloader = KnowledgeBaseWebReader(root_url='https://someurl.com',\n                                    link_selectors=[\n                                        'a.docs-secondary-nav-link'],\n                                    article_path='', \n                                    body_selector='.docs-content-body',\n                                    title_selector='.heading',\n                                    subtitle_selector='.docs-description')\n\n    documents = loader.load_data()\n\n    index = GPTSimpleVectorIndex(\n        documents)\n\n    index.save_to_disk('index.json')\n```\n4bidden:\nI believe this  means the document type isn't a string.\ncwoolum:\nAfter digging in a bit more, I think the site I'm trying to parse just isn't compatible\n4bidden:\nTry the beautifulsoup reader or simple web.", "start_char_idx": 0, "end_char_idx": 1566, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fedfdce-a172-42fa-ab92-d739ddab864b": {"__data__": {"id_": "2fedfdce-a172-42fa-ab92-d739ddab864b", "embedding": null, "metadata": {"date": "2023-03-16T22:18:47.311+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086050962499711026", "node_type": "4", "metadata": {"date": "2023-03-16T22:18:47.311+00:00"}, "hash": "8c9bf9227e01f3a1c909394df63c9ea7337258d97ae57e83d28ca4a2e7c10017", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a27bba67-64e7-4d83-8f42-1bd91b994a9d", "node_type": "1", "metadata": {"date": "2023-03-16T21:24:46.806+00:00"}, "hash": "e0dc9e6f29f1ff6c49b720afef649c967511a2a1ff7137270551e1ea99bb331d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1a675c5-8629-466d-b482-94926f637324", "node_type": "1", "metadata": {}, "hash": "8a1531cd7d2fffb0a7a5c6b74a09ee1a1b243787ff881af63720e0b63b96c3f9", "class_name": "RelatedNodeInfo"}}, "text": "Rerox:\nHi everyone . is it possible to create to store different files in different folder so it retrieves only the relevant folder when i ask for something?\nomari:\ni was able to do something like this using langchain agent https://langchain.readthedocs.io/en/latest/modules/agents/examples/agent_vectorstore.html\n\noh and this too\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/langchain_demo/LangchainDemo.ipynb\nRerox:\nthanks! do you also know how i can tackle indexing 7000 pages pdf?", "start_char_idx": 0, "end_char_idx": 499, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1a675c5-8629-466d-b482-94926f637324": {"__data__": {"id_": "b1a675c5-8629-466d-b482-94926f637324", "embedding": null, "metadata": {"date": "2023-03-17T08:30:17.279+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086204851379245197", "node_type": "4", "metadata": {"date": "2023-03-17T08:30:17.279+00:00"}, "hash": "179ddfe2d8f741fbf38809c41cf779426222e23fec462f5adc01a5e00b1e335b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fedfdce-a172-42fa-ab92-d739ddab864b", "node_type": "1", "metadata": {"date": "2023-03-16T22:18:47.311+00:00"}, "hash": "463a352199d2ec9aaa97d8687d8ea2b3175bd186eb461917da29403ade136f9f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f002fd44-d3cb-451b-a6f5-dcf9b9885977", "node_type": "1", "metadata": {}, "hash": "8a396a3c0e3b197276ee8ea7ff84427b0f735434e92614b70517d6b990974f1a", "class_name": "RelatedNodeInfo"}}, "text": "tshu:\ni have made simplevectorindex from 3 docs adding up to 1000 pages. now querying it is taking 1minute sometimes. what is the best way to reduce this time\nTUWM:\nIf you are using multiple chunks then `response_mode=\"compact\"` could help. Other than that what helped me to save some time was to use vector stores.\ntshu:\nwhich vector store did you use", "start_char_idx": 0, "end_char_idx": 352, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f002fd44-d3cb-451b-a6f5-dcf9b9885977": {"__data__": {"id_": "f002fd44-d3cb-451b-a6f5-dcf9b9885977", "embedding": null, "metadata": {"date": "2023-03-17T12:49:43.066+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086270139021930506", "node_type": "4", "metadata": {"date": "2023-03-17T12:49:43.066+00:00"}, "hash": "6716f4273180b33585d509311045b3fb244738fa808caa7539539cf683f0851e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1a675c5-8629-466d-b482-94926f637324", "node_type": "1", "metadata": {"date": "2023-03-17T08:30:17.279+00:00"}, "hash": "835342d00517f453a6bd7f5a37c6be1cfdc4262e9d3865f30e504f1dda3d663a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49dbd679-e9c3-4a24-8b14-6efdae89a816", "node_type": "1", "metadata": {}, "hash": "4a57aaf8636c03a8f50347f1230f065061a03d6d6ed18b73edf06cde26530f7a", "class_name": "RelatedNodeInfo"}}, "text": "shengy:\nhow to print the final prompt that feed into gpt?\nGuille:\nHi, this should work:\n\n`logger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)`", "start_char_idx": 0, "end_char_idx": 150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49dbd679-e9c3-4a24-8b14-6efdae89a816": {"__data__": {"id_": "49dbd679-e9c3-4a24-8b14-6efdae89a816", "embedding": null, "metadata": {"date": "2023-03-18T00:09:48+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086441287319826522", "node_type": "4", "metadata": {"date": "2023-03-18T00:09:48+00:00"}, "hash": "684f7a4da498875c0398ed148c88093816172ff61dcdecd82f590c7bb043f6d5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f002fd44-d3cb-451b-a6f5-dcf9b9885977", "node_type": "1", "metadata": {"date": "2023-03-17T12:49:43.066+00:00"}, "hash": "bd03f9d69feb8556fc521cfc958537f5527f7355a76c4630c0b7ee1b6f91bc1d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f51c38d5-669d-4cbc-a94a-728cda22a1eb", "node_type": "1", "metadata": {}, "hash": "6046d10746e693431bde8e0c52b4cb15fcfd19c995e3f3ec0b50581bfcdbb955", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nWhat is the best way to pass a custom prompt for GPT-4?\nLogan M:\nI've written this once or twice somewhere... I'll see if I can find the message and tag you lol\nTeemu:\nI saw one of them but I thought that was for davinci models or do they use the same?\nLogan M:\nAh right, GPT4 uses the chat completion endpoint\nTeemu:\nYeah I couldn't find one in the documentation for setting a custom prompt for the chat models like GPT-4\nLogan M:\nHere's the code for the specific default ChatGPT prompts.  You can probably follow this to create similar prompts for GPT4 \n\nhttps://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/chat_prompts.py\nTeemu:\nI guess I found an interesting problem. I tried multiple setups with same prompt and settings with gpt-3.5-turbo and gpt-4 (even with trying custom prompts). \n\nGPT-4 has a tendency to input extra information not included in the embeddings, when changing to gpt-turbo all this dissapears.\nomari:\nmaybe the instruction to \" refine the original answer to better \"\n    \"answer the question.\" is making it get creative in how it interprets refine.", "start_char_idx": 0, "end_char_idx": 1098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f51c38d5-669d-4cbc-a94a-728cda22a1eb": {"__data__": {"id_": "f51c38d5-669d-4cbc-a94a-728cda22a1eb", "embedding": null, "metadata": {"date": "2023-03-18T00:47:03.293+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086450662818197566", "node_type": "4", "metadata": {"date": "2023-03-18T00:47:03.293+00:00"}, "hash": "2f3712fa731da61c380bc2779fb19570d5ae086d071ac440ae2e65c81187ea2f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49dbd679-e9c3-4a24-8b14-6efdae89a816", "node_type": "1", "metadata": {"date": "2023-03-18T00:09:48+00:00"}, "hash": "13e192bcd4041d37b536406db496ea09e81538a2cf6ee1a9a56057c3ac97b489", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7cd4b425-d7c3-4536-b76f-37a77a5715d4", "node_type": "1", "metadata": {}, "hash": "9bbc98a169966a05d658dae4537f7adc13dd6124fb124ea85ec69b86372059cf", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\n@Teemu I suspect issues similar to this will pop up for each model. Every model will probably work best with slightly different prompt templates\n\nYou might have to be more explicit or creative with the prompts to avoid using external information/hallucinating\nTeemu:\nYeah I guess they will need a new wrapper then that's GPT-4 specific?\nLogan M:\nAlmost need a \"prompt library\" for llama index haha with the best known prompts for each model. \n\nJust takes a lot of experimenting to find good ones\nTeemu:\nYeah, probably. Aren't the best ones loaded by default though?\nLogan M:\nCurrently, llama index is only optimized for two models, davinci, and only recently some optimizations for chatgpt\nTeemu:\nYeah but those are default, when doing Q/A I've never had to specify specific instructions except now with these GPT-4 issues\nLogan M:\nYup, under the hood llama index detects chatgpt vs. Not chatgpt lol\nTeemu:\nI guess similar thing could be implemented for GPT-4 vs GPT-turbo?", "start_char_idx": 0, "end_char_idx": 982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7cd4b425-d7c3-4536-b76f-37a77a5715d4": {"__data__": {"id_": "7cd4b425-d7c3-4536-b76f-37a77a5715d4", "embedding": null, "metadata": {"date": "2023-03-18T18:54:32.651+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086724338461462541", "node_type": "4", "metadata": {"date": "2023-03-18T18:54:32.651+00:00"}, "hash": "db385693643448e740aefe78d5c792ca2dd08cfb1fe3078b455e93a5e94fc255", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f51c38d5-669d-4cbc-a94a-728cda22a1eb", "node_type": "1", "metadata": {"date": "2023-03-18T00:47:03.293+00:00"}, "hash": "ef6c34846611a084e3f7cadbc9946b0ab4bfd10e7fb182c427953db8a4932dad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05a52f6c-3cf3-44ef-8d62-178aa93e7b26", "node_type": "1", "metadata": {}, "hash": "d4c018dae62727f73c9795a807eae8eb923c5e22e065a66d503f9cc4df301b83", "class_name": "RelatedNodeInfo"}}, "text": "lukesta:\nHi, I just started out with this and am trying to use a different llm. I'm using\n```\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"text-davinci-002\"))\nindex = GPTSimpleVectorIndex(documents, llm_predictor=llm_predictor)\n```\n\nhowever when I check the logs the endpoint that is being called is always ada:\nDEBUG:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/engines/text-embedding-ada-002/embeddings\n\nI just followed the docs but I'm probably missing something trivial.\nmattipatti:\nwhen indexing the documents the ada embeddings api is used for each doc.  then when querying, the query also first goes through the ada embedding api, then the embeddings are used to find docs to match query. then the LLM davinci api is used to create is used to summarize the docs.    so basically on indexing only ada, and on querying both ada and davinci.\nlukesta:\nAh I see, the vector indexing is via ada and only the final query with the provided model. That makes sense. thanks", "start_char_idx": 0, "end_char_idx": 1029, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05a52f6c-3cf3-44ef-8d62-178aa93e7b26": {"__data__": {"id_": "05a52f6c-3cf3-44ef-8d62-178aa93e7b26", "embedding": null, "metadata": {"date": "2023-03-19T02:05:48.774+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086832870787666030", "node_type": "4", "metadata": {"date": "2023-03-19T02:05:48.774+00:00"}, "hash": "cdaabb07760cd1f94262abbdc203d5a913114ed909356989438e37abf0e948e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7cd4b425-d7c3-4536-b76f-37a77a5715d4", "node_type": "1", "metadata": {"date": "2023-03-18T18:54:32.651+00:00"}, "hash": "4cc8c2ca0e74d58b3993f958fdc7998eab3643d85804b985a47bcef4efe83d2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79383abe-7a84-4472-a021-52be7e9722ac", "node_type": "1", "metadata": {}, "hash": "49a4f5906d04598ece3b9626ede79c1ddabad12bd73f31e1a5e3ed3ec6acf7b1", "class_name": "RelatedNodeInfo"}}, "text": "Andrew Fang:\nam I doing something wrong? setting max_tokens to 1024 at index creation, save to disk, then when I load from disk and get the metadata it goes back to 256?\nLogan M:\nPass the llm_predictor back in when you do load_from_disk\nAndrew Fang:\ndo you pass it inside load_from_disk like `load_from_disk('gpt_index_indices/test.json', llm_predictor=llm_predictor)`? It's still showing the default 256, but I think I might be doing it incorrectly", "start_char_idx": 0, "end_char_idx": 449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79383abe-7a84-4472-a021-52be7e9722ac": {"__data__": {"id_": "79383abe-7a84-4472-a021-52be7e9722ac", "embedding": null, "metadata": {"date": "2023-03-19T09:52:48.839+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086950395458355292", "node_type": "4", "metadata": {"date": "2023-03-19T09:52:48.839+00:00"}, "hash": "9d5e290b834ec248e15faefb6e264a331f0e2ae408ee7fa201d9131c7eb0c9a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05a52f6c-3cf3-44ef-8d62-178aa93e7b26", "node_type": "1", "metadata": {"date": "2023-03-19T02:05:48.774+00:00"}, "hash": "e4e95a2c62abb2116993a95d1ef744e12d3a46eaaa1b09253d61f68d049f8b7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba1b6514-adf9-4b7f-ba55-118f2d1219ee", "node_type": "1", "metadata": {}, "hash": "64537508bdeb7618294e17e8b8171062adf073410af858567d648681263f02f0", "class_name": "RelatedNodeInfo"}}, "text": "SteveC:\nLooking for some advice as I am not sure I am using the most efficient method to keep my news database uptodate.\nOne of the tasks I am doing is collating news articles from a particular sector.\nI drop articles into a folder, loading them  and index using documents = SimpleDirectoryReader('data/jsondata').load_data()\nWhat I am doing here is constantly rebuilding the index from scratch every week, even if I've only added a single document that week.\n\nSeems inefficient.  Is there a better way to do it? \nThanks\nJack2020:\nyes the same question, I do the same, but I don't think it is efficient.  I think it must be a way to accumulate rather than recreate every time. Hope some one can help.", "start_char_idx": 0, "end_char_idx": 700, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba1b6514-adf9-4b7f-ba55-118f2d1219ee": {"__data__": {"id_": "ba1b6514-adf9-4b7f-ba55-118f2d1219ee", "embedding": null, "metadata": {"date": "2023-03-19T11:03:27.658+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086968174353862687", "node_type": "4", "metadata": {"date": "2023-03-19T11:03:27.658+00:00"}, "hash": "3057c08e836acdbff9d63925591a76d4c10fdca54621ada8c47b681b48bdaf65", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79383abe-7a84-4472-a021-52be7e9722ac", "node_type": "1", "metadata": {"date": "2023-03-19T09:52:48.839+00:00"}, "hash": "458582e625a9b208acfad0be2b381d2f5ac260b448d3dba2c863e25fad6e5f66", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b1194a7-bf5c-463b-bd78-5e516ff325a8", "node_type": "1", "metadata": {}, "hash": "627bb8eb38db4aba90ec4401b13cb9091e642997998fde21666f0449c0d09af4", "class_name": "RelatedNodeInfo"}}, "text": "bSharpCyclist:\nYou'll probably need the PyPDF2 package.\nDanus:\nI managed to fix it, I used the SimpleDirectoryReader but I had to filter out unrelated files (not PDF files) and corrupted PDF files", "start_char_idx": 0, "end_char_idx": 196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b1194a7-bf5c-463b-bd78-5e516ff325a8": {"__data__": {"id_": "7b1194a7-bf5c-463b-bd78-5e516ff325a8", "embedding": null, "metadata": {"date": "2023-03-19T11:04:11.282+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086968357326180395", "node_type": "4", "metadata": {"date": "2023-03-19T11:04:11.282+00:00"}, "hash": "78df5c7857a6f065b5c5c0759bb21fb7028bc5bcd97b8c2b5cf5cf6e37c8c981", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba1b6514-adf9-4b7f-ba55-118f2d1219ee", "node_type": "1", "metadata": {"date": "2023-03-19T11:03:27.658+00:00"}, "hash": "0cc48ca09080133f68541c0dcf18f3d62b24aa4eae830c0ebed5d5c4f664dc3d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5a5f6857-2100-4b3e-851a-f490621aebeb", "node_type": "1", "metadata": {}, "hash": "ee207634b6ada316f8aafc63199e20f0dfcc84219360dcd28ab617a8604b7d94", "class_name": "RelatedNodeInfo"}}, "text": "Krulknul:\nI am having this problem where i\u2019m building an index and it simply\u2026. stops and doesn\u2019t say why. it gets stuck on queries, but it\u2019s very random on which query it gets stuck.\nKrulknul:\nAnyone still having this problem? It\u2019s literally unusable for me\nLogan M:\nSounds like openAI is having some issues \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 309, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a5f6857-2100-4b3e-851a-f490621aebeb": {"__data__": {"id_": "5a5f6857-2100-4b3e-851a-f490621aebeb", "embedding": null, "metadata": {"date": "2023-03-19T11:27:47.709+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086974298251608116", "node_type": "4", "metadata": {"date": "2023-03-19T11:27:47.709+00:00"}, "hash": "4760b9ae1cc13979a0eac3370e190c30bb3b32d91d6c2638728c2faa76f46068", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b1194a7-bf5c-463b-bd78-5e516ff325a8", "node_type": "1", "metadata": {"date": "2023-03-19T11:04:11.282+00:00"}, "hash": "d7ec093f062cf154889ff9994cb76065e3574d731041a7e5394eb7ca6ddc898a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20b8fb19-814e-4770-b673-fef8114d86b2", "node_type": "1", "metadata": {}, "hash": "d370bdb2eaa99107d5d84840a40ee5c8172eaa9ee36e79b621e210adc39d8678", "class_name": "RelatedNodeInfo"}}, "text": "giorgio:\nHello! Llama index is amazing. I'm trying to customize prompt so that it answers the question in the same language. Currently, I ask a question in french and it answers in english. Is there a way to do that or do I have to use a 3rd party API like DeepL to translate the answer?\nKrulknul:\nMaybe there's something you can add to the prompt like \"answer this in french\" or something like that which is invisible to the user", "start_char_idx": 0, "end_char_idx": 430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20b8fb19-814e-4770-b673-fef8114d86b2": {"__data__": {"id_": "20b8fb19-814e-4770-b673-fef8114d86b2", "embedding": null, "metadata": {"date": "2023-03-19T11:40:10.18+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086977412400693280", "node_type": "4", "metadata": {"date": "2023-03-19T11:40:10.18+00:00"}, "hash": "1096a7c9f76cf23e40992e938f2fa8f03b4b4881c1039b6a83edddb5e665a8c8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5a5f6857-2100-4b3e-851a-f490621aebeb", "node_type": "1", "metadata": {"date": "2023-03-19T11:27:47.709+00:00"}, "hash": "8e34cc7ca8cefd26d4c460cb586b48b22e55567a8acfe4424f4aac46d5b84fc6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a804445f-965f-45c6-995b-0983e4af72d7", "node_type": "1", "metadata": {}, "hash": "cc3b126903bfd02ae7fe06aa83631050cb496f2131978bbf20ac5755d22bebbd", "class_name": "RelatedNodeInfo"}}, "text": "Danus:\nIs there anyway to get some sort of status for GPTSimpleVectorIndex? \nI am parsing 1400+ pdf files however I dont know if its close to being done\nAndreaSel93:\nI do it using .insert() in a for loop", "start_char_idx": 0, "end_char_idx": 203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a804445f-965f-45c6-995b-0983e4af72d7": {"__data__": {"id_": "a804445f-965f-45c6-995b-0983e4af72d7", "embedding": null, "metadata": {"date": "2023-03-19T12:08:56.917+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086984654860599366", "node_type": "4", "metadata": {"date": "2023-03-19T12:08:56.917+00:00"}, "hash": "27b412f4a5dbc34372329dafeeb4c960f147ff5c75830182432352f7471bc88d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20b8fb19-814e-4770-b673-fef8114d86b2", "node_type": "1", "metadata": {"date": "2023-03-19T11:40:10.18+00:00"}, "hash": "30f9ace4ec865c9ca5ff08b29ca06863b3024fab286b649fdabfebd29c9ee2e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff38bf2e-d57e-4a96-ac62-6502208c0ec8", "node_type": "1", "metadata": {}, "hash": "e9bd3e57ad1251645780eea9a6c414cf9560918dc9aca9727733878b5f0fbce5", "class_name": "RelatedNodeInfo"}}, "text": "itsgeorgep:\nI'm trying to some functionality with LlamaIndex and implement it in the simplest possible way. Here are the desired features:\n    - user can create a folder\n    - user can add any number of files to that folder\n    - user can ask questions about the files in that folder\n\nThis seems like a super simple use case. But I'm having a lot of trouble getting it to work. What's the best way to do this? \n\nShould all the files in the folder be part of one index? Or should I build an index for each file, then later when a user queries the folder, combine them/build a new index that contains everything?\nKrulknul:\nAt first I tried this naive approach of dumping all the files into one index, but it didn't quite have the accuracy I wanted, so then I started experimenting with composed indices to make the structure more logical and it really helps, but it's slower if you want to do it for different sets of files because you'd have to build complex indices each time, plus the kind of index you'll want to use depends on what kind of files you have and what their structure is.\nbSharpCyclist:\nI thought of doing the same for a collection of pdf books. Create a separate index for each book, perhaps a tree and then a list index on top of that.", "start_char_idx": 0, "end_char_idx": 1252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff38bf2e-d57e-4a96-ac62-6502208c0ec8": {"__data__": {"id_": "ff38bf2e-d57e-4a96-ac62-6502208c0ec8", "embedding": null, "metadata": {"date": "2023-03-19T12:49:25.028+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1086994839096266783", "node_type": "4", "metadata": {"date": "2023-03-19T12:49:25.028+00:00"}, "hash": "c41306b46e0c47767dbdffbd56862503a03964c9f63b944df6d63213d643e4ed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a804445f-965f-45c6-995b-0983e4af72d7", "node_type": "1", "metadata": {"date": "2023-03-19T12:08:56.917+00:00"}, "hash": "c4b29d4a0b02f6696e2e9fe8c4b5708a8cef35c094e556de302ab942955c8b5e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d587fd12-fc78-4e54-8897-eaeda297ccc6", "node_type": "1", "metadata": {}, "hash": "e69b1344c0bdfbec9e7aecd05f6b543006e9fab0a9ad7ac0bdce4e50d2db5caf", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nI create a list of docs and than i iterate through it inserting each doc in the index. In this way you can see exceptions and also monitor the status. It takes hours with thousands of documents though\nKrulknul:\nAnd you can also store the index every time so if something goes wrong you can restart where you ended i guess", "start_char_idx": 0, "end_char_idx": 334, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d587fd12-fc78-4e54-8897-eaeda297ccc6": {"__data__": {"id_": "d587fd12-fc78-4e54-8897-eaeda297ccc6", "embedding": null, "metadata": {"date": "2023-03-19T13:11:59.24+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087000519073079337", "node_type": "4", "metadata": {"date": "2023-03-19T13:11:59.24+00:00"}, "hash": "1188bba0234ea41ed856e697f0b1781de5d89f78e789b33287a6f44db95376b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ff38bf2e-d57e-4a96-ac62-6502208c0ec8", "node_type": "1", "metadata": {"date": "2023-03-19T12:49:25.028+00:00"}, "hash": "18d6e49c6baace507eda5c193c708753763c74ee3e7a63c63607b1257b12735e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e336df57-5aa0-4b8c-a279-2a5d4f474bac", "node_type": "1", "metadata": {}, "hash": "ae19491e87290f9a9bd823819ab307296c1aeb0c3767fdb5d0b9aa13396722ca", "class_name": "RelatedNodeInfo"}}, "text": "Rishav:\n@KKT Hello, I want help to know if gpt index may help in this case or not. I have an open ai  fine-trained model. Will GPT Index be help full in this case, as my corpus goes above 4096 tokens.\nKKT:\nYou probably could use a vector index store as the embeddings model is different from your fine tuned model. Then the fine tuned model could be used to synthesize the returned documents.", "start_char_idx": 0, "end_char_idx": 392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e336df57-5aa0-4b8c-a279-2a5d4f474bac": {"__data__": {"id_": "e336df57-5aa0-4b8c-a279-2a5d4f474bac", "embedding": null, "metadata": {"date": "2023-03-19T13:35:03.047+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087006323180306563", "node_type": "4", "metadata": {"date": "2023-03-19T13:35:03.047+00:00"}, "hash": "15ac363d88aa85478cfeb64a242fa0f7a7173da64a35f4bc07c13ba6f47c2c3a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d587fd12-fc78-4e54-8897-eaeda297ccc6", "node_type": "1", "metadata": {"date": "2023-03-19T13:11:59.24+00:00"}, "hash": "2e13962def854017cbc941abfa7486263c2e2ca87d145aa001cbf91fe43faa75", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e527282e-f2ad-43a5-b455-9b6b6ff3132b", "node_type": "1", "metadata": {}, "hash": "29f06ed6dc613e93dad8e7b678acbc171f22d56d073ce10dbae9a29587bacc6f", "class_name": "RelatedNodeInfo"}}, "text": "SteveC:\nhow do I ask llamma meaningful questions?  I have indexed 8 articles (json)  from one source (website)  and an article in markup format from another website. loaded them in a directory, created an index.json ( they are all there).\nWhen I ask for a table of contents  or how many articles there are in the index  it tells me One and lists a random article title from it.\nLogan M:\nThose types of questions require looking at every document. I would use a list index for that most likely.\nSteveC:\nThanks again @Logan M", "start_char_idx": 0, "end_char_idx": 523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e527282e-f2ad-43a5-b455-9b6b6ff3132b": {"__data__": {"id_": "e527282e-f2ad-43a5-b455-9b6b6ff3132b", "embedding": null, "metadata": {"date": "2023-03-19T13:37:38.945+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087006977063923713", "node_type": "4", "metadata": {"date": "2023-03-19T13:37:38.945+00:00"}, "hash": "61304b3da19be4960d8339ef5f6eda18f51bd5f8c837a4d1d5793fb31d838106", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e336df57-5aa0-4b8c-a279-2a5d4f474bac", "node_type": "1", "metadata": {"date": "2023-03-19T13:35:03.047+00:00"}, "hash": "178e32713420febcc5332a17d144f0095875a48d2579ef1f434ca18c62c2380e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc3e1ed2-19fa-45c9-95eb-9a92446a4e16", "node_type": "1", "metadata": {}, "hash": "8e16f580039ae0a13457b7a2f91c87020f463bb6f0cb1affa02c84feeefce043", "class_name": "RelatedNodeInfo"}}, "text": "Jack2020:\n@SteveC hi, it seems we are doing the same thing!\ud83e\udd1d  I am also using news dataset. have the same problem again.\nSteveC:\nI read a wordpress feed into a json  then fed in the jason.\nlater i will try a separate instance where I add the articles as separate text files  and see if that works any better, will let you know @Jack2020", "start_char_idx": 0, "end_char_idx": 336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc3e1ed2-19fa-45c9-95eb-9a92446a4e16": {"__data__": {"id_": "fc3e1ed2-19fa-45c9-95eb-9a92446a4e16", "embedding": null, "metadata": {"date": "2023-03-19T14:38:48.466+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087022368150540318", "node_type": "4", "metadata": {"date": "2023-03-19T14:38:48.466+00:00"}, "hash": "516c36de7dfd9993b47dc8ad2994d1f08c6bcebca84b0ebc3457d4596aa88676", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e527282e-f2ad-43a5-b455-9b6b6ff3132b", "node_type": "1", "metadata": {"date": "2023-03-19T13:37:38.945+00:00"}, "hash": "125a319167aea40cf769687100c7bcfbbacc2da4fcdc80d845f25f1e0f9dde90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f4393d3-9f4e-40fe-bd92-e8eddb377c51", "node_type": "1", "metadata": {}, "hash": "2623def30b1582e23eb4d4b256a8b28c2e761d4d2e074d9406093c3e5b33114a", "class_name": "RelatedNodeInfo"}}, "text": "Danus:\nHow to get the sources from which the query is based on\nLogan M:\nUse `response.source_nodes` after getting the response from the query", "start_char_idx": 0, "end_char_idx": 141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f4393d3-9f4e-40fe-bd92-e8eddb377c51": {"__data__": {"id_": "9f4393d3-9f4e-40fe-bd92-e8eddb377c51", "embedding": null, "metadata": {"date": "2023-03-19T16:32:22.744+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087050949303992472", "node_type": "4", "metadata": {"date": "2023-03-19T16:32:22.744+00:00"}, "hash": "7f39d71cc70e9f7f33a7138684b47ae4e283cf48ad058db7c5b030ee5dd63884", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc3e1ed2-19fa-45c9-95eb-9a92446a4e16", "node_type": "1", "metadata": {"date": "2023-03-19T14:38:48.466+00:00"}, "hash": "22fef8f77d2bbaeb212780ea6518d934180930de10f139a8901084d4a7672461", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c728e66c-0379-4de9-ba80-e143d6301542", "node_type": "1", "metadata": {}, "hash": "58f181f6e514e4cc41d52f6518310bb907ba1275770e6a2fea03a8ee0fc27a18", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nHi, I have a problem when querying with ChatGPTLLMPredictor(). It doesn't work. Is it the same for other people ??\nLogan M:\nUse the ChatOpenAI class instead, I think some recent changes broke the ChatGPTLLMPredictor (plus it might be deprecated lol) \n\nSee this for an example\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/SimpleIndexDemo-ChatGPT.ipynb\nTeemu:\nWait isn't the correct class OpenAIChat? Why is there ChatOpenAI also? I just tried both and OpenAIChat worked a lot better hmm\nLogan M:\nOh you might be right! Thanks for catching that (I have no idea why they have two)", "start_char_idx": 0, "end_char_idx": 617, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c728e66c-0379-4de9-ba80-e143d6301542": {"__data__": {"id_": "c728e66c-0379-4de9-ba80-e143d6301542", "embedding": null, "metadata": {"date": "2023-03-19T16:36:09.68+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087051901142585395", "node_type": "4", "metadata": {"date": "2023-03-19T16:36:09.68+00:00"}, "hash": "7be4c9a661e6eacf08cdefd86d7946bdb409775afff6fdac18d1b8adc77b7880", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f4393d3-9f4e-40fe-bd92-e8eddb377c51", "node_type": "1", "metadata": {"date": "2023-03-19T16:32:22.744+00:00"}, "hash": "026c5caef88c5189bd021e937b5ab9dfa4e60733c8a8d9198b1bfb42bcff7715", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "500f3ed1-92db-46fe-be0a-bac65768cdd9", "node_type": "1", "metadata": {}, "hash": "f82964a62f33a53dbe67cacc46c77dbda326d001deadb6490260ec84ef9eaf97", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nDoes the ChatopenAI class work in a similar way? I mean the template prompt is the same ? and does it use the same schemas like (system, user) ?\nLogan M:\nYup! It's implemented by the langchain library\nstampedelin:\nspeak of that. I don't know why there are two class about gptchat in langchain one is ChatOpenAI and another one is OpenAIChat?", "start_char_idx": 0, "end_char_idx": 351, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "500f3ed1-92db-46fe-be0a-bac65768cdd9": {"__data__": {"id_": "500f3ed1-92db-46fe-be0a-bac65768cdd9", "embedding": null, "metadata": {"date": "2023-03-19T16:43:14.128+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087053681406509066", "node_type": "4", "metadata": {"date": "2023-03-19T16:43:14.128+00:00"}, "hash": "edaded59a3d093be692d9e72d8fd78542e324832bca803e7b29dfa3900322279", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c728e66c-0379-4de9-ba80-e143d6301542", "node_type": "1", "metadata": {"date": "2023-03-19T16:36:09.68+00:00"}, "hash": "20cabb75fc612534a650475e91944e3427a874f2df36b03e8f2480f433a582df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89175def-e29e-426c-ae7a-460464ceb01c", "node_type": "1", "metadata": {}, "hash": "95cc1596108694bc55a8fe9d6da4777eb53e2603089dbd4f26b684c70a142066", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nWith the langchain I don't understand how I can for example pass the preprend message to the model like that : ChatGPTLLMPredictor(prepend_messages=[{\"role\": \"system\", \"content\": self.chatbot_role},]) :/\nnam604 | Chris:\nFacing the same issue! Let me know if you find a solution... looking through langchains code I see it takes `**kwargs` so a bit vague on exactly what params can be passed.", "start_char_idx": 0, "end_char_idx": 401, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89175def-e29e-426c-ae7a-460464ceb01c": {"__data__": {"id_": "89175def-e29e-426c-ae7a-460464ceb01c", "embedding": null, "metadata": {"date": "2023-03-19T16:54:50.094+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087056600499499098", "node_type": "4", "metadata": {"date": "2023-03-19T16:54:50.094+00:00"}, "hash": "bd45a1cbcc061571cb87a514b76e8b506804763f888389e91f38421936a07552", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "500f3ed1-92db-46fe-be0a-bac65768cdd9", "node_type": "1", "metadata": {"date": "2023-03-19T16:43:14.128+00:00"}, "hash": "c85414beee4da8918ac0bad9e6270bf36389d66c2b8808f7c4abe552b9aa4e1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b435df0-2535-42c9-ab90-2d745f019bb1", "node_type": "1", "metadata": {}, "hash": "e50db2bac3c09ca4b3ba31a0b3dc8e2b6ea8a7d2162e8e323956727c30998870", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\n\nstampedelin:\nI noticed that too. Why there are two classes that basically the same thing?\nLogan M:\nThe source code looks nearly identical at a first glance\n\nhttps://github.com/hwchase17/langchain/blob/master/langchain/llms/openai.py#L537\n\nhttps://github.com/hwchase17/langchain/blob/master/langchain/chat_models/openai.py#L103\nTeemu:\nYeah I just ran some tests and the outputs were actually the same with everything accounted equal in the code", "start_char_idx": 0, "end_char_idx": 451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b435df0-2535-42c9-ab90-2d745f019bb1": {"__data__": {"id_": "6b435df0-2535-42c9-ab90-2d745f019bb1", "embedding": null, "metadata": {"date": "2023-03-19T17:18:32.617+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087062566993404004", "node_type": "4", "metadata": {"date": "2023-03-19T17:18:32.617+00:00"}, "hash": "1b5858b7144141885f1d2094d06f10544abf6ecb719a09bddf09dacefb66d90d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89175def-e29e-426c-ae7a-460464ceb01c", "node_type": "1", "metadata": {"date": "2023-03-19T16:54:50.094+00:00"}, "hash": "fa04c4fa91945dbcde98df02ce5bc9c8055051cd121e176a75854a0ceb7ff3f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2aaa172d-b25f-4947-9f07-8108ce2bd189", "node_type": "1", "metadata": {}, "hash": "87bf3a78cf53c9a1dcfd85f189310e55bcdcc2de99b8e4163c5c2cc72ea1a21d", "class_name": "RelatedNodeInfo"}}, "text": "NeveraiN:\nif I run query simply through a py script ,everything is fine. but if I call the py script by spawn in nodejs. llm token count is 0, with empty response. any idea why?\nLogan M:\nHard to say tbh. Are there any logs? Maybe the api key isn't in the env when spawning? \n\nPersonally, you might be better off building a dedicated API server in python using Flask or FastAPI. You won't have to re-load the index every time you want to query\nNeveraiN:\ngood idea ,a dedicated server will be much better and easier,thx", "start_char_idx": 0, "end_char_idx": 517, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2aaa172d-b25f-4947-9f07-8108ce2bd189": {"__data__": {"id_": "2aaa172d-b25f-4947-9f07-8108ce2bd189", "embedding": null, "metadata": {"date": "2023-03-20T11:58:26.289+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087344397680648324", "node_type": "4", "metadata": {"date": "2023-03-20T11:58:26.289+00:00"}, "hash": "787c64a64022fdeed73418b6b87c175b8cd7dbb8a8c86ef07cd5206497e0423c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b435df0-2535-42c9-ab90-2d745f019bb1", "node_type": "1", "metadata": {"date": "2023-03-19T17:18:32.617+00:00"}, "hash": "a0b52562164d05d112395df2205642df813d491e66048df6b802dd8a9046e976", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f128100-cacd-45d2-825d-14fbb7c063f4", "node_type": "1", "metadata": {}, "hash": "5678bdeaa8596dbb6f7d2a0620d02e0cc6980433436327379f12f5febdf3ceaf", "class_name": "RelatedNodeInfo"}}, "text": "Danus:\nHello all \ud83d\ude42 I have 2 different clusters(made out of thousands of documents) of data that I merged into one index, when I ask a question which is relevant for both clusters I see that llamaindex queries only one document instead of attempting to find more than one document which could answer my question.\n\nFor example -\nI indexed data which explains about 10 types of vegetables of a family and another piece of data which explains on how to grow these vegetables.\nWhen querying \"List 2 types of vegetables and how can I grow them\" the source node might only use on document about the types of vegetables. The result is that GPT gives a great answer about the vegetables but lacks information on how to grow them.\n\nWhat I need is that llamaindex would use 2 different nodes or more during the query instead of just one\nAndreaSel93:\nSet \u201csimilarity_top_k = n\u201d when querying. Where n is the number of nodes you like", "start_char_idx": 0, "end_char_idx": 920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f128100-cacd-45d2-825d-14fbb7c063f4": {"__data__": {"id_": "0f128100-cacd-45d2-825d-14fbb7c063f4", "embedding": null, "metadata": {"date": "2023-03-20T12:12:42.385+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087347988407525377", "node_type": "4", "metadata": {"date": "2023-03-20T12:12:42.385+00:00"}, "hash": "61328300b9c4aea44da9ea09e4051a30b3b57881c814edfcfacba0e6b96618eb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2aaa172d-b25f-4947-9f07-8108ce2bd189", "node_type": "1", "metadata": {"date": "2023-03-20T11:58:26.289+00:00"}, "hash": "9d3a20e6f85ccf172b282fa45381449e9e3fc22525a23d6d2bbda09c910a0896", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e785808e-baf9-4a99-bc4d-3fb040ecbbfc", "node_type": "1", "metadata": {}, "hash": "b8df8b22920ea073d9ba4f7574c2016b91f5f66a2b646ceb08a7131f879287ec", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nSimilarity*\nDanus:\nI asked kapa-gpt and it offered a different solution I was wondering if its perhaps better than what I did to solve the question I just asked. Is it ok if I DM you?\nAndreaSel93:\nOk! But i\u2019m an user like you \ud83d\ude04", "start_char_idx": 0, "end_char_idx": 240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e785808e-baf9-4a99-bc4d-3fb040ecbbfc": {"__data__": {"id_": "e785808e-baf9-4a99-bc4d-3fb040ecbbfc", "embedding": null, "metadata": {"date": "2023-03-20T12:14:50.947+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087348527635644417", "node_type": "4", "metadata": {"date": "2023-03-20T12:14:50.947+00:00"}, "hash": "31c823a4271fe7b798dec94fdbc5656003c9cdf546bd6ee72319d9aee8603ca2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f128100-cacd-45d2-825d-14fbb7c063f4", "node_type": "1", "metadata": {"date": "2023-03-20T12:12:42.385+00:00"}, "hash": "4426c9158f81a1d5a8fc551acd88f2805fecea298d9978b5c85cccf0e1c69d78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4de0b387-b0cd-4384-bd78-1a8886dbd5dd", "node_type": "1", "metadata": {}, "hash": "39e0d237af84d153122a6520bd4b034e5f34526b10399c052c6880603fcd9922", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nHas anyone managed to successfully query openAI's LLM more than 10 times in a loop? it seems to have severe capacity issues\nAndreaSel93:\nI needed 7-8 iterations, and it worked well. Never tried more", "start_char_idx": 0, "end_char_idx": 205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4de0b387-b0cd-4384-bd78-1a8886dbd5dd": {"__data__": {"id_": "4de0b387-b0cd-4384-bd78-1a8886dbd5dd", "embedding": null, "metadata": {"date": "2023-03-20T13:16:45.513+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087364107654680668", "node_type": "4", "metadata": {"date": "2023-03-20T13:16:45.513+00:00"}, "hash": "d160b769c5b5439efdbd8d75692ebb5cc6b1a02e006a88b7d8b126fed526c840", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e785808e-baf9-4a99-bc4d-3fb040ecbbfc", "node_type": "1", "metadata": {"date": "2023-03-20T12:14:50.947+00:00"}, "hash": "440f69bde2a5652f9ff8b32d455beea4a76aa40bf26619a1efc5aeb8b6f0e9fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89cf293c-86b4-4b0b-aa4c-b867f62ee531", "node_type": "1", "metadata": {}, "hash": "5da056b39f60883c7a888a2b6a8efcddb6f20a438d902b32275c40150204035c", "class_name": "RelatedNodeInfo"}}, "text": "bSharpCyclist:\nI do think it's an issue with OpenAI at the moment. I often see this ...\n\n```\nINFO:openai:error_code=None error_message='The server is currently overloaded with other requests. Sorry about that! You can retry your request, or contact us through our help center at help.openai.com if the error persists.' error_param=None error_type=server_error message='OpenAI API error received' stream_error=False\n````\nTeemu:\nYup, servers are experiencing high load currently. Everything is quite slow atm", "start_char_idx": 0, "end_char_idx": 506, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89cf293c-86b4-4b0b-aa4c-b867f62ee531": {"__data__": {"id_": "89cf293c-86b4-4b0b-aa4c-b867f62ee531", "embedding": null, "metadata": {"date": "2023-03-20T16:27:52.851+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087412205156303019", "node_type": "4", "metadata": {"date": "2023-03-20T16:27:52.851+00:00"}, "hash": "4b2a67b4a629c29d03fad4650e8bed0a88513793c3efdc0fb222e0f9865044e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4de0b387-b0cd-4384-bd78-1a8886dbd5dd", "node_type": "1", "metadata": {"date": "2023-03-20T13:16:45.513+00:00"}, "hash": "6e20e4cf2f13999d9b0017c1e26542b8f23ed240f6db2f8e0dedd3f0f607ed63", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bdf522cf-aacc-4652-afe0-2421e6b4f8a7", "node_type": "1", "metadata": {}, "hash": "d0ad5ce0a098e188c7485ea377419fc84d4a7f314ed9c615c476fbbdec38e0aa", "class_name": "RelatedNodeInfo"}}, "text": "Circlecope:\nFor now response.get_formatted_sources() does give the doc id of the source, but I would like to know the names of the associated documents\nbSharpCyclist:\nI add the filename as metadata and can see that when I get the sources\nCirclecope:\nOh I see that in the load_data() method; thank you!\nbSharpCyclist:\nThe parameter to loaddata is a boolean to indicate if you want to use the metadata. Then there is parameter that can be passed to the reader to provide the metadata. That's how I understand it. For now, I do something like below... I will in time add more metadata, but I'm still playing/learning \ud83d\ude42\n\n```\ndef filename_to_metadata(filename: str) -> Dict[str, Any]:\n    return {\"filename\": filename}\n\ndirectory = 'stuff'\n\n# Read documents from disk\ndocuments = SimpleDirectoryReader(directory, file_metadata=filename_to_metadata).load_data()\n```\nCirclecope:\nI see. This explains why I can see the filename appended to the front of the source text after I do this. Thanks!", "start_char_idx": 0, "end_char_idx": 985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bdf522cf-aacc-4652-afe0-2421e6b4f8a7": {"__data__": {"id_": "bdf522cf-aacc-4652-afe0-2421e6b4f8a7", "embedding": null, "metadata": {"date": "2023-03-20T16:41:23.461+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087415605101084682", "node_type": "4", "metadata": {"date": "2023-03-20T16:41:23.461+00:00"}, "hash": "d776e9a9b6e00e7ffe55c6597f32d05e3af6e4db17cf3741d074dd2ec4ec0667", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89cf293c-86b4-4b0b-aa4c-b867f62ee531", "node_type": "1", "metadata": {"date": "2023-03-20T16:27:52.851+00:00"}, "hash": "5cb0b22647fdce9495037152ffaf5acd7a933d10771b46b1360be35c87dfad93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65ea30bc-99ef-4875-85d8-3787c7f94a9d", "node_type": "1", "metadata": {}, "hash": "e8504208193d0931a374f2b88c91374b9fa5ec67138692fa96610f5c798999e2", "class_name": "RelatedNodeInfo"}}, "text": "bSharpCyclist:\nsorry, i got my parameters mixed up. I was thinking of the one you pass when creating the index, a boolean that will prepend metadata to the document. that's something different.\nCirclecope:\nOh so there's a way to get the document names after the index has been constructed?\njerryjliu98:\n@Circlecope could you clarify what you're looking to do? you can set `doc_id` when you first create the Document, or you can specify `file_metadata`  through SimpleDirectoryReader to append extra_info to the Document. When you pass a Document into an index, we chunk the document up into \"Node\" objects under the hood; these aren't user-facing yet", "start_char_idx": 0, "end_char_idx": 650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65ea30bc-99ef-4875-85d8-3787c7f94a9d": {"__data__": {"id_": "65ea30bc-99ef-4875-85d8-3787c7f94a9d", "embedding": null, "metadata": {"date": "2023-03-20T18:22:03.205+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087440937623490692", "node_type": "4", "metadata": {"date": "2023-03-20T18:22:03.205+00:00"}, "hash": "7f8e4e562c24df534565838ee48a3dec7a0460e2a9af20c0521e549abc84502f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bdf522cf-aacc-4652-afe0-2421e6b4f8a7", "node_type": "1", "metadata": {"date": "2023-03-20T16:41:23.461+00:00"}, "hash": "1a579d90a84ad8517d3a6fb5b1f8108412f3e3b15debc3af2fd35a23c28dda7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f87aa93-97e7-4e0a-973a-f30eb2e3b98c", "node_type": "1", "metadata": {}, "hash": "fa6b7c4d7a964dc8e06db571e7f0006da6ed1f860b9acca6632b27fcb474a81c", "class_name": "RelatedNodeInfo"}}, "text": "dantart:\nHi there! I have a  question about privacy ... When I use Llama to generate the \"GPT-index documents\" I can do in \"local environment\"... but then I have to use it with OpenAI servers to ask things about them ... My company has very strong policies of data privacy (in Europe)... and OpenAI servers are in USA.\nMy question: the data sent to OpenAI servers are \"encrypted\" ? or ... can someone apply a \"reverse engineering\" to know some contents ?\nLogan M:\nI'm pretty sure they are encrypted. More info on that here: https://openai.com/policies/api-data-usage-policies", "start_char_idx": 0, "end_char_idx": 575, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f87aa93-97e7-4e0a-973a-f30eb2e3b98c": {"__data__": {"id_": "0f87aa93-97e7-4e0a-973a-f30eb2e3b98c", "embedding": null, "metadata": {"date": "2023-03-20T18:34:18.795+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087444022911578142", "node_type": "4", "metadata": {"date": "2023-03-20T18:34:18.795+00:00"}, "hash": "649843d9da60525c0bed1776dcb56696ebb189956ad85ac6daa92e61bb91c30e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65ea30bc-99ef-4875-85d8-3787c7f94a9d", "node_type": "1", "metadata": {"date": "2023-03-20T18:22:03.205+00:00"}, "hash": "4d16e880528a03da9385aa6d03c9cadfe40024db46453fda60dedfc43002b36d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9ba1d6d-3ae4-430d-8ed9-16979f8a329c", "node_type": "1", "metadata": {}, "hash": "f01cf4b99894c31e051c58e3754548713f595b9c0a68b26c3b875ed78e17f630", "class_name": "RelatedNodeInfo"}}, "text": "dantart:\nBut the embeddings are the json GPT-index documents ... full of float numbers and also words\nLogan M:\nAll that gets sent over the network to openAI is encrypted.\n\nLocally, llama index stores the vectors and document text when you save the index to disk, so it'd be up to you to store that somewhere secure", "start_char_idx": 0, "end_char_idx": 314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9ba1d6d-3ae4-430d-8ed9-16979f8a329c": {"__data__": {"id_": "a9ba1d6d-3ae4-430d-8ed9-16979f8a329c", "embedding": null, "metadata": {"date": "2023-03-20T22:33:20.844+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087504177825067078", "node_type": "4", "metadata": {"date": "2023-03-20T22:33:20.844+00:00"}, "hash": "103b2a1d93aa36d5dde7f774be368e6ab3ac6c9078d7e729081a828d02cb9fd7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f87aa93-97e7-4e0a-973a-f30eb2e3b98c", "node_type": "1", "metadata": {"date": "2023-03-20T18:34:18.795+00:00"}, "hash": "de666b668cc68d22f3ae096cf23185e724536148c0568d6422fc0fdd813f5bdb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5856bed4-555e-4e93-bce9-e8d55522a692", "node_type": "1", "metadata": {}, "hash": "13a9155547d7c9509a8986befbb0c0fb61dcf4dda989afa6887fcc93dd49b013", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\n@Krulknul what kind of index are you using?\nKrulknul:\nI've built a few different setups for a dataset and I'm comparing them. Almost all of them produce this, but not always", "start_char_idx": 0, "end_char_idx": 182, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5856bed4-555e-4e93-bce9-e8d55522a692": {"__data__": {"id_": "5856bed4-555e-4e93-bce9-e8d55522a692", "embedding": null, "metadata": {"date": "2023-03-20T22:55:29.239+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087509749517533204", "node_type": "4", "metadata": {"date": "2023-03-20T22:55:29.239+00:00"}, "hash": "b3cd1678492750971c51f0c54022c6f322b94f359dc5e47343b80191c9eed4f6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9ba1d6d-3ae4-430d-8ed9-16979f8a329c", "node_type": "1", "metadata": {"date": "2023-03-20T22:33:20.844+00:00"}, "hash": "1f27296a3b6a564a0f6a13b5d3581aa423dec74ead6cfa6e7494c36fc272b664", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69c13501-08fd-4614-a998-c713ba4a3a65", "node_type": "1", "metadata": {}, "hash": "a7ac251e7645b7c8c7a44819fcaa8800d659d619ec0bdf18359400d49b47bd1e", "class_name": "RelatedNodeInfo"}}, "text": "Mitchhs12:\nHey guys, I've managed to get a SQL db working but for some reason cannot get a csv to work as an index\ngengordo:\nHi @Mitchhs12 did you get good responses for the csv file? I seem to incorrect responses for queries like \"how many rows in the dataset?\"", "start_char_idx": 0, "end_char_idx": 262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69c13501-08fd-4614-a998-c713ba4a3a65": {"__data__": {"id_": "69c13501-08fd-4614-a998-c713ba4a3a65", "embedding": null, "metadata": {"date": "2023-03-21T04:14:27.708+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087590022074601543", "node_type": "4", "metadata": {"date": "2023-03-21T04:14:27.708+00:00"}, "hash": "906bbbee2609a73ea8911b581dabe4c455f50691438e2c7b6404992ad5a752c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5856bed4-555e-4e93-bce9-e8d55522a692", "node_type": "1", "metadata": {"date": "2023-03-20T22:55:29.239+00:00"}, "hash": "8d3029a06f5aa077ea7a8d33fae32af29b499557a120b9d407c0a7f42d355e13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae5eb307-d501-4572-a675-515c6f3007de", "node_type": "1", "metadata": {}, "hash": "079ed91dc324b7c78c2b9235ac61ddecae16b8f3c1547cd4c6700e4783a32ca6", "class_name": "RelatedNodeInfo"}}, "text": "bhroberts:\nhey folks, if i don't want to use SimpleDirectoryReader to load a whole directory, and i just want to load a file at a time, what function do i use?\nLogan M:\nYou can still use the directory reader, like this:\n\n`SimpleDirectoryReader(input_files=[file paths...]).load_data()`\n\nhttps://github.com/jerryjliu/llama_index/blob/main/gpt_index/readers/file/base.py#L37", "start_char_idx": 0, "end_char_idx": 372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae5eb307-d501-4572-a675-515c6f3007de": {"__data__": {"id_": "ae5eb307-d501-4572-a675-515c6f3007de", "embedding": null, "metadata": {"date": "2023-03-21T04:55:17.745+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087600298274586755", "node_type": "4", "metadata": {"date": "2023-03-21T04:55:17.745+00:00"}, "hash": "b6a6c0ab7fe9c28c05a7fbe6fba533e22fcd184764b40276625d77574c3a791b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69c13501-08fd-4614-a998-c713ba4a3a65", "node_type": "1", "metadata": {"date": "2023-03-21T04:14:27.708+00:00"}, "hash": "c73eb638381691f5dbc2aeab8957249576ecddc33ecbe19da9ecb73381fed06a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a4726e5-9e53-438c-a530-ee73d58557e9", "node_type": "1", "metadata": {}, "hash": "da1ee405800da834daf6b36c56648df05d2415f9cb3ea19c72a5c84bbf0d6b6d", "class_name": "RelatedNodeInfo"}}, "text": "linh.nguyen:\ncould anybody help, thanks\nLogan M:\ntry `pip install --upgrade llama_index` (this is very new)", "start_char_idx": 0, "end_char_idx": 107, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a4726e5-9e53-438c-a530-ee73d58557e9": {"__data__": {"id_": "1a4726e5-9e53-438c-a530-ee73d58557e9", "embedding": null, "metadata": {"date": "2023-03-21T07:12:21.425+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087634790888509500", "node_type": "4", "metadata": {"date": "2023-03-21T07:12:21.425+00:00"}, "hash": "2a6cc3edeb666069d8caaa6249ea04b0c4b31fdd50f3affaf5256c0c22d7f1e0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae5eb307-d501-4572-a675-515c6f3007de", "node_type": "1", "metadata": {"date": "2023-03-21T04:55:17.745+00:00"}, "hash": "0a46ba2e2c64f5a7d1fe3eb9a137bc04f8e8e8ad979c85f8d39b3da8165b0cc7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c161bc68-8601-43a7-a9bf-70fee088e4ef", "node_type": "1", "metadata": {}, "hash": "2ee30309ba6d0ea88b8783f7d58637353a7a2e2f9b4b0c5328d202221f78b72c", "class_name": "RelatedNodeInfo"}}, "text": "zainab:\nwhat is the best prompt to force the bot to answer with \"I don't know\" when the question is not clear or the answer is not provided in the context?\n4bidden:\nbeen trying to figure this one out. if you find out, tag me.", "start_char_idx": 0, "end_char_idx": 225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c161bc68-8601-43a7-a9bf-70fee088e4ef": {"__data__": {"id_": "c161bc68-8601-43a7-a9bf-70fee088e4ef", "embedding": null, "metadata": {"date": "2023-03-21T09:39:37.631+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087671852622688266", "node_type": "4", "metadata": {"date": "2023-03-21T09:39:37.631+00:00"}, "hash": "57b2c6e4756c7c12c022dd9e14fcce3b7a22689db2a4eafb12f0006e12a88acf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a4726e5-9e53-438c-a530-ee73d58557e9", "node_type": "1", "metadata": {"date": "2023-03-21T07:12:21.425+00:00"}, "hash": "8dd61f29a9216e33cd920a34e6bb4e581b0bb2dc2e76fe4a40a0f099b08afa4f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ec3bbba-fbd1-4ad2-970d-f2dbe6022614", "node_type": "1", "metadata": {}, "hash": "ce7a701388768245e8d265393705dcfc84cbdca619ae0e792c9d142798c0737a", "class_name": "RelatedNodeInfo"}}, "text": "mattiaslndstrm:\nI'm building a keyword index of a total of 55k words. It's been going on for more than 20 hours, which seems very excessive. It is still making API calls to OpenAI. I think I have done something stupid when defining the index. Any help would be much appreciated! Here is the relevant code:\n\n```llm_predictor = LLMPredictor(llm=OpenAI(temperature=0.2, model_name=\"gpt-3.5-turbo\"))\nmax_input_size = 4096\nnum_output = 4000\nmax_chunk_overlap = 20\nprompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\n\nindex = KeywordTableIndex(\n    documents, llm_predictor=llm_predictor, prompt_helper=prompt_helper\n)\n```\n4bidden:\n20 hours? thats a lot.\nmattiaslndstrm:\nYeah, right. I find it shocking that it took such a long time. I'm thinking it probably ran into same rate limiting, did some exponential back off and then continued with the more infrequent querying and therefore multiplied the time needed by a fairly large factor.", "start_char_idx": 0, "end_char_idx": 955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ec3bbba-fbd1-4ad2-970d-f2dbe6022614": {"__data__": {"id_": "4ec3bbba-fbd1-4ad2-970d-f2dbe6022614", "embedding": null, "metadata": {"date": "2023-03-21T12:57:03.507+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087721537827786772", "node_type": "4", "metadata": {"date": "2023-03-21T12:57:03.507+00:00"}, "hash": "c895af28a68a67ae757f6366d48f2b304691cd251f241c10475ea49123657c78", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c161bc68-8601-43a7-a9bf-70fee088e4ef", "node_type": "1", "metadata": {"date": "2023-03-21T09:39:37.631+00:00"}, "hash": "c6df85e979fd599f048d8cb744e14e78dbcf57d5adcd15322861efb41f87f164", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0c9d527-3c43-4ae4-971a-fe92e4a1a5ca", "node_type": "1", "metadata": {}, "hash": "7c34518a94065671c0b093d6d76fd9b27364917149e90526256d53eb257af8d8", "class_name": "RelatedNodeInfo"}}, "text": "dagthomas:\nI have no idea what I am doing; But I am trying to upload a file from nodejs to python fastapi, and create a qdrant index of it and place it in qdrant. And query the index and return an answer. \n\nBut it only returns -1 for the query. \n\nI am using docker compose, and I figure I have loads of errors and it cant connect to qdrant or something like that. If anyone wants to take a glance.\n```python\nimport qdrant_client\nclient = qdrant_client.QdrantClient(\n    host=\"qdrant\"  # qdrant is the name of the docker container\n)\n\n@app.post(\"/upload\")\nasync def upload_file(file: UploadFile = File(...)):\n    uniqueid = uuid.uuid4()\n    os.makedirs(f\"files/{uniqueid}/\", exist_ok=True)\n    file_location = f\"files/{uniqueid}/{file.filename}\"\n    with open(file_location, \"wb+\") as file_object:\n        file_object.write(file.file.read())\n    documents = SimpleDirectoryReader(f\"files/{uniqueid}/\").load_data()\n    print(documents)\n    index = GPTQdrantIndex(documents, collection_name=uniqueid, client=client)\n    response = index.query(\n        \"Jeg har lyst til \u00e5 dra p\u00e5 ferie, kan jeg bruke firmahyttene?\")\n    shutil.rmtree(f\"files/{uniqueid}/\")\n    return {\"info\": f\"file '{file.filename}' successully indexed in Qdrant\", \"data\":  response}```\n\n```yml\nversion: \"3.8\"\nnetworks:\n  app-tier:\n    driver: bridge\nservices:\n  fastapi:\n    build: ./fastapi\n    expose:\n      - \"5000\"\n    ports:\n      - \"5000:5000\"  \n    environment:\n      - QDRANT_HOST=qdrant\n    depends_on:\n      - qdrant  \n    networks:\n      - app-tier   \n    volumes:\n      - ./fastapi:/app:Z\n  sveltekit:\n    build: ./sveltekit\n    ports:\n      - 3000:3000    \n    networks:\n      - app-tier    \n    depends_on:\n      - fastapi\n    volumes:\n      - ./sveltekit:/app:Z\n    environment:\n      - VITE_BACKEND_URL=http://localhost:5000\n  qdrant:\n    image: qdrant/qdrant:v0.10.1\n    #    mem_limit: 450m\n    ports:\n      - 6333:6333\n    volumes:\n      - ./data/qdrant_storage:/qdrant/storage\n\n    networks:\n      - app-tier \n```\n4bidden:\nhave you tried this? https://llamahub.ai/l/qdrant\ndagthomas:\nThanks for the link btw, worked out the error - and now I need this ^^", "start_char_idx": 0, "end_char_idx": 2139, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0c9d527-3c43-4ae4-971a-fe92e4a1a5ca": {"__data__": {"id_": "c0c9d527-3c43-4ae4-971a-fe92e4a1a5ca", "embedding": null, "metadata": {"date": "2023-03-21T13:47:12.172+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087734157083418634", "node_type": "4", "metadata": {"date": "2023-03-21T13:47:12.172+00:00"}, "hash": "c1a79e3d4c057dbd13444834f3fd9f2d14f80a51ea3078a976b0f323b5b44376", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ec3bbba-fbd1-4ad2-970d-f2dbe6022614", "node_type": "1", "metadata": {"date": "2023-03-21T12:57:03.507+00:00"}, "hash": "403e36e67a4d49c515b341277e020cc76ed177112466d0cb8b6a585f7c8299b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d3bfa49e-528e-41c3-880f-62d4cc2fcda1", "node_type": "1", "metadata": {}, "hash": "bf17449d7b1c47bd8f25e1b95db37b2c2256e26ad832922314215fa32c81357e", "class_name": "RelatedNodeInfo"}}, "text": "Circlecope:\nOr is it necessary I create a knowledge graph index first\nLogan M:\nYea right now those two indexes are completely separate. Might be cool to have \"migration\" function to transfer the embeddings though", "start_char_idx": 0, "end_char_idx": 212, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d3bfa49e-528e-41c3-880f-62d4cc2fcda1": {"__data__": {"id_": "d3bfa49e-528e-41c3-880f-62d4cc2fcda1", "embedding": null, "metadata": {"date": "2023-03-21T13:59:00.529+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087737128148009042", "node_type": "4", "metadata": {"date": "2023-03-21T13:59:00.529+00:00"}, "hash": "c73d9a1e3cc66fc92b9c47b9788f5518fe95168ba71e641e6ec79c4d846014d6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0c9d527-3c43-4ae4-971a-fe92e4a1a5ca", "node_type": "1", "metadata": {"date": "2023-03-21T13:47:12.172+00:00"}, "hash": "1e05acddaf2e89ec865661458274c8051786c310aeb8ad5859ef51002a7f58ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c61193f5-feaf-48ab-99c0-1f6bb8fbc37b", "node_type": "1", "metadata": {}, "hash": "fcaa1fca5582eb87138dabe2cb6f471741877f198ac00eccd4a7bf2bd5032601", "class_name": "RelatedNodeInfo"}}, "text": "Krulknul:\nlol are we asking the same question\nplouplou:\nOh I didn't see that. Maybe it will come in the next one ?\nKrulknul:\nyeah I think it isn't in yet", "start_char_idx": 0, "end_char_idx": 153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c61193f5-feaf-48ab-99c0-1f6bb8fbc37b": {"__data__": {"id_": "c61193f5-feaf-48ab-99c0-1f6bb8fbc37b", "embedding": null, "metadata": {"date": "2023-03-21T17:11:27.498+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087785559646290040", "node_type": "4", "metadata": {"date": "2023-03-21T17:11:27.498+00:00"}, "hash": "5f7381383c76cf83ef888f5fca5de5c02e04fd3c73d776aa301c06afb255beba", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d3bfa49e-528e-41c3-880f-62d4cc2fcda1", "node_type": "1", "metadata": {"date": "2023-03-21T13:59:00.529+00:00"}, "hash": "8caef50c3d8781e662ef4360789282a16d9cda48802910f503871299038a1039", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2a41294-93e2-4404-b874-26f107af42f8", "node_type": "1", "metadata": {}, "hash": "4381d2fb8e5d59f7f0642cfb737f80ec87544fbe9791b4e100898669026a8159", "class_name": "RelatedNodeInfo"}}, "text": "bSharpCyclist:\nWas wondering if someone can help here. I have a simple vector index and I'm querying with top 3 similarity. I get the following response.\n\n> **The given context does not provide any information related to < THE QUESTION>. Therefore, the original answer \"N/A\" still stands.**\n\nWhen I look at the logs, I see below. The first one returns a really good answer. However, the second and thrid don't because it pulled a different chunk from the doc that couldn't answer the question. How do I avoid this? The second response seems to invalidate the first, making the overall N/A. I suppose I could change Similarity_top_k = 1. \n\nIf the user has a really specific question, then using one chunk will probably do. However, if it's a more general question, then you might want to aggregate info from multiple chunks. How to support both? chuck_size_limit when building the index was set to 512.\n\n> [{'index_type': <IndexStructType.SIMPLE_DICT: 'simple_dict'>,\n>   'doc_id': '894456e8-c750-4c7c-91a6-9f60bde405f6',\n>   'initial_response':** ' HERE IT RETURNS A GOOD ANSWER!'**},\n>  {'index_type': <IndexStructType.SIMPLE_DICT: 'simple_dict'>,\n>   'doc_id': '894456e8-c750-4c7c-91a6-9f60bde405f6',\n>   'refined_response': **'The original answer is not relevant to the given context. Therefore, the original answer is: \"N/A\".'**},\n>  {'index_type': <IndexStructType.SIMPLE_DICT: 'simple_dict'>,\n>   'doc_id': '894456e8-c750-4c7c-91a6-9f60bde405f6',\n>   'refined_response':** 'The given context does not provide any information related to < THE QUESTION >. Therefore, the original answer \"N/A\" still stands.'}**]\nLogan M:\nAre you using chatGPT? It seems to really struggle with the refine process I've noticed...\n\nYou could try creating a better refine prompt \ud83e\udd14\nbSharpCyclist:\nYes! I'm using that model. So maybe create a custom Q/A answer prompt to help refine the answer?\nLogan M:\nYea, it might help! The current default refine prompt is in here: https://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/chat_prompts.py\nbSharpCyclist:\nThank you!", "start_char_idx": 0, "end_char_idx": 2062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2a41294-93e2-4404-b874-26f107af42f8": {"__data__": {"id_": "e2a41294-93e2-4404-b874-26f107af42f8", "embedding": null, "metadata": {"date": "2023-03-21T17:27:32.509+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087789607195791511", "node_type": "4", "metadata": {"date": "2023-03-21T17:27:32.509+00:00"}, "hash": "c058a26b8a6e6abc9044bb6e76cf573dfa64071dc1cc7f24e11fa9b096ca2f5e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c61193f5-feaf-48ab-99c0-1f6bb8fbc37b", "node_type": "1", "metadata": {"date": "2023-03-21T17:11:27.498+00:00"}, "hash": "5301ee0edc2b5aff75fbd398226980a04de312ff7cfeb9b75fd9291bdee9ef86", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "57808c3d-e571-4a31-bb77-e62053fccea8", "node_type": "1", "metadata": {}, "hash": "a014d69f9e85501ce6eebc0095fd7ebaf09e166a92dbd0c6a64bda18cf871d67", "class_name": "RelatedNodeInfo"}}, "text": "Krulknul:\nI'm trying out the guide for making a chat bot and I don;t really understand how these \"tools\" work. I have figured out that you need to specify for each \"tool\" when it is good for the bot to use, but I would just like to use 1 index which it tries all the time. Is that possible?\nKrulknul:\n@jerryjliu98 Would you know what would be the best way to get the chat bot from the example to always use a specific tool? is there an easy way or?\njerryjliu98:\nmm by default the idea of an agent is it can pick what tool to use. if you always wanted to use a specific tool, you could just pass along one tool to the agent?\nKrulknul:\nHmm, well that\u2019s what I did and it still only uses the tool when it matches the description. I\u2019d rather build a chat bot where one piece of context, my index, is available at every prompt.\njerryjliu98:\ni see, makes sense. there's another layer of abstraction within langchain (their vectordb qa index), which will always fetch relevant context for use with the chatbot. we'll look into adding this as a tutorial too\nKrulknul:\nhey, awesome thanks. I\u2019ll also look into it.", "start_char_idx": 0, "end_char_idx": 1104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57808c3d-e571-4a31-bb77-e62053fccea8": {"__data__": {"id_": "57808c3d-e571-4a31-bb77-e62053fccea8", "embedding": null, "metadata": {"date": "2023-03-21T18:11:26.623+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087800655470678066", "node_type": "4", "metadata": {"date": "2023-03-21T18:11:26.623+00:00"}, "hash": "5c2089344393fc9ccd83aebc3ca38a5967d9327efdd7a266b3a69eadedab4615", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2a41294-93e2-4404-b874-26f107af42f8", "node_type": "1", "metadata": {"date": "2023-03-21T17:27:32.509+00:00"}, "hash": "74e84dcfb696e395bb1556dbe8b1ed673a7d7ba587aea877bc9732bf15a7678f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d97c0bf-3b24-41ee-b246-cebbc5f13ece", "node_type": "1", "metadata": {}, "hash": "be7d0f43d09dd3c2981e43591c9872156c3898fa30502185c082e1e5c86e12d2", "class_name": "RelatedNodeInfo"}}, "text": "rui:\nThe GPTFaissIndex taks extremely long time to build\ndavidds:\ndid you use faiss-gpu?", "start_char_idx": 0, "end_char_idx": 88, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d97c0bf-3b24-41ee-b246-cebbc5f13ece": {"__data__": {"id_": "3d97c0bf-3b24-41ee-b246-cebbc5f13ece", "embedding": null, "metadata": {"date": "2023-03-21T20:30:42.303+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087835701732720820", "node_type": "4", "metadata": {"date": "2023-03-21T20:30:42.303+00:00"}, "hash": "a1d39978d77923569200508b5607a4bc87c096ac81c5bf14f4136acc5587c3a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "57808c3d-e571-4a31-bb77-e62053fccea8", "node_type": "1", "metadata": {"date": "2023-03-21T18:11:26.623+00:00"}, "hash": "2ee59b15939b764225b613cd09a3336e13293e281ac38cc57c0ce83ba2084d24", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66e78ce3-c200-485d-9ed6-eb7614eb169e", "node_type": "1", "metadata": {}, "hash": "393b190593c06f670e77ccfce5667f39e22522950c7b047d3844cabc002f332d", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nIf I declare a llm predictor during index construction time (eg with davinci model), can I change to Gpt turbo during query time?\nLogan M:\nYes! You can pass in any llm_predictor into the query function, just like the index constructor\nTeemu:\nDid you try GPT-4 prompting yet? I tried playing around with the templates linked in the documentation and examples, and they didn't really change the models behaviour\nLogan M:\nI haven't had time yet to try gpt4.\n\nI actually just shared a paper in #\ud83d\udcc4papers discussing more reliable prompting techniques \ud83e\udde0\nTeemu:\nOh cool! Ill check it out.", "start_char_idx": 0, "end_char_idx": 593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66e78ce3-c200-485d-9ed6-eb7614eb169e": {"__data__": {"id_": "66e78ce3-c200-485d-9ed6-eb7614eb169e", "embedding": null, "metadata": {"date": "2023-03-21T23:11:26.544+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087876152611315742", "node_type": "4", "metadata": {"date": "2023-03-21T23:11:26.544+00:00"}, "hash": "3669e3d10561125787e4fb0c4d35b7c3805ed2029f6a3240b125542987c062c9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d97c0bf-3b24-41ee-b246-cebbc5f13ece", "node_type": "1", "metadata": {"date": "2023-03-21T20:30:42.303+00:00"}, "hash": "abc5c8a046bebd8ffa0bc4ea6c0e97f313211f189426961bce15cde7d113fc60", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8dfa093b-9d7c-4bdb-b7e6-bd511cd5fd4f", "node_type": "1", "metadata": {}, "hash": "8219bb386871ee977d77b928a18e859f91c94172c9d8415495fc5d5de42fe274", "class_name": "RelatedNodeInfo"}}, "text": "ishanh:\nHi am a newbie here.  I am going to index our company's training material to create Intelligent Assistant using OpenAI. I have loaded the the PDF files and  before running the Index creation command, I would like to know whether the content of those training manuals will be leaving my computer to do the indexing. Or is llama_index use OpenAI for vector creation but the content still stay within my machine. This is iportant due to IP protection reasons\nlinh.nguyen:\nAs I understand, in order to build the local index, all the data need to be submitted to openai\nLogan M:\nThere are local-based open source options, assuming you have a powerful GPU available.\nlinh.nguyen:\nSounds interesting, so you are saying that in case we have a local open source LLM ?\nLogan M:\nFor sure!\n\nCustom LLM: https://gpt-index.readthedocs.io/en/latest/how_to/custom_llms.html#example-using-a-custom-llm-model\n\nCustom embeddings: https://gpt-index.readthedocs.io/en/latest/how_to/embeddings.html#custom-embeddings", "start_char_idx": 0, "end_char_idx": 1002, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8dfa093b-9d7c-4bdb-b7e6-bd511cd5fd4f": {"__data__": {"id_": "8dfa093b-9d7c-4bdb-b7e6-bd511cd5fd4f", "embedding": null, "metadata": {"date": "2023-03-22T05:18:40.502+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1087968569729486868", "node_type": "4", "metadata": {"date": "2023-03-22T05:18:40.502+00:00"}, "hash": "dc52f753519288ed635bd8909ba3b426c0bd947c822f027bd536dcffee3dfdc8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66e78ce3-c200-485d-9ed6-eb7614eb169e", "node_type": "1", "metadata": {"date": "2023-03-21T23:11:26.544+00:00"}, "hash": "d75f3b6a5d6579f9e3534cfb1c3c7b51e00fd46d6e6d2c677476b3d284e84184", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1b180a0b-ee34-46d1-a3a7-d5324d33f579", "node_type": "1", "metadata": {}, "hash": "6522e765dcba08595e03326ed377b2bd5ea007706d9e093e8314836fb226a665", "class_name": "RelatedNodeInfo"}}, "text": "OG:\nQuick question. Does this create en embedding for every prompt. Or does it do something to determine that the prompt doesn't require embedding\nLogan M:\nDepends on the index. For a vector index, it always embeds the query. Basically anytime you need to retrieve similar nodes it will embed the query.\n\nA list index will check every node, so no query embeddings there", "start_char_idx": 0, "end_char_idx": 369, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1b180a0b-ee34-46d1-a3a7-d5324d33f579": {"__data__": {"id_": "1b180a0b-ee34-46d1-a3a7-d5324d33f579", "embedding": null, "metadata": {"date": "2023-03-22T08:29:58.477+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088016711845957653", "node_type": "4", "metadata": {"date": "2023-03-22T08:29:58.477+00:00"}, "hash": "b522367c66ca16164bb07df876dd0299a53ba828264842a56f86f2326147b48a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8dfa093b-9d7c-4bdb-b7e6-bd511cd5fd4f", "node_type": "1", "metadata": {"date": "2023-03-22T05:18:40.502+00:00"}, "hash": "f7dc358738052a0d191d45a95946e9787b39b585ac655a341c1ade8356b25a0e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "862513ff-c8ac-46bb-b900-63299b94f53b", "node_type": "1", "metadata": {}, "hash": "d3110b9f61f54d6263b83516f6b2d0943260b5985fbf1f10c4f109def719d61a", "class_name": "RelatedNodeInfo"}}, "text": "zainab:\nhello, I'm using chromadb to store vectors alongside context and when I use the query method with similarity_top_k param, the results returned are not reasonable. and returned response documents only one document was returned (we cannot return other documents that were used to create the context)\n4bidden:\nAdd a similarity cutoff to the query method.\nfor the second issue,\n You can try response.source_nodes and response.get_formatted_sources()\nzainab:\ni have already try to use response.source_nodes and response.get_formatted_sources() but still one context returned", "start_char_idx": 0, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "862513ff-c8ac-46bb-b900-63299b94f53b": {"__data__": {"id_": "862513ff-c8ac-46bb-b900-63299b94f53b", "embedding": null, "metadata": {"date": "2023-03-22T12:45:29.696+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088081015639126096", "node_type": "4", "metadata": {"date": "2023-03-22T12:45:29.696+00:00"}, "hash": "cbada194309bdc21d28425579105eb3e402d9e272c3840e7b22003fbb8de8442", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1b180a0b-ee34-46d1-a3a7-d5324d33f579", "node_type": "1", "metadata": {"date": "2023-03-22T08:29:58.477+00:00"}, "hash": "8333df2983cf346e69fd72c0cd21181e4021a286ca7bcd4a1268465ef946343f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a05ed9c-a6e4-4d87-a735-073a7b64b364", "node_type": "1", "metadata": {}, "hash": "1f021196fffdbef213e42c06d700b9cc23263304ed1b75670c9b75a485348d18", "class_name": "RelatedNodeInfo"}}, "text": "bSharpCyclist:\nI reading through the documentation below, where it says it builds two tree indices, and then a keyword extractor index on top of that. However, the notebook example (link at bottom of page) uses a SimpleVectorIndex for the two pages, not tree. What's up?\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/composability.html\nLogan M:\nBoth will work, I guess it looks like the examples got out of sync at some point", "start_char_idx": 0, "end_char_idx": 430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a05ed9c-a6e4-4d87-a735-073a7b64b364": {"__data__": {"id_": "1a05ed9c-a6e4-4d87-a735-073a7b64b364", "embedding": null, "metadata": {"date": "2023-03-22T18:14:15.463+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088163751502561302", "node_type": "4", "metadata": {"date": "2023-03-22T18:14:15.463+00:00"}, "hash": "62a7b6a53475f59127da707c56c1e44e90cf9f805aefafdaf53cf8e5dfefec51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "862513ff-c8ac-46bb-b900-63299b94f53b", "node_type": "1", "metadata": {"date": "2023-03-22T12:45:29.696+00:00"}, "hash": "c49dcc0241cafba39a111c1ba5c7acfcd00e3b242d99bbad95f74a2e3c48464c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "44cd3754-3e07-497a-a1f1-dfcc59a3080c", "node_type": "1", "metadata": {}, "hash": "7bc8f049172818a7c77ace92c7858309ee58e0db7309f401fac247bf1e03fdf0", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nAnyone else having issues with this after the update: \n\nImportError: cannot import name 'BaseOutputParser' from 'langchain.output_parsers'\nma$:\nwere you able to fix it ?\nTeemu:\nYeah I just updated all my libraries", "start_char_idx": 0, "end_char_idx": 220, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "44cd3754-3e07-497a-a1f1-dfcc59a3080c": {"__data__": {"id_": "44cd3754-3e07-497a-a1f1-dfcc59a3080c", "embedding": null, "metadata": {"date": "2023-03-22T18:17:13.968+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088164500206800936", "node_type": "4", "metadata": {"date": "2023-03-22T18:17:13.968+00:00"}, "hash": "a440b0b9e619ef75015fc7c1c98aa9a94d7aad6aebdc4751ee5b087b3b8ceec1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a05ed9c-a6e4-4d87-a735-073a7b64b364", "node_type": "1", "metadata": {"date": "2023-03-22T18:14:15.463+00:00"}, "hash": "33a9b9eb41986e19f938adbc60bda64418d73e0a59c54422f28174fe34e92f6d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9252f4d7-cf36-4677-8e9d-77469bd3b115", "node_type": "1", "metadata": {}, "hash": "525a08f659f67cbdd8c2384c56791a680c539303776166f4a6b93b55592db153", "class_name": "RelatedNodeInfo"}}, "text": "OatMilked:\nIm trying to look through the records here but i understand passing a path/ directory to look through for SimpleDirectoryReader(). Can i Past the relative file path? \"./Bot/Documents/doc1.txt\" ? im using os.listdir() to list the files.\nLogan M:\nYea! Just use `SimpleDirectoryReader(input_files=[\"my file path\"]).load_data()`", "start_char_idx": 0, "end_char_idx": 335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9252f4d7-cf36-4677-8e9d-77469bd3b115": {"__data__": {"id_": "9252f4d7-cf36-4677-8e9d-77469bd3b115", "embedding": null, "metadata": {"date": "2023-03-22T21:47:08.433+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088217325221728337", "node_type": "4", "metadata": {"date": "2023-03-22T21:47:08.433+00:00"}, "hash": "982ff3c4eb9b2f850287e5ab2f3c0175bbcd78e3c63cfefe05dc977df55430ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "44cd3754-3e07-497a-a1f1-dfcc59a3080c", "node_type": "1", "metadata": {"date": "2023-03-22T18:17:13.968+00:00"}, "hash": "c7ebbcbfac766bb0cc4a465083d3096d1c1326ef25f4cb4c130a947d25c8cea6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "827ad132-e465-4d67-88e1-aa2a6e74c1d4", "node_type": "1", "metadata": {}, "hash": "940d65c747344e1dd154f3801d702c3073753e3e7f8e77a5fad4d4fec1d66dae", "class_name": "RelatedNodeInfo"}}, "text": "Gone Jiggy:\nIs there a way to see what docs are pulled from GPTSimpleVectorIndex? I am doing the tutorial and it cannot answer a question that is easily answerable from the text, so I want to see what pieces of the text the index thinks are relevant\nLogan M:\nYou can check `response.source_nodes` to see which nodes were used to build the answer\nGone Jiggy:\nThank you \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 369, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "827ad132-e465-4d67-88e1-aa2a6e74c1d4": {"__data__": {"id_": "827ad132-e465-4d67-88e1-aa2a6e74c1d4", "embedding": null, "metadata": {"date": "2023-03-22T22:00:09.473+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088220601140924536", "node_type": "4", "metadata": {"date": "2023-03-22T22:00:09.473+00:00"}, "hash": "952e588d4eed4c3fa487d4447b6d303a73c70341a163be2c2a7412c93de2c097", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9252f4d7-cf36-4677-8e9d-77469bd3b115", "node_type": "1", "metadata": {"date": "2023-03-22T21:47:08.433+00:00"}, "hash": "61a473c80ca69e9a4ed218ee16f38da9b37b2f3089215ee61e8d2749b37abe8e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74f4e6d6-3f01-4c66-92fb-60e6eb22f529", "node_type": "1", "metadata": {}, "hash": "4b0be60b40e487781201e932749a1d6fce9737ca3d24075324d38bc560084878", "class_name": "RelatedNodeInfo"}}, "text": "Gone Jiggy:\nSo the simple index turned the graham essay into one doc with 6 nodes. How can I make it so its more like 1 paragraph per node? or at least more nodes\nbSharpCyclist:\nyou'll need to set the chunk_size_limit when building the index to get more nodes. the default is like 4K. try setting it to 512.\nGone Jiggy:\nThank you @bSharpCyclist", "start_char_idx": 0, "end_char_idx": 344, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74f4e6d6-3f01-4c66-92fb-60e6eb22f529": {"__data__": {"id_": "74f4e6d6-3f01-4c66-92fb-60e6eb22f529", "embedding": null, "metadata": {"date": "2023-03-23T01:43:57.042+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088276920447270992", "node_type": "4", "metadata": {"date": "2023-03-23T01:43:57.042+00:00"}, "hash": "ff5bdcaf2811297c8cea2deea482cc5142f50c846f46880225627b08efdce1b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "827ad132-e465-4d67-88e1-aa2a6e74c1d4", "node_type": "1", "metadata": {"date": "2023-03-22T22:00:09.473+00:00"}, "hash": "05292c6407a18432d1baebac28ec37e7bc34a5f44f30e490f9dd0f1d875b40c4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cca78525-8ee5-427a-9cf9-ffd96090d63d", "node_type": "1", "metadata": {}, "hash": "d13ffa8d17929794cc87b419d6c14604f9f2c4972730ca8923924aa52eac1bb4", "class_name": "RelatedNodeInfo"}}, "text": "Costela Jones:\nHi guys, how can i configure a custom prompt on a llama_chat_agent? I've tried this with no success: \nagent_chain = create_llama_chat_agent(\n    toolkit,\n    llm,\n    memory=memory,\n    text_qa_template=TEXT_QA_PROMPT,\n    verbose=True\n)\nLogan M:\nI thiiiink you'll want to put that in your query_configs\nCostela Jones:\nthanks, I'll give it a try!", "start_char_idx": 0, "end_char_idx": 361, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cca78525-8ee5-427a-9cf9-ffd96090d63d": {"__data__": {"id_": "cca78525-8ee5-427a-9cf9-ffd96090d63d", "embedding": null, "metadata": {"date": "2023-03-23T01:58:09.469+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088280495785254972", "node_type": "4", "metadata": {"date": "2023-03-23T01:58:09.469+00:00"}, "hash": "897cd08e8a1e67197c5d89b22793f24b25fc2edf8bd3a3a67c832a28ecad67f0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74f4e6d6-3f01-4c66-92fb-60e6eb22f529", "node_type": "1", "metadata": {"date": "2023-03-23T01:43:57.042+00:00"}, "hash": "0504e567f61a0760dd9f2e8817849c55e210b5b782f46c8af83d745a47515118", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e263632f-6cb8-475f-86a9-c257d6f91c02", "node_type": "1", "metadata": {}, "hash": "4ba1fa8ffdef591cc22aceb6a065f0a428c150a60c9b9fa89f6982f33be54e62", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nHi guy I got this error when using the llama_chat_agent --> \n\"ValueError: Could not parse LLM output: `Do I need to use a tool? Yes\"    it's like the agent try to use all the tools at the same  time. how to correct this ? :/\nLogan M:\nThis is a common error I've run into with langchain, especially with chatGPT \ud83d\ude14\n\nIf the LLM doesn't follow the instructions exactly, it breaks the regexes inside langchain \n\nIn this case, I think the next line is supposed to start with the `AI:` prefix but the model didn't put it\nplouplou:\nhmm yes you're right the error is due to this :/", "start_char_idx": 0, "end_char_idx": 582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e263632f-6cb8-475f-86a9-c257d6f91c02": {"__data__": {"id_": "e263632f-6cb8-475f-86a9-c257d6f91c02", "embedding": null, "metadata": {"date": "2023-03-23T11:16:42.899+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088421061298769970", "node_type": "4", "metadata": {"date": "2023-03-23T11:16:42.899+00:00"}, "hash": "2a9faee6840af9eeedb173568e5af92d96615145389f74f0f961fe97269277af", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cca78525-8ee5-427a-9cf9-ffd96090d63d", "node_type": "1", "metadata": {"date": "2023-03-23T01:58:09.469+00:00"}, "hash": "5e8bd19faa90b4b7c23b08b9942071042b56d7d25bb9e079c677bef929a262c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "77b6fe7a-1d07-4986-8abb-a45901b684cb", "node_type": "1", "metadata": {}, "hash": "d756832502f7d6b16bd53b623b8a76e4a2736067702db41aa0a634e62230c6c0", "class_name": "RelatedNodeInfo"}}, "text": "otto_alotto:\nHi all:\n\nI keep getting this issue -- building indexes is taking for ever -- and then it sort of times out. I can't figure it out at all. Appreciate any tips. \n\nFor context, I'm loading in a CSV and treating each row as a document. Is that related? \n\nWARNING:langchain.llms.openai:Retrying langchain.llms.openai.completion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600).\n\nRetrying langchain.llms.openai.completion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised Timeout: Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600).\n\nWARNING:langchain.llms.openai:Retrying langchain.llms.openai.completion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised APIConnectionError: Error communicating with OpenAI: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer')).\n\nRetrying langchain.llms.openai.completion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised APIConnectionError: Error communicating with OpenAI: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer')).\n\nFollowed by this:\n\nRetrying langchain.llms.openai.completion_with_retry.<locals>._completion_with_retry in 4.0 seconds as it raised APIError: HTTP code 502 from API (<html>\n<head><title>502 Bad Gateway</title></head>\n<body>\n<center><h1>502 Bad Gateway</h1></center>\nAndrewTrench:\nI think you are hitting rate limits on the api calls and then the API service is failing in the second error. People more expert than me here may confirm?\notto_alotto:\nIt's baffling. It's a complete blocker, going to turn to Langchain indexes only to try and solve. \nEven if I wait, when I try again I still hit the limit, even for a very small number of document that are each very small", "start_char_idx": 0, "end_char_idx": 1950, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "77b6fe7a-1d07-4986-8abb-a45901b684cb": {"__data__": {"id_": "77b6fe7a-1d07-4986-8abb-a45901b684cb", "embedding": null, "metadata": {"date": "2023-03-23T12:48:35.245+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088444181753630780", "node_type": "4", "metadata": {"date": "2023-03-23T12:48:35.245+00:00"}, "hash": "0a56d2911a8a6b5235792a5f2836a0887773dfbb273742f54e7b48a5cdb0e47d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e263632f-6cb8-475f-86a9-c257d6f91c02", "node_type": "1", "metadata": {"date": "2023-03-23T11:16:42.899+00:00"}, "hash": "fcab0053c9e36b9f2b64e349fbc382d687e60fdf1958cc4dd3fdfdbed4873df0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7beaf66e-235d-4e49-bf72-7369c7cb6219", "node_type": "1", "metadata": {}, "hash": "9287850a983c47b0c2074541793b5c6371d6e4d6381bcf0165f9066c0bbb7131", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nIs there a support for Facebook's Llama LLM model?\nLogan M:\nCheck out the new FAQ in the pinned messages \ud83d\udcaa\n https://docs.google.com/document/d/1bLP7301n4w9_GsukIYvEhZXVAvOMWnrxMy089TYisXU/edit?usp=sharing", "start_char_idx": 0, "end_char_idx": 211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7beaf66e-235d-4e49-bf72-7369c7cb6219": {"__data__": {"id_": "7beaf66e-235d-4e49-bf72-7369c7cb6219", "embedding": null, "metadata": {"date": "2023-03-23T15:14:02.276+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088480785574662275", "node_type": "4", "metadata": {"date": "2023-03-23T15:14:02.276+00:00"}, "hash": "a156e74d190ddc5db572e58f0c33b5d29a561ac69c9b5840db857793cf07ec58", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "77b6fe7a-1d07-4986-8abb-a45901b684cb", "node_type": "1", "metadata": {"date": "2023-03-23T12:48:35.245+00:00"}, "hash": "8d45694ae6f1f7cb435df95a0011022f3912b5a70ae210f5fd28111b9483540b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "34c8c148-399d-4e3e-9aaf-7ddec7ab332d", "node_type": "1", "metadata": {}, "hash": "89a2e4dbff20fd386c0695eddb777717c28778f964c0f90f09d65a86874a3480", "class_name": "RelatedNodeInfo"}}, "text": "Gone Jiggy:\nIs there a method to generate citations like the Bing chat? Maybe by seeing which sources each sentence is paying most attentions to or something along those lines\nLogan M:\nBing isn't doing anything too special, just very clever prompts+maybe fine tuning. I think Bing Chats internal prompt got leaked a month or two ago lol", "start_char_idx": 0, "end_char_idx": 336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "34c8c148-399d-4e3e-9aaf-7ddec7ab332d": {"__data__": {"id_": "34c8c148-399d-4e3e-9aaf-7ddec7ab332d", "embedding": null, "metadata": {"date": "2023-03-23T15:18:41.388+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088481956255240192", "node_type": "4", "metadata": {"date": "2023-03-23T15:18:41.388+00:00"}, "hash": "caf41b243743e3a15916d041f88841c944acaf91d8494f2fc2c336c806cdd0b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7beaf66e-235d-4e49-bf72-7369c7cb6219", "node_type": "1", "metadata": {"date": "2023-03-23T15:14:02.276+00:00"}, "hash": "a09673b0aee6c7d7dffc297c443e159815f21cb1630a86f79343663163ab437f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92b3817d-376b-47f7-b233-9b476efed0d4", "node_type": "1", "metadata": {}, "hash": "3279f13fc03d30f2550e672c0f528f62e531d8c3f284be725cda8c54d869e24f", "class_name": "RelatedNodeInfo"}}, "text": "Gone Jiggy:\nSo they are prompting it so cite the sources as opposed to inspecting internal attention? Interesting. I would love to be able have a UI that lists the sources, each numbered, and the LM response says which sentence uses which source\nLogan M:\nExactly, they just rely on prompts (with probably some post processing in case it doesn't follow instructions exactly)\n\nNot quite possible with llama index I think, but who knows what will change in the future \ud83d\udcaa", "start_char_idx": 0, "end_char_idx": 466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92b3817d-376b-47f7-b233-9b476efed0d4": {"__data__": {"id_": "92b3817d-376b-47f7-b233-9b476efed0d4", "embedding": null, "metadata": {"date": "2023-03-23T16:10:26.864+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088494981565661244", "node_type": "4", "metadata": {"date": "2023-03-23T16:10:26.864+00:00"}, "hash": "5b01e9a5f5acfe3ced04cbd7f92fd623738f64f5836c0c9391c1530179ab7d31", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "34c8c148-399d-4e3e-9aaf-7ddec7ab332d", "node_type": "1", "metadata": {"date": "2023-03-23T15:18:41.388+00:00"}, "hash": "835417aa099828a59e23aa6a01d135bd80437fa1e3bdbf10b69b26066b9c5062", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "42a4ee59-31b3-49f0-b8eb-530c1da671b4", "node_type": "1", "metadata": {}, "hash": "850124f47fcfd02beceeb40866df06724834daaab716d06670a06c339c0b550b", "class_name": "RelatedNodeInfo"}}, "text": "joseangel_sc:\nsorry, this most be a basic question but I cant find the answer for it, I indexed a large pdf and it is working great (Thanks so much!) but now, how do i keep this in memory or reuse the new model I have? i dont want to reindex everytime\n4bidden:\nUse the Save to disk method and load from disk.\njoseangel_sc:\nthanks so much!", "start_char_idx": 0, "end_char_idx": 338, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42a4ee59-31b3-49f0-b8eb-530c1da671b4": {"__data__": {"id_": "42a4ee59-31b3-49f0-b8eb-530c1da671b4", "embedding": null, "metadata": {"date": "2023-03-23T16:40:22.618+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088502513503850658", "node_type": "4", "metadata": {"date": "2023-03-23T16:40:22.618+00:00"}, "hash": "325b7a8d5f8262f32989a2c67266a64f28a364585fa319c76dd5e14ec2512254", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92b3817d-376b-47f7-b233-9b476efed0d4", "node_type": "1", "metadata": {"date": "2023-03-23T16:10:26.864+00:00"}, "hash": "f149b94f0c870f00abf2f26ad8832507e36a6b81d483af8ec7ac11153b89b25f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "561cbe2c-7aac-414d-ae6b-9905d6f1fa0a", "node_type": "1", "metadata": {}, "hash": "731f808a39010eb18ae30fd0cb739ad5506d81048a7f4ddc239f17059a77263e", "class_name": "RelatedNodeInfo"}}, "text": "i_mush:\nI'm experiencing huge latency issues with openai, is it just me? (I'm from Italy), the status page was warning for latency yesterday but now everything seems operational\notto_alotto:\nI'm getting latency and timeouts \ud83d\ude26", "start_char_idx": 0, "end_char_idx": 225, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "561cbe2c-7aac-414d-ae6b-9905d6f1fa0a": {"__data__": {"id_": "561cbe2c-7aac-414d-ae6b-9905d6f1fa0a", "embedding": null, "metadata": {"date": "2023-03-23T18:45:40.642+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088534046381969528", "node_type": "4", "metadata": {"date": "2023-03-23T18:45:40.642+00:00"}, "hash": "8f33d71d8948bbac95168df337c8ad0a8284075f99b62bcaccccafaadef41ba8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42a4ee59-31b3-49f0-b8eb-530c1da671b4", "node_type": "1", "metadata": {"date": "2023-03-23T16:40:22.618+00:00"}, "hash": "7192575274e0c10663d1a4ef193c0dbfeddbf0bbfb1ec8856fc7c42d3fd3f962", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fd9ecc9-56a8-4cbf-9785-92062fbcaa4b", "node_type": "1", "metadata": {}, "hash": "e1ddebfc06a1d9fabc992f56d7384a6e34e9588ef19935bc7db87e87fd17d4c2", "class_name": "RelatedNodeInfo"}}, "text": "panicPenguin:\nHey guys I am using llama-index for the first time and am having a frustrating time interacting with the chatbot. It feels nothing like interacting with chatgpt.\n\nI have loaded it with an index of a github javascript library and it is refusing to help with coding tasks.  What am I doing wrong here?\nLogan M:\nCode-based inputs is one area where llama-index takes a lot of tweaking to work well with, at least from what I've seen in the discord (i.e. splitting text into very specific chunks/functions, customizing the internal prompts). If your code is python, I know langchain has a python text splitter that might work for you: https://langchain.readthedocs.io/en/latest/_modules/langchain/text_splitter.html#PythonCodeTextSplitter\n\n```\nfrom langchain.text_splitter import PythonCodeTextSplitter\nindex = GPTSimpleVectorIndex(documents, text_splitter=PythonCodeTextSplitter())`\n```\n\nI wouldn't expect llama-index to work quite like chatgpt. It doesn't keep track of chat history on it's own, it's more of an interface to your data for finding relevant context to answer queries, while providing a lot of flexibility in how you structure your indexed data.\n\nIf you want more of a chatbot experience, we have a tutorial on llama-index + langchain here: https://gpt-index.readthedocs.io/en/latest/guides/building_a_chatbot.html\npanicPenguin:\nThank you for that response! I will look into those resources\n\nI'm trying to index the Sip.js javascript library.\n\nIs there any way to see what the actual api-call that is going out to openai looks like?", "start_char_idx": 0, "end_char_idx": 1557, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fd9ecc9-56a8-4cbf-9785-92062fbcaa4b": {"__data__": {"id_": "2fd9ecc9-56a8-4cbf-9785-92062fbcaa4b", "embedding": null, "metadata": {"date": "2023-03-23T19:59:25.858+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088552607083143299", "node_type": "4", "metadata": {"date": "2023-03-23T19:59:25.858+00:00"}, "hash": "92b3f6356d03d8dc8ceeb48e96f5e8019b0d653a8b6d48d24311afb8e41f20b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "561cbe2c-7aac-414d-ae6b-9905d6f1fa0a", "node_type": "1", "metadata": {"date": "2023-03-23T18:45:40.642+00:00"}, "hash": "1b8737edca1b1cd448ce910b7d32097f4be5d672c72fe497d83fbd51a09dc9c4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b77a548f-3588-4d46-8fb6-0a494cc91c9f", "node_type": "1", "metadata": {}, "hash": "2c8a8b112ab3465bf4dd7dac37be1cf639d0bd8f287a6c3f2ff868690f4061d2", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\nNot quite.\n\nWhen you query though, you can check the response object to see the nodes that were used to inform the answer\n\n`response = index.query(...)`\n`response.source_nodes`\npanicPenguin:\n35         response = index.query(query, response_mode=\"default\")\n     36         display(Markdown(f\"Response: <b>{response.response}</b>\"))\n---> 37         print(response.soure_nodes)\n     38 \n\nAttributeError: 'Response' object has no attribute 'soure_nodes'", "start_char_idx": 0, "end_char_idx": 459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b77a548f-3588-4d46-8fb6-0a494cc91c9f": {"__data__": {"id_": "b77a548f-3588-4d46-8fb6-0a494cc91c9f", "embedding": null, "metadata": {"date": "2023-03-23T20:47:41.257+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088564751266750505", "node_type": "4", "metadata": {"date": "2023-03-23T20:47:41.257+00:00"}, "hash": "3e8e8d4ea613dad3de949f1a1c17d6ede5b71a5ff7b47b08ce4b6ae6a6380191", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fd9ecc9-56a8-4cbf-9785-92062fbcaa4b", "node_type": "1", "metadata": {"date": "2023-03-23T19:59:25.858+00:00"}, "hash": "6b780c1dae60b572197efbbab0d924e55b5f2ee89b4f1150404398d17a0ea6d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "679d034e-0903-4570-bffb-e6aaed46634f", "node_type": "1", "metadata": {}, "hash": "47978fa8aab85b70cab910acf5474d826bbb37f22d60cd3990eb10fc77fc5f76", "class_name": "RelatedNodeInfo"}}, "text": "panicPenguin:\nHow many documents from the index are used as context in the query and is there any way to adjust this?\nLogan M:\nFor a vector index, the default is 1\n\nyou can set it like this: `index.query(\"query\", similarity_top_k=3)`\n\nYou can also set a similarity cutoff: `index.query(\"query\", similarity_top_k=3, similarity_cutoff=0.3)`\npanicPenguin:\nthank you!", "start_char_idx": 0, "end_char_idx": 363, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "679d034e-0903-4570-bffb-e6aaed46634f": {"__data__": {"id_": "679d034e-0903-4570-bffb-e6aaed46634f", "embedding": null, "metadata": {"date": "2023-03-24T01:38:11.305+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088637858186809565", "node_type": "4", "metadata": {"date": "2023-03-24T01:38:11.305+00:00"}, "hash": "452d3573ae9052829d221bab712ef5c9f88ae198dc3a01f611c0cd00e027fe6f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b77a548f-3588-4d46-8fb6-0a494cc91c9f", "node_type": "1", "metadata": {"date": "2023-03-23T20:47:41.257+00:00"}, "hash": "418b91e839c1c25663667c91e084a8b727bba1a497fca1c3ed2b5779280ad2ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1498f68d-fc81-4900-be41-70ff2c5c3d74", "node_type": "1", "metadata": {}, "hash": "9cd2d786991948a7be939121aefc415c44e3ffac0a822d66bd1e3e71cd8256e6", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nYou must indicate the model you want to use in your query function too\ntt_hcmj:\nOh, that's right! Thank you so much! It was quickly resolved!\n```\nindex.query(\"hello\",llm_predictor=llm_predictor)\n\nDEBUG:openai:api_version=None data='{\"messages\": [{\"role\": \"user\", \"content\": \"Some choices are given below....\"}], \"model\": \"gpt-3.5-turbo\", \"max_tokens\": null, \"stream\": false, \"n\": 1, \"temperature\": 0}' message='Post details'\n```", "start_char_idx": 0, "end_char_idx": 438, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1498f68d-fc81-4900-be41-70ff2c5c3d74": {"__data__": {"id_": "1498f68d-fc81-4900-be41-70ff2c5c3d74", "embedding": null, "metadata": {"date": "2023-03-24T07:47:40.421+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088730842198712391", "node_type": "4", "metadata": {"date": "2023-03-24T07:47:40.421+00:00"}, "hash": "82ad5b53b0b575043f628364064416d589b4880401480496d339ba9d3441c0ad", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "679d034e-0903-4570-bffb-e6aaed46634f", "node_type": "1", "metadata": {"date": "2023-03-24T01:38:11.305+00:00"}, "hash": "4c34cdddc205bcc1c06a124bbb0523f3dec3006f976d8f49820bffb5a7a91392", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b68a1f9-0523-4600-b726-8b1ee85f6709", "node_type": "1", "metadata": {}, "hash": "1e7979502f2bd19952e0eeae969b4207dad9b3f86e40cc6924ff71555f10f4bf", "class_name": "RelatedNodeInfo"}}, "text": "mw:\nThat would re-index the document.  I want it to skip documents that were already indexed.  refresh's source implies it would do this so I'm digging in now to see what's going on\nLogan M:\nRefresh relies on the user to set unique document ids of each document\n\n```\ndocuments = SimpleDirectoryReader(....).load_data()\ndocumemts[0].doc_id = \"my_doc_name\"\n...\nindex.refresh(documents)\n```\n\nThen, call refresh with the documents and it should work. It checks the ID and hash of each document.\nmw:\nThanks for the tip, Logan.  That seems redundant if the hashes match.  I'll update my usage accordingly and consider creating a PR to simplify this.", "start_char_idx": 0, "end_char_idx": 643, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b68a1f9-0523-4600-b726-8b1ee85f6709": {"__data__": {"id_": "9b68a1f9-0523-4600-b726-8b1ee85f6709", "embedding": null, "metadata": {"date": "2023-03-24T08:13:59.145+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088737463847108619", "node_type": "4", "metadata": {"date": "2023-03-24T08:13:59.145+00:00"}, "hash": "8732f8e3761bd71e9bba1bf9d50395e8b1fd2061a33d628de43fc7cf28bcf68b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1498f68d-fc81-4900-be41-70ff2c5c3d74", "node_type": "1", "metadata": {"date": "2023-03-24T07:47:40.421+00:00"}, "hash": "5e7559d12c3c1e1d99172bd24627da55a89b00b21dbf59d5d041a13a87784a72", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "004d8c18-6b0b-4712-b3ee-ec308e608e1d", "node_type": "1", "metadata": {}, "hash": "28bdd43f6d4dfcee92cc6e71e2d9d4296919f4e9365abb1d57dcc7c6fad89e5e", "class_name": "RelatedNodeInfo"}}, "text": "cry0:\nthe code is\n\n```\nfrom flask import Flask\nfrom flask import request\nimport os\nfrom llama_index import SimpleDirectoryReader, GPTSimpleVectorIndex\n\nindex = None\nindex_name = \"./index.json\"\n\ndef initialize_index():\n    global index\n    if os.path.exists(index_name):  \n        index = GPTSimpleVectorIndex.load_from_disk(index_name)\n    else:\n        documents = SimpleDirectoryReader(\"./documents\").load_data()\n        index = GPTSimpleVectorIndex(documents)\n        index.save_to_disk(index_name)\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n    return \"Hello World!\"\n\n@app.route(\"/query\", methods=[\"GET\"])\ndef query_index():\n  global index\n  query_text = request.args.get(\"text\", None)\n  if query_text is None:\n    return \"No text found, please include a ?text=blah parameter in the URL\", 400\n  response = index.query(query_text)\n  return str(response), 200\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8080)\n```\nLogan M:\nYou forgot to run the initialize_index() function in main. I'll double check the tutorial, sorry about that!\n\nUPDATE: tutorial code looks ok, but I understand it's an easy mistake to make. Easy fix though! \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 1158, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "004d8c18-6b0b-4712-b3ee-ec308e608e1d": {"__data__": {"id_": "004d8c18-6b0b-4712-b3ee-ec308e608e1d", "embedding": null, "metadata": {"date": "2023-03-24T09:21:58.839+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088754575323955200", "node_type": "4", "metadata": {"date": "2023-03-24T09:21:58.839+00:00"}, "hash": "801e261877f64e432c343065a5a42e212f76e411acd90add1c11803d8263ceb7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b68a1f9-0523-4600-b726-8b1ee85f6709", "node_type": "1", "metadata": {"date": "2023-03-24T08:13:59.145+00:00"}, "hash": "a4445546ad9369ae501eda65ca271689f484f0fe74c9ecd7dd6cc7b90567a3f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df144d32-ebe9-41c6-9005-396fee22142a", "node_type": "1", "metadata": {}, "hash": "5883cfb605f7bf5e2966c86b46d33de7158378285bdce2943a8c2bdfcec4f2ab", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nthere is an error each time I include the llm_predictor in the follwoing code --> llm_agent_tool = ChatOpenAI(temperature=0.0, model_name = \"gpt-3.5-turbo\")\n\nindex_configs = []\nfor i in index_set:\n    tool_config = IndexToolConfig(\n        index= i, \n        name=f\"Vector Index {i.get_doc_id()}\",\n        description=f\"useful to answer query about {i.get_doc_id()} product (Benefit, Coverage, Cancel, Policy, Buy, Claim)\",\n        index_query_kwargs={\"similarity_top_k\": 2, \"llm_predictor\":llm_agent_tool},\n        tool_kwargs={\"return_direct\": True}\n        )\n    \n    index_configs.append(tool_config)\nLogan M:\nIf you include llm predictor in the query kwargs, make sure you wrap it with the LLMPredictor class from llama index \n\n```\nllm_predictor = LLMPredictor(llm=llm_agent_tool)\n```", "start_char_idx": 0, "end_char_idx": 799, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df144d32-ebe9-41c6-9005-396fee22142a": {"__data__": {"id_": "df144d32-ebe9-41c6-9005-396fee22142a", "embedding": null, "metadata": {"date": "2023-03-24T10:01:34.241+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088764538482085949", "node_type": "4", "metadata": {"date": "2023-03-24T10:01:34.241+00:00"}, "hash": "d9179d5d232cb62192f78dcdbfd7e673cc4c1b3b85dce851a679fdde82c32168", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "004d8c18-6b0b-4712-b3ee-ec308e608e1d", "node_type": "1", "metadata": {"date": "2023-03-24T09:21:58.839+00:00"}, "hash": "a7da7dba53f1b7a1be77ef9c11501ac7913c46474569dd1bdd998860d1d97581", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5bc76c7b-974f-45b8-99f6-0d82e521fbf4", "node_type": "1", "metadata": {}, "hash": "12f9c28094e862a04a2f5b7284dd6a85ae82416448cafeff134099c3e30b23da", "class_name": "RelatedNodeInfo"}}, "text": "plouplou:\nI know that the error happend because I add the \"llm_predictor\":llm_predictor (using gpt-3.5-turbo with ChatOpenAI()) in the index_kwarg when I create the indexTool\nAndrewTrench:\nShew. Ok, I'll have to pass on this one and let one of the gurus assist. I'm as stumped as you are.\nplouplou:\nit's ok I found the solution xo\nAndrewTrench:\nWhat was the solve. Because I now have exactly the same problem as you!\ud83d\ude29", "start_char_idx": 0, "end_char_idx": 417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5bc76c7b-974f-45b8-99f6-0d82e521fbf4": {"__data__": {"id_": "5bc76c7b-974f-45b8-99f6-0d82e521fbf4", "embedding": null, "metadata": {"date": "2023-03-24T18:22:42.011+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088890651850055862", "node_type": "4", "metadata": {"date": "2023-03-24T18:22:42.011+00:00"}, "hash": "169d6b946818fe6bd8dc425c0e1959f820e3b2f7b1cea3b6fc8e1a00a69332d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df144d32-ebe9-41c6-9005-396fee22142a", "node_type": "1", "metadata": {"date": "2023-03-24T10:01:34.241+00:00"}, "hash": "1f7157ed968a2415fcd9b8607fa722958c7b17bbbf8198534e52b636b325a83e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca3fef25-e7be-41d0-9802-c15c3e343ed1", "node_type": "1", "metadata": {}, "hash": "55b71555105c23b2a8b8f348e07f08e54b1c1511ac45a977cc001e5bdb21fd87", "class_name": "RelatedNodeInfo"}}, "text": "Darkbelg:\nI'm trying to learn more about llamaindex. I'm trying to execute the code from A Guide to LlamaIndex + Structured Data. The bind argument in the first snippet doesn't seem to exist anymore. Or at least that is what the documentation is telling me.\nLogan M:\nI got the same warning. It's just saying that in version 2.0 it wont exist (but llama_index installs 1.X)", "start_char_idx": 0, "end_char_idx": 372, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca3fef25-e7be-41d0-9802-c15c3e343ed1": {"__data__": {"id_": "ca3fef25-e7be-41d0-9802-c15c3e343ed1", "embedding": null, "metadata": {"date": "2023-03-24T18:32:03.046+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088893005001412658", "node_type": "4", "metadata": {"date": "2023-03-24T18:32:03.046+00:00"}, "hash": "2b873dfa3d0c669790933fc57ff8e1ce3c07238968b0e5bf8bfbc9a961a4aad3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5bc76c7b-974f-45b8-99f6-0d82e521fbf4", "node_type": "1", "metadata": {"date": "2023-03-24T18:22:42.011+00:00"}, "hash": "b1f1e4748cf58e669bf68ed0ddc684815c9b0605192717fed52ad47c12527bc6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81c6d64a-4c90-4f66-85db-4b1a311d0220", "node_type": "1", "metadata": {}, "hash": "25d6c26f8b2bc2047970bf9c422657fb120204e537b1131dae81edf4c21107dd", "class_name": "RelatedNodeInfo"}}, "text": "Darkbelg:\nYeah i just figured that out\nLogan M:\nReally confused me too lol", "start_char_idx": 0, "end_char_idx": 74, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81c6d64a-4c90-4f66-85db-4b1a311d0220": {"__data__": {"id_": "81c6d64a-4c90-4f66-85db-4b1a311d0220", "embedding": null, "metadata": {"date": "2023-03-24T18:35:23.966+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088893847720960020", "node_type": "4", "metadata": {"date": "2023-03-24T18:35:23.966+00:00"}, "hash": "60505d644ec12b54132a2126e87a7c9694b162955deafb995c423277880ab888", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca3fef25-e7be-41d0-9802-c15c3e343ed1", "node_type": "1", "metadata": {"date": "2023-03-24T18:32:03.046+00:00"}, "hash": "932064abef80e56dcaac20b3fba2d83cb1b1faf47950eabdc1965d733524507e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6148e013-040a-4b02-8954-0943d3f71bfe", "node_type": "1", "metadata": {}, "hash": "b2050c2a40b1b3a244255fd38220a57e58b3f3cf4a07232a4187c4ece079e588", "class_name": "RelatedNodeInfo"}}, "text": "Darkbelg:\nIs this a python thing that the from import isn't on top of the page?\nKren:\nGenerally From/import  is on top, but some of the imports for the demos are right above the function. I find it is easier to copy specific pieces and still have it work in my code. I think thats why they do it that way", "start_char_idx": 0, "end_char_idx": 304, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6148e013-040a-4b02-8954-0943d3f71bfe": {"__data__": {"id_": "6148e013-040a-4b02-8954-0943d3f71bfe", "embedding": null, "metadata": {"date": "2023-03-24T22:09:09.722+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1088947642840649868", "node_type": "4", "metadata": {"date": "2023-03-24T22:09:09.722+00:00"}, "hash": "a5a9fbb01053d983faa846b03595e7da25cc270a02c485ecc36756b99211b6e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81c6d64a-4c90-4f66-85db-4b1a311d0220", "node_type": "1", "metadata": {"date": "2023-03-24T18:35:23.966+00:00"}, "hash": "bec45741756756c7251941f32d33910cde71b6f66abf09b679c164ac64c279bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ede471c-c93f-4280-bd69-924928f4825b", "node_type": "1", "metadata": {}, "hash": "b0c2ea211b242d0eb2c72892298374068858be82a92e79d4c660de15d8409c73", "class_name": "RelatedNodeInfo"}}, "text": "DeFinn:\nDid something change on ListIndex? I'm trying to build a list index from 3 vector indexes but I'm getting 'dict' object has no attribute 'split'\nLogan M:\nCan you share the full stack trace?\nDeFinn:\n```AttributeError                            Traceback (most recent call last)\n<ipython-input-25-2b2489375d2b> in <module>\n     11 \"CeFi, People to Watch, Crypto Policy, Ethereum, L1, L2, DAOs and Web3.\")\n     12 \n---> 13 list_index = ListIndex([index1, index2, index3])\n     14 graph = ComposableGraph.build_from_index(list_index)\n     15 \n\n8 frames\n/usr/local/lib/python3.9/dist-packages/llama_index/indices/list/base.py in __init__(self, documents, index_struct, text_qa_template, llm_predictor, text_splitter, **kwargs)\n     55         \"\"\"Initialize params.\"\"\"\n     56         self.text_qa_template = text_qa_template or DEFAULT_TEXT_QA_PROMPT\n---> 57         super().__init__(\n     58             documents=documents,\n     59             index_struct=index_struct,\n\n/usr/local/lib/python3.9/dist-packages/llama_index/indices/base.py in __init__(self, documents, index_struct, llm_predictor, embed_model, docstore, index_registry, prompt_helper, text_splitter, chunk_size_limit, include_extra_info, llama_logger)\n    112             self._validate_documents(documents)\n    113             # TODO: introduce document store outside __init__ function\n--> 114             self._index_struct = self.build_index_from_documents(documents)\n    115         # update index registry and docstore with index_struct\n    116         self._update_index_registry_and_docstore()\n\n/usr/local/lib/python3.9/dist-packages/llama_index/token_counter/token_counter.py in wrapped_llm_predict(_self, *args, **kwargs)\n     84         def wrapped_llm_predict(_self: Any, *args: Any, **kwargs: Any) -> Any:\n     85             with wrapper_logic(_self):\n---> 86                 f_return_val = f(_self, *args, **kwargs)\n     87 \n     88             return f_return_val```", "start_char_idx": 0, "end_char_idx": 1952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ede471c-c93f-4280-bd69-924928f4825b": {"__data__": {"id_": "8ede471c-c93f-4280-bd69-924928f4825b", "embedding": null, "metadata": {"date": "2023-03-25T05:49:36.93+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089063519749689426", "node_type": "4", "metadata": {"date": "2023-03-25T05:49:36.93+00:00"}, "hash": "d2b80c42c50e3d7415c891dbb687c6a39b38fbd62a11e1f398491cb964aaf199", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6148e013-040a-4b02-8954-0943d3f71bfe", "node_type": "1", "metadata": {"date": "2023-03-24T22:09:09.722+00:00"}, "hash": "85fce7572d93e8b88e39c44c25570ddf7745f29cea6d9ec0adb2da60a3b87454", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69c44bc0-fa21-4e0d-8ab2-26566281f050", "node_type": "1", "metadata": {}, "hash": "a87680e02935e10b14a31eed20c0530c9e4995bbaaf9e0e0f934d237084938cc", "class_name": "RelatedNodeInfo"}}, "text": "rateltalk:\nHas anyone successfully run this guide locally: https://gpt-index.readthedocs.io/en/latest/guides/building_a_chatbot.html\niraadit:\nI have too", "start_char_idx": 0, "end_char_idx": 152, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69c44bc0-fa21-4e0d-8ab2-26566281f050": {"__data__": {"id_": "69c44bc0-fa21-4e0d-8ab2-26566281f050", "embedding": null, "metadata": {"date": "2023-03-25T14:45:55.067+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089198484638404638", "node_type": "4", "metadata": {"date": "2023-03-25T14:45:55.067+00:00"}, "hash": "1b6c7847ed67b7ee74870b246585eba6a173f6bfe119f44c544410da36cd6425", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ede471c-c93f-4280-bd69-924928f4825b", "node_type": "1", "metadata": {"date": "2023-03-25T05:49:36.93+00:00"}, "hash": "d6557cfe425706ad6663ff3b00c3fefc92619b7354d8d5f6e58362e4d4fccd2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7cf3439c-9bed-4ed0-97d4-511bce841f20", "node_type": "1", "metadata": {}, "hash": "5e9f38dfeaa0f4e71df7eaf936eea9acbd96925a48d97b86a408273b7ae61b1e", "class_name": "RelatedNodeInfo"}}, "text": "zombieyang:\nhave you check the log? Did the right answer appear in a moment, and then refined by the following useless answer?\niraadit:\nIt happened also indeed. It selected several GPTSimpleVectorIndex to answer my question, and was seemingly on the good track; but then continued to ask questions on other GPTSimpleVectorIndex (that it didn't select) and lost itself doing that\nHow did you modify your prompt?\nzombieyang:\n```\nfrom llama_index import RefinePrompt\n\nMyRefinePrompt = RefinePrompt(\n    \"{query_str}\\n\"\n    \"{existing_answer}\\n\"\n    \"{context_msg}\\n\"\n)\ngraph.query('question xxx', query_configs=[{\n        \"index_struct_type\": \"list\",\n        \"query_mode\": \"default\",\n        \"query_kwargs\": {\n            \"refine_template\":MyRefinePrompt\n        }\n    }])\n```", "start_char_idx": 0, "end_char_idx": 773, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7cf3439c-9bed-4ed0-97d4-511bce841f20": {"__data__": {"id_": "7cf3439c-9bed-4ed0-97d4-511bce841f20", "embedding": null, "metadata": {"date": "2023-03-25T16:50:52.842+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089229932586074152", "node_type": "4", "metadata": {"date": "2023-03-25T16:50:52.842+00:00"}, "hash": "f290077db446380e91895975b2478705bf1f5a1d3a171725aca4a084a2c90901", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69c44bc0-fa21-4e0d-8ab2-26566281f050", "node_type": "1", "metadata": {"date": "2023-03-25T14:45:55.067+00:00"}, "hash": "db03b1de92b15fa4707e8aae7d9c8d639a3750e0f5ef567926e7440ff9f34092", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0fee8329-ec17-48c0-85b0-4e4c77a10984", "node_type": "1", "metadata": {}, "hash": "9e34ffec809445d7b04ba6b7ff99ffde3dcdc3d12f0e766f4eb2a6dbe457f6f0", "class_name": "RelatedNodeInfo"}}, "text": "Tommertom:\nHi all - I have a silly question, but I am not able to find the right info on loading just one simple text file -  or actually an array of text files stored in a folder (but not all files in the folder, so not the directoryloader)... Tried kapa, Document.. getting errors still..\n\nWhat am I doing wrong here..\n\nIt fails with `GPTSimpleVectorIndex` - ValueError: Invalid document type: <class 'list'> in base.py\n\n```\nfrom llama_index import Document\n\ndocuments=[]\n\njson_files=['knowledge/sometext.txt']\nfor file_name in json_files:\n    with open(file_name, 'r',encoding='utf-8') as file:  \n        content = file.read()\n        doc_id = file_name\n        document = Document(text=content, doc_id=doc_id)\n        documents.append(documents)\n\nmax_input_size = 4096\nnum_outputs = 512\nmax_chunk_overlap = 20\nchunk_size_limit = 600\n\nprompt_helper = PromptHelper(max_input_size, num_outputs, max_chunk_overlap, chunk_size_limit=chunk_size_limit)\n\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0.0, model_name=\"text-ada-001\", max_tokens=num_outputs))\n\nindex = GPTSimpleVectorIndex(documents, llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\n```\nyoelk:\n@Tommertom seems like a typo -  you're appending documents instead of document\nTommertom:\nYES!!! THank you!!!", "start_char_idx": 0, "end_char_idx": 1280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fee8329-ec17-48c0-85b0-4e4c77a10984": {"__data__": {"id_": "0fee8329-ec17-48c0-85b0-4e4c77a10984", "embedding": null, "metadata": {"date": "2023-03-25T18:03:30.922+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089248211698466988", "node_type": "4", "metadata": {"date": "2023-03-25T18:03:30.922+00:00"}, "hash": "5d8acfc4cb6842e564558f5a4abc83f5bc925b61f46c54bd5cfc7657bf5cca39", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7cf3439c-9bed-4ed0-97d4-511bce841f20", "node_type": "1", "metadata": {"date": "2023-03-25T16:50:52.842+00:00"}, "hash": "4ce8302427ad1b5667227c3131293f8e516aaed2bb9d805433a8bac2161dd3d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c4029e4-1546-463d-af23-654502ba2317", "node_type": "1", "metadata": {}, "hash": "ca168ebfa2ebc7cd6cc5f97044ac2d7d4d07b8a400e0021dc406513746c80772", "class_name": "RelatedNodeInfo"}}, "text": "chao:\nI attempted to utilize a custom huggingface embedding model, but encountered an issue. Despite trying to implement the following code, the output still displays token usage. It appears that the index creation is still relying on the default OpenAI embedding rather than my custom embedding model.\n\nCode:\n\n> def get_embed_model():\n>     hf = HuggingFaceEmbeddings(model_name=\"all-mpnet-base-v2\")\n>     return LangchainEmbedding(hf)\n> \n> embed_model = get_embed_model()\n> \n> documents = SimpleDirectoryReader('./data').load_data()\n> index = GPTSimpleVectorIndex(documents, embed_model=embed_model)\n> \n> print(index.query(\"what is llm?\", embed_model=embed_model))\n\n\nOutput:\n\n> INFO:sentence_transformers.SentenceTransformer:Load pretrained SentenceTransformer: all-mpnet-base-v2\n> INFO:sentence_transformers.SentenceTransformer:Use pytorch device: cpu\n> Batches: 100% 1/1 [00:00<00:00, 21.47it/s]\n> Batches: 100% 1/1 [00:00<00:00,  4.88it/s]\n> Batches: 100% 1/1 [00:00<00:00,  4.80it/s]\n> Batches: 100% 1/1 [00:00<00:00,  4.95it/s]\n> Batches: 100% 1/1 [00:00<00:00, 11.88it/s]\n> Batches: 100% 1/1 [00:00<00:00, 17.32it/s]\n> INFO:llama_index.token_counter.token_counter:> [build_index_from_documents] Total LLM token usage: 0 tokens\n> INFO:llama_index.token_counter.token_counter:> [build_index_from_documents] Total embedding token usage: 10125 tokens\n> Batches: 100% 1/1 [00:00<00:00, 25.73it/s]\n\nDoes anyone have experience working with custom embedding models? If so, could you please provide insight into what might be causing my issue?\nLogan M:\nHow do you know its using openai? It logs the token usage regardless of which embedding model is used. It looks like it used huggingface to me \ud83e\udd14\nchao:\nAh, I see now. I had assumed that token usage always referred to OpenAI usage. Thank you for pointing this out! I had been puzzling over this all afternoon.", "start_char_idx": 0, "end_char_idx": 1860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c4029e4-1546-463d-af23-654502ba2317": {"__data__": {"id_": "7c4029e4-1546-463d-af23-654502ba2317", "embedding": null, "metadata": {"date": "2023-03-26T01:19:39.974+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089357972657934336", "node_type": "4", "metadata": {"date": "2023-03-26T01:19:39.974+00:00"}, "hash": "a479adf31e4c2ddeaf636c628fa99a3173837b8865ea44087a9b3cdca0e94a90", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0fee8329-ec17-48c0-85b0-4e4c77a10984", "node_type": "1", "metadata": {"date": "2023-03-25T18:03:30.922+00:00"}, "hash": "b3b25a3922c756dfca5513d8aa38c52c77be059aea73536d57e2db2655c38f5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07237f79-4577-40b0-8dfb-13b3317de973", "node_type": "1", "metadata": {}, "hash": "8777e613484b6950c8b48d2d15ef6202b6cfb4eea85ad8b7a441820e55177af2", "class_name": "RelatedNodeInfo"}}, "text": "markusait:\nIs it possible to use GPT-4 instead of GPT-3.5? Couldn't find anything that mentions how to do this in the docs https://gpt-index.readthedocs.io/en/latest/how_to/custom_llms.html\nLogan M:\nSee this thread. Just have to specify the model name in your llm_predictor \n\nhttps://discord.com/channels/1059199217496772688/1088374551542497300/1088475037037764719\n\nAlso this notebook has an example as well\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/test_wiki/TestNYC-Tree-GPT4.ipynb", "start_char_idx": 0, "end_char_idx": 501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07237f79-4577-40b0-8dfb-13b3317de973": {"__data__": {"id_": "07237f79-4577-40b0-8dfb-13b3317de973", "embedding": null, "metadata": {"date": "2023-03-26T11:53:13.294+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089517412078071810", "node_type": "4", "metadata": {"date": "2023-03-26T11:53:13.294+00:00"}, "hash": "4a4ec956da2fa9b92e8bf70ceb7a9e621e180124ded4901d24b872def4727979", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c4029e4-1546-463d-af23-654502ba2317", "node_type": "1", "metadata": {"date": "2023-03-26T01:19:39.974+00:00"}, "hash": "c6a24834f1552b9f357a4e2c68cfee963f364b80b6ab4d4738a66c3ef3c6b7f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df74cf37-8afa-4b48-a010-e727cc9fb0c8", "node_type": "1", "metadata": {}, "hash": "9fd1a868e4949be9e9920298d93d9ee08cbed5acb4282fc1f28bdeb68264b333", "class_name": "RelatedNodeInfo"}}, "text": "zainab:\nhello, is there a way to summarize the answer provided by QA system using llama\n4bidden:\nmaybe specify response mode in the query", "start_char_idx": 0, "end_char_idx": 137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df74cf37-8afa-4b48-a010-e727cc9fb0c8": {"__data__": {"id_": "df74cf37-8afa-4b48-a010-e727cc9fb0c8", "embedding": null, "metadata": {"date": "2023-03-27T01:19:27.186+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089720306886770709", "node_type": "4", "metadata": {"date": "2023-03-27T01:19:27.186+00:00"}, "hash": "8abc0c4ad926e187a08e98951305bfe1396d36d132c8caf9a52e423b1ee3e206", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07237f79-4577-40b0-8dfb-13b3317de973", "node_type": "1", "metadata": {"date": "2023-03-26T11:53:13.294+00:00"}, "hash": "cdfa39cee440f098bad187b9ec55aa7920459ca576c4794d28ebcebcae72191c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "de91d015-dc00-4ad7-8307-efc887bb3f52", "node_type": "1", "metadata": {}, "hash": "d295dc903a866b9b9bde4c43c21f21f084b0c32ecf82fc8767b8edc7328d2b08", "class_name": "RelatedNodeInfo"}}, "text": "jinqiu:\nIs there a way to print out the exact text being sent to OpenAI api by GPTSimpleVectorIndex?\nLogan M:\nAnyone can correct me, but I'm pretty sure there's currently no way.\n\nHowever, while you can't see the exact text sent, the response object keeps track of which nodes were used as sources.\n\n```\nresponse = index.query(...)\nprint(response.source_nodes)\n```\n\nThe inputs are a combination of text (like those in the source nodes) and the default prompts (like the qa and refine prompts) from here: https://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/default_prompts.py\n\nAnd chatgpt specific prompts here: https://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/chat_prompts.p)\n\nThis is actually a pretty hotly requested feature... I'll look into making a PR soon to add this info to the llama logger and/or debug logger\njinqiu:\nThanks Logan. I can print the source_nodes, and I know the text from the source nodes is sent over to openai's GPT in some form. It will be really nice if I can just see that plain text sent. So that I could better understand how to adjust my documents and questions to get better answer.", "start_char_idx": 0, "end_char_idx": 1152, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de91d015-dc00-4ad7-8307-efc887bb3f52": {"__data__": {"id_": "de91d015-dc00-4ad7-8307-efc887bb3f52", "embedding": null, "metadata": {"date": "2023-03-27T11:58:47.495+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089881201684262912", "node_type": "4", "metadata": {"date": "2023-03-27T11:58:47.495+00:00"}, "hash": "404b0edb31be1031f8409c4b3ed60fa3fe1a19078255e7bbd83c138c826f5d36", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df74cf37-8afa-4b48-a010-e727cc9fb0c8", "node_type": "1", "metadata": {"date": "2023-03-27T01:19:27.186+00:00"}, "hash": "afe7efe48fce7f410fa9dc1c6cb5a5077e101525201d44c92f4c00a7ae1621c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65f20ce0-da3b-4030-a234-52b54c75dd5e", "node_type": "1", "metadata": {}, "hash": "cfeec09cdb1fabbc38c9129b5ce9bcd5c9b19895cb959138fc3007c24ec77055", "class_name": "RelatedNodeInfo"}}, "text": "uPnP:\nHow would one do meta-document comparisons? \neg, user supplies document1 (an initial document) and then supplies document2 (a revision of document 2, heavily reformatted). then allow a query with both documents in context to know changes, retained information, etc?\niraadit:\nI would like to know too what @uPnP  asked", "start_char_idx": 0, "end_char_idx": 323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65f20ce0-da3b-4030-a234-52b54c75dd5e": {"__data__": {"id_": "65f20ce0-da3b-4030-a234-52b54c75dd5e", "embedding": null, "metadata": {"date": "2023-03-27T14:18:09.669+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1089916275184111667", "node_type": "4", "metadata": {"date": "2023-03-27T14:18:09.669+00:00"}, "hash": "6465995303b7e60e3fdc224a3e9628cbabd2f68554d5ba5d3c7924eca6057b1f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de91d015-dc00-4ad7-8307-efc887bb3f52", "node_type": "1", "metadata": {"date": "2023-03-27T11:58:47.495+00:00"}, "hash": "37df337f95207d6d8bebd326722649c6b108aff1d8c9937a3a6a06f6d176f507", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65eb35b0-224f-4cab-b3ca-b21b3f3ef99c", "node_type": "1", "metadata": {}, "hash": "5863c72bbe82a0a11f308fefba4f92625acc87edaea00d85a5f94f86fa06cfb3", "class_name": "RelatedNodeInfo"}}, "text": "Parru:\nNot sure where to ask this, but is it possible to change the api endpoint for OpenAI models? There's a proxy endpoint I want to try out.\nLogan M:\nI think you can modify the base URL\n \nHere's an example with the default api \n`os.environ['OPENAI_API_BASE'] = \"https://api.openai.com/v1\"`", "start_char_idx": 0, "end_char_idx": 292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65eb35b0-224f-4cab-b3ca-b21b3f3ef99c": {"__data__": {"id_": "65eb35b0-224f-4cab-b3ca-b21b3f3ef99c", "embedding": null, "metadata": {"date": "2023-03-27T22:13:36.923+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090035927159681144", "node_type": "4", "metadata": {"date": "2023-03-27T22:13:36.923+00:00"}, "hash": "cfdf954be058f8ecef94c54f6221da5c6ba07ca233b04caa3efa84b67ad6621f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65f20ce0-da3b-4030-a234-52b54c75dd5e", "node_type": "1", "metadata": {"date": "2023-03-27T14:18:09.669+00:00"}, "hash": "121b49083ed6e40862ab339eb8612bb4789043c404ef3fdbdd4aed5040ecfa47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2b2c48b-0784-48da-9a18-7b4efc989fac", "node_type": "1", "metadata": {}, "hash": "645e9e4f68de51b792475d56177965bef6c907fd2d319ad80c37f762d82c9277", "class_name": "RelatedNodeInfo"}}, "text": "heihei:\nhi. I created an index.json following the guide, when i ask questions, the answers won't longer than let's say 150 tokens(even after i set max output number to 2000), it's being cut off obviously in the middle of a sentence, how to set up it well for a longer output?\nLogan M:\nFAQ to the rescue!\n\n(OpenAI has a default of 256 token outputs, which is about 150 words)\n https://discord.com/channels/1059199217496772688/1059200010622873741/1088122994251010139\nheihei:\nthanks for the reply. i already set num_output = 2000, maybe i should set it bigger, will try later\nLogan M:\nYou'll need to set max_tokens on the llm definition too\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/custom_llms.html#example-changing-the-number-of-output-tokens-for-openai-cohere-ai21\nheihei:\ngot it\u2b50", "start_char_idx": 0, "end_char_idx": 789, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2b2c48b-0784-48da-9a18-7b4efc989fac": {"__data__": {"id_": "c2b2c48b-0784-48da-9a18-7b4efc989fac", "embedding": null, "metadata": {"date": "2023-03-27T22:45:05.03+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090043846454423654", "node_type": "4", "metadata": {"date": "2023-03-27T22:45:05.03+00:00"}, "hash": "36c280e6bd2946ce706c2dd174d1a2be1bab2327a79566190b83aedf0093d09a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65eb35b0-224f-4cab-b3ca-b21b3f3ef99c", "node_type": "1", "metadata": {"date": "2023-03-27T22:13:36.923+00:00"}, "hash": "f6ba552bfe22577bec460be402f5ca3beced95a0d158fb36ebfe23a14b5c60c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "10a0eb7c-3832-4455-a240-531acabdeae5", "node_type": "1", "metadata": {}, "hash": "67fa9b428dd32409387c8a90df3375e9ec81452a5b5b601341c52cd5009ade07", "class_name": "RelatedNodeInfo"}}, "text": "heihei:\ni can see the token numbers from info output, but don't know where to get theses vars in the program\ud83d\ude05\nAndreaSel93:\nllm_predictor.token_usage if i remember well!\nheihei:\nmany thanks... i tried to query a list index created from a web page and costs over 260k token by a simple question\ud83e\udd23 after that, i switched back to simple index \ud83d\ude06\nAndreaSel93:\nList index only over other indices in a composed index! Otherwise too expensive", "start_char_idx": 0, "end_char_idx": 432, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10a0eb7c-3832-4455-a240-531acabdeae5": {"__data__": {"id_": "10a0eb7c-3832-4455-a240-531acabdeae5", "embedding": null, "metadata": {"date": "2023-03-27T22:56:08.071+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090046627449946122", "node_type": "4", "metadata": {"date": "2023-03-27T22:56:08.071+00:00"}, "hash": "c44914ecc3ec963908e5605852c369b27718fdea2d27240dd848dba7856f59c4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2b2c48b-0784-48da-9a18-7b4efc989fac", "node_type": "1", "metadata": {"date": "2023-03-27T22:45:05.03+00:00"}, "hash": "790116042f8841c0d62a8a9c459b0296db6bb14c838dbb207a3d469dbc0438b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b29ef19f-fb9f-49e9-9ce9-088025126b4f", "node_type": "1", "metadata": {}, "hash": "6823c4bf253b292d72313a66d56bbcf70024b63e2dce86bf03d6f90289b66dfa", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\nTry this @heihei \n\n`index.llm_predictor._last_token_usage`\n\nAnd yea, using mock predictors is a good strategy for deciding if you want to run something \ud83d\udcaa\ud83d\ude04\nheihei:\nthanks a lot\ud83e\udd79", "start_char_idx": 0, "end_char_idx": 185, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b29ef19f-fb9f-49e9-9ce9-088025126b4f": {"__data__": {"id_": "b29ef19f-fb9f-49e9-9ce9-088025126b4f", "embedding": null, "metadata": {"date": "2023-03-27T23:50:22.493+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090060277485158480", "node_type": "4", "metadata": {"date": "2023-03-27T23:50:22.493+00:00"}, "hash": "c2c0fcc9fe601648ff087772f1b87259a86a7dad32a16c0c200ccd55cc4f4e0b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10a0eb7c-3832-4455-a240-531acabdeae5", "node_type": "1", "metadata": {"date": "2023-03-27T22:56:08.071+00:00"}, "hash": "68da43dce1a236cee4dc28f6b88df492d02fbf4ebc76b6163301dd7bf05d7582", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "43ad5437-a27f-42d9-9998-7fb37b16eb59", "node_type": "1", "metadata": {}, "hash": "49737336a10f9facc1ddda257e913bbb01431d9784583a3eb1333536f4a9a142", "class_name": "RelatedNodeInfo"}}, "text": "BigFish:\nI have a 1000-page PDF that contains terms that I want to extract into a CSV file. I have a code that works great on a one-page sample PDF, but I'm not sure how to prompt the model to keep extracting terms until all of them have been extracted from the 1000-page PDF. How can I modify the code to achieve this? Is this going to cost me absurd $$$?\n\n```\nnum_outputs = 1000\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"text-davinci-003\", max_tokens=num_outputs))\n\nindex = GPTSimpleVectorIndex.load_from_disk('index.json', llm_predictor=llm_predictor)\n\nprompt = f'''\n    generate a CSV string with headers that contains the terms, definitions, and sources. Each column should be enclosed in double quotes and separated by a comma. Each row should end with a newline character. Include headers \"Term\", \"Definition\", and \"Source\" in the first row. \n    '''\nresponse = index.query(prompt)\n\nwith open('output2.csv', 'w', newline='', encoding='utf-8') as csvfile:\n        csvfile.write(response.response)\n```\nLogan M:\nHmm. Since you'll need to iterate over all the documents, I would use a list index with response_mode=\"tree_summarize\". You can use the mock llm predictor to guess how many tokens that will use before you spend the cash. Info on that here: https://gpt-index.readthedocs.io/en/latest/how_to/cost_analysis.html\n\nBut this also seems like a job for the SQL index. Create a table and give a context description of the table, and let the LLM ingest the documents and insert the data as it goes. More info in this page: https://gpt-index.readthedocs.io/en/latest/guides/sql_guide.html\nBigFish:\nOh sweet, I will check this out. Thank you!", "start_char_idx": 0, "end_char_idx": 1671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "43ad5437-a27f-42d9-9998-7fb37b16eb59": {"__data__": {"id_": "43ad5437-a27f-42d9-9998-7fb37b16eb59", "embedding": null, "metadata": {"date": "2023-03-28T06:25:25.948+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090159696981262396", "node_type": "4", "metadata": {"date": "2023-03-28T06:25:25.948+00:00"}, "hash": "dfbce855185ad8e08ed1b5eac4f8f8fd475e36ac52899013b9f6d7e9d31f573e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b29ef19f-fb9f-49e9-9ce9-088025126b4f", "node_type": "1", "metadata": {"date": "2023-03-27T23:50:22.493+00:00"}, "hash": "3b6a8e627270028867c31df7afb24a60c8cf0ce1d47e6958b41c3af078597d9e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8270107b-e4b1-4545-9d7b-2b74705d1971", "node_type": "1", "metadata": {}, "hash": "42ff606c88f27f3f9dc61dbbcc0bd2f061d3739cc81d133a106ff755f9fef5f5", "class_name": "RelatedNodeInfo"}}, "text": "csam:\nhere is my code:\n```\nllm = ChatOpenAI(temperature=0.7, model=\"gpt-3.5-turbo\", callback_manager=CallbackManager([StreamingStdOutCallbackHandler()]), verbose=False, streaming=True)\ntools = [\n    Tool(\n        name = \"GPT Index\",\n        func=lambda q: str(index.query(q)),\n        return_direct=True\n    ),\n]\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\nagent_chain = initialize_agent(tools, llm, agent=\"conversational-react-description\", memory=memory)\nagent_chain.run(input=\"my question\")\n```\nLogan M:\nI think streaming isn't enabled for chat gpt, at least in llama index code. I'll check later today to see if this can be changed", "start_char_idx": 0, "end_char_idx": 652, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8270107b-e4b1-4545-9d7b-2b74705d1971": {"__data__": {"id_": "8270107b-e4b1-4545-9d7b-2b74705d1971", "embedding": null, "metadata": {"date": "2023-03-28T21:14:53.682+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090383537481469972", "node_type": "4", "metadata": {"date": "2023-03-28T21:14:53.682+00:00"}, "hash": "c361bdd2a641d0047720e47a1b4f8b705e0ee38495671b14c19486fed84954c1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "43ad5437-a27f-42d9-9998-7fb37b16eb59", "node_type": "1", "metadata": {"date": "2023-03-28T06:25:25.948+00:00"}, "hash": "406a245fdb8752f17f9e960bc7a114214a4a45b0a2106d46c6c74f1bdbb38507", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "116171ea-821a-43d3-8cdd-a16a4b829518", "node_type": "1", "metadata": {}, "hash": "ffe471b69d529a524ebb6b49a106a98217d2cb5ba84186695666d299c9a9c249", "class_name": "RelatedNodeInfo"}}, "text": "___:\nHey, is there a way to use it only to retrieve data without processing it with the LLM? I would like to do some additional processing steps beforehand\nLogan M:\n`response = index.query(..., response_mode=\"no_text\")`\n\nThen you can check `response.source_nodes` for the text that would have been sent to the LLM.\n\nHowever, this won't include the prompt templates, if that matters \ud83e\udd14 just the raw context", "start_char_idx": 0, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "116171ea-821a-43d3-8cdd-a16a4b829518": {"__data__": {"id_": "116171ea-821a-43d3-8cdd-a16a4b829518", "embedding": null, "metadata": {"date": "2023-03-28T21:19:25.956+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090384679481376809", "node_type": "4", "metadata": {"date": "2023-03-28T21:19:25.956+00:00"}, "hash": "2d04b97eaf87ccb29a584ab76d19f0d39a74eb5131d5ebb40e731678ccea5fa4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8270107b-e4b1-4545-9d7b-2b74705d1971", "node_type": "1", "metadata": {"date": "2023-03-28T21:14:53.682+00:00"}, "hash": "1fcfbb66c83573f46cb7eac17aa0439f297d3568b69fec7ffafb0860fff0e50d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "757f5fbd-c3ef-4d76-bc6a-c8b3864bdf5c", "node_type": "1", "metadata": {}, "hash": "f83b23a575d180d183662e2d7011d31ae407c30b83375f5c3a2cd020783ca7d6", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nHey friends, has anyone figured out how to stack indices with the new 0.5.0 update?\npikachu888:\nIf yes, then, it worked on my side. I just followed the docs. Maybe, you need to review your code (because some lines might differ)", "start_char_idx": 0, "end_char_idx": 244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "757f5fbd-c3ef-4d76-bc6a-c8b3864bdf5c": {"__data__": {"id_": "757f5fbd-c3ef-4d76-bc6a-c8b3864bdf5c", "embedding": null, "metadata": {"date": "2023-03-28T21:19:46.948+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090384767528206408", "node_type": "4", "metadata": {"date": "2023-03-28T21:19:46.948+00:00"}, "hash": "22ee59aab4c111aa4526113bd921b0d6f7d169a2f418c71689580719deeca685", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "116171ea-821a-43d3-8cdd-a16a4b829518", "node_type": "1", "metadata": {"date": "2023-03-28T21:19:25.956+00:00"}, "hash": "13ce0ab58697e79191b9d01cdd4c9ef78c586478e87ab250e2acfa4ab3ede223", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bcd1f529-ea1a-4e45-ac4e-787864d69291", "node_type": "1", "metadata": {}, "hash": "c4ec0bf3e52141fd9f9fee09f11337a4c34ed2f26cd47b85aaa14613b47eeea3", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nCant figure out how to get more than one layer, as shown in the docs\npikachu888:\nHi! Are you using this docs?\nhttps://gpt-index.readthedocs.io/en/latest/guides/tutorials/building_a_chatbot.html", "start_char_idx": 0, "end_char_idx": 210, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcd1f529-ea1a-4e45-ac4e-787864d69291": {"__data__": {"id_": "bcd1f529-ea1a-4e45-ac4e-787864d69291", "embedding": null, "metadata": {"date": "2023-03-29T00:21:33.652+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090430513560424488", "node_type": "4", "metadata": {"date": "2023-03-29T00:21:33.652+00:00"}, "hash": "baa636f3e0331b20a17a0b40e6147750b2bda6144a1b78822c64195f639f4c50", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "757f5fbd-c3ef-4d76-bc6a-c8b3864bdf5c", "node_type": "1", "metadata": {"date": "2023-03-28T21:19:46.948+00:00"}, "hash": "4182cb538612e1e7b815432eed3ffc679d9d509cf37e52f8f2664c5257f92afb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7f11f49-3e1c-4723-974a-23bade999320", "node_type": "1", "metadata": {}, "hash": "fd7c1780d32ec29733f6a87ce91a5673138a8d589fb71cf6d3f52d33ac13075a", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHow to create a vector index in the new version? I used to create it like:\n`GPTSimpleVectorIndex(documents=documents, llm_predictor=llm_predictor, prompt_helper=prompt_helper)`\n\nWhere documents are self-created `from gpt_index import Document` objects, e.g.:\n\n```\n                Document(\n                    text=text,\n                    doc_id=f\"doc_{i}\",\n                    extra_info={\n                        \"source\": file.filename,\n                        \"page\": i\n                    }\n                )\n```\n\nCould you link me to a doc page, where this change been described or just tell me how can I replicate the same functionality in the new version of llamaindex?\nLogan M:\nYou'll need to use the from_documents function now \n\n`GPTSimpleVectorIndex.from_documents(documents)`\n\nFor the llm predictor and prompt helper, there's a new service context object to keep these all in one place. There's a good example here, just ignore the custom LLM part haha but the part with the service context is what you need \n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_llms.html#example-using-a-custom-llm-model", "start_char_idx": 0, "end_char_idx": 1150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7f11f49-3e1c-4723-974a-23bade999320": {"__data__": {"id_": "e7f11f49-3e1c-4723-974a-23bade999320", "embedding": null, "metadata": {"date": "2023-03-29T01:57:58.823+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090454778326298676", "node_type": "4", "metadata": {"date": "2023-03-29T01:57:58.823+00:00"}, "hash": "b8062ab936672fb4a798fe7b6d7ef52c9aaec957f5e6a65b823bc072db7e8810", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bcd1f529-ea1a-4e45-ac4e-787864d69291", "node_type": "1", "metadata": {"date": "2023-03-29T00:21:33.652+00:00"}, "hash": "0e5ba4014cbeb7ff0f83e659fda792601c56e380fab1260da580068c5649d78a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "430d4b2a-5e3f-4c04-810c-8c64ed144aec", "node_type": "1", "metadata": {}, "hash": "3851168acc63d1862b84b5bc75c87f818f83e8173df7011fbe6b20cb2b87524c", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nMay I ask why the output text is being cut off when I receive it?\n\n```\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=20)\nprompt_helper = PromptHelper(max_input_size=4096, num_output=512, max_chunk_overlap=20)\n...\n\nINFO:gpt_index.token_counter.token_counter:> [query] Total LLM token usage: 3620 tokens\nINFO:gpt_index.token_counter.token_counter:> [query] Total embedding token usage: 15 tokens\n```\n\nWhich argument I need to tune, in order to get full output (at least containing more words. Currently I receive very little amount). This is in Russian, but you can see that the output is definitely very small:\n\n```\n\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u0435\u043c\u0430 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0432 \u041c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0442\u0443\u0440\u0438\u0437\u043c\u0430 \u0438 \u0433\u043e\u0441\u0442\u0435\u043f\u0440\u0438\u0438\u043c\u0441\u0442\u0432\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u041f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438. \u041f\u0440\u0438\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0433\u0440\u0430\u043d\u0442\u0430 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u043c \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0445 \u041f\u0440\u0430\u0432\u0438\u043b. \u041f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u041f\u0440\u0438\u0435\n```\nadss:\nHello, have you solved your issue?\npikachu888:\nthat one, no \ud83d\ude14 I experimented with the arguments, but could not find a proper balance yet. Switched to English text for now, but definitely come back to that later.", "start_char_idx": 0, "end_char_idx": 1116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "430d4b2a-5e3f-4c04-810c-8c64ed144aec": {"__data__": {"id_": "430d4b2a-5e3f-4c04-810c-8c64ed144aec", "embedding": null, "metadata": {"date": "2023-03-29T03:34:21.513+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090479032686104657", "node_type": "4", "metadata": {"date": "2023-03-29T03:34:21.513+00:00"}, "hash": "581586947d541a72df638ec8580a510bda7aa37b368dcf0111beb65865fb8a26", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7f11f49-3e1c-4723-974a-23bade999320", "node_type": "1", "metadata": {"date": "2023-03-29T01:57:58.823+00:00"}, "hash": "9a511cb56cc94cd77d7dfed5ef47f30daac7801eacb6724cddb525861aad26ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b1f24f0-12ae-4c90-b5bc-241dedbefbad", "node_type": "1", "metadata": {}, "hash": "71f3eb1a8e49b7097a2371e66bdab52bc3d548fe803b379a1a784f7df0dee064", "class_name": "RelatedNodeInfo"}}, "text": "KeYee:\nI wonder how to upgrade my llama_index to the latest version\nLogan M:\n`pip install --upgrade llama_index langchain`", "start_char_idx": 0, "end_char_idx": 122, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b1f24f0-12ae-4c90-b5bc-241dedbefbad": {"__data__": {"id_": "5b1f24f0-12ae-4c90-b5bc-241dedbefbad", "embedding": null, "metadata": {"date": "2023-03-29T06:18:16.753+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090520284672565268", "node_type": "4", "metadata": {"date": "2023-03-29T06:18:16.753+00:00"}, "hash": "bf893e7259202d06717f459983c61c6a391a7759efdcee620a9695ad733cdfab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "430d4b2a-5e3f-4c04-810c-8c64ed144aec", "node_type": "1", "metadata": {"date": "2023-03-29T03:34:21.513+00:00"}, "hash": "c48cf0d2731d4782821bb0165cfff0e0b2a5d5e90655f23b3ef09d5983cd7d11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "39252a67-5f83-45a7-a74f-1fd3949749a0", "node_type": "1", "metadata": {}, "hash": "b65b183075ec829d48a4389248da199a0d6202e1c3e2e164240520359eb561f5", "class_name": "RelatedNodeInfo"}}, "text": "autratec:\nbtw,  after using the new indexing method, the indexjson file size was reduced from 120M to 20M.  it is really a good news. !\npikachu888:\n120 mb?? What do you store? Whole library? \ud83d\ude00 \n\nI indexed pdfs of 100-400 pages and the biggest index is ~2mb with old version and around 5k kb with new version\nautratec:\nSingapore Income Tax Act 1947. I am building an Income Tax Consultant Bot.\ud83d\ude00\npikachu888:\nyeah yeah, I noticed that too. Every LLM call has alot of tokens. But I'm using a vector index per pdf (I have 3 pdfs) and wrap them with list index. So I retrieve 1 node per index. Maybe that's the case. But you say that in the previous version, you used less tokens for the same request, right? That's actually might be a bug. Not sure why is that\nautratec:\ni just conducted test. luckily, i have still have the old version running on and old environment. the index.json is 120M. but every request only cost me 600 tokens for LLM. Under new model, with smaller index.json - 20M,  it cost me about 4000 token for LLM, which is a huge difference  need some help from technical team to investigate.\npikachu888:\nWow! That's huge! Could you, please, ping me when you get an answer for your concern? I'm still new in discord and don't know how to pin a message", "start_char_idx": 0, "end_char_idx": 1262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39252a67-5f83-45a7-a74f-1fd3949749a0": {"__data__": {"id_": "39252a67-5f83-45a7-a74f-1fd3949749a0", "embedding": null, "metadata": {"date": "2023-03-29T08:27:40.372+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090552847650803723", "node_type": "4", "metadata": {"date": "2023-03-29T08:27:40.372+00:00"}, "hash": "af3d7d5c338035c628650b0b28e9389c41480d40da2246ae95c8cd0851680b6e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b1f24f0-12ae-4c90-b5bc-241dedbefbad", "node_type": "1", "metadata": {"date": "2023-03-29T06:18:16.753+00:00"}, "hash": "9d37c5c639583510f267a25a0a15e5391c056d67c9d3a0e16bcda4a0268b83ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd37d415-4ef8-4011-a252-245accb72dbc", "node_type": "1", "metadata": {}, "hash": "be0e0eece3de37b8edb697fdc78d1187e65ffddfb5c0b4adf27352fe7262e042", "class_name": "RelatedNodeInfo"}}, "text": "Greg Tanaka:\nAnyone know why the SEC example (  index_set[year].set_text(f\"UBER 10-k Filing for {year} fiscal year\")) has this error: 'GPTSimpleVectorIndex' object has no attribute 'set_text'\npikachu888:\ncheck that all your imports come from either `gpt_index` or `llama_index` . Using pycharm, I accidentally imported `llama_index` objects and had alike error\nGreg Tanaka:\nthanks, everything is from llama index not gpt_index, but it still doesn't work\nautratec:\nyou might just change everything back to gpt-index.\nGreg Tanaka:\nthanks, what is the equivalent of set_text in llama_index?\nautratec:\ni am not sure of your question. but my python code is still using everything under gpt-index, and running fine.\nGreg Tanaka:\nIt looks like GPTSimpleVectorIndex no longer has set_text so the code doesn't work...", "start_char_idx": 0, "end_char_idx": 808, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd37d415-4ef8-4011-a252-245accb72dbc": {"__data__": {"id_": "dd37d415-4ef8-4011-a252-245accb72dbc", "embedding": null, "metadata": {"date": "2023-03-29T09:53:27.723+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090574437205676112", "node_type": "4", "metadata": {"date": "2023-03-29T09:53:27.723+00:00"}, "hash": "7414ca64be52465e5af38c42358d558bdd212ec91852f13e2aea447e202f33ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39252a67-5f83-45a7-a74f-1fd3949749a0", "node_type": "1", "metadata": {"date": "2023-03-29T08:27:40.372+00:00"}, "hash": "d13365d173b0c39a26fe4c110dd8a9f46d62f85e9b59e4f45756e19b7e25e408", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b402ba4-ca14-418a-9323-02d395fe05df", "node_type": "1", "metadata": {}, "hash": "e697ca59c2613dd5d7bc362f98d68cd88c0a3ab074797a91bb05823142cfe169", "class_name": "RelatedNodeInfo"}}, "text": "autratec:\nencountered new issue after upgrading of gpt-index to 0.5 , change my code. now the index feature is not working and shows error: Non of PyTorch, TensorFlow >=2.0, or Flax have been found. Modesl won't be available and only tokenizers, configuration and file/data utilities can be used. So my model just dead and won't send any token to openai and response is NONE. How to fix it ? @Logan M\nautratec:\n@Logan M  any suggestions?\nLogan M:\nUhh yea that's a weird one.\n\nI would just start with a fresh python env at that point \n\nSomething like this in bash:\n`python -m venv fresh_env`\n`source fresh_env/bin/activate`\n`pip install llama_index`\nautratec:\nHi , i find the root cause of my error. i made a mistake to get program do the re-indexing on the new server without provide the data source file, which ends an empty index.json being created. problem fixed.", "start_char_idx": 0, "end_char_idx": 866, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b402ba4-ca14-418a-9323-02d395fe05df": {"__data__": {"id_": "8b402ba4-ca14-418a-9323-02d395fe05df", "embedding": null, "metadata": {"date": "2023-03-29T10:17:12.258+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090580412138532894", "node_type": "4", "metadata": {"date": "2023-03-29T10:17:12.258+00:00"}, "hash": "d611d4c611d037512b60c546a9918dae75ed6922293486bb070bc95b44237432", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd37d415-4ef8-4011-a252-245accb72dbc", "node_type": "1", "metadata": {"date": "2023-03-29T09:53:27.723+00:00"}, "hash": "b6cf4ffbe35a18e11ff5e2fcb328e5ee35889867d9fd870823a9eee08e85710a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84328161-9cbe-4657-b8fe-8d88899a7a05", "node_type": "1", "metadata": {}, "hash": "d58ddbcea17e158175ac3dcac38324347a5b5f315f302c87beacd71d0bd7a796", "class_name": "RelatedNodeInfo"}}, "text": "heihei:\nhi, I created a index.json which is larger than 25M, it reads well from my desktop, but result in error  KeyError: 'index_struct' on ubuntu 22.04 server with python 3.10.7, all the llama index libs are new.  I compared the size of the index.json on desktop and ubuntu, they are the same. how to deal with it?\nautratec:\nI face the same issue this morning. Due to 0.5 releasing, you might need to re-indexing. And also check your code as formal being changed.\nheihei:\ngot it, many thanks1", "start_char_idx": 0, "end_char_idx": 494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84328161-9cbe-4657-b8fe-8d88899a7a05": {"__data__": {"id_": "84328161-9cbe-4657-b8fe-8d88899a7a05", "embedding": null, "metadata": {"date": "2023-03-29T12:45:24.634+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090617709466767431", "node_type": "4", "metadata": {"date": "2023-03-29T12:45:24.634+00:00"}, "hash": "4be7a8e8bfaaa7940a40b11e5e0491245f5264dcfad42535678e055202cf6aeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b402ba4-ca14-418a-9323-02d395fe05df", "node_type": "1", "metadata": {"date": "2023-03-29T10:17:12.258+00:00"}, "hash": "a8d3d97c1ef171e47ae66ce29a392dbe40661990ecd8b2c684de739a47dda72e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35a6051e-800d-482a-ad34-edfe71687db2", "node_type": "1", "metadata": {}, "hash": "1f40637f2b623070967714b726dd64bb2b2d1a6e96b618b61cb24f249b7d30de", "class_name": "RelatedNodeInfo"}}, "text": "uPnP:\nyeah, too many breaking changes. its not bad. right now its probably easier to start with a fresh notebook or program than trying to migrate\nautratec:\nAgree. Fresh notebook in Google colab is working fine.", "start_char_idx": 0, "end_char_idx": 211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35a6051e-800d-482a-ad34-edfe71687db2": {"__data__": {"id_": "35a6051e-800d-482a-ad34-edfe71687db2", "embedding": null, "metadata": {"date": "2023-03-29T13:47:22.368+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090633302773346344", "node_type": "4", "metadata": {"date": "2023-03-29T13:47:22.368+00:00"}, "hash": "fe39f2e44cbbb0ea90a37695b11afd24b17026da7633eacdb75f8b747f29ae2a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84328161-9cbe-4657-b8fe-8d88899a7a05", "node_type": "1", "metadata": {"date": "2023-03-29T12:45:24.634+00:00"}, "hash": "39047dada7aafb4302055b86a1bd6d2e0eeaf73fba4d78c3c1668a7d726cb8dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1bae8a02-e584-4e38-bc90-9d5a9ecb9147", "node_type": "1", "metadata": {}, "hash": "07eaa5fa41dd1846a048e113cb68a95fb23891c9d837b0b1fd4beaf0a1ff9753", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nAnyone working with the last version? What kind of advantages are you experiencing?\nautratec:\nMy Index.json reduced from 120M to 20M. but experiencing token usage increase from 600 token per conversation to 4000 tokens. But that change need to be revalidated. And believe can be fine tuned.\nAndreaSel93:\nAnd in terms of performance and new features?", "start_char_idx": 0, "end_char_idx": 362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bae8a02-e584-4e38-bc90-9d5a9ecb9147": {"__data__": {"id_": "1bae8a02-e584-4e38-bc90-9d5a9ecb9147", "embedding": null, "metadata": {"date": "2023-03-29T14:40:37.794+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090646705361399848", "node_type": "4", "metadata": {"date": "2023-03-29T14:40:37.794+00:00"}, "hash": "7a15d30c87f9a5ceb76b593332e2d012c9aa30cfafec4107780f549ebe3535d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35a6051e-800d-482a-ad34-edfe71687db2", "node_type": "1", "metadata": {"date": "2023-03-29T13:47:22.368+00:00"}, "hash": "fc0021f8b93ac81016e8c8e398729269a9702d376abed257c7506b840ca00ada", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1bb3bb13-bb81-4d0a-b946-9c7d860f8a41", "node_type": "1", "metadata": {}, "hash": "e845e610e83847f9e1eb6b03930c668c2836d4f8066b0e706d3993a5d8398a4e", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nA Q not related to the new version: do the QA and REFINE prompts (also the similarity top_k) work with langchain agents using llama index as tool? or with GPTIndexChatMemory?\nAndreaSel93:\nI mean, I worked a lot with prompts and now I would like to integrate the chat. But I don't even know from which text chunk the response is from", "start_char_idx": 0, "end_char_idx": 345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1bb3bb13-bb81-4d0a-b946-9c7d860f8a41": {"__data__": {"id_": "1bb3bb13-bb81-4d0a-b946-9c7d860f8a41", "embedding": null, "metadata": {"date": "2023-03-29T14:55:21.733+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090650412870271077", "node_type": "4", "metadata": {"date": "2023-03-29T14:55:21.733+00:00"}, "hash": "0a110f098945741ef8b6471a0c8b6b9036c79268b41bbed4b418818e52282e2d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1bae8a02-e584-4e38-bc90-9d5a9ecb9147", "node_type": "1", "metadata": {"date": "2023-03-29T14:40:37.794+00:00"}, "hash": "2f7c8a80ea53af89ed758201cf0c9fe94e8688080e50f7b222c88cb88f91c55f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b78aae49-25ab-4ec2-b342-1020af9c6a6b", "node_type": "1", "metadata": {}, "hash": "bbe604b1cd21f784cf51fad988044abc9480b23fb37e1b8ec7a9ca97a489b2ce", "class_name": "RelatedNodeInfo"}}, "text": "uPnP:\nI was previously storing a keywordindex with simplevectorindices for its underlying items.  Also a treeindex with simplevectorindices. Anyways it seems nesting is impossible since composable graph is only a top level index ie you cant have a composable graph within a composable graph.\nLogan M:\nYou can have a graph within a graph, I saw it just yesterday... I'll find the message lol\n\nUpdate: https://discord.com/channels/1059199217496772688/1090384679481376809/1090407502098735205", "start_char_idx": 0, "end_char_idx": 488, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b78aae49-25ab-4ec2-b342-1020af9c6a6b": {"__data__": {"id_": "b78aae49-25ab-4ec2-b342-1020af9c6a6b", "embedding": null, "metadata": {"date": "2023-03-29T16:15:01.143+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090670459168759884", "node_type": "4", "metadata": {"date": "2023-03-29T16:15:01.143+00:00"}, "hash": "9df3bcc0e8729b60ee7e993ee77746c0e780fc5096a4de0687c9ef13c2ee0c49", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1bb3bb13-bb81-4d0a-b946-9c7d860f8a41", "node_type": "1", "metadata": {"date": "2023-03-29T14:55:21.733+00:00"}, "hash": "988ff381dca60e7e0012257bd0451d36aa9f9f339d714801795ebc27614f7760", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "28a191da-6fa7-47e4-b711-5bfebc4fcecb", "node_type": "1", "metadata": {}, "hash": "2df9437fc4e542364f93c3083265a945b76fbb55ee03ab4bf254b3f7a3fa9854", "class_name": "RelatedNodeInfo"}}, "text": "howe:\nIs there a way to combine the data provided and general public answer so that the answer would not ONLY based on the text provided? Say using llama index as a tool in langchain, is there an example I can see that does that? thanks\nmattipatti:\nI just did it with a custom prompt that asked for a second paragrah without considering context provided.", "start_char_idx": 0, "end_char_idx": 354, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28a191da-6fa7-47e4-b711-5bfebc4fcecb": {"__data__": {"id_": "28a191da-6fa7-47e4-b711-5bfebc4fcecb", "embedding": null, "metadata": {"date": "2023-03-29T19:47:03.907+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090723822308704357", "node_type": "4", "metadata": {"date": "2023-03-29T19:47:03.907+00:00"}, "hash": "318bf15200d9c320f0a6a29d3c1d5bd5cc479d0f13ee82a5968eeead15f4f403", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b78aae49-25ab-4ec2-b342-1020af9c6a6b", "node_type": "1", "metadata": {"date": "2023-03-29T16:15:01.143+00:00"}, "hash": "9247dfe274b3997e657c9b08996ad651182e78469c0e6dc3bd4574ec635b4fa1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "498adce6-6a74-4cae-8a6e-098c2ec6292b", "node_type": "1", "metadata": {}, "hash": "c58e988eaa6a5a267dbd2560934511e711060998dbccaf1ffba326be9ac6c957", "class_name": "RelatedNodeInfo"}}, "text": "Sergio Casero:\nHi folks, first of all, thanks for this awesome job\n\nI'm trying to estimate the costs of the \"training\", the use case is the following: I have lot of pdfs and I want to integrate them with LLM. By using the MockLLMPredictor, I get the following info attached (all of them based on `SimpleDirectoryReader`, same dir), the question is... does these values have sense?, the \"per query\" it's obviously a query estimation based on 5 five queries made with Mocks.\nLogan M:\n~~That looks right to me \ud83e\udd14 You have quite a lot documents \ud83d\udcaa ~~ wait, imma double check\n\nAny reason why you didn't include a vector index? Even a vector index with `similarity_top_k=3` or 5 would be cheaper than all of these \ud83d\udcb8 \n\nEmbeddings are very cheap to generate compared to LLM calls.", "start_char_idx": 0, "end_char_idx": 770, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "498adce6-6a74-4cae-8a6e-098c2ec6292b": {"__data__": {"id_": "498adce6-6a74-4cae-8a6e-098c2ec6292b", "embedding": null, "metadata": {"date": "2023-03-29T20:52:29.853+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090740288919720027", "node_type": "4", "metadata": {"date": "2023-03-29T20:52:29.853+00:00"}, "hash": "4dff286aba5d3caf6d8d0a8b2d8cb66d586d5e6e70971e13c77e2937b756e523", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "28a191da-6fa7-47e4-b711-5bfebc4fcecb", "node_type": "1", "metadata": {"date": "2023-03-29T19:47:03.907+00:00"}, "hash": "fb6aeeb3d3472bca35dfed205c7bed82b38b6e8febe973d073b6275b11f6d517", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c066305-35de-4b85-822e-5614938d29a3", "node_type": "1", "metadata": {}, "hash": "3713b80efdc8b0562fe4ec6f52b2a09c7a011bf31bfec4dd07c7e8bfab69adf8", "class_name": "RelatedNodeInfo"}}, "text": "fransb14:\nHi, can anyone point me to a gpt-3.5-turbo example? I can't make it work in the new version using GPTSimpleVectorIndex as before\nLogan M:\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/SimpleIndexDemo-ChatGPT.ipynb", "start_char_idx": 0, "end_char_idx": 252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c066305-35de-4b85-822e-5614938d29a3": {"__data__": {"id_": "6c066305-35de-4b85-822e-5614938d29a3", "embedding": null, "metadata": {"date": "2023-03-29T21:14:04.938+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090745720899899392", "node_type": "4", "metadata": {"date": "2023-03-29T21:14:04.938+00:00"}, "hash": "a1eef40e6fc3780cfe0218b762c66e4c65cdfc3d7b53a51128d935231f058d9f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "498adce6-6a74-4cae-8a6e-098c2ec6292b", "node_type": "1", "metadata": {"date": "2023-03-29T20:52:29.853+00:00"}, "hash": "7427d62dacc00d9165cd9f322ae633fc7c7f82341de073f76104251e96a1f2d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c487e9f7-7e04-44cd-8ee0-49ab24844519", "node_type": "1", "metadata": {}, "hash": "384adc71624f245487ca16c7df1f29eb955f2c257297692b518916309c67c172", "class_name": "RelatedNodeInfo"}}, "text": "Sketchead:\nHey, recently made a chatbot like app using GPTPineconeIndex. I have two questions: What would be the best way to insert a bunch of documents? (Since inserting all of them in a single file just creates one node) also the app works fine, but it does not seem to retain information about past questions, is there anyway around that? Maybe by using a different index?. Thanks in advance\nLogan M:\nIf you want to remember past questions, use a chat front-end like langchain, and llama index can act as a tool in langchain.\n\nAlso for inserting, usually it's best to make a document per file (or even a document per section in a file)", "start_char_idx": 0, "end_char_idx": 638, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c487e9f7-7e04-44cd-8ee0-49ab24844519": {"__data__": {"id_": "c487e9f7-7e04-44cd-8ee0-49ab24844519", "embedding": null, "metadata": {"date": "2023-03-29T23:20:11.661+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090777458036461699", "node_type": "4", "metadata": {"date": "2023-03-29T23:20:11.661+00:00"}, "hash": "2fa9e9211c64373972b492282a938b6a7fcdf636c46244416aa841f5f5a1ef22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c066305-35de-4b85-822e-5614938d29a3", "node_type": "1", "metadata": {"date": "2023-03-29T21:14:04.938+00:00"}, "hash": "4b381ba9a97285b7f6011f8d7cd84c8bc000ecd5ff87cefd730c880ae303167e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f2197f3-70db-41d6-8eed-d78ff8033492", "node_type": "1", "metadata": {}, "hash": "7643eb4a51a7e57242731fb5106154e641b1f50cad95b03d667f747a62e9179e", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHow to dynamically tune `chunk_size_limit` and `max_tokens` ?\n\nI keep getting token limit error from openai. I run around 1000 questions in a loop on a list of indices. \n\nSo every time a new `out of token limit` error is thrown, I need to adjust the values of `chunk_size_limit` or `max_tokens`  to fit into that particular case. The situation is that I cannot sacrifice neither input tokens size (If I can keep the key information, it's ok tho)  nor output tokens size and want to keep some balance. \n\nWhat are the best practices in this situation?\npikachu888:\nAh, I see.. So `chunk_size_limit` + `max_tokens` should be higher than 4097. Since `chunk_size_limit` is 3900 by default, I need to make sure that they sum up to 4097. Is that correct?\npikachu888:\nno, not true... I'm getting the error again... even though I set `chunk_size_limit` to 3000 and `max_tokens` to 512. ..\n\nWhat is wrong here? :/ \n\n```\nprompt_helper = PromptHelper(max_input_size=512, num_output=512, max_chunk_overlap=20)\nllm = ChatOpenAI(temperature=0, openai_api_key=OPENAI_API_KEY, max_tokens=512)\nllm_predictor = LLMPredictor(llm=llm)\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper, chunk_size_limit=3000)\n```\npikachu888:\nI think it is because of the:\n\n```\n    memory = ConversationBufferMemory(memory_key=\"chat_history\")\n    agent_chain = create_llama_chat_agent(\n        toolkit,\n        llm,\n        memory=memory,\n        verbose=True\n    )\n```\n?", "start_char_idx": 0, "end_char_idx": 1497, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f2197f3-70db-41d6-8eed-d78ff8033492": {"__data__": {"id_": "3f2197f3-70db-41d6-8eed-d78ff8033492", "embedding": null, "metadata": {"date": "2023-03-30T01:33:22.391+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090810973587247195", "node_type": "4", "metadata": {"date": "2023-03-30T01:33:22.391+00:00"}, "hash": "1ac9132c73ac988058f28be81804b584dd25b7be59bbb174e3a23451bc394964", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c487e9f7-7e04-44cd-8ee0-49ab24844519", "node_type": "1", "metadata": {"date": "2023-03-29T23:20:11.661+00:00"}, "hash": "ec60710ae282177229b4dc0f68b8ef5ba928018d7878dfd4e2b542801444452d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7fa87b1c-bd54-4266-88fc-81e37e41ea09", "node_type": "1", "metadata": {}, "hash": "2ebba35a3ddd97bace895120e2a078ece57c4e6d0ab9e9c06e4028abd8fc6e6a", "class_name": "RelatedNodeInfo"}}, "text": "mikEnd:\nhey guys, yesterday I created the next code: \n```\n    index = GPTSimpleVectorIndex.load_from_disk('../indexes/index.json')\n\n    # LLM Predictor (gpt-3.5-turbo)\n    llm_predictor = LLMPredictor(llm=ChatOpenAI())\n\n    # Querying the index\n    response = index.query(\n        \"summarize Jack's story?\",\n        llm_predictor=llm_predictor,\n        response_mode=\"tree_summarize\"\n    )\n\n    print(response)\n```\nand It worked fine, but today I updated the llama-index library to 0.5.1 version and now I'm getting next error: got an unexpected keyword argument 'llm_predictor'. Can someone help me fixing it? I want to use gpt-3.5-turbo model\nautratec:\ndo you need to specify your llm_predictor,like:     llm_predictor = LLMPredictor(llm=OpenAI(temperature=0.5, model_name=\"text-davinci-003\", max_tokens=num_outputs))", "start_char_idx": 0, "end_char_idx": 819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7fa87b1c-bd54-4266-88fc-81e37e41ea09": {"__data__": {"id_": "7fa87b1c-bd54-4266-88fc-81e37e41ea09", "embedding": null, "metadata": {"date": "2023-03-30T04:28:16.892+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090854990714785862", "node_type": "4", "metadata": {"date": "2023-03-30T04:28:16.892+00:00"}, "hash": "1d0577678d1128bd72325fc341d0f9a4616bbb1dadccc90192cbca2c024a85d4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f2197f3-70db-41d6-8eed-d78ff8033492", "node_type": "1", "metadata": {"date": "2023-03-30T01:33:22.391+00:00"}, "hash": "08b72b1f1afb6c517d08901199ce9ee0f1e722a6b6503cabd46d916ca1a91845", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c53d6a87-8ca6-4663-aaa8-ccd46b1cb6d1", "node_type": "1", "metadata": {}, "hash": "8cf04ba6ff48888723812956374a870389bbc02279407ad6086eef1a69206176", "class_name": "RelatedNodeInfo"}}, "text": "nova:\nAnyone know how to resolve this error: ```ImportError: cannot import name 'RESPONSE_TEXT_TYPE' from partially initialized module 'llama_index.indices.response.builder'```\nGetting it since upgrading to latest. Seems to be coming from this import: ```from llama_index.indices.composability import ComposableGraph```\nLogan M:\nDo you have the full trace? I've seen this before if you have other folders in your path that are also named llama_index (or other names in the import path)", "start_char_idx": 0, "end_char_idx": 485, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c53d6a87-8ca6-4663-aaa8-ccd46b1cb6d1": {"__data__": {"id_": "c53d6a87-8ca6-4663-aaa8-ccd46b1cb6d1", "embedding": null, "metadata": {"date": "2023-03-30T05:34:00.149+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090871529933381644", "node_type": "4", "metadata": {"date": "2023-03-30T05:34:00.149+00:00"}, "hash": "20d219e7111005a43349607a490048e755a10aba4113db82ae82158c4f22a319", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7fa87b1c-bd54-4266-88fc-81e37e41ea09", "node_type": "1", "metadata": {"date": "2023-03-30T04:28:16.892+00:00"}, "hash": "cadf5d4e340d98e3b8ba38afbb3619248f7a218cf2ea5395571eea720479235d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9805dd95-c671-4481-b552-d94cf1a5e6e0", "node_type": "1", "metadata": {}, "hash": "83b262dfe3b45a2ff7556bf2f82399a5b19038da73ac0173555395cf5f7a562a", "class_name": "RelatedNodeInfo"}}, "text": "donvito:\nhi, is there a way to limit the OpenAI API tokens generated in llamaindex? just wanted to control cost since I am exploring using my own funds. \ud83d\ude04\nautratec:\nwhat your current token cost per every API call ?", "start_char_idx": 0, "end_char_idx": 214, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9805dd95-c671-4481-b552-d94cf1a5e6e0": {"__data__": {"id_": "9805dd95-c671-4481-b552-d94cf1a5e6e0", "embedding": null, "metadata": {"date": "2023-03-30T11:46:33.188+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1090965285374275684", "node_type": "4", "metadata": {"date": "2023-03-30T11:46:33.188+00:00"}, "hash": "35bbab5c1fe6c3c94dc8811247a1a6256f9c438e273c99a4e33d2d75990556e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c53d6a87-8ca6-4663-aaa8-ccd46b1cb6d1", "node_type": "1", "metadata": {"date": "2023-03-30T05:34:00.149+00:00"}, "hash": "9ce3778f30d74c84b163a617e90506bb7e9fc2869db469187081e0fa7d30e0cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e70c43b9-47e5-46b3-b56a-b5ad25de6efe", "node_type": "1", "metadata": {}, "hash": "36306f2a23dc56f0bca358f4938ae65cab9d5880cd27bfd5068603378e89ea80", "class_name": "RelatedNodeInfo"}}, "text": "Sergio Casero:\nHello again, still trying to estimate the costs, I see some strange things,\n\nThis is my code:\n\n(Only called first time):\n```def train(path):\n    tokens = 0\n    name = path.split(\"/\")[-1]\n\n    # get the documents inside the folder\n    documents = SimpleDirectoryReader(path).load_data()\n    print(\"Starting Vector construction at \", datetime.datetime.now())\n    index = GPTSimpleVectorIndex.from_documents(documents)\n\n    index.save_to_disk(\"indexes/\" + name + \".json\")\n\n    return tokens```\n\nNow, I just call this another method:\n```\ndef query(query, toIndex):\n    index = GPTSimpleVectorIndex.load_from_disk(\"indexes/\" + toIndex + \".json\")\n    response = index.query(query)\n    return response\n\nresponse = query(\"question\", \"data\")\n```\n\nThis is what the console output says:\n```\nINFO:llama_index.token_counter.token_counter:> [query] Total LLM token usage: 5002 tokens\nINFO:llama_index.token_counter.token_counter:> [query] Total embedding token usage: 23 tokens\n```\n\nBut this is what OpenAI billing console says:\n```\n11:35\nLocal time: 30 mar 2023, 13:35\ntext-davinci, 2 requests\n4,483 prompt + 512 completion = 4,995 tokens\n11:35\nLocal time: 30 mar 2023, 13:35\ntext-embedding-ada-002-v2, 2 requests\n56,906 prompt + 0 completion = 56,906 tokens\n```\n\nis that right? \ud83e\udd14\nCrisTian:\nare you train to count the tokens that que query use ???", "start_char_idx": 0, "end_char_idx": 1349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e70c43b9-47e5-46b3-b56a-b5ad25de6efe": {"__data__": {"id_": "e70c43b9-47e5-46b3-b56a-b5ad25de6efe", "embedding": null, "metadata": {"date": "2023-03-30T14:56:54.16+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091013188402810881", "node_type": "4", "metadata": {"date": "2023-03-30T14:56:54.16+00:00"}, "hash": "5cf850c0bf7ed010ab5d6a13ccc2194e4dea26fd09e406bc796c138e5ad17932", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9805dd95-c671-4481-b552-d94cf1a5e6e0", "node_type": "1", "metadata": {"date": "2023-03-30T11:46:33.188+00:00"}, "hash": "9491b5266ed2c94d7399400cb0ee023e63547d6a19c19950fedfe878c68b23af", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ccf83673-acb3-43d3-9fd5-2b2c454b224d", "node_type": "1", "metadata": {}, "hash": "d101568e8eda405b313b995813666054590937bf61589a37296cdff9e8cb0ead", "class_name": "RelatedNodeInfo"}}, "text": "antonio.aa1979:\nHi, is PandasIndex still supported after renaming the library from gpt_index to llama_index?\nLogan M:\nYes! Just need to update your imports to say `from llama_index import ....`\nMitchhs12:\nwhat do you have to import for PandasIndex because I cannot find it by doing from llama_index import ?", "start_char_idx": 0, "end_char_idx": 307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccf83673-acb3-43d3-9fd5-2b2c454b224d": {"__data__": {"id_": "ccf83673-acb3-43d3-9fd5-2b2c454b224d", "embedding": null, "metadata": {"date": "2023-03-30T17:01:11.982+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091044468775473152", "node_type": "4", "metadata": {"date": "2023-03-30T17:01:11.982+00:00"}, "hash": "764a3875d8a58028293004b79b2775f7efa2c541973278b65caf65c263fbd112", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e70c43b9-47e5-46b3-b56a-b5ad25de6efe", "node_type": "1", "metadata": {"date": "2023-03-30T14:56:54.16+00:00"}, "hash": "199a1b342e3e8f2becd0c4b09ac0e81a5ee5f66a360f07bdd42cc139a66adea2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a895a551-0dd4-45f7-8a4a-5e45319be559", "node_type": "1", "metadata": {}, "hash": "d2710a3c9d32d0679204b530ff6963e28f7014b924480e3803277ff9cbab1dd5", "class_name": "RelatedNodeInfo"}}, "text": "bSharpCyclist:\nI see now in the announcements, the breaking changes. Arg, I'll have to clean this up.\nLogan M:\nYea lots of new changes in the new version. I know it's a pain but it's needed to better support awesome features moving forward \ud83d\ude4f\ud83d\udcaa", "start_char_idx": 0, "end_char_idx": 242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a895a551-0dd4-45f7-8a4a-5e45319be559": {"__data__": {"id_": "a895a551-0dd4-45f7-8a4a-5e45319be559", "embedding": null, "metadata": {"date": "2023-03-30T18:20:47.736+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091064499739566130", "node_type": "4", "metadata": {"date": "2023-03-30T18:20:47.736+00:00"}, "hash": "4f8623a3b5154c93306885ba40e766853ba74b2d57cf275c8c3c16421ba615fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccf83673-acb3-43d3-9fd5-2b2c454b224d", "node_type": "1", "metadata": {"date": "2023-03-30T17:01:11.982+00:00"}, "hash": "90042481142b3bf9ad94fbb8dcca1a58614351a378595763698d17618feda809", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20029004-5f43-4f7d-8f1a-d1937aaf9f3c", "node_type": "1", "metadata": {}, "hash": "43aa56d5af33e488066bcf622d2e15a3219cbb71846f42b87035c6fa277ef3f5", "class_name": "RelatedNodeInfo"}}, "text": "l9:\nIs possible to load the whole code base from the c++ project, and then query the specified class with the entire class definition?\nl9:\nis there anyone doing a similar thing?", "start_char_idx": 0, "end_char_idx": 177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20029004-5f43-4f7d-8f1a-d1937aaf9f3c": {"__data__": {"id_": "20029004-5f43-4f7d-8f1a-d1937aaf9f3c", "embedding": null, "metadata": {"date": "2023-03-30T19:54:50.311+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091088166414463057", "node_type": "4", "metadata": {"date": "2023-03-30T19:54:50.311+00:00"}, "hash": "7cc6d67c930681f7463f2142da966c5a380731b284ec4cbc9239fc3ce79f7a98", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a895a551-0dd4-45f7-8a4a-5e45319be559", "node_type": "1", "metadata": {"date": "2023-03-30T18:20:47.736+00:00"}, "hash": "653d5dba8d91b882444779aeea05913c6709fa6d201695f9a60e392fc8c02b13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5cae747e-e88f-4be3-8474-5a2631beedd8", "node_type": "1", "metadata": {}, "hash": "ade0ade7990f2f16a1aac691cc6a524d7a6d80763d2aeecb44450f8c80652ed4", "class_name": "RelatedNodeInfo"}}, "text": "Greg Tanaka:\nAnyone know what is causing this ---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nCell In[5], line 1\n----> 1 from llama_index import download_loader, GPTSimpleVectorIndex\n      2 from pathlib import Path\n\nFile ~/.local/lib/python3.9/site-packages/llama_index/__init__.py:18\n     15 from llama_index.embeddings.openai import OpenAIEmbedding\n     17 # structured\n---> 18 from llama_index.indices.common.struct_store.base import SQLDocumentContextBuilder\n     19 from llama_index.indices.composability.graph import ComposableGraph\n     20 from llama_index.indices.empty import EmptyIndex\n\nFile ~/.local/lib/python3.9/site-packages/llama_index/indices/common/struct_store/base.py:9\n      7 from llama_index.data_structs.node_v2 import Node\n      8 from llama_index.data_structs.table import StructDatapoint\n----> 9 from llama_index.indices.response.builder import ResponseBuilder, TextChunk\n     10 from llama_index.indices.service_context import ServiceContext\n     11 from llama_index.langchain_helpers.chain_wrapper import LLMPredictor\n\nFile ~/.local/lib/python3.9/site-packages/llama_index/indices/response/builder.py:18\n     16 from llama_index.data_structs.node_v2 import Node, NodeWithScore\n     17 from llama_index.docstore_v2 import DocumentStore\n---> 18 from llama_index.indices.common.tree.base import GPTTreeIndexBuilder\n     19 from llama_index.indices.service_context import ServiceContext\n...\n     33 )\n     34 from llama_index.indices.service_context import ServiceContext\n     35 from llama_index.optimization.optimizer import BaseTokenUsageOptimizer\n\nImportError: cannot import name 'RESPONSE_TEXT_TYPE' from partially initialized module 'llama_index.indices.response.builder' (most likely due to a circular import) (/home/gregtanaka/.local/lib/python3.9/site-packages/llama_index/indices/response/builder.py)\nLogan M:\nI think I saw this earlier today, try upgrading langchain I think \n\n`pip install --upgrade langchain`", "start_char_idx": 0, "end_char_idx": 2050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5cae747e-e88f-4be3-8474-5a2631beedd8": {"__data__": {"id_": "5cae747e-e88f-4be3-8474-5a2631beedd8", "embedding": null, "metadata": {"date": "2023-03-31T04:40:08.991+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091220365340069938", "node_type": "4", "metadata": {"date": "2023-03-31T04:40:08.991+00:00"}, "hash": "0160aea1ccd854ca7def9c8497ce593b094cf8035ff8a3077202508623c52c50", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20029004-5f43-4f7d-8f1a-d1937aaf9f3c", "node_type": "1", "metadata": {"date": "2023-03-30T19:54:50.311+00:00"}, "hash": "2da3c2f53ddc6281d8829a06553547c6823142b6daa94f101a609391ec6ba272", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "440c1163-fae8-4201-994f-e83229850c8a", "node_type": "1", "metadata": {}, "hash": "85d3bb0491f823b71e24fb741d784df9ecc6db775828d9f3f388c1fc4c474eae", "class_name": "RelatedNodeInfo"}}, "text": "gengordo:\nif we have a set of confidential docs, is there a method of using llamaindex in privacy preserving architecture?\nheihei:\nI know someone using CoSENT as embedding tool, and ChatGLM as summary tool, both of them are deployed locally, even can work without network. you may investigate them. I just heard about this, not tried by myself.", "start_char_idx": 0, "end_char_idx": 344, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "440c1163-fae8-4201-994f-e83229850c8a": {"__data__": {"id_": "440c1163-fae8-4201-994f-e83229850c8a", "embedding": null, "metadata": {"date": "2023-03-31T06:15:24.169+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091244336534003732", "node_type": "4", "metadata": {"date": "2023-03-31T06:15:24.169+00:00"}, "hash": "1cb74ea96850b68c15fd81c68c9b477dc59c0126280d2e661d3f6b48d90554a4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5cae747e-e88f-4be3-8474-5a2631beedd8", "node_type": "1", "metadata": {"date": "2023-03-31T04:40:08.991+00:00"}, "hash": "565df0f551718959d830610564bb2d5b24529ca48f7a3ae344a8084fe0e8fbe8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60059c90-1784-4d85-9c55-46a496df13b8", "node_type": "1", "metadata": {}, "hash": "2e04be0800fd498cb488f7eaadc48f56a4de8aedca678030f8051e71c14ab498", "class_name": "RelatedNodeInfo"}}, "text": "gautamg485:\nhow to get the answer with source from vector db metadata from GptSimpleVectorIndex\ncluxterfuark:\nGPTSimpleVectorIndex is an in-memory vector store: https://github.com/jerryjliu/llama_index/blob/66db86d2e875fb47384a77a0469bc6c6f45c866e/gpt_index/indices/vector_store/vector_indices.py#L49", "start_char_idx": 0, "end_char_idx": 300, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60059c90-1784-4d85-9c55-46a496df13b8": {"__data__": {"id_": "60059c90-1784-4d85-9c55-46a496df13b8", "embedding": null, "metadata": {"date": "2023-03-31T07:21:23.808+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091260944463691797", "node_type": "4", "metadata": {"date": "2023-03-31T07:21:23.808+00:00"}, "hash": "6e7bc1997dd7310943b1d3fe365ec1436345e1b26e99c9f8a0d08566077d65e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "440c1163-fae8-4201-994f-e83229850c8a", "node_type": "1", "metadata": {"date": "2023-03-31T06:15:24.169+00:00"}, "hash": "d72f4fe3c2130e292ee3062dff787aad7dd69fa888009e7198e365d96f509f70", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "366cf2b7-b837-4da5-85fe-78da23eaba1c", "node_type": "1", "metadata": {}, "hash": "d67bfc01308f23bc9cea9c94760de0ef0cc0bcc27645dadff50dcb9fdb6b52ed", "class_name": "RelatedNodeInfo"}}, "text": "maxanjo512:\nHello, i hope you all have a good day. I want to implement a chat, so it should remember context and chat history. As i see, everyone is using gpt-3.5- for this kind of tasks. But i want to use text-babbage-001 model because it's cheaper. Is it possible or I only need to use chat-turbo\nAndreaSel93:\nI do not think babbage can produce enough good results. And btw gpt3.5 is cheap", "start_char_idx": 0, "end_char_idx": 391, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "366cf2b7-b837-4da5-85fe-78da23eaba1c": {"__data__": {"id_": "366cf2b7-b837-4da5-85fe-78da23eaba1c", "embedding": null, "metadata": {"date": "2023-03-31T08:21:26.449+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091276055035269151", "node_type": "4", "metadata": {"date": "2023-03-31T08:21:26.449+00:00"}, "hash": "3612212af915cb9efbecda642795d8680fe5ef2703339bbef47dc61206ac7fa7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60059c90-1784-4d85-9c55-46a496df13b8", "node_type": "1", "metadata": {"date": "2023-03-31T07:21:23.808+00:00"}, "hash": "52d1d14da27c6ab243149e59f2046f17fa3c0eeb5552ab91d7e53c5517f5ac6a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80ba884e-dc74-47e7-8df5-a2f9bdd09b96", "node_type": "1", "metadata": {}, "hash": "a05ba4031615664f7e1302d2e64f4b7345315db5fd1d550ec4b10547546d4546", "class_name": "RelatedNodeInfo"}}, "text": "donvito:\nHi, does GPTSimpleVectorIndex support changing of the LLM predictor? I checked my usage and it is still falling back to` text-davinci-03`. here's the gist of the code.\n\n`# define LLM\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"gpt-3.5-turbo\", max_tokens=512))\n\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\nindex = GPTSimpleVectorIndex.from_documents(\n    documents, service_context=service_context\n)`\ndonvito:\nI think this code is working. I was just looking at the wrong usage logs \ud83d\ude02 , please ignore", "start_char_idx": 0, "end_char_idx": 593, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80ba884e-dc74-47e7-8df5-a2f9bdd09b96": {"__data__": {"id_": "80ba884e-dc74-47e7-8df5-a2f9bdd09b96", "embedding": null, "metadata": {"date": "2023-03-31T08:33:46.122+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091279157448691761", "node_type": "4", "metadata": {"date": "2023-03-31T08:33:46.122+00:00"}, "hash": "b1effab3c24f5bb5025da0ca5758ee1a0986fd6b24fe8f25526c8416e19b45f6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "366cf2b7-b837-4da5-85fe-78da23eaba1c", "node_type": "1", "metadata": {"date": "2023-03-31T08:21:26.449+00:00"}, "hash": "980dbb4b78beb19f5a01c9775a2a664a9824fc49ec4aa73c5a2c132c8f3bdc36", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "353edd79-54da-4357-bff8-9184c5e0cd67", "node_type": "1", "metadata": {}, "hash": "be3a68396900948f69cf0347abefe51a8c4cc202edf9f9278fafde564f71ef32", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nWhat LLM is used to convert text to embeddings in GPTSimpleVectorIndex?\ndonvito:\ntext-embedding-ada-002-v2", "start_char_idx": 0, "end_char_idx": 118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "353edd79-54da-4357-bff8-9184c5e0cd67": {"__data__": {"id_": "353edd79-54da-4357-bff8-9184c5e0cd67", "embedding": null, "metadata": {"date": "2023-03-31T09:52:14.921+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091298907583160321", "node_type": "4", "metadata": {"date": "2023-03-31T09:52:14.921+00:00"}, "hash": "c9549d61f455e99071cb57b914c14f5048df254d01cacaa320ee2663ca3fa4f6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80ba884e-dc74-47e7-8df5-a2f9bdd09b96", "node_type": "1", "metadata": {"date": "2023-03-31T08:33:46.122+00:00"}, "hash": "bb1cf9711c9837f5c48330fbadeb8aa30e11f164e5558d0e5d8b6756058d00a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ccb1ac27-2683-4f31-bb62-6cbff4e71616", "node_type": "1", "metadata": {}, "hash": "98719167bb89cdd6607757d9c6fd905cc021f8018ab0b94b619fa68c5fba4436", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nI think llamaindex team needs to work on more user friendly documentation. I was searching for list of vector stores supported by llamaindex and could not find. Where is it?\nLogan M:\nAlways ways to improve it \ud83d\udc4d Searching for store on the app works pretty well? Here is the relevant page: https://gpt-index.readthedocs.io/en/latest/how_to/integrations/vector_stores.html\n\nIt's under key components->integrations", "start_char_idx": 0, "end_char_idx": 422, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ccb1ac27-2683-4f31-bb62-6cbff4e71616": {"__data__": {"id_": "ccb1ac27-2683-4f31-bb62-6cbff4e71616", "embedding": null, "metadata": {"date": "2023-03-31T11:43:45.8+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091326971163705406", "node_type": "4", "metadata": {"date": "2023-03-31T11:43:45.8+00:00"}, "hash": "9696a956ea9d32b22cd3db17c13718b94f788fba3200a681f86e4503f61b45eb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "353edd79-54da-4357-bff8-9184c5e0cd67", "node_type": "1", "metadata": {"date": "2023-03-31T09:52:14.921+00:00"}, "hash": "85f38d4f98c3190c2521d5bb3de47e1c8cd5254916a0e7333a6d38eab95556a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9beeb59-68f0-4677-94af-072c5d15c426", "node_type": "1", "metadata": {}, "hash": "ff043965b0097f26ba5085addaed7fb5d36f084e1c7ba4f22be94c786ce7521e", "class_name": "RelatedNodeInfo"}}, "text": "AndreaSel93:\nHey, anyone has used the \u201crequired_keywords\u201d kwargs so far?\nAndrewRessler:\nI ended up using my own version of a post processing node for required keywords. from gpt_index import (\n            VectorStoreIndex,\n            ResponseSynthesizer,\n        )\n        from gpt_index.retrievers import VectorIndexRetriever\n        from gpt_index.query_engine import RetrieverQueryEngine\n        from gpt_index.indices.postprocessor import SimilarityPostprocessor\n        from gpt_index.indices.postprocessor import KeywordNodePostprocessor\n        # configure retriever\n        retriever = VectorIndexRetriever(\n            index=index,\n            similarity_top_k=20,\n        )\n\n        # configure response synthesizer\n        response_synthesizer = ResponseSynthesizer.from_args(\n            node_postprocessors=[\n                SimilarityPostprocessor(similarity_cutoff=0.5)\n            ],\n            service_context=service_context\n        )\n\n        node_postprocessors = [\n            AVIDKeywordNodePostprocessor(\n                required_keywords=need_required_keywords,\n                exclude_keywords=[]\n            )\n        ]\n        query_engine = RetrieverQueryEngine.from_args(\n            retriever, node_postprocessors=node_postprocessors,\n            response_synthesizer=response_synthesizer,\n            service_context=service_context\n        )", "start_char_idx": 0, "end_char_idx": 1375, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9beeb59-68f0-4677-94af-072c5d15c426": {"__data__": {"id_": "c9beeb59-68f0-4677-94af-072c5d15c426", "embedding": null, "metadata": {"date": "2023-04-01T01:53:00.644+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091540691269722144", "node_type": "4", "metadata": {"date": "2023-04-01T01:53:00.644+00:00"}, "hash": "4f634e6688ddea43587f9cce8ea0c17a0ba799cc045c74c7023b04aace363672", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ccb1ac27-2683-4f31-bb62-6cbff4e71616", "node_type": "1", "metadata": {"date": "2023-03-31T11:43:45.8+00:00"}, "hash": "ef0517c558ebc363f851fca2aba35a1e203e4a4c8e2bc9bf964b70cd8b92d713", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b36f368f-0220-457d-9096-d36a6b46d198", "node_type": "1", "metadata": {}, "hash": "ad3b594a10e9f848c220266d065954e93e3f9e02f57fff1aa07a2eeef927e46c", "class_name": "RelatedNodeInfo"}}, "text": "ryans_jp:\nHey all, just tweeted @gpt_index about this. But the web page showing which llm's are supported by LlamaIndex is not working. It's a 404 error. \n\nIs that info housed anywhere else in the mean time?\nLogan M:\nI think Google just needs to re-index the docs at some point...\n\nThe docs are here though! \nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_llms.html", "start_char_idx": 0, "end_char_idx": 389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b36f368f-0220-457d-9096-d36a6b46d198": {"__data__": {"id_": "b36f368f-0220-457d-9096-d36a6b46d198", "embedding": null, "metadata": {"date": "2023-04-01T11:55:44.465+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1091692373328810124", "node_type": "4", "metadata": {"date": "2023-04-01T11:55:44.465+00:00"}, "hash": "3c97f39531e06ca86ba382de58aea4bf635b364108b8e24be12488609c5ac1e3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9beeb59-68f0-4677-94af-072c5d15c426", "node_type": "1", "metadata": {"date": "2023-04-01T01:53:00.644+00:00"}, "hash": "61a794fb800521149d1d20e41609d93ebf7cc9720cef49ac7fe768bf773efc81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f099145-1db9-4dc5-812c-7b9817133c8f", "node_type": "1", "metadata": {}, "hash": "fca86b65356fb3b466a1ead50d556d79b2a41d317d4ea7f60437b4ee97a57403", "class_name": "RelatedNodeInfo"}}, "text": "TheGuy:\nHey guys, how do I save index to github? `index.save_to_disk('index.json')` seems to save to local disk. I am running my python program from Google colab and want save or read index directly from github repo. Anybody tried?\nconfused_skelly:\nYou can use git lfs, but I think the better solution is to save your index to an S3 bucket and then load from S3 whenever you want to use the index. The sync to S3 would have to be done by yourself but that code is easy enough. (S3 is an example you can use any cloud blob storage)", "start_char_idx": 0, "end_char_idx": 530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f099145-1db9-4dc5-812c-7b9817133c8f": {"__data__": {"id_": "3f099145-1db9-4dc5-812c-7b9817133c8f", "embedding": null, "metadata": {"date": "2023-04-02T14:00:33.175+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092086171120705676", "node_type": "4", "metadata": {"date": "2023-04-02T14:00:33.175+00:00"}, "hash": "95261fc8afd28e0d27fee0dd65e3388c9ec160ad584f4e5f2dba90be55d75edb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b36f368f-0220-457d-9096-d36a6b46d198", "node_type": "1", "metadata": {"date": "2023-04-01T11:55:44.465+00:00"}, "hash": "27a04b0835b359fdd39aaa83948813fef53f0533c34aed31db7f71a29338b89c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d01604d1-67e5-4c5b-bb19-2f6ef8fef21b", "node_type": "1", "metadata": {}, "hash": "8a8e188d7bea9d9c9c4b9d7eda86df365c6879d1758d676d5d06bf5f20e5eb94", "class_name": "RelatedNodeInfo"}}, "text": "Sergio Casero:\nHello :), quick question, is the api key mandatory? I'm trying to integrate alpaca with llama_index but I get `AuthError` because no api key is provided on my side but... because I don't want to use OpenAI\nLogan M:\nIn addition to alpaca, you'll also need and embed_model. By default it uses openAI text-ada-002 (which is pretty cheap thankfully).\n\nYou can use any model from huggingface locally, using this guide: https://gpt-index.readthedocs.io/en/latest/how_to/customization/embeddings.html#custom-embeddings", "start_char_idx": 0, "end_char_idx": 526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d01604d1-67e5-4c5b-bb19-2f6ef8fef21b": {"__data__": {"id_": "d01604d1-67e5-4c5b-bb19-2f6ef8fef21b", "embedding": null, "metadata": {"date": "2023-04-02T21:32:52.403+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092200001293275186", "node_type": "4", "metadata": {"date": "2023-04-02T21:32:52.403+00:00"}, "hash": "757374cb216a13b22992b92872bffd0e6d73f7415a67b33b06e6320bf5dcdbbd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f099145-1db9-4dc5-812c-7b9817133c8f", "node_type": "1", "metadata": {"date": "2023-04-02T14:00:33.175+00:00"}, "hash": "cf5c3f3dcad444775ca22a8463cff657af42a9f65fb698cbb7f9a1f43e556951", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5fa4deef-cf49-4894-b3c8-504cece0181e", "node_type": "1", "metadata": {}, "hash": "618ae8cb14dd214766a392f62bab6c4289f04bc1ddfded9708639fd3b0e0dc1f", "class_name": "RelatedNodeInfo"}}, "text": "cincy:\nHi, having question regarding query template to return proper SQL query result using GPTSQLStoreIndex with SQLContextBuilder  based on documenatation https://gpt-index.readthedocs.io/en/latest/guides/tutorials/sql_guide.html#a-guide-to-llamaindex-structured-data. I've tried to first use SQLContextBuilder and GPTSimpleVectorIndex to build table schema index, and then run context_builder.query_index_from_context, which could be able to return proper table schema. And then build context_builder.build_context_container, and then pass this context_container into GPTSQLStoreIndex to query actual data from table,  and return query result. However, the SQL query returned from GPTSQLStoreIndex is not proper. For example, when mentioning count, it only count all without \"DISTINCT\" included sometimes. I've tried to pass prompt format into context_dict or table_index_prmopt from sqlContextBuilder, but seems that only refers to table schema prompt, but still nothing changed for SQL query. How to pass prompt to make SQL query return properly?\nLogan M:\nThe default SQL prompt is here (lines 173-198): https://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/default_prompts.py#L173\n\nYou can use that to create your own and I thiiiiink pass it in like `index.query(..., text_to_sql_prompt=my_prompt_template)`\ncincy:\nThanks Logan! It worked for me! And is there any other suggestion tips to make SQL query generated accurately?\nLogan M:\nNothing too specific to suggest. But in my experience, gpt-3.5-turbo will generate invalid SQL the most commonly when compared to text-davicini-003 and gpt-4 \ud83e\udd14\n\nTo handle this, you can wrap the query with a try/except and handle the error nicely for the user\ncincy:\nThanks Logan. And one more question, what is the difference actually for the text-to-sql prompt template included in GPTSqlStoreIndex, and the table_context_prompt included in SQLContextContainer? I assume table_context_prompt is to put template for table schema selection, and text-to-sql is more for sql query based on selected table schema from context container. However, sometimes even though I add some context_str in table_schema_context like \"if usage query amount, it means RevenueTotal column\", it still does not select this RevenueTotal column from table schema, so later SQL query failed.", "start_char_idx": 0, "end_char_idx": 2322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fa4deef-cf49-4894-b3c8-504cece0181e": {"__data__": {"id_": "5fa4deef-cf49-4894-b3c8-504cece0181e", "embedding": null, "metadata": {"date": "2023-04-03T00:22:42.358+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092242741062275152", "node_type": "4", "metadata": {"date": "2023-04-03T00:22:42.358+00:00"}, "hash": "b54a5afa8029b29f10c9fd0e1a4e595cedb064c4ca3289c0fc4d42fa3dc1f4a9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d01604d1-67e5-4c5b-bb19-2f6ef8fef21b", "node_type": "1", "metadata": {"date": "2023-04-02T21:32:52.403+00:00"}, "hash": "b859480aede20ead96c5c4204e9e7cee726cc044594afd340c44a3df421c63d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "182cc68c-c562-4e9a-895b-16cbc08a0d94", "node_type": "1", "metadata": {}, "hash": "5f6920346627c20d698b76b291ae68bd7b26778ed8cde08b6816b43f57a3114d", "class_name": "RelatedNodeInfo"}}, "text": "Greg Tanaka:\nHow do you have a longer query response?\nLogan M:\nFAQ to the rescue :dotsHARDSTYLE: https://docs.google.com/document/d/1bLP7301n4w9_GsukIYvEhZXVAvOMWnrxMy089TYisXU/edit#heading=h.7wxuw955edwh", "start_char_idx": 0, "end_char_idx": 204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "182cc68c-c562-4e9a-895b-16cbc08a0d94": {"__data__": {"id_": "182cc68c-c562-4e9a-895b-16cbc08a0d94", "embedding": null, "metadata": {"date": "2023-04-03T12:54:52.93+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092432032400945182", "node_type": "4", "metadata": {"date": "2023-04-03T12:54:52.93+00:00"}, "hash": "a791b5a356dbaf4d555ae3b8f16785168d8161cbf3fe8326b73de52a47791b27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5fa4deef-cf49-4894-b3c8-504cece0181e", "node_type": "1", "metadata": {"date": "2023-04-03T00:22:42.358+00:00"}, "hash": "09642c9bed4326a439814a89d3bb4a6e2e9b2d87b13a56ba28766e112fa87307", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6d60286-2853-44e8-84d7-f1aad8b953a4", "node_type": "1", "metadata": {}, "hash": "ac4703dfabce62eafcff546f43fa182327db10927eb7e1288784e6d2de97f764", "class_name": "RelatedNodeInfo"}}, "text": "Ferhad:\n`import os\nfrom langchain import OpenAI\nfrom llama_index import GPTSimpleVectorIndex, SimpleDirectoryReader, LLMPredictor, PromptHelper, ServiceContext\n\nos.environ['OPENAI_API_KEY'] = 'sk-xxxxxxx'\n\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0.2, model_name=\"text-davinci-003\"))\n\n# set maximum input size\nmax_input_size = 4096\n# set number of output tokens\nnum_output = 256\n# set maximum chunk overlap\nmax_chunk_overlap = 20\n\nprompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\ndocuments = SimpleDirectoryReader(\"./\").load_data()\nindex = GPTSimpleVectorIndex.from_documents(documents, service_context=service_context)\n\nresponse = index.query(\"create telegram bot for me\", response_mode=\"compact\")\nprint(response)`\n\n----------------------------\n\nHello, good evening. How do I know if the answer to the question is relevant to my document (.txt file) ? \nDoesn't want to answer non-documentary questions.\nLogan M:\nas @heihei said, it usually refuses to answer if it is irrelevent. You can also check the similarity score of the nodes used to create the answer in the response as well\n\n`response = index.query(...)`\n`print(response.source_nodes)`\nFerhad:\nPlease could you send me a sample? I'm new to this stuff, sorry, please \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 1370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6d60286-2853-44e8-84d7-f1aad8b953a4": {"__data__": {"id_": "d6d60286-2853-44e8-84d7-f1aad8b953a4", "embedding": null, "metadata": {"date": "2023-04-03T16:33:49.954+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092487133073248276", "node_type": "4", "metadata": {"date": "2023-04-03T16:33:49.954+00:00"}, "hash": "e7c29a3826eac61c9061a97a12018dce170b6a6c7b6066285d5011ba76f672ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "182cc68c-c562-4e9a-895b-16cbc08a0d94", "node_type": "1", "metadata": {"date": "2023-04-03T12:54:52.93+00:00"}, "hash": "cbc9a7bf16ba2691e170c13dbc3206706c8a311ce48c8599dcfeeeb9c92c1a3b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a7301839-d57f-4ac7-a063-d0108d594c5d", "node_type": "1", "metadata": {}, "hash": "e79cc75f057e17bdacd66a299f31375ff0645e9075eedd69da17545ad680123f", "class_name": "RelatedNodeInfo"}}, "text": "fattymoe:\nIs their away to turn off the \"INFO:llama_index.token_counter.token_counter\" so it doesn't display?\nLogan M:\nYou can set the logger level to error \n\nSomething like this\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stdout, level=logging.ERROR)\nlogging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))\n```", "start_char_idx": 0, "end_char_idx": 346, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a7301839-d57f-4ac7-a063-d0108d594c5d": {"__data__": {"id_": "a7301839-d57f-4ac7-a063-d0108d594c5d", "embedding": null, "metadata": {"date": "2023-04-03T18:43:28.655+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092519759309967390", "node_type": "4", "metadata": {"date": "2023-04-03T18:43:28.655+00:00"}, "hash": "c20b531ee5dd0f831d27b21ee716ec78210faeb1d4347ce2b2c6f41b18b633b9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6d60286-2853-44e8-84d7-f1aad8b953a4", "node_type": "1", "metadata": {"date": "2023-04-03T16:33:49.954+00:00"}, "hash": "b192eb3e08285a4ccd63b14715f74f9ce052168ea94c9a35ba7ab1edc71bda69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9995fef-602e-4da3-be69-a86c4b9dc09b", "node_type": "1", "metadata": {}, "hash": "4a5c7fe3c210ce649d08c806282235ec861518b7d968dea58a822fe947446549", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\nHey guys I've been running into a bug with llamIndex. Not sure if it can be fixed by changing some property or its an actual bug. \nWhen I try to use response.get_formatted_sources the result is cut off. But when I say response.source_nodes it works fine and i can see the entire source nodes. I even tried providing response.get_formatted_sources(length=1000) but it still gets chopped off after a few characters.\nLogan M:\nDo the responses end with 3 dots, or just abruptly cut off?\n\nIf it's abruptly cut off, that's the actual entire text node \ud83e\udd14 (get_formatted_sources adds 3 dots to truncated text)\nBioHacker:\noh I get the ... When I use response.source_nodes I can see the whole text but not with .get_formatted_sources\nSo baesd on what you said, if I want the whole thing don't use get_formatted_sources? what if I don't wnat it truncated? Is there an option to get the whole source using .get_formatted_sources? or do i always need to use .source_nodes?", "start_char_idx": 0, "end_char_idx": 969, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9995fef-602e-4da3-be69-a86c4b9dc09b": {"__data__": {"id_": "a9995fef-602e-4da3-be69-a86c4b9dc09b", "embedding": null, "metadata": {"date": "2023-04-03T20:31:16.377+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092546886902222869", "node_type": "4", "metadata": {"date": "2023-04-03T20:31:16.377+00:00"}, "hash": "def782dc5e689c909a8e6cb74b0aa93ca2b1c41d5a2615b1f5e0802b31f87304", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a7301839-d57f-4ac7-a063-d0108d594c5d", "node_type": "1", "metadata": {"date": "2023-04-03T18:43:28.655+00:00"}, "hash": "a5bdb6f7477bc10ca20a07c4bf11b116e1963d04156f843e8e239d0f1f329dce", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46e24a11-b390-41cf-8b07-fedc9736ea0b", "node_type": "1", "metadata": {}, "hash": "0bd12d9667884cab4c394e96df18cf0c29a45c39032f9847c6b318717549f0a6", "class_name": "RelatedNodeInfo"}}, "text": "AlephNewell:\nIf I were to use llama_index in handling structured data containing PHI, for natural language querying purposes, would it be possible to have the creator enter into a BAC (Business Associate Contract) to ensure HIPAA compliance? I\u2019m concerned with data security and want to guarantee that private data won\u2019t be comprised if I use llama_index\nLogan M:\nI think any data security issues are up to OpenAI to comply with \ud83d\ude05 there's some links in the FAQ for this https://discord.com/channels/1059199217496772688/1059200010622873741/1088122994251010139\n\nThere is also support for using your own models locally, but you need a lot of hardware for it to work well.", "start_char_idx": 0, "end_char_idx": 668, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46e24a11-b390-41cf-8b07-fedc9736ea0b": {"__data__": {"id_": "46e24a11-b390-41cf-8b07-fedc9736ea0b", "embedding": null, "metadata": {"date": "2023-04-03T22:49:41.82+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092581722455023716", "node_type": "4", "metadata": {"date": "2023-04-03T22:49:41.82+00:00"}, "hash": "aa7f2381551542bb441f56fff0f51990e7e7f6112c9e8644b7d265e605509f43", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9995fef-602e-4da3-be69-a86c4b9dc09b", "node_type": "1", "metadata": {"date": "2023-04-03T20:31:16.377+00:00"}, "hash": "ec57211fac11be19c23de60974d4d5f2938338c0cc8f45201bf387f53fd1ef9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8136e108-6d78-4a22-9f7b-9b05008c4e91", "node_type": "1", "metadata": {}, "hash": "a48ab8d51758fe6a44c16759cb3c3ea816a5f52853ff2615e45c3a2750926df1", "class_name": "RelatedNodeInfo"}}, "text": "Runonthespot:\nHey, I'm trying to figure out the right combination of index types for our chatbot usecase (we have already got streaming chat client + basic QA with LlamaIndex working beautifully via GPTSimpleVectorIndex).  I need to support two use cases basically: \n1) Translate -> I need to iterate through a long doc and translate the whole thing without summarising - is this possible?\n2) Summarise -> I want to figure out what index / combination of indexes I need to achieve this.  I'm not clear if I need to just use GPTSimpleVectorIndex with response_mode = 'tree_summary' or whether I need to create both a ListIndex & a GPTSimpleVectorIndex to achieve this?  (Note this is for a single document for now).\nAny points welcome! I can see I can do all these things but it's not clear what combination is optimal for a workflow where I index (upload) and then query ideally in a sort of summary mode or a Q&A mode.\nLogan M:\nTranslation how you described is not entirely supported. We would almost need a `response_mode=\"accumulate\"` kind of mode to gather the translation of the entire document \n\nFor point 2, there was actually a recent update to more easily support QA and Summarize with a single index, I'll fetch the link..", "start_char_idx": 0, "end_char_idx": 1232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8136e108-6d78-4a22-9f7b-9b05008c4e91": {"__data__": {"id_": "8136e108-6d78-4a22-9f7b-9b05008c4e91", "embedding": null, "metadata": {"date": "2023-04-04T00:25:14.036+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092605765111521310", "node_type": "4", "metadata": {"date": "2023-04-04T00:25:14.036+00:00"}, "hash": "6f4bfb9a4b35da2037fd91a7adcde83d5a837ba89822a7bbb831d94b4202ef20", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46e24a11-b390-41cf-8b07-fedc9736ea0b", "node_type": "1", "metadata": {"date": "2023-04-03T22:49:41.82+00:00"}, "hash": "dfa2fb99a89ef619afeb9ff7d24bdf1dcc8182ecf394caa19d4cb0ed9cca90a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46df8e3d-994f-4ffe-a91b-e6c9d76ab591", "node_type": "1", "metadata": {}, "hash": "9f53371ffa80076f62db80217e5209035ddb620fadb475b1a61645c80e2d7b7b", "class_name": "RelatedNodeInfo"}}, "text": "promptpicasso:\nHi all, newbie here. Trying to git clone git@github.com:jerryjliu/gpt_index.git but getting a Permission Denied (publickey) error. JerryLius git hub is public so not sure what the problem is. Any tips?\nLogan M:\nTry cloning using the https URL  instead", "start_char_idx": 0, "end_char_idx": 266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46df8e3d-994f-4ffe-a91b-e6c9d76ab591": {"__data__": {"id_": "46df8e3d-994f-4ffe-a91b-e6c9d76ab591", "embedding": null, "metadata": {"date": "2023-04-04T00:31:34.149+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092607359420993556", "node_type": "4", "metadata": {"date": "2023-04-04T00:31:34.149+00:00"}, "hash": "0cd1b845feca4a04582e4f7f286ee01b824e2d4e24e2f5a27c8baa8d65404a0a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8136e108-6d78-4a22-9f7b-9b05008c4e91", "node_type": "1", "metadata": {"date": "2023-04-04T00:25:14.036+00:00"}, "hash": "3d85c690adff54f3c5d523df38e76e4f646ad7abf9014d4a108a2be8901a9794", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00d165cd-5f7e-4796-82f9-880495030db9", "node_type": "1", "metadata": {}, "hash": "12e72e4b7ff46c434ff2615108424aa0289469a8bd8d461044c992d20cec820b", "class_name": "RelatedNodeInfo"}}, "text": "promptpicasso:\nworked! Now when I try to do a pip install -e., it gives me: ERROR: file:///Users/<username>e does not appear to be a Python project: neither 'setup.py' nor 'pyproject.toml' found.\nLogan M:\nDid you `cd` into the cloned dir first?", "start_char_idx": 0, "end_char_idx": 244, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00d165cd-5f7e-4796-82f9-880495030db9": {"__data__": {"id_": "00d165cd-5f7e-4796-82f9-880495030db9", "embedding": null, "metadata": {"date": "2023-04-04T06:08:09.619+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092692065361592391", "node_type": "4", "metadata": {"date": "2023-04-04T06:08:09.619+00:00"}, "hash": "633062964813de390a4feb0489779bb6b1ff9f7d3b2b1f502ccaea6ba5926b69", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46df8e3d-994f-4ffe-a91b-e6c9d76ab591", "node_type": "1", "metadata": {"date": "2023-04-04T00:31:34.149+00:00"}, "hash": "820788831d56b393b9612079dd6493f00b3905509ed1c1d6ea9eabc35dbce292", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e16eb40f-9444-48db-8042-470dae7f9072", "node_type": "1", "metadata": {}, "hash": "dbd2caacc7addbbf8242d10ef5cc2d6b1a165c3a1343a199fd0038ef7eb1ed43", "class_name": "RelatedNodeInfo"}}, "text": "leeoxiang:\nIs there any quick way to fix this?\npikachu888:\nHi! Are you using a memory? If it is `ConversationBufferMemory`, try to replace it with windowed memory", "start_char_idx": 0, "end_char_idx": 162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e16eb40f-9444-48db-8042-470dae7f9072": {"__data__": {"id_": "e16eb40f-9444-48db-8042-470dae7f9072", "embedding": null, "metadata": {"date": "2023-04-04T07:26:32.915+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092711792414818354", "node_type": "4", "metadata": {"date": "2023-04-04T07:26:32.915+00:00"}, "hash": "cfb5852b2fcdeff3e760bb2ec4e9c324552b2c8850011a759356bbde68590145", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00d165cd-5f7e-4796-82f9-880495030db9", "node_type": "1", "metadata": {"date": "2023-04-04T06:08:09.619+00:00"}, "hash": "ce38704ed3bfe5f52799f9e89c36ba8d58f99c2efd0bfd74a79cda46bdf7a391", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0742839-4e3a-4531-8fd5-beb0527d9785", "node_type": "1", "metadata": {}, "hash": "a75f80ac59721f787a19976001217849efa44beddd858c2977a50f985f77c959", "class_name": "RelatedNodeInfo"}}, "text": "diridiri:\nHi guys, I already asked the same issue on Github earlier, but I found no luck in there as @kokonutoil did \ud83e\udd72  finally I got here \ud83d\ude42\n\nAfter upgrading llama_index version 0.4.40 -> 0.5.2,\nGPTSimpleVectorIndex errors out with log saying it can't find doc_id when index.update(document) called twice.\n\nhere's my code.\n\n> from llama_index import GPTSimpleVectorIndex, Document\n> \n> index = GPTSimpleVectorIndex([])\n> document = Document(text=\"0\", doc_id=\"example_doc_id\")\n> index.insert(document)\n> document.text = \"1\"\n> index.update(document)\n> document.text = \"2\"\n> index.update(document)\n\nAlso when i call index.refresh([document]) twice, it shows the same error.\n\nand the error response is like below\n\n> File /opt/conda/lib/python3.10/site-packages/llama_index/indices/vector_store/base.py:209, in VectorStoreIndex._delete(self, doc_id, **delete_kwargs)\n>     207 def _delete(self, doc_id: str, **delete_kwargs: Any) -> None:\n>     208     \"\"\"Delete a document.\"\"\"\n> --> 209     self._index_struct.delete(doc_id)\n>     210     self._vector_store.delete(doc_id)\n> \n> File /opt/conda/lib/python3.10/site-packages/llama_index/data_structs/data_structs_v2.py:206, in IndexDict.delete(self, doc_id)\n>     204     raise ValueError(\"doc_id not found in doc_id_dict\")\n>     205 for vector_id in self.doc_id_dict[doc_id]:\n> --> 206     del self.nodes_dict[vector_id]\n> \n> KeyError: 'cd67fc18-7a95-4cdf-ad4a-1f5ef323d0fe' \n\nI think some issues above are quite related to finding doc_ids like I did!\npikachu888:\nHi! Did you migrate your indices?\ndiridiri:\nHello, I've created new index from new document, as code below!\n> index = GPTSimpleVectorIndex([])\n> document = Document(text=\"0\", doc_id=\"example_doc_id\")\n> index.insert(document)\npikachu888:\nI see. I've never used `insert` function to add documents to index, but here is how I usually do it:\n\n```\ndocuments = [Document, Document, Document]\nindex = GPTSimpleVectorIndex.from_documents(documents=documents)\n```\ndiridiri:\nYeap, that's most desirable way to use index, but I need to update or refresh index as I'm maintaining conversation with users. \ud83e\udd72 \nThe program kind of extracts summary obtained from user's input, and save it into index by refreshing or updating..\n\nI found in offical documentation saying \"refresh\" method is designed to save user's token or computation costs by updating only the updated document from index!", "start_char_idx": 0, "end_char_idx": 2382, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0742839-4e3a-4531-8fd5-beb0527d9785": {"__data__": {"id_": "e0742839-4e3a-4531-8fd5-beb0527d9785", "embedding": null, "metadata": {"date": "2023-04-04T09:41:59.939+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092745879624110100", "node_type": "4", "metadata": {"date": "2023-04-04T09:41:59.939+00:00"}, "hash": "7ac8ba091a9bda9e5c0a21b2d16b1899c44cbfa4d9d12a94aed0979c613f1d3c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e16eb40f-9444-48db-8042-470dae7f9072", "node_type": "1", "metadata": {"date": "2023-04-04T07:26:32.915+00:00"}, "hash": "148b5130a25b60786f1f67aa9855226d185d7ebcf9dd2564ee540cd83779beb6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c991259-a165-4907-a976-564114793cd5", "node_type": "1", "metadata": {}, "hash": "8e649eb635c3aecc90e7a058019313cca110fd0d656a02118eca74f42dc696e4", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nI created a function for query (instead of lambda function). How do I see which exact index being used?\n\n```\n        def queryFunc(query: str) -> str:\n            response = index.query(query, similarity_top_k=3)\n            print(response.source_nodes)\n            return response \n\n        tools.append(Tool(\n            name=f\"Vector Index {index_name}\",\n            func=queryFunc,\n            description=f\"use this tool to answer questions solely about {company_name} {document_type}, year {document_year}. Do not use this tool for comparison with other documents/companies/reports.\",\n            return_direct=True\n        ))\n```\npikachu888:\nOk, I found the index using a breakpoint and `summary` attribute says that it is a `UBS` index:\n\nBut in the logs, it says that it is using `Deutsche Bank` index:\n\nwhy is that?", "start_char_idx": 0, "end_char_idx": 836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c991259-a165-4907-a976-564114793cd5": {"__data__": {"id_": "3c991259-a165-4907-a976-564114793cd5", "embedding": null, "metadata": {"date": "2023-04-04T17:24:35.007+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092862292816822372", "node_type": "4", "metadata": {"date": "2023-04-04T17:24:35.007+00:00"}, "hash": "223f5cfd16e5897549556442cdde2561bcdda5d1949ab3217444f940d8ead361", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0742839-4e3a-4531-8fd5-beb0527d9785", "node_type": "1", "metadata": {"date": "2023-04-04T09:41:59.939+00:00"}, "hash": "230f941915945c965e06fe9a9839247c57eb409354f28245ccb0cbaea63fb2d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1960a5c7-c7e8-4907-a4b8-fe7d8172b9d0", "node_type": "1", "metadata": {}, "hash": "d4cef7c90aea56dc8001ec815ca274d46b488b59fdb3ad5cd6b718fef4e302e2", "class_name": "RelatedNodeInfo"}}, "text": "firebelly:\nHad a question about how the index is built and how it's stored. If I have sensitive data in a database, feed it to the index, does that sensitive data get hashed or something in the index? I'm trying to understand how much of a leap you go from sensitive private data -> index -> openai apis\nLogan M:\nThe raw text will be stored in the index. When you call save_to_disk, you can open the saved json to inspect for yourself. \n\nPresumably, you'll want to save that somewhere safe/secure like S3 (there is also a save/load_from_string function too)\nfirebelly:\nwhen making calls to openai api, my last question was, how does it use the index to help with results or tuning, I'm trying to understand if sensitive data is stored in the index, is that references by the api", "start_char_idx": 0, "end_char_idx": 778, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1960a5c7-c7e8-4907-a4b8-fe7d8172b9d0": {"__data__": {"id_": "1960a5c7-c7e8-4907-a4b8-fe7d8172b9d0", "embedding": null, "metadata": {"date": "2023-04-04T19:03:19.082+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092887140188303380", "node_type": "4", "metadata": {"date": "2023-04-04T19:03:19.082+00:00"}, "hash": "ff3c3e9b19feac816340d0345746ceb77d1d95c2bc0b37f5e521b1bf141dec4c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c991259-a165-4907-a976-564114793cd5", "node_type": "1", "metadata": {"date": "2023-04-04T17:24:35.007+00:00"}, "hash": "ade92fb798781da48846ccb5ee36dc845dbc92c8ec870cdb310223b9dd548e34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20067f87-cd3b-4ef4-b343-3ce33993b48c", "node_type": "1", "metadata": {}, "hash": "dbae1cd5fe4ca49ff95c949a06a895b82aa0abe26700912d1fc7aff209a81584", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\nHello, I seem to have encountered a error regarding the base GPT Index class. I am generating custom nodes through a for loop. As you can see I am including the doc_id for each node and have checked that all are filled.  Yet, I get this error: **ValueError: Reference doc id is None.** It refers me to this file /site-packages/llama_index/indices/base.py and highlight the following line: \n\nif index_struct is None:\n...\n--> 108                 **raise ValueError(\"Reference doc id is None.\")**\n    109             result_tups.append(\n    110                 NodeEmbeddingResult(id, id_to_node_map[id], embed, doc_id=doc_id)\n\n**Code**\nnodes = []\n#transcript_array refers to an array of phrases that Whisper outputs.\nfor index,phrase in enumerate(transcript_array):\n    #current obj index\n    node = Node(text=phrase['content'] + \" \" + str(phrase['start']), doc_id=index)\n    if index > 0 and index < len(transcript_array) - 1:\n        node.relationships[DocumentRelationship.PREVIOUS] = index - 1\n        node.relationships[DocumentRelationship.NEXT] = index + 1\n    elif index == 0:\n        node.relationships[DocumentRelationship.NEXT] = index + 1\n    elif index == len(transcript_array) - 1:\n        node.relationships[DocumentRelationship.PREVIOUS] = index - 1\n    nodes.append(node)\nindex = GPTSimpleVectorIndex(nodes)\n\n**Could it be from my custom nodes? I have attached a txt file of how they look like when i  print(nodes)\nI am following the tutorial from here so some help would be really appreciated**.https://gpt-index.readthedocs.io/en/latest/guides/primer/usage_pattern.html\nLogan M:\n@jerryjliu98 is this a bug? It seems to follow the docs exactly \ud83e\udd14\nBioHacker:\n@jerryjliu98 To make this even weireder i no longer get the error if I try ListIndex(nodes). But then when I query it is unable to find the correct node completely. \nIt is impossible to determine the exact subject of this document with only the given context information and prior knowledge.\nResponse.source_nodes is attached.", "start_char_idx": 0, "end_char_idx": 2010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20067f87-cd3b-4ef4-b343-3ce33993b48c": {"__data__": {"id_": "20067f87-cd3b-4ef4-b343-3ce33993b48c", "embedding": null, "metadata": {"date": "2023-04-04T23:36:55.113+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092955994012790896", "node_type": "4", "metadata": {"date": "2023-04-04T23:36:55.113+00:00"}, "hash": "0f867390f5ca98a2569af8b502fb72bbec37fa8176013763a9f25c5ed23892d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1960a5c7-c7e8-4907-a4b8-fe7d8172b9d0", "node_type": "1", "metadata": {"date": "2023-04-04T19:03:19.082+00:00"}, "hash": "b392365127eba9b66ed1913bbd9164767a891b8631b6db088045383f38e2bf0d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a459fc69-1ea7-4645-b83f-7ce3a2ccf585", "node_type": "1", "metadata": {}, "hash": "953b762b06ffb1123d40c7a3e17c6011fd8b6ee148ce8813dddf4723f07d236a", "class_name": "RelatedNodeInfo"}}, "text": "noequal:\nAfter the new version update, it is not possible to build qdrant without initializing nodes because an error will occur when deleting nodes: 'doc_id not found in doc_id_dict'. Why do we need to do this? If my index is very large, I don't want it to occupy my memory.\nLogan M:\nDelete has a bug I think \ud83d\udc1b @jerryjliu98 this is one on my list as well", "start_char_idx": 0, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a459fc69-1ea7-4645-b83f-7ce3a2ccf585": {"__data__": {"id_": "a459fc69-1ea7-4645-b83f-7ce3a2ccf585", "embedding": null, "metadata": {"date": "2023-04-05T00:06:47.507+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1092963511858122783", "node_type": "4", "metadata": {"date": "2023-04-05T00:06:47.507+00:00"}, "hash": "80ced0cfd73a87bf411c1358d36ad7ae4e1d55d3245f76c9e930c05f8e8c34f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20067f87-cd3b-4ef4-b343-3ce33993b48c", "node_type": "1", "metadata": {"date": "2023-04-04T23:36:55.113+00:00"}, "hash": "1c0969d8ac91ee0b9c635f5d279dccf9486bd9707bc8da94b28a950ba0bd8b25", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1837c80f-4b71-497a-b062-ee1a8c08753c", "node_type": "1", "metadata": {}, "hash": "d7eb79a57c0122701b6ea9689b7068bbcf69261ebe8a23fa0bb6999b23b2dea7", "class_name": "RelatedNodeInfo"}}, "text": "noequal:\ni think it is a bug\nLogan M:\nNot a bug. The refine template instructs the model to re-use its previous answer (which is in the prompt) If the new context is not useful. \nhttps://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/default_prompts.py#L90\n\nThis process isn't perfect (custom LLMs and sometimes chatgpt struggle with this process), definitely open to a PR that could improve it \ud83d\udcaa\nnoequal:\nthe refine template not update in the  iteration, i debuged it,so i think refine template not re use  previous answer", "start_char_idx": 0, "end_char_idx": 537, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1837c80f-4b71-497a-b062-ee1a8c08753c": {"__data__": {"id_": "1837c80f-4b71-497a-b062-ee1a8c08753c", "embedding": null, "metadata": {"date": "2023-04-05T11:50:19.921+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093140563555008574", "node_type": "4", "metadata": {"date": "2023-04-05T11:50:19.921+00:00"}, "hash": "7ecbdf764a9ad875c13fa91a054cf0b6aaeb415fad8c7a19465db20c650757e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a459fc69-1ea7-4645-b83f-7ce3a2ccf585", "node_type": "1", "metadata": {"date": "2023-04-05T00:06:47.507+00:00"}, "hash": "d03ac32c4018e38d8ad07d79df0c3dcb3506f007286687598e2dfe2411c55551", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86e9c8a4-4f15-4179-b22d-25fc419316e4", "node_type": "1", "metadata": {}, "hash": "626a9f5b97292498089d8b166fa3b56e0081a3a2ad893e2244f8e90425c4d623", "class_name": "RelatedNodeInfo"}}, "text": "febbug:\nHello there, I'm trying to store index in chromadb using the openai embedding function (image1). Then I'd like to load the index using the ChromaReader, but don't know how to pass the openai embedding to it and thing that is the reason for dimensionality error (image2). Would appreciate any hint in the right direction. Thank you very much.\nfebbug:\nWell, maybe I should back off a bit. My goal is to save on embeddings tokens by storing the index to chromadb. Once stored, I only spend tokens on query embedding and then response synthesis in the LLM. Is this a correct assumption?\nLogan M:\nCorrect!", "start_char_idx": 0, "end_char_idx": 608, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86e9c8a4-4f15-4179-b22d-25fc419316e4": {"__data__": {"id_": "86e9c8a4-4f15-4179-b22d-25fc419316e4", "embedding": null, "metadata": {"date": "2023-04-05T12:18:13.403+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093147582647251055", "node_type": "4", "metadata": {"date": "2023-04-05T12:18:13.403+00:00"}, "hash": "cb5314087f223e07152720598b0fc71f3d8991ab234514dd1900369146c1b877", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1837c80f-4b71-497a-b062-ee1a8c08753c", "node_type": "1", "metadata": {"date": "2023-04-05T11:50:19.921+00:00"}, "hash": "54fc5cb8560bfddf0ff107ef4093f68c8ac894a028f182afeb5dc14e7f0fa3a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f9ec443c-86e6-444e-bb5d-c9cbf685ad1c", "node_type": "1", "metadata": {}, "hash": "0d73a62981f233b7eb0350b4908f5ade18a8d78437f6d6f1e65076eb2e98d746", "class_name": "RelatedNodeInfo"}}, "text": "nenners:\nHey I cannot seem to find the documentation for the llama-index LLMPredictor as it says the page does not exist(https://gpt-index.readthedocs.io/en/latest/reference/llm_predictor.html), where can i find it?\nheihei:\nseems being moved here  https://gpt-index.readthedocs.io/en/latest/reference/service_context/llm_predictor.html", "start_char_idx": 0, "end_char_idx": 335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9ec443c-86e6-444e-bb5d-c9cbf685ad1c": {"__data__": {"id_": "f9ec443c-86e6-444e-bb5d-c9cbf685ad1c", "embedding": null, "metadata": {"date": "2023-04-05T16:07:04.425+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093205174727757844", "node_type": "4", "metadata": {"date": "2023-04-05T16:07:04.425+00:00"}, "hash": "871edd571627f92153116f2ac05a49967a71dd4796d96306a93dd4b2511572d5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86e9c8a4-4f15-4179-b22d-25fc419316e4", "node_type": "1", "metadata": {"date": "2023-04-05T12:18:13.403+00:00"}, "hash": "6c1ba140c5d1c56ba13757155b4a246fd92282089b31ed0e7a20c4b090f29152", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2337e002-17b2-4b9a-8ad3-6c53e0ff1c5f", "node_type": "1", "metadata": {}, "hash": "ac4d5ea8957cb0d4f9e71098d00453294710b2fddf8ac04a430930e13acd8d76", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHi! Could you please review llamaindex documentation and make it more conceptual/user friendly? Take a look at Langchain's new (relatively) conceptual documentation:\n\nhttps://docs.langchain.com/docs/\n\nIt became super clear what is what and when to use which. I always struggle to find stuff on llamaindex documentation and don't know where to search what I want. The search bar is near to useless too.\n\n\nFor example, take a look at this:\n\nhttps://gpt-index.readthedocs.io/en/latest/reference/prompts.html#:~:text=prompts.prompts.-,SimpleInputPrompt,-(template%3A\n\nWhen do I need to use it? What is the purpose of this prompt? \n\n`Simple Input Prompt` ---> not helpful at all.\nLogan M:\n.... I like the search bar \ud83d\ude05 just have to ignore the reference pages tbh, at least in my experience \n\nI agree. I was actaully just thinking about this, I think showing a deeper tree on the sidebar would be a good starting point. A lot of helpful pages are hidden unless you click on the parent in the menu \ud83e\udee0", "start_char_idx": 0, "end_char_idx": 1003, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2337e002-17b2-4b9a-8ad3-6c53e0ff1c5f": {"__data__": {"id_": "2337e002-17b2-4b9a-8ad3-6c53e0ff1c5f", "embedding": null, "metadata": {"date": "2023-04-05T16:19:23.163+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093208273219506176", "node_type": "4", "metadata": {"date": "2023-04-05T16:19:23.163+00:00"}, "hash": "39144832288bc83306eccb71536671449765b53a3efa902497edda164ab291a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9ec443c-86e6-444e-bb5d-c9cbf685ad1c", "node_type": "1", "metadata": {"date": "2023-04-05T16:07:04.425+00:00"}, "hash": "2bdeb127bfd4f05be36afc2e7c8f57f430d14f23ac258cff5187ebb790c2cab8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "211dbb7f-5adf-47ed-bd3d-f64b7667f3fc", "node_type": "1", "metadata": {}, "hash": "87594d41362751e9295a32c2a41eb4ef30af7a9a50dfa21de1fba7e427872091", "class_name": "RelatedNodeInfo"}}, "text": "ajndkr:\n@jerryjliu98 hi! it's been a few weeks since I actively built an application with llama-index and I already see some massive changes. I'm trying to understand the difference between default GPTSimpleVectorIndex and GPTSimpleVectorIndex with multi-step query combiner.\najndkr:\nthe docs haven't been super informative for me unfortunately.\nLogan M:\nThe example notebooks might be more helpful. Here's one for using the multi-step query https://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/SimpleIndexDemo-multistep.ipynb\n\n(I'm also working on getting the notebooks embedded into the docs, so that they are more searchable! Github's search is not good haha)\najndkr:\nyes! i found the notebook but previously, GPTSimpleVectorIndex used to have a QA template which has now moved to GPTSimpleVectorIndex with multi-step query combiner... so i'm curious about the motivation behind this \ud83d\ude05", "start_char_idx": 0, "end_char_idx": 910, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "211dbb7f-5adf-47ed-bd3d-f64b7667f3fc": {"__data__": {"id_": "211dbb7f-5adf-47ed-bd3d-f64b7667f3fc", "embedding": null, "metadata": {"date": "2023-04-05T19:54:04.01+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093262299407597648", "node_type": "4", "metadata": {"date": "2023-04-05T19:54:04.01+00:00"}, "hash": "06a8345f0b7234f07529a494136b6f9918e4d9b90df3cff83169872289ac5b4b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2337e002-17b2-4b9a-8ad3-6c53e0ff1c5f", "node_type": "1", "metadata": {"date": "2023-04-05T16:19:23.163+00:00"}, "hash": "86df7b603fb80e655a0999d3b7f36eda9413f30d6aee0fa927130d1e9235ba59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d385a8be-e56b-4cb5-855d-378db20307e9", "node_type": "1", "metadata": {}, "hash": "f72bd2c177c3eb6183264891a2030ba53d35a955bcfc7ca5e2908ca7dd16f809", "class_name": "RelatedNodeInfo"}}, "text": "Vitao:\nHey guys, I have 2 questions, is there any way to limit the responses in the context of the generated prompt? For example, my documents talk about American football, but when I do the .query and ask what is the capital of japan he answers me tokyo, more \"absurd\" questions like who is the president of albania he answers me with a standard answer of \" there is no information about\".\n\nllm: openai davinci-003\n\n1 - Is it possible to further close the answers based on the context of the prompt? (for him not to answer about the capital of japan)\n\n2 - Is it possible to change this default answer? (there is no information about)\nLogan M:\nI think both of those can be solved by customizing the text_qa_template and refine_template. Just provide some more specific instructions.\n\nI actually just added this to the FAQ at the bottom (I've been pasting this answer a lot lately haha)\n\nhttps://docs.google.com/document/d/1bLP7301n4w9_GsukIYvEhZXVAvOMWnrxMy089TYisXU/edit?usp=sharing\nVitao:\nit worked fine, thank you", "start_char_idx": 0, "end_char_idx": 1016, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d385a8be-e56b-4cb5-855d-378db20307e9": {"__data__": {"id_": "d385a8be-e56b-4cb5-855d-378db20307e9", "embedding": null, "metadata": {"date": "2023-04-05T23:50:03.911+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093321690337005578", "node_type": "4", "metadata": {"date": "2023-04-05T23:50:03.911+00:00"}, "hash": "b920c7923d98e18301a5163e7ebbd1904298106c07e2408a91593eaaf08ec481", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "211dbb7f-5adf-47ed-bd3d-f64b7667f3fc", "node_type": "1", "metadata": {"date": "2023-04-05T19:54:04.01+00:00"}, "hash": "32b6e3402a2d468a4538ffe24977c7d544e942318f6b666c80fad8303ea584f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "22908098-1c14-4f6a-9f8c-fdca6e7e3bb4", "node_type": "1", "metadata": {}, "hash": "28801cdc78f71c1f962ef7048394f3179ee990226c64cacedca274f28ce14bd8", "class_name": "RelatedNodeInfo"}}, "text": "Hammad:\nFor this example https://github.com/jerryjliu/llama_index/blob/main/examples/data_connectors/QdrantDemo.ipynb if I use `prefer_grpc` it returns error even though as vanilla qdrant return documents, i am able to get documents but if i use same with `QdrantReader` i get error\n```\nfrom llama_index import GPTQdrantIndex, SimpleDirectoryReader\nfrom llama_index.readers.qdrant import QdrantReader\n\nreader = QdrantReader(\n    host=HOST, \n    prefer_grpc=True,\n    api_key=QDRANT_API_KEY,\n)\n\n# same vector embedding as used to fetch documents\nvector = question_response.embeddings[0]\ndocuments = reader.load_data(collection_name=\"pubmed_qa\", query_vector=vector, limit=5)\n```\nHammad:\n@Logan M is it because float conversion?\nLogan M:\nFrom the error, it seems like the data pulled from the vector store is missing some expected fields \ud83e\udd14  I don't really have enough experience with this to explain why though lol", "start_char_idx": 0, "end_char_idx": 912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "22908098-1c14-4f6a-9f8c-fdca6e7e3bb4": {"__data__": {"id_": "22908098-1c14-4f6a-9f8c-fdca6e7e3bb4", "embedding": null, "metadata": {"date": "2023-04-06T01:20:53.305+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093344546752036905", "node_type": "4", "metadata": {"date": "2023-04-06T01:20:53.305+00:00"}, "hash": "97ecf636ff0f7c93eee7bbfcba54361d728a91e2c066d1d659ba6ef36ea5852d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d385a8be-e56b-4cb5-855d-378db20307e9", "node_type": "1", "metadata": {"date": "2023-04-05T23:50:03.911+00:00"}, "hash": "ec4b3dbdd1fbb198319c45cad9528d552821509c4028530021bec0c0a36076be", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee3745a0-a93c-400c-9c25-e494f82f5563", "node_type": "1", "metadata": {}, "hash": "53ffdc22773ccc7b9287dfeeb2534f5bb84ad34434408133153fed0da952ca7a", "class_name": "RelatedNodeInfo"}}, "text": "heihei:\n@jerryjliu98 hi, jerry. I saw the feature on new Sentence Text splitter. it will be called automatically during the opration of creating new index? an other question is: if it can split words in languages not using white space between words, like Chinese? I am using 0.4.32 mainly, and I saw error message about over length term (longer than max_chunk_limit), so I have to process document by a chinese word splitter before creating index, thus I think the build-in splitter not fits languages without white space...\nBioHacker:\nThis issue is explored in this github PR\nhttps://github.com/jerryjliu/llama_index/issues/1031\njerryjliu98:\nsorry haven't had the chance to take a look at this super deeply yet - know a few of you have run into this. will take a look soon", "start_char_idx": 0, "end_char_idx": 773, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee3745a0-a93c-400c-9c25-e494f82f5563": {"__data__": {"id_": "ee3745a0-a93c-400c-9c25-e494f82f5563", "embedding": null, "metadata": {"date": "2023-04-06T09:12:49.795+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093463314719322194", "node_type": "4", "metadata": {"date": "2023-04-06T09:12:49.795+00:00"}, "hash": "910fe459d94fa81bdce24e413f9a260cb5c516c36c5c742e3e639ea8fd317477", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "22908098-1c14-4f6a-9f8c-fdca6e7e3bb4", "node_type": "1", "metadata": {"date": "2023-04-06T01:20:53.305+00:00"}, "hash": "6e208d9d0f64a7bb78f392827ed6e68e9290eacb0d27e5bc50df649dbb645e35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "367caa42-696a-4d28-8f6a-bd487491d6d7", "node_type": "1", "metadata": {}, "hash": "a772c6a978f66caea9f4fb5e2b46f71f80a130f0091ec9f7a1beb242bf41259c", "class_name": "RelatedNodeInfo"}}, "text": "Rahmon:\nhow to handle large data when using  `GPTSimpleVectorIndex`\n```# define LLM\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"text-davinci-003\"))\n\n# define prompt helper\n# set maximum input size\nmax_input_size = 500\n# set number of output tokens\nnum_output = 256\n# set maximum chunk overlap\nmax_chunk_overlap = 3\nprompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\n\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)```\nI used the code above  to specify the max_tokens but still gives me error :\n\n**This model's maximum context length is 4097 tokens, however you requested 4172 tokens**\nany idea?\nRahmon:\nI found the solution, if anyone interested:\nonly add this\n```chunk_size_limit = 1024\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper,chunk_size_limit=chunk_size_limit)\n```\nand this reduced the total size of the response \ud83d\ude09", "start_char_idx": 0, "end_char_idx": 985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "367caa42-696a-4d28-8f6a-bd487491d6d7": {"__data__": {"id_": "367caa42-696a-4d28-8f6a-bd487491d6d7", "embedding": null, "metadata": {"date": "2023-04-06T11:45:50.384+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093501820900483214", "node_type": "4", "metadata": {"date": "2023-04-06T11:45:50.384+00:00"}, "hash": "28e4f1bca3372343ac00c9f740fb9980a1c51f2264618ffea4111a00eb212a58", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee3745a0-a93c-400c-9c25-e494f82f5563", "node_type": "1", "metadata": {"date": "2023-04-06T09:12:49.795+00:00"}, "hash": "ac732df9638daa74101a5c412654d7db721995b2d27b69d85ef0980a802a87df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d850c8b3-045b-43ad-a7c8-2c75fc26c12d", "node_type": "1", "metadata": {}, "hash": "d1382e109201d6f64c9e39c5bd2739945014140da69fb6aa0e4aace2b3e562f5", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHow to create an agent that:\n\n1. Responds only in Russian\n2. Can respond to greeting queries in Russian\n3. Knows only about data in my Vector Index\n\n\nTrying many approaches, it either:\n\n1. Do not respond in Russian\n2. Answers general questions (e.g. who is Bill Gates. Even though there is no info about him in my index)\n3. Cannot respond to basic greetings\nheihei:\n- Defining Prompts (https://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_prompts.html)   will solve 1. and 3. the default prompt is already satisfied 3. in fact.   2. need you put greeting queries in Russian in your doc.\npikachu888:\nThanks, but how to add it into the agent? I\u2019m not using a query function\nheihei:\nsorry, I don't know how to use vector index without query... \ud83d\ude33", "start_char_idx": 0, "end_char_idx": 772, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d850c8b3-045b-43ad-a7c8-2c75fc26c12d": {"__data__": {"id_": "d850c8b3-045b-43ad-a7c8-2c75fc26c12d", "embedding": null, "metadata": {"date": "2023-04-06T15:31:27.07+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093558597876723753", "node_type": "4", "metadata": {"date": "2023-04-06T15:31:27.07+00:00"}, "hash": "bb70b899b7bc5a794bafa735db00511222aa0524e975bf45114ba814a1a1b0c8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "367caa42-696a-4d28-8f6a-bd487491d6d7", "node_type": "1", "metadata": {"date": "2023-04-06T11:45:50.384+00:00"}, "hash": "30f741653913ac449a1f5c63b7c625ffcd8daae50e8c5984b135b89d6fc03446", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0c1171d-38d1-43c9-86bd-5b483e34656b", "node_type": "1", "metadata": {}, "hash": "832c82999d80800c4e4890a39689de35d887f21b1a83d24f073e419d7d5c46f9", "class_name": "RelatedNodeInfo"}}, "text": "decentralizer:\nI have a simple vector index of discord conversations. The raw conversations look like the following;\n\n`[02/01/2023 12:14 AM] User1#8267 Message content\n\n[02/01/2023 12:16 AM] User2.eth#6021 Message content`\n\n\nWhen I create a simple vector index and ask something like 'summarize this week's conversations', it summarizes the messages from 2022. I tried putting today's date in the prompt and in QA_PROMPT. Did a lot of prompt engineering but still couldn't find a solution. It sometimes gives me summaries of recent messages but at the end of the response, there is still some reference to very old messages. \n\nI tried using older engines like davinci - which gives better results. I also tried gpt 3 and 4. Any suggestions?\nLogan M:\nYou could create dedicated indexes for common time ranges, and then use each index as a tool in langchain, with each tool having an appropriate description?\ndecentralizer:\nHmm this would work but we are exporting multiple channels within a server. it might be a little tricky to create seperate indices as the time range of the conversations can be over 2 years in some cases. It's so sad that GPT is not really good with dates", "start_char_idx": 0, "end_char_idx": 1177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0c1171d-38d1-43c9-86bd-5b483e34656b": {"__data__": {"id_": "b0c1171d-38d1-43c9-86bd-5b483e34656b", "embedding": null, "metadata": {"date": "2023-04-06T16:21:20.725+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093571154175869028", "node_type": "4", "metadata": {"date": "2023-04-06T16:21:20.725+00:00"}, "hash": "9bc264cdaa8d5efd260666ba682d5258629a966bf0cc6f1bc999a05cb054c028", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d850c8b3-045b-43ad-a7c8-2c75fc26c12d", "node_type": "1", "metadata": {"date": "2023-04-06T15:31:27.07+00:00"}, "hash": "cbd4f8c2a4033d80119c963a38a48cde16d76bbec418c79d31c4f79016969b84", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f38d7bdc-ee85-4b15-b4a7-9e36c307386f", "node_type": "1", "metadata": {}, "hash": "4aeda9baa45a3069025f5d966e78e93c12d65c34736d7dfa629826a5ebe2e485", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHow to force an agent to stop execution If:\n\n\u201cShould I need to use a Tool: No\u201d\n\n\nand ideally tell it to use only the information in the tools and nothing else (hallucinations issue)?\npikachu888:\nSo for example in my docs:\n\n\nUniversity X is located in London.\n\n\n\u2014user: where the X uni located?\n\n\n\u2014 agent:\n\ndo I need to use tool: No\naction: search for X on the Internet (I don\u2019t want this)", "start_char_idx": 0, "end_char_idx": 399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f38d7bdc-ee85-4b15-b4a7-9e36c307386f": {"__data__": {"id_": "f38d7bdc-ee85-4b15-b4a7-9e36c307386f", "embedding": null, "metadata": {"date": "2023-04-06T20:02:30.027+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093626809662320691", "node_type": "4", "metadata": {"date": "2023-04-06T20:02:30.027+00:00"}, "hash": "7ce25f7e36de63ddce2c524c8f8305482287d43791bd5bc15ef7888dca3ffb24", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0c1171d-38d1-43c9-86bd-5b483e34656b", "node_type": "1", "metadata": {"date": "2023-04-06T16:21:20.725+00:00"}, "hash": "09e17221868a6c24831f23ec3d13d78793863d40e38c37d154cd79df8b714742", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3fc24bbd-b4d3-4967-a5ba-fc6860e56a81", "node_type": "1", "metadata": {}, "hash": "b47ff4d29ae21f0584b171072874340ffade41dd778f306315fc3731d2b6df0d", "class_name": "RelatedNodeInfo"}}, "text": "conic:\n```\nI have a corpora of 1000 fake resumes\nand I ask it to list all python devs and it gives me a single name\nnot sure what approach exists to overcomming that. \n```\nIs there an indexing scheme I can use to better solve this problem?\nLogan M:\nThis would require checking every resume wouldn't it? That sounds like a usecase for the list index with response_mode=\"tree_summarize\"\nconic:\nIt would but, perhaps I'm misunderstanding. I guess an embedding wouldn't capture details like name, or specific skills would it? I thought.. that the way it worked was all documents are embedded and that's stored somehwere, and the embedding retreival was part of the document selection.\nLogan M:\nCorrect. But with a vector index you also have to set how many documents to retrieve right? \n\nThat example is less of a QA task and more of a summarization task.\n\nyou could try a vector index with something like `index.query(..., similarity_top_k=1000, response_mode=\"tree_summarize\")`\n\nThere was also recently a new pre-made graph index that can do both qa and summarization tasks a little easier. With that you could query \"summarize a list of all python developers\"\n\nSee this tweet thread for some more info and a link to a notebook https://twitter.com/jerryjliu0/status/1642553651259650049?cxt=HHwWgsDRvfv1wsstAAAA\nconic:\nThat looks immensely useful. Thanks!\nLogan M:\nDefinitely follow jerry and/or llama index on Twitter, they are always showing off wild new features \ud83d\ude05", "start_char_idx": 0, "end_char_idx": 1464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3fc24bbd-b4d3-4967-a5ba-fc6860e56a81": {"__data__": {"id_": "3fc24bbd-b4d3-4967-a5ba-fc6860e56a81", "embedding": null, "metadata": {"date": "2023-04-06T20:03:26.923+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093627048301436969", "node_type": "4", "metadata": {"date": "2023-04-06T20:03:26.923+00:00"}, "hash": "94318965314cc8806497810950e864fe838036658e651f9d6fd56afb6119037e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f38d7bdc-ee85-4b15-b4a7-9e36c307386f", "node_type": "1", "metadata": {"date": "2023-04-06T20:02:30.027+00:00"}, "hash": "3af048d3a1bea60f615d54c8c53166142c36abab4a9ac377c75a5ac3696e7f38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ddc2d406-1a6b-43e5-ac56-cf193b391468", "node_type": "1", "metadata": {}, "hash": "cf2b1c3ca438368b40ddf4ae6ce702a1879b10c9f6f7eff79ab182e4706d9eff", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nKeyword index will probably work well?\nconic:\nI'll look into that.  \"List all people with Python experience that have worked with geospatial tools\"", "start_char_idx": 0, "end_char_idx": 164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddc2d406-1a6b-43e5-ac56-cf193b391468": {"__data__": {"id_": "ddc2d406-1a6b-43e5-ac56-cf193b391468", "embedding": null, "metadata": {"date": "2023-04-06T20:03:49.63+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093627143541506078", "node_type": "4", "metadata": {"date": "2023-04-06T20:03:49.63+00:00"}, "hash": "715bae5508eda1c620892359e23c5ef4c18618e4906c6de814dab41499498dfa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3fc24bbd-b4d3-4967-a5ba-fc6860e56a81", "node_type": "1", "metadata": {"date": "2023-04-06T20:03:26.923+00:00"}, "hash": "edd4382329c30461e7a8a3d72e361bcd4419821fdefb2f85c155c10efc9cc818", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fbfe3953-7f78-4404-bc19-159f5221b507", "node_type": "1", "metadata": {}, "hash": "1e1cb5a3d0652e4c8344e5cc878d1c5d152059dea817484fc46d7a6f5a65f4c1", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nYou probably want to use one of the intermediate queries to just get the list of nodes with a keyword \"Python\"\nconic:\nIs there a list of these?\nBioHacker:\n@Logan M I agree. I find twitter explanations more than the docs itself haha.  I am going to try this thanks @Logan M . The problem I've found is that once it gets a few of the right embeddings it gives up and just outputs that. Instead of checking to see if there is any more embedding about the query. Manually choosing similarity_top_k has not really improved the outcome as this number would change based on the query.\nLogan M:\nIf your data is sequential, you might also find this thread useful https://twitter.com/jerryjliu0/status/1642908812771471360?cxt=HHwWgMDR-Yq35MwtAAAA\nconic:\nwoah, that is cool", "start_char_idx": 0, "end_char_idx": 779, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fbfe3953-7f78-4404-bc19-159f5221b507": {"__data__": {"id_": "fbfe3953-7f78-4404-bc19-159f5221b507", "embedding": null, "metadata": {"date": "2023-04-06T20:04:16.53+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093627256368275466", "node_type": "4", "metadata": {"date": "2023-04-06T20:04:16.53+00:00"}, "hash": "898a4c2424e8a0dfb9e7f716371237aeace9729444d4447f51226fd5b32ef427", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ddc2d406-1a6b-43e5-ac56-cf193b391468", "node_type": "1", "metadata": {"date": "2023-04-06T20:03:49.63+00:00"}, "hash": "95e7d48596a0bc1fde4f6364d401c46549d53ccc0e51524e5bdb47ed8035d11e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5e47e59c-108c-4716-98bc-23068fb6b3b9", "node_type": "1", "metadata": {}, "hash": "c850a3327541d4c5bf6212d74c5d165c4f6aa49283efea0eac811b3282b84f20", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\n(and not actually query with an LLM)\nconic:\noh", "start_char_idx": 0, "end_char_idx": 63, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5e47e59c-108c-4716-98bc-23068fb6b3b9": {"__data__": {"id_": "5e47e59c-108c-4716-98bc-23068fb6b3b9", "embedding": null, "metadata": {"date": "2023-04-06T20:38:59.529+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093635993099313162", "node_type": "4", "metadata": {"date": "2023-04-06T20:38:59.529+00:00"}, "hash": "6cf9e749e52b49989bbe19230cd9b03feb42343512aa908598db4330b842d98f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fbfe3953-7f78-4404-bc19-159f5221b507", "node_type": "1", "metadata": {"date": "2023-04-06T20:04:16.53+00:00"}, "hash": "265475b38c3c9588f5b96e2249df1fd22d3e603d42de1d8c987ae0af73600125", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db2dcf89-91b0-495a-b261-af329051e4ff", "node_type": "1", "metadata": {}, "hash": "46e7642824b0fd5c4c96a098fb70c06554bed5fb26537a348cafe4f373f8acc6", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\nI thought this would solve all of my problems but it actually does not. It can indeed tell the sequence. But as I said after it finds the right first right set of nodes it gives up the search.\nLogan M:\nHeh, I saw that \ud83e\udd72  but, small steps in the right direction I think", "start_char_idx": 0, "end_char_idx": 279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db2dcf89-91b0-495a-b261-af329051e4ff": {"__data__": {"id_": "db2dcf89-91b0-495a-b261-af329051e4ff", "embedding": null, "metadata": {"date": "2023-04-06T20:48:45.267+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093638449862553642", "node_type": "4", "metadata": {"date": "2023-04-06T20:48:45.267+00:00"}, "hash": "53827e000e23e5d22d02a51cef76275a8b3593b9bc895262fd75238161a97d12", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5e47e59c-108c-4716-98bc-23068fb6b3b9", "node_type": "1", "metadata": {"date": "2023-04-06T20:38:59.529+00:00"}, "hash": "76c2b8c531ca1d8a2e4a18a4e8f6261929a151b443c39927aa9c4a2de5f50f33", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45ab52f3-f98b-4ad2-9b0f-c9e29ebf6149", "node_type": "1", "metadata": {}, "hash": "1f5a71cf863d70d9ef3edbde9e24967b164a93b833436aa0005a11d8882249c4", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHi! I'm abit confused about usage of qdrant vector store in this notebook:\n\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/QdrantIndexDemo.ipynb\n\nI don't need to save my indices on disk. How can I access my index without saving it in json format .e.g:\n\n```python\nclient = QdrantClient(...)\n\nindex = GPTQdrantIndex.load_from_cloud(client)\n\nindex.query(query)\n```\n\n\ud83d\ude42\npikachu888:\nHere we go! Thanks @kapa.ai \n\n```python\nimport qdrant_client\nfrom gpt_index import GPTQdrantIndex\n\n# Creating a Qdrant vector store\nclient = qdrant_client.QdrantClient(\n    host=\"<qdrant-host>\",\n    api_key=\"<qdrant-api-key>\",\n    https=True\n)\ncollection_name = \"paul_graham\"\n\n# Initialize the GPTQdrantIndex with the existing Qdrant vector store\nindex = GPTQdrantIndex(client=client, collection_name=collection_name)\n\n# Query index\nresponse = index.query(\"What did the author do growing up?\")\n```", "start_char_idx": 0, "end_char_idx": 914, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45ab52f3-f98b-4ad2-9b0f-c9e29ebf6149": {"__data__": {"id_": "45ab52f3-f98b-4ad2-9b0f-c9e29ebf6149", "embedding": null, "metadata": {"date": "2023-04-06T21:03:58.467+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093642280100962324", "node_type": "4", "metadata": {"date": "2023-04-06T21:03:58.467+00:00"}, "hash": "25d20567e3b425c5fc48b3234c85a01f1f00eb45cd0ab1131b7463287d97f240", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db2dcf89-91b0-495a-b261-af329051e4ff", "node_type": "1", "metadata": {"date": "2023-04-06T20:48:45.267+00:00"}, "hash": "5f73bd486c9f998199764c1a72aca8105a5d5c219728c02b31ae9d91c786f143", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "310677ff-91ea-43b9-8c52-5144ba713aa2", "node_type": "1", "metadata": {}, "hash": "2fedec0fb3dae41b247f5f575ada0ebf57f3be7d31bf15c1f691ca5e292a21fa", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nI think the new 0.5.9 update broke loading simple vector indices from disk (if the index was created in 0.5.8)\n```\nWARNING:llama_index.llm_predictor.base:Unknown max input size for gpt-3.5-turbo, using defaults.\nTraceback (most recent call last):\n  File \"/Users/{ME}/repos/project/app.py\", line 72, in <module>\n    chat = Chat()\n  File \"/Users/{ME}/repos/project/chat.py\", line 120, in __init__\n    self.index = self.load_index(graph)\n  File \"/Users/{ME}/repos/project/chat.py\", line 141, in load_index\n    return GPTSimpleVectorIndex.load_from_disk(self.index_store,\n  File \"/Users/{ME}/repos/project/venv/lib/python3.9/site-packages/llama_index/indices/base.py\", line 364, in load_from_disk\n    return cls.load_from_string(file_contents, **kwargs)\n  File \"/Users/{ME}/repos/project/venv/lib/python3.9/site-packages/llama_index/indices/base.py\", line 340, in load_from_string\n    return cls.load_from_dict(result_dict, **kwargs)\n  File \"/Users/{ME}/repos/project/venv/lib/python3.9/site-packages/llama_index/indices/vector_store/base.py\", line 260, in load_from_dict\n    vector_store = load_vector_store_from_dict(\n  File \"/Users/{ME}/repos/project/venv/lib/python3.9/site-packages/llama_index/vector_stores/registry.py\", line 49, in load_vector_store_from_dict\n    type = vector_store_dict[TYPE_KEY]\nKeyError: '__type__'\n```\nTesterMan:\nI just upgraded to 0.5.12 and the same problem popped up, is the best solution still downgrade to 0.5.8 or create a new index?", "start_char_idx": 0, "end_char_idx": 1481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "310677ff-91ea-43b9-8c52-5144ba713aa2": {"__data__": {"id_": "310677ff-91ea-43b9-8c52-5144ba713aa2", "embedding": null, "metadata": {"date": "2023-04-06T23:26:33.09+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093678160790425610", "node_type": "4", "metadata": {"date": "2023-04-06T23:26:33.09+00:00"}, "hash": "317d9114d017ddc11ee9c2594cb76aa46ccd67d580139f591a893053aa2cc5e5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45ab52f3-f98b-4ad2-9b0f-c9e29ebf6149", "node_type": "1", "metadata": {"date": "2023-04-06T21:03:58.467+00:00"}, "hash": "b4c9ed22f7d08a9eb606939fc4c513aa2545d7879c3cad9b769949d73c6f6a01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec46d4d8-20a2-4dd1-98d1-ccf5ad7e8078", "node_type": "1", "metadata": {}, "hash": "90de20e0cca0337f19add52ec9db1925008ae9a433e6f6e6229282aa26452512", "class_name": "RelatedNodeInfo"}}, "text": "JakeAM:\nShould I be using llama index if I\u2019m just planning to query a single file?\nLogan M:\nWhy not \ud83d\ude05 its an easy way to get a model to read and answer questions about your document, easier than doing it from scratch anyways", "start_char_idx": 0, "end_char_idx": 224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec46d4d8-20a2-4dd1-98d1-ccf5ad7e8078": {"__data__": {"id_": "ec46d4d8-20a2-4dd1-98d1-ccf5ad7e8078", "embedding": null, "metadata": {"date": "2023-04-06T23:33:27.917+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093679900700979291", "node_type": "4", "metadata": {"date": "2023-04-06T23:33:27.917+00:00"}, "hash": "41a06f2166794c3a2eb5dfd819c0fb103e8a235150e5c1dd8def21b68c7c15b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "310677ff-91ea-43b9-8c52-5144ba713aa2", "node_type": "1", "metadata": {"date": "2023-04-06T23:26:33.09+00:00"}, "hash": "85af4e0a13c50b26c027a594196cc15864035539c887bd1f41c6624abc07d9a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6428e045-1cc2-4e4e-9226-3abcbd844932", "node_type": "1", "metadata": {}, "hash": "a1370d003cd7f559abb9a3f0972193383aabfef47ad2bde25b218c93db52dd22", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHi! I'm trying to get my qdrant index:\n\n```python\nimport qdrant_client\nfrom gpt_index import GPTQdrantIndex\n\n# Creating a Qdrant vector store\nclient = qdrant_client.QdrantClient(\n    host=\"<qdrant-host>\",\n    api_key=\"<qdrant-api-key>\",\n    https=True\n)\ncollection_name = \"paul_graham\"\n\n# Initialize the GPTQdrantIndex with the existing Qdrant vector store\nindex = GPTQdrantIndex(client=client, collection_name=collection_name)\n\n# Query index\nresponse = index.query(\"What did the author do growing up?\")\n```\n\nIn this line `index = GPTQdrantIndex(client=client, collection_name=collection_name)` \n\nI'm getting the error:\n\n```\n{ValueError}One of documents or index_struct must be provided.\n```\npikachu888:\nI don't understand is it mandatory to store a json file on disk after I uploaded my embeddings to qdrant?\n\nWhat If:\n\n1. I created an index in one computer and loaded it to qdrant cloud storage\n\n2. Now I'm using another computer and all I have is a qdrant api_key and url. (I don't have `index.json`).\n\n\nHow do I create an index then?\n\n\nFor example, there is such functionality in Langchain:\n\n```python\n\nfrom langchain.vectorstores import Pinecone\n\nPinecone.from_existing_index(...)\n\n//I just need to provide pinecone key and embedding model.\n```\nLogan M:\nIts not mandatory when using a vector store. To reconnect, just initialize like normal, pass the client in, but pass an empty array instead of the documents.\n\nThis is a pretty common question. I think the docs should point this out a little better, I know it's not obvious at all\npikachu888:\nThanks Logan! You are my savior! \ud83d\ude4f", "start_char_idx": 0, "end_char_idx": 1597, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6428e045-1cc2-4e4e-9226-3abcbd844932": {"__data__": {"id_": "6428e045-1cc2-4e4e-9226-3abcbd844932", "embedding": null, "metadata": {"date": "2023-04-07T00:01:45.693+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093687021689638932", "node_type": "4", "metadata": {"date": "2023-04-07T00:01:45.693+00:00"}, "hash": "d07212a515766b5f5c9feddec9f8d3fabfcbae8a845f88b33bf99364e135ab07", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec46d4d8-20a2-4dd1-98d1-ccf5ad7e8078", "node_type": "1", "metadata": {"date": "2023-04-06T23:33:27.917+00:00"}, "hash": "c306bd7eb7b2f97ae201bdde98d81be2ee2b8663388fec41ea0c08e989ac221c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c454d75-9f61-43b2-ae4c-4ef662070f53", "node_type": "1", "metadata": {}, "hash": "a14bcd5ff6a512661bf388d9260b81d69f198f8771ad301ab8e50a5b109b5e1a", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nWhy am I getting this?\n\n```\nCould not parse LLM output: `Thought: Do I need to use a tool? No\n```\n\nEven though there seems to be an answer in the logs:\n\n```\nCould not parse LLM output: `Thought: Do I need to use a tool? No\nKeppel Corporation is a diversified group that provides solutions for sustainable urbanisation, energy, and infrastructure. The company operates businesses in different sectors such as Offshore & Marine, Infrastructure, Property, and Investments. As a result, the capacity of Keppel Corporation varies depending on the sector. \nIn the Offshore & Marine sector, Keppel Corporation has a total capacity of up to 40 newbuild projects a year, with facilities in Singapore, China, Brazil, and the Philippines. The Infrastructure sector provides a wide range of services, including environmental engineering and facilities management, while the Property sector focuses on developing and managing quality properties in Asia Pacific and Europe. Finally, the Investments sector invests in various industries around the world.\nOverall, Keppel Corporation has a strong global presence and a diverse range of businesses, which means its capacity is significant and varied across different sectors.`\n```\nLogan M:\nLangchain uses regexes to parse output. I notice sometimes the llm doesn't put thr AI prefix and it breaks langchain", "start_char_idx": 0, "end_char_idx": 1351, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c454d75-9f61-43b2-ae4c-4ef662070f53": {"__data__": {"id_": "7c454d75-9f61-43b2-ae4c-4ef662070f53", "embedding": null, "metadata": {"date": "2023-04-07T00:20:17.329+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093691684228964383", "node_type": "4", "metadata": {"date": "2023-04-07T00:20:17.329+00:00"}, "hash": "3a4c8328f6488fb502bc27fc2c62cd699ef0ba4d65eb8b73ddb79ac0fa7f255d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6428e045-1cc2-4e4e-9226-3abcbd844932", "node_type": "1", "metadata": {"date": "2023-04-07T00:01:45.693+00:00"}, "hash": "2dd4aca620307af40d54deacf3ce9f4ac66c8656fb9b92dca93703a1bf688d14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "598aa715-08b8-4aef-b5d8-c4d19e30c657", "node_type": "1", "metadata": {}, "hash": "45f8d0781016161399126ea2d82711411ea2b358f5062bde30a3403d1cefda8b", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\n@Logan M Is there a way to handle such cases in llamaindex? I'm gonna handle it in `except` block for now, I guess\nLogan M:\nYea try except is good for now. Langchain needs to handle this better on their end", "start_char_idx": 0, "end_char_idx": 218, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "598aa715-08b8-4aef-b5d8-c4d19e30c657": {"__data__": {"id_": "598aa715-08b8-4aef-b5d8-c4d19e30c657", "embedding": null, "metadata": {"date": "2023-04-07T02:10:31.444+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093719425837973564", "node_type": "4", "metadata": {"date": "2023-04-07T02:10:31.444+00:00"}, "hash": "7ee08e6b331e7f1b835b051bc7d9daa9a2fe5fb20120d7b0017509c92d02adcb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c454d75-9f61-43b2-ae4c-4ef662070f53", "node_type": "1", "metadata": {"date": "2023-04-07T00:20:17.329+00:00"}, "hash": "3ae3cb2207ca429fdcca2bc6caf30fa6651e635ef3a0d7a75ad3e110bd848289", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad481aba-863d-45a6-ab5e-16312be3f652", "node_type": "1", "metadata": {}, "hash": "2789516bd359e8e919a8a5aebce14eba53e175673a49ee2dc5d2cee937582969", "class_name": "RelatedNodeInfo"}}, "text": "athenawisdoms:\nHi, I tried to create a `ListIndex` but its giving me an error\n> ValueError: nodes must be a list of Node objects.\n\nWhat's wrong with the way I'm creating the `ListIndex`?\n\n```py\nfrom llama_index import (\n    ListIndex,\n    GPTSimpleVectorIndex,\n)\n\nidx_1 = GPTSimpleVectorIndex.load_from_disk(\"foo.json\")\nindex = ListIndex([idx_1])\n```\nThanks!\nLogan M:\nHmmm you are loading a vector index and then trying to pass it into a list index. Is that what you intended?\n\nTry loading documents and passing that into your list index instead\n\n`ListIndex.from_documents(documents)`", "start_char_idx": 0, "end_char_idx": 584, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad481aba-863d-45a6-ab5e-16312be3f652": {"__data__": {"id_": "ad481aba-863d-45a6-ab5e-16312be3f652", "embedding": null, "metadata": {"date": "2023-04-07T02:25:39.024+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093723232504381571", "node_type": "4", "metadata": {"date": "2023-04-07T02:25:39.024+00:00"}, "hash": "077180471681cf111610d5bbd74a5c20a64c4f8aa377773a71118715ded47664", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "598aa715-08b8-4aef-b5d8-c4d19e30c657", "node_type": "1", "metadata": {"date": "2023-04-07T02:10:31.444+00:00"}, "hash": "8f5d790673a000c59e446fad12aa2e802580f03db23b94ab3bc7987018a9ab6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1862abac-abaa-45ef-8b5f-cb73ab2a11ac", "node_type": "1", "metadata": {}, "hash": "8f138b288477da3544f335d5526686e3d1a0dbe3259c1132d93689025cd0327b", "class_name": "RelatedNodeInfo"}}, "text": "athenawisdoms:\n@Logan M Yes thats what I'm trying to do! Is there a way to extract the documents from the `GPTSimpleVectorIndex`? \nI've done the embeddings then saved the various  `GPTSimpleVectorIndex` to json files, I want to avoid redoing the embeddings again.\nI'm basically trying to combine several existing indexes into one, then query over this combined index.\nLogan M:\nHmm, I'm not sure if there's an easy way to transfer the embeddings between the two indexes. \n\nThe documents themselves can be shared though (through the docstore)\n\nIf you need the combined power of a vector index (general QA) and a list index (usually best for summarization) you can check out the new feature that combines them into a single index\n\nTweet thread + notebook here https://twitter.com/jerryjliu0/status/1642553651259650049?cxt=HHwWgsDRvfv1wsstAAAA", "start_char_idx": 0, "end_char_idx": 839, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1862abac-abaa-45ef-8b5f-cb73ab2a11ac": {"__data__": {"id_": "1862abac-abaa-45ef-8b5f-cb73ab2a11ac", "embedding": null, "metadata": {"date": "2023-04-07T03:38:07.893+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093741472983035924", "node_type": "4", "metadata": {"date": "2023-04-07T03:38:07.893+00:00"}, "hash": "7266d5f26d84780904bb074a69036f210b4959acbb545c9dda1ed43137cad516", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad481aba-863d-45a6-ab5e-16312be3f652", "node_type": "1", "metadata": {"date": "2023-04-07T02:25:39.024+00:00"}, "hash": "09d8d1f9697721243f874a3eaa0421f64c1218d39728ff90aee2931e9ae6ef3c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "42d0faec-9ff6-43bd-9612-c499483f8ce4", "node_type": "1", "metadata": {}, "hash": "a88d7705d897221b9991ea22ed494633184cef17c1eb6ad55572d5e5b32e0c4c", "class_name": "RelatedNodeInfo"}}, "text": "wfzimmerman:\nHow can I pass custom headers along with an index.query?\nLogan M:\nWhat did you have in mind? Like customizing HTTP request headers?", "start_char_idx": 0, "end_char_idx": 144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42d0faec-9ff6-43bd-9612-c499483f8ce4": {"__data__": {"id_": "42d0faec-9ff6-43bd-9612-c499483f8ce4", "embedding": null, "metadata": {"date": "2023-04-07T10:04:53.778+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093838805519315075", "node_type": "4", "metadata": {"date": "2023-04-07T10:04:53.778+00:00"}, "hash": "9ac681ef715c62cdce1a88fe80ee0544c4ffb5902ec1066f7df48963fbfde79c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1862abac-abaa-45ef-8b5f-cb73ab2a11ac", "node_type": "1", "metadata": {"date": "2023-04-07T03:38:07.893+00:00"}, "hash": "e5aa49b789f0f4f8c0b0a9c740183fc48386cd7aa3601bde0099e58e2dac6a90", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7dae1b27-3643-431a-8ec2-2d34bd05988a", "node_type": "1", "metadata": {}, "hash": "abc6d759637a1c959049800ec7b0f5304e9801e94914c4401edb4f709f7b75f7", "class_name": "RelatedNodeInfo"}}, "text": "Quentin:\nI had create a Chatbot follow your document \"How to Build a Chatbot\".But the response always  truncated,How to fix it ?\nheihei:\ni ever run into this problem too, need to set num output(default is 256) bigger and call it in llm definition.", "start_char_idx": 0, "end_char_idx": 247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dae1b27-3643-431a-8ec2-2d34bd05988a": {"__data__": {"id_": "7dae1b27-3643-431a-8ec2-2d34bd05988a", "embedding": null, "metadata": {"date": "2023-04-07T10:16:35.789+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093841749966860309", "node_type": "4", "metadata": {"date": "2023-04-07T10:16:35.789+00:00"}, "hash": "6701aed14a98f1644a8af79b22b794250cbe3ea8bf524c8f9aee29a4f4e09815", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42d0faec-9ff6-43bd-9612-c499483f8ce4", "node_type": "1", "metadata": {"date": "2023-04-07T10:04:53.778+00:00"}, "hash": "10e6837eee9192f6505733bd75577fce4b1ce809da6d1a9bddbb8ea42323b86a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f6fdfa10-7c9a-4b28-aaec-b7541a852685", "node_type": "1", "metadata": {}, "hash": "1d06d230b5976930832c47db23527ac742d9ac1f04fcecf3a34f4c577c08df90", "class_name": "RelatedNodeInfo"}}, "text": "Quentin:\n@heihei I added this parameter, but it doesn't seem to work very well, the response is still often truncated, whether it is language-related\uff1f\nheihei:\nyou defined it, but didn't use it in query", "start_char_idx": 0, "end_char_idx": 201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f6fdfa10-7c9a-4b28-aaec-b7541a852685": {"__data__": {"id_": "f6fdfa10-7c9a-4b28-aaec-b7541a852685", "embedding": null, "metadata": {"date": "2023-04-07T10:32:00.988+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093845630532730930", "node_type": "4", "metadata": {"date": "2023-04-07T10:32:00.988+00:00"}, "hash": "c8774fc69ba8e3d7631e69a2766e590085a675500a005625fea83f9af74dc560", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dae1b27-3643-431a-8ec2-2d34bd05988a", "node_type": "1", "metadata": {"date": "2023-04-07T10:16:35.789+00:00"}, "hash": "cc853ab5d669b0e9bb2624a3ebae556569a95cc9fe0dd7492c6a9cf76c030b30", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "213e52e2-97d6-4884-8be4-99dd00d9aab3", "node_type": "1", "metadata": {}, "hash": "bebfe94d021464a3c84869a32b324f1f242e7178d4205f052c9090d39cdf2baa", "class_name": "RelatedNodeInfo"}}, "text": "Quentin:\nI'm using graph, and here's the load code.I'll check other possible places\n\nreturn ComposableGraph.load_from_disk(\n        graph_file_path,\n        service_context=service_context\n    )\nheihei:\n0.5 is quite different fron 0.4. i suggest you put this parameter everywhere. unless it brings up error\ud83d\ude05", "start_char_idx": 0, "end_char_idx": 307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "213e52e2-97d6-4884-8be4-99dd00d9aab3": {"__data__": {"id_": "213e52e2-97d6-4884-8be4-99dd00d9aab3", "embedding": null, "metadata": {"date": "2023-04-07T12:20:05.771+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093872829684011088", "node_type": "4", "metadata": {"date": "2023-04-07T12:20:05.771+00:00"}, "hash": "b546ca933cceab21b1ff58bc19066d54abd21467f7e6eeedba417b3b148a1509", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f6fdfa10-7c9a-4b28-aaec-b7541a852685", "node_type": "1", "metadata": {"date": "2023-04-07T10:32:00.988+00:00"}, "hash": "910bd2cc67635b21ed4a02993b6d182d44870954b20d7219af8ffd9c07f6317f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "982941d5-515d-4b80-ac3b-419d2ea05db7", "node_type": "1", "metadata": {}, "hash": "a6f6e43a7c05d13b52f7def68e35d7acb9fb7bc3ccdea48df46922f94bb0ee9a", "class_name": "RelatedNodeInfo"}}, "text": "noname:\nthe llamaindex YoutubeTranscriptReader only returns the trancription. How can I get metadata such as title, author, description. With langchain youtube loader there is a param that you activate to return it?\nQuentin:\nyou need to create an index such as GPTSimpleVectorIndex,pass the trancription document to it ,then you can query anything  from index.As I know that YoutubeTranscriptReader will not scrape metadata of html page,you can't got those you said via YoutubeTranscriptReader.", "start_char_idx": 0, "end_char_idx": 494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "982941d5-515d-4b80-ac3b-419d2ea05db7": {"__data__": {"id_": "982941d5-515d-4b80-ac3b-419d2ea05db7", "embedding": null, "metadata": {"date": "2023-04-07T12:27:32.899+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093874705074769940", "node_type": "4", "metadata": {"date": "2023-04-07T12:27:32.899+00:00"}, "hash": "9970f82f1d3e07d80ef5e43d18edc773399b3c5dfeaad0658d462d3fcd0fc646", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "213e52e2-97d6-4884-8be4-99dd00d9aab3", "node_type": "1", "metadata": {"date": "2023-04-07T12:20:05.771+00:00"}, "hash": "24f5bbaa603ab6f73e2879ba78c2afff398977b507cbe45e866ea4ddb74a19ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86343f41-d066-4e93-a498-9f54ebdf2a58", "node_type": "1", "metadata": {}, "hash": "3c4ef1f7dc0f98c1935660c2dab12765eb74de2be26767acd0d61604594fae03", "class_name": "RelatedNodeInfo"}}, "text": "athenawisdoms:\nI've several `GPTSimpleVectorIndex` created and saved to json files. \nIs it correct to say that there's no quick/easy way to mix and match these indexes at run time and without incurring more embedding costs?\nTried `ComposableGraph.from_indices(ListIndex, indexes, summaries)` but it seems like its doing the embeddings again? (I dont know how to tell whats its doing in the background)\nSubhrajit Pramanick:\nIt is taking too long time to execute right for composable graph? I am also stuck with the same issue, need a faster mechanism to solve it.\nathenawisdoms:\nYes, not sure why `ComposableGraph` is taking so long. It'll be nice to have a brief understanding of whats happening when we crun it", "start_char_idx": 0, "end_char_idx": 711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86343f41-d066-4e93-a498-9f54ebdf2a58": {"__data__": {"id_": "86343f41-d066-4e93-a498-9f54ebdf2a58", "embedding": null, "metadata": {"date": "2023-04-07T13:19:55.428+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093887885796720660", "node_type": "4", "metadata": {"date": "2023-04-07T13:19:55.428+00:00"}, "hash": "2772ad716aa7a467fcc73fa47fe08c1418785534a93935279836c0e1f9a52478", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "982941d5-515d-4b80-ac3b-419d2ea05db7", "node_type": "1", "metadata": {"date": "2023-04-07T12:27:32.899+00:00"}, "hash": "a8a53002fdc6d7d3d7d917808246ef7c858eac823f9154b7c15c1a47c4c634da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83a85c95-a802-4c2d-9477-ae712d76c511", "node_type": "1", "metadata": {}, "hash": "678c6ae3ca1ad54ff3ca6d96a9cd5b2cca1bf6b200e0a840084c1c771dc1bf66", "class_name": "RelatedNodeInfo"}}, "text": "meeffe:\nHello to all of you. Any ideas of how to handle \"Original answer still applies:\" when using chatgpt api with llama? I just want to behave like \"New chat\"  when using traditional Chatgpt window.\nconfused_skelly:\nTry response mode: \"compact\"", "start_char_idx": 0, "end_char_idx": 247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83a85c95-a802-4c2d-9477-ae712d76c511": {"__data__": {"id_": "83a85c95-a802-4c2d-9477-ae712d76c511", "embedding": null, "metadata": {"date": "2023-04-07T15:18:20.732+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093917687601709136", "node_type": "4", "metadata": {"date": "2023-04-07T15:18:20.732+00:00"}, "hash": "764877c3a6ceec171b4813e7e98a9d7808243f01cdea59f83e066c3fb0dfa9f9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86343f41-d066-4e93-a498-9f54ebdf2a58", "node_type": "1", "metadata": {"date": "2023-04-07T13:19:55.428+00:00"}, "hash": "4ee8ef9bef687e19e3f6f381d0ce9abed6f2ad72b42bb5e12011e22d707f739c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0245700c-ae3b-4d31-8b27-280f39eac514", "node_type": "1", "metadata": {}, "hash": "cdef6b783dd1fa72308f0986e9bb1017c7308635ab905d1db24c0e916963c4d3", "class_name": "RelatedNodeInfo"}}, "text": "wnl:\nhello! I am testing llama-index but apparently the context being sent thu langchain to chatgpt is to big and I get\n```\nException has occurred: InvalidRequestError\nThis model's maximum context length is 4096 tokens. However, your messages resulted in 24347 tokens. Please reduce the length of the messages.\n```\nmy input is just \"hello\" but I guess Llamaindex is beefing up the context. How can I limit how much context gets inyected into my prompt so that I don't get this error?\nwnl:\nmore precisely: \n```\n> Entering new AgentExecutor chain...\nINFO:openai:error_code=context_length_exceeded error_message=\"This model's maximum context length is 4096 tokens. However, your messages resulted in 24347 tokens. Please reduce the length of the messages.\" error_param=messages error_type=invalid_request_error message='OpenAI API error received' stream_error=False\nerror_code=context_length_exceeded error_message=\"This model's maximum context length is 4096 tokens. However, your messages resulted in 24347 tokens. Please reduce the length of the messages.\" error_param=messages error_type=invalid_request_error message='OpenAI API error received' stream_error=False```", "start_char_idx": 0, "end_char_idx": 1168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0245700c-ae3b-4d31-8b27-280f39eac514": {"__data__": {"id_": "0245700c-ae3b-4d31-8b27-280f39eac514", "embedding": null, "metadata": {"date": "2023-04-07T15:45:37.695+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093924553522167958", "node_type": "4", "metadata": {"date": "2023-04-07T15:45:37.695+00:00"}, "hash": "99b8b32b4261c62f2a5f531a7c558f0c648bee2dc119cacb7deeb0ad56d9b7d6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83a85c95-a802-4c2d-9477-ae712d76c511", "node_type": "1", "metadata": {"date": "2023-04-07T15:18:20.732+00:00"}, "hash": "3eb44c4abe569afa0fe2f79c3735c160bea44c8a092d7bec2bb2fbf31b54be37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87753970-f7da-481f-8f1a-faa28e1b3a61", "node_type": "1", "metadata": {}, "hash": "a69d2b204858fb28b476a565d939b80319eb737edb66c8f26eea045337301ccf", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\n@wnl  are you feeding nodes or documents into the index?\nwnl:\nIm am a newbie: I can share script, its probably easier. The gist of what it does is: 1) I have a directory of .md files, 2) I use UnstructuredReader to `load_data()`, 3) `GPTSimpleVectorIndex.from_documents(indexes)` 4) then create 2 catalogs 5) create langchain chatbot", "start_char_idx": 0, "end_char_idx": 350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87753970-f7da-481f-8f1a-faa28e1b3a61": {"__data__": {"id_": "87753970-f7da-481f-8f1a-faa28e1b3a61", "embedding": null, "metadata": {"date": "2023-04-07T16:06:52.341+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093929899774984293", "node_type": "4", "metadata": {"date": "2023-04-07T16:06:52.341+00:00"}, "hash": "c4fa13fd4840b0205d887d24c3d290516ed605761a78757f5a3f564098f8e795", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0245700c-ae3b-4d31-8b27-280f39eac514", "node_type": "1", "metadata": {"date": "2023-04-07T15:45:37.695+00:00"}, "hash": "0680d876840074ba7b0c50e7810690fa73312a5711e10075a939b000f87b78cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06d413b1-e1cd-4f27-b3e9-56b7653ce409", "node_type": "1", "metadata": {}, "hash": "e840403f6e2613fac5f428a50c0b14ab8aa1bc07d359e4b24f3cef18870bfcc3", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nThe bit on converting from documents to nodes will take documents that are >4k tokens and split it down into smaller chunks\nwnl:\nlooking at this, thanks", "start_char_idx": 0, "end_char_idx": 169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06d413b1-e1cd-4f27-b3e9-56b7653ce409": {"__data__": {"id_": "06d413b1-e1cd-4f27-b3e9-56b7653ce409", "embedding": null, "metadata": {"date": "2023-04-07T16:53:13.97+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093941566772625529", "node_type": "4", "metadata": {"date": "2023-04-07T16:53:13.97+00:00"}, "hash": "1109958c139b61529b5f01a8dfad791f33dfa84d4e95f446740f1c627f401b29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87753970-f7da-481f-8f1a-faa28e1b3a61", "node_type": "1", "metadata": {"date": "2023-04-07T16:06:52.341+00:00"}, "hash": "13f35579fa4b053c366559018b8e107e83fa3090d4d587eba74810494bbb5311", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37e3243a-6693-4187-893f-750f9f11d0d4", "node_type": "1", "metadata": {}, "hash": "0c3c79c04cfa6dd1355e00fe91dca72ac5912fcbbab977b2a895c099de8c6515", "class_name": "RelatedNodeInfo"}}, "text": "decentralizer:\nHi, i have 2 different simple vector indices. I created a composable graph on top of these 2 indices. When I'm dealing with just one index, i'm able to put QA_PROMPT_TMPL in my query function, however, I couldn't find a way to do this for composable grap index. Any suggestions?\nLogan M:\nYou can set it under the query_kwargs in your query configs \ud83d\udc4c\ndecentralizer:\nawesome. i'll try", "start_char_idx": 0, "end_char_idx": 397, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37e3243a-6693-4187-893f-750f9f11d0d4": {"__data__": {"id_": "37e3243a-6693-4187-893f-750f9f11d0d4", "embedding": null, "metadata": {"date": "2023-04-07T16:55:45.3+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093942201496637501", "node_type": "4", "metadata": {"date": "2023-04-07T16:55:45.3+00:00"}, "hash": "06c581294271fc0c31b3fbe0e80742d5887d873a5d1edcc883a89919a797f1d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06d413b1-e1cd-4f27-b3e9-56b7653ce409", "node_type": "1", "metadata": {"date": "2023-04-07T16:53:13.97+00:00"}, "hash": "97d78fc3e9fd37ed9fafcecdb580d0a067ba686a00330448307e1e9d0aca6da3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "537a38f3-9355-44e5-8db9-5096e7cc3b79", "node_type": "1", "metadata": {}, "hash": "82c8adfa41b2214f5284babe66d61716714abcccc170b24aa1bc92f06a370fe8", "class_name": "RelatedNodeInfo"}}, "text": "athenawisdoms:\nHi, how do you see the prompts sent to LLM when u query an index?  \n`index.query(q, verbose=True)` prints out more info, but does not show the prompts used. \n`GPTSimpleVectorIndex.load_from_disk` does not accept a `verbose` parameter\nLogan M:\nYou can set the logger to debug like this\n\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\nlogging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))\n```\n\nOr you can store them using the llama_logger (bottom of this notebook)\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/SimpleIndexDemo.ipynb", "start_char_idx": 0, "end_char_idx": 637, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "537a38f3-9355-44e5-8db9-5096e7cc3b79": {"__data__": {"id_": "537a38f3-9355-44e5-8db9-5096e7cc3b79", "embedding": null, "metadata": {"date": "2023-04-07T17:14:18.278+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093946869664727110", "node_type": "4", "metadata": {"date": "2023-04-07T17:14:18.278+00:00"}, "hash": "b86af445609e467386170319e00ca83654c75816a1bdd07cc6ccc5abda5668e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37e3243a-6693-4187-893f-750f9f11d0d4", "node_type": "1", "metadata": {"date": "2023-04-07T16:55:45.3+00:00"}, "hash": "451e5ebab9d5c70f2506a5ac62b119ddb2ad117f18e6ff6c09dc7a82702643b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06dfb410-3a8a-4345-a59c-ad06fe797fe8", "node_type": "1", "metadata": {}, "hash": "b0ca8e4e714f818756b643166ba14af442244c7ac5dfd94b4ea8c63f80b02b24", "class_name": "RelatedNodeInfo"}}, "text": "nam604 | Chris:\nDoes anyone know how to receive a more natural response? \n\nFor context, Im using gpt_index to index a PDF file, then query the index. Most of the time it will prefix to `based on this context` or some variation of that. Ive tried tailoring the initial prompt to something like: \n```\n    prepend_messages = [\n        SystemMessagePromptTemplate.from_template(\n            \"\"\"You are a helpful assistant. \n            You take on different identities, names, and personalities based on what the user says.\n            You must always remember the instructions given by the user.\n            Treat the provided context as if it is part of your own memory and never refer to it directly or say 'based on context information'.\n            If you do not know, say 'None'.\"\"\"\n        ),\n        HumanMessagePromptTemplate.from_template(f\"Treat the provided context as if it is part of your own memory and never refer to it directly or say 'based on context information'. Always following the following instructions: {prompt}. \"),\n    ]\n```\n\nBut no luck unfortunately.\nLogan M:\nInstead of prepend messages, you can modify the text_qa_template and refine_template \n\nCheck out the bottom of the faq for more info/links\n\nhttps://discord.com/channels/1059199217496772688/1059200010622873741/1088122994251010139\nnam604 | Chris:\nAh, but Ill need prepend messages to retain message history. Is it possible to do both?", "start_char_idx": 0, "end_char_idx": 1418, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06dfb410-3a8a-4345-a59c-ad06fe797fe8": {"__data__": {"id_": "06dfb410-3a8a-4345-a59c-ad06fe797fe8", "embedding": null, "metadata": {"date": "2023-04-07T17:31:09.132+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093951109493698741", "node_type": "4", "metadata": {"date": "2023-04-07T17:31:09.132+00:00"}, "hash": "2a31a0fb41551b0fba9307fc031e2bb17596e7eacbaf91578eee065ffd0f6465", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "537a38f3-9355-44e5-8db9-5096e7cc3b79", "node_type": "1", "metadata": {"date": "2023-04-07T17:14:18.278+00:00"}, "hash": "96d93bdc8708535d87858f7096c93907919be056c2623cb1e3a16eadd40ce554", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a93452c-5615-467a-a34d-d5c47f1ae6a6", "node_type": "1", "metadata": {}, "hash": "6118cc221feb6a5457a055c13d8f8882e5724d9673394d15575ce4964218552e", "class_name": "RelatedNodeInfo"}}, "text": "nam604 | Chris:\nThe doc is great, maybe we can sticky it somewhere\nLogan M:\nIt's in the pins for this channel \ud83d\udccc We should probably also add it to our docs page too lol", "start_char_idx": 0, "end_char_idx": 167, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a93452c-5615-467a-a34d-d5c47f1ae6a6": {"__data__": {"id_": "4a93452c-5615-467a-a34d-d5c47f1ae6a6", "embedding": null, "metadata": {"date": "2023-04-07T19:11:12.284+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1093976288538148956", "node_type": "4", "metadata": {"date": "2023-04-07T19:11:12.284+00:00"}, "hash": "4932317fec0c148e8c9a13237d752f9ac593ee6debc3213a3486eb3d3ce6c63f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06dfb410-3a8a-4345-a59c-ad06fe797fe8", "node_type": "1", "metadata": {"date": "2023-04-07T17:31:09.132+00:00"}, "hash": "678a0f01b5a9a2967717d52bf3aaa4272563b6d8d7af9be0027c9ca9fa15cce0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1fd45ec-fd17-4701-9cb5-e314b273e539", "node_type": "1", "metadata": {}, "hash": "dc912832158b970c1d7ef691981aa15817b323a88c0a93ab56d4185272aed566", "class_name": "RelatedNodeInfo"}}, "text": "RobertS:\nThe documentation reads: ```If the db is already populated with data, we can instantiate the SQL index with a blank documents list. Otherwise see the below section.\n\nindex = SQLStructStoreIndex(\n    [],\n    sql_database=sql_database, \n    table_name)````\n\nHow do I construct my index if I have multiple tables in my database?\nLogan M:\nI think the table name might be optional? I have a streamlit demo that queries across three tables. Here's my constructor (it also uses extra context descriptions of the tables)\nhttps://github.com/logan-markewich/llama_index_starter_pack/blob/main/streamlit_sql_sandbox/streamlit_demo.py#L24\nRobertS:\nYou are correct! Works well without it.", "start_char_idx": 0, "end_char_idx": 684, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1fd45ec-fd17-4701-9cb5-e314b273e539": {"__data__": {"id_": "c1fd45ec-fd17-4701-9cb5-e314b273e539", "embedding": null, "metadata": {"date": "2023-04-07T23:50:28.7+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094046570040795227", "node_type": "4", "metadata": {"date": "2023-04-07T23:50:28.7+00:00"}, "hash": "787721501949873c0489697ccd9b03f09db99d9d4510ebd71a8936bb5ed92a65", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a93452c-5615-467a-a34d-d5c47f1ae6a6", "node_type": "1", "metadata": {"date": "2023-04-07T19:11:12.284+00:00"}, "hash": "a3e6ee18e2dfea1666e3559d2bfe630f50bd423efb010847ca13ded11b2e5b60", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9a8f690f-959d-4131-ac1b-fefe06158947", "node_type": "1", "metadata": {}, "hash": "7f59e861266b15a223242054ba89468b2717ee979c829a2ad850b8545d308a59", "class_name": "RelatedNodeInfo"}}, "text": "zlerp:\nNoob here. Is llama index fine tuning or embedded training? Or which, how can I learn some more? Any good tutorials out there on uses or anything other than docs?\nLogan M:\nNo fine tuning or training, just using  existing LLM and Embedding models \ud83d\udc4d\n\nThere are a few good demos I made on huggingface\nhttps://huggingface.co/llamaindex\n\nAlso lots of good notebooks in the repo\nhttps://github.com/jerryjliu/llama_index/tree/main/examples", "start_char_idx": 0, "end_char_idx": 439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a8f690f-959d-4131-ac1b-fefe06158947": {"__data__": {"id_": "9a8f690f-959d-4131-ac1b-fefe06158947", "embedding": null, "metadata": {"date": "2023-04-08T02:15:23.549+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094083038880747540", "node_type": "4", "metadata": {"date": "2023-04-08T02:15:23.549+00:00"}, "hash": "8ec4188047598f52ad9c3df696adef5b807105aa0a056493fb8944f7cfab560b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1fd45ec-fd17-4701-9cb5-e314b273e539", "node_type": "1", "metadata": {"date": "2023-04-07T23:50:28.7+00:00"}, "hash": "b23dc64c216fe8a012851dfe04cfb6fbad2d85189966b37abd09dd8bee2d03d6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ede1546b-8526-4bac-ba9a-63b3a1cc5e73", "node_type": "1", "metadata": {}, "hash": "cb09c3d478e2e96dc4dede5c3588f934c8f5ee24cfd8dc12f3a2c6c35dee770b", "class_name": "RelatedNodeInfo"}}, "text": "gameveloster:\nIs there a way to limit the number of times the chat agent refines the response? Am using agent created from `create_llama_chat_agent` and it seems to make 5 LLM calls before giving the final response. Why does it make so many calls?\nLogan M:\nIt makes 5 llm calls total, or 5 llm calls to llama index? What do your settings/indexes look like?", "start_char_idx": 0, "end_char_idx": 356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ede1546b-8526-4bac-ba9a-63b3a1cc5e73": {"__data__": {"id_": "ede1546b-8526-4bac-ba9a-63b3a1cc5e73", "embedding": null, "metadata": {"date": "2023-04-08T11:45:00.707+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094226388271247370", "node_type": "4", "metadata": {"date": "2023-04-08T11:45:00.707+00:00"}, "hash": "0288b06190df3e708e6d6b1ba589d333b6f74b7df64480f8a6ed75a2c8d81b51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a8f690f-959d-4131-ac1b-fefe06158947", "node_type": "1", "metadata": {"date": "2023-04-08T02:15:23.549+00:00"}, "hash": "70967562c360b8ca8236c9f0ac49f3e9457950401be004f2f309bc2dc29602f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac1ef1aa-e3a9-4dad-be07-f130c4404d3e", "node_type": "1", "metadata": {}, "hash": "208fcab457a41440c9cb428855c0935beb04ee51a49070e63501c88cbf0dd3ad", "class_name": "RelatedNodeInfo"}}, "text": "aleks_wordcab:\nhow do you add custom keywords to the SimpleKeywordTableIndex?\nLogan M:\nHmmm I don't see an easy way to do that right now. You'd have to assign the keywords to a specific node inside the index \ud83e\udd14\ud83e\udd14\naleks_wordcab:\nThat sounds like the direction I'd like to head in. Is there any documentation around this", "start_char_idx": 0, "end_char_idx": 316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac1ef1aa-e3a9-4dad-be07-f130c4404d3e": {"__data__": {"id_": "ac1ef1aa-e3a9-4dad-be07-f130c4404d3e", "embedding": null, "metadata": {"date": "2023-04-08T13:18:56.49+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094250026458415124", "node_type": "4", "metadata": {"date": "2023-04-08T13:18:56.49+00:00"}, "hash": "ecdf5380359370911652452c6d14406c93d8603c664700c6e703f85d60e027ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ede1546b-8526-4bac-ba9a-63b3a1cc5e73", "node_type": "1", "metadata": {"date": "2023-04-08T11:45:00.707+00:00"}, "hash": "d9f04a4fc8996c3e293a4ca07b2eb7176f06d297d674fee1f259b120ec7a41fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c10aadab-f8f7-494f-bb99-d718881869d5", "node_type": "1", "metadata": {}, "hash": "94fea041e9a84387b3214d50c2810701e6acc38e1f8e0580649e3de696f3d92c", "class_name": "RelatedNodeInfo"}}, "text": "Brian Yun:\nHow can I use \"stream\" while using \"ChatOpenAI\" (gpt-3.5-turbo)? \nI'm running into the error -- ValueError: stream is only supported for OpenAI LLMs\nIs it due to missteps in my code, or something that was intended by llamaindex itself?\nTagging the creator himself...@jerryjliu98 Please let me know!\nBioHacker:\nHello @Brian Yun \nYou can find info on how to do this here https://github.com/jerryjliu/llama_index/pull/1059", "start_char_idx": 0, "end_char_idx": 430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c10aadab-f8f7-494f-bb99-d718881869d5": {"__data__": {"id_": "c10aadab-f8f7-494f-bb99-d718881869d5", "embedding": null, "metadata": {"date": "2023-04-09T00:08:23.406+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094413465550074026", "node_type": "4", "metadata": {"date": "2023-04-09T00:08:23.406+00:00"}, "hash": "a2a148ac1d8ddb10714402d9af5f6b8b1f58748b2aafd9df0c10b8886defee0a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac1ef1aa-e3a9-4dad-be07-f130c4404d3e", "node_type": "1", "metadata": {"date": "2023-04-08T13:18:56.49+00:00"}, "hash": "1d9e340bcdb389f7de47e8ff8af81508f46d0a1b4fd393735b6cd7aa54cd3d05", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a967162d-8922-462d-b3c4-101ca6e4dd3b", "node_type": "1", "metadata": {}, "hash": "5a94eb30f9e30ef0b4fca965cd6f38592266bfd9bd501724440e2dc6f1dd23aa", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHi! I want to build a chatbot, which grabs messages from my slack. I'm following this tutorial:\n\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/data_connectors/SlackDemo.ipynb\n\nWhat is `SLACK_BOT_TOKEN` here and how do I obtain it? Sorry for a stupid question, I have no idea about slack sdk\nLogan M:\nSounds like you'll need to create a bot/app for your slack channel to get acces: https://api.slack.com/authentication/basics#creating\npikachu888:\nThanks! I guess I also need to obtain a workspace admin privilege, because I was not able to create an app (I know I know, that\u2019s super obvious) \ud83d\ude2c\nLogan M:\nMost likely!", "start_char_idx": 0, "end_char_idx": 640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a967162d-8922-462d-b3c4-101ca6e4dd3b": {"__data__": {"id_": "a967162d-8922-462d-b3c4-101ca6e4dd3b", "embedding": null, "metadata": {"date": "2023-04-09T01:36:49.876+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094435722498408519", "node_type": "4", "metadata": {"date": "2023-04-09T01:36:49.876+00:00"}, "hash": "a999b420fef6f47f605949aa730ac841383524b1750747e518508194f3ddada8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c10aadab-f8f7-494f-bb99-d718881869d5", "node_type": "1", "metadata": {"date": "2023-04-09T00:08:23.406+00:00"}, "hash": "8b51e25643fdb2a3cd1c18a939009c40acf7fb0b55f3c4dd0b342e0d34dd2930", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f44a9558-4f3f-4ff3-a552-3e11d9b2a3b8", "node_type": "1", "metadata": {}, "hash": "ea6c4dbb18040abbbcd73c7e5093c608bc30237a61577fd191f00ed324f37aed", "class_name": "RelatedNodeInfo"}}, "text": "jakpower:\nHey folks! I created an issue RE GPTChromaIndex and using it in graphs -> https://github.com/jerryjliu/llama_index/issues/1110. I cannot find a way to pass in the chroma_collection or get it to use the collection from the source index.\nLogan M:\nI see you mentioned that it didn't make sense to pass in the chroma collections in the query kwargs, but did you try it anyways? Might be a quick workaround \ud83e\udd14\njakpower:\nGave it a try, unfortunately it tries to fire up llama_index.indices.list.query.GPTListIndexQuery with the same Kwargs which throws. It's almost like it needs a way to pass in extra params along with the indices it's using (similar to index summaries?), or else re-use those indices rather than recreate them in query_runner.py line 167.", "start_char_idx": 0, "end_char_idx": 761, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f44a9558-4f3f-4ff3-a552-3e11d9b2a3b8": {"__data__": {"id_": "f44a9558-4f3f-4ff3-a552-3e11d9b2a3b8", "embedding": null, "metadata": {"date": "2023-04-09T17:04:38.718+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094669214545084467", "node_type": "4", "metadata": {"date": "2023-04-09T17:04:38.718+00:00"}, "hash": "ad05249bfd0913aedf8de29a06d85dcb08d059bad15139b57905788fbd8ace22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a967162d-8922-462d-b3c4-101ca6e4dd3b", "node_type": "1", "metadata": {"date": "2023-04-09T01:36:49.876+00:00"}, "hash": "af560c186f211d53e75c807b0f2a9879c8e95274e80e2027e7b6f862151e677a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6bdde35-100e-4cd7-af81-c69bc38d9337", "node_type": "1", "metadata": {}, "hash": "f00c10e7c1902e491e28ff4a220dc943032b3a33fc02f42fd8ed4ed59b21e5a9", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\nWhen using the document loader for pdfs, is there a way to get the page from which the response.source_nodes comes from? Right now it gives you something like start and end but no page.\nLogan M:\nCurrently not an easy way. You'd have to manually load the document and add the page info to the extra info dict \n\nI think the loaders could probably do a little better job of tracking filenames, and page numbers were applicable \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6bdde35-100e-4cd7-af81-c69bc38d9337": {"__data__": {"id_": "e6bdde35-100e-4cd7-af81-c69bc38d9337", "embedding": null, "metadata": {"date": "2023-04-09T17:18:37.466+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094672732509176029", "node_type": "4", "metadata": {"date": "2023-04-09T17:18:37.466+00:00"}, "hash": "7ce7231d58414b5f009c23280a54adf931fb0910358cb978f38b1b864d29c5f9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f44a9558-4f3f-4ff3-a552-3e11d9b2a3b8", "node_type": "1", "metadata": {"date": "2023-04-09T17:04:38.718+00:00"}, "hash": "255ba2c161df60c91d8fd5980b16b130c1da58e981c93f827dcc65d25985417f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9031c8c-4f3c-45fe-bab0-53233cf19346", "node_type": "1", "metadata": {}, "hash": "898c0bebc01d4f9ccd615e17cacb7b47efd00fd2259d01e5d500a940f6701b5a", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\n@Logan M @jerryjliu98 yes i think this is a must have. Consider the evolution of these tools: When we query summarization, not only will it summarize, but by clicking any sentence in that summary it will take you to the page it came from and highlight the node text string\njerryjliu98:\nyeah as discussed on an earlier thread, makes a lot of sense to add metadata to the Document extra_info in these loaders (including the pdf loaders), and these will be propagated to the node and then the final response source nodes\n\n@BioHacker if you happen to have a PR here that would be amazing!\nBioHacker:\nHi @jerryjliu98 , I wrote the PR but I\u2019m unable to test. Sent you details in the DM. Would you be able to take look?", "start_char_idx": 0, "end_char_idx": 723, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9031c8c-4f3c-45fe-bab0-53233cf19346": {"__data__": {"id_": "b9031c8c-4f3c-45fe-bab0-53233cf19346", "embedding": null, "metadata": {"date": "2023-04-09T17:20:05.069+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094673099942801591", "node_type": "4", "metadata": {"date": "2023-04-09T17:20:05.069+00:00"}, "hash": "befbc3234ec60200350aadddf213649612d1623eaeebcef4799bcd0a2f509c50", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6bdde35-100e-4cd7-af81-c69bc38d9337", "node_type": "1", "metadata": {"date": "2023-04-09T17:18:37.466+00:00"}, "hash": "e2a693b2e1fc9f4665057a775e48e29eea3b1effeb6983ca937d9948313865e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7cef5702-1f32-4f42-bf93-a8e47b5b2f7c", "node_type": "1", "metadata": {}, "hash": "d80b823d42507e8e4e5b217ce0bb60eee3a8a2f43ff5e1a921e662af9f29ddb4", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\nHow would you add this manually though? when the node is created, it has a random id so its kind of hard to track which page it comes from. Would probably have to implement this as part of the source code for document loader\nLogan M:\nIf you create the index from documents, each node inherits the extra_info field from the corresponding document\n \nSo if each document was a page, ezpz", "start_char_idx": 0, "end_char_idx": 395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7cef5702-1f32-4f42-bf93-a8e47b5b2f7c": {"__data__": {"id_": "7cef5702-1f32-4f42-bf93-a8e47b5b2f7c", "embedding": null, "metadata": {"date": "2023-04-09T18:19:08.487+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094687962115080392", "node_type": "4", "metadata": {"date": "2023-04-09T18:19:08.487+00:00"}, "hash": "29fabe7be6194dcff567267ee367a04c3fe631a5c42327eceac01ced62c4f752", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9031c8c-4f3c-45fe-bab0-53233cf19346", "node_type": "1", "metadata": {"date": "2023-04-09T17:20:05.069+00:00"}, "hash": "9e37af47ede57e0ad24ea1a0d7b5085f0976cee41a24a9e92d1025018e4b8354", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79e59714-61a5-4117-976c-97071305860d", "node_type": "1", "metadata": {}, "hash": "4fc5b1ea3f060abe880c1c9b2831737922c124c88f2feac440a74dc41fe97081", "class_name": "RelatedNodeInfo"}}, "text": "Toma\u017e:\nHow to instantiate a knowledgegraphindex and provide own triplets?\nThere is an upsert_triple method, however I don't know how to instantiate an empty kg index:\n\n```\nkg_index = KnowledgeGraphIndex()\n```\nLogan M:\nTry `kg_index = KnowledgeGraphIndex([])`\n\nThen you can call this function to insert triplets and their associated node object\n https://github.com/jerryjliu/llama_index/blob/main/gpt_index/indices/knowledge_graph/base.py#L172", "start_char_idx": 0, "end_char_idx": 442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79e59714-61a5-4117-976c-97071305860d": {"__data__": {"id_": "79e59714-61a5-4117-976c-97071305860d", "embedding": null, "metadata": {"date": "2023-04-09T18:39:00.048+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094692959884157021", "node_type": "4", "metadata": {"date": "2023-04-09T18:39:00.048+00:00"}, "hash": "73f8f6359c1c9c9182f3bf6fba45e83e0a6cbb0999dc880a21bcba1ed7183fdf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7cef5702-1f32-4f42-bf93-a8e47b5b2f7c", "node_type": "1", "metadata": {"date": "2023-04-09T18:19:08.487+00:00"}, "hash": "c0f2ce7defcf0af0826d073463e0b041b5379c660e7455e1e0dd6121bf80dda5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b4caf6e-3fc7-4304-89d3-983eb7654502", "node_type": "1", "metadata": {}, "hash": "0adc2bd8113912e0f157e90e25858e2673982635c0c3d585e95c7cb2f5a1ee70", "class_name": "RelatedNodeInfo"}}, "text": "Toma\u017e:\n```\nDEFAULT_TEXT_QA_PROMPT_TMPL = (\n    \"Context information is below. \\n\"\n    \"---------------------\\n\"\n    \"{context_str}\"\n    \"\\n---------------------\\n\"\n    \"Given the context information and not prior knowledge, \"\n    \"If you don't know the answer based on the context, just say you don't know\"\n    \"answer the question: {query_str}\\n\"\n)\nDEFAULT_TEXT_QA_PROMPT = QuestionAnswerPrompt(DEFAULT_TEXT_QA_PROMPT_TMPL)\n```\n\nAdding another constraint that the model should simply tell us if the context has that information helps with the model not answering based on its priors, at least in my case. Langchain does something very similar as well\nToma\u017e:\nlol now, it says for everything that it doesn't know it... I'll investigate further I guess", "start_char_idx": 0, "end_char_idx": 750, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b4caf6e-3fc7-4304-89d3-983eb7654502": {"__data__": {"id_": "5b4caf6e-3fc7-4304-89d3-983eb7654502", "embedding": null, "metadata": {"date": "2023-04-09T18:54:49.349+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094696941541130302", "node_type": "4", "metadata": {"date": "2023-04-09T18:54:49.349+00:00"}, "hash": "17c5df8b297bde569638c4b0c39cb1483f4216268e5c35416e4f57ad31b848a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79e59714-61a5-4117-976c-97071305860d", "node_type": "1", "metadata": {"date": "2023-04-09T18:39:00.048+00:00"}, "hash": "bfc51fc96f441dc0a88708903fd841e26094c569e5e0bac6bb70f5e437129180", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0c097e89-b809-4860-afb1-be1252eda3c8", "node_type": "1", "metadata": {}, "hash": "1282c85081bb8f81af795126b2ef752678c8a8d9553cbb80f4e8e96f26527cf2", "class_name": "RelatedNodeInfo"}}, "text": "RLesjak:\nHello \ud83d\ude01 , Is there a way to disable the refinement process when calling \"index.query()\" ? When I take a look at the logs I see that the initial response is always good enough, and the refinement process usually makes it worse not better. I tried optimising refine template but with no luck.\nLLYX:\nThis is what I'm finding as well \ud83d\ude02\ud83e\udd72", "start_char_idx": 0, "end_char_idx": 341, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0c097e89-b809-4860-afb1-be1252eda3c8": {"__data__": {"id_": "0c097e89-b809-4860-afb1-be1252eda3c8", "embedding": null, "metadata": {"date": "2023-04-09T21:08:29.172+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094730579116822548", "node_type": "4", "metadata": {"date": "2023-04-09T21:08:29.172+00:00"}, "hash": "791ebc93df3923a062517917727db5e473a5c164d064cca5467f91ca6caefdd7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b4caf6e-3fc7-4304-89d3-983eb7654502", "node_type": "1", "metadata": {"date": "2023-04-09T18:54:49.349+00:00"}, "hash": "bc48a39e301d556f3b33fd2c090cfa91e5e29632e4b365a4854007bbe771b29e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffb348bf-8dd3-4631-b798-c8ef848b600d", "node_type": "1", "metadata": {}, "hash": "61bdb4399e2ae6daed99f75dd1e0393497df505f6b9e15e9a920b1951d5956e2", "class_name": "RelatedNodeInfo"}}, "text": "decentralizer:\nHi, I'm looking for suggestions to optimize the response time. I have 2 large simple vector indices (using default embedding models) and a composable graph on top of those indices.\n\nBelow is my setup.\n`\n    max_input_size = 4000\n    num_output = 2000\n    max_chunk_overlap = 20\n\n    prompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\n\nllm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0.3, model_name=\"gpt-3.5-turbo\"))\n\n    service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\n\n\n    query_configs = [\n    {\n        \"index_struct_type\": \"default\",\n        \"query_mode\": \"default\",\n        \"query_kwargs\": {\n            \"response_mode\": \"tree_summarize\",\n            \"similarity_top_k\": 1,\n            \"verbose\": False,\n            \"text_qa_template\": QA_PROMPT,\n            \"refine_template\": CUSTOM_REFINE_PROMPT,\n            \"service_context\": service_context,\n        }\n\n    },\n\n]`\n\nI find llama index super helpful and the most powerful solution in the market. However, response times are making the user experience a little challenging. I know that OpenAI's apis are not the best atm but would appreciate any suggestions.\nLLYX:\nhave you profiled it to see what the bottlenecks are? for me i have a similar set up but I'm finding that the main bottleneck is actually the network latency on openai's api calls", "start_char_idx": 0, "end_char_idx": 1410, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffb348bf-8dd3-4631-b798-c8ef848b600d": {"__data__": {"id_": "ffb348bf-8dd3-4631-b798-c8ef848b600d", "embedding": null, "metadata": {"date": "2023-04-09T22:18:04.24+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094748090621239347", "node_type": "4", "metadata": {"date": "2023-04-09T22:18:04.24+00:00"}, "hash": "832ca6b9b02dd32fe5a92bdda9a566c349bfab26b0903f4218020612355bc002", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0c097e89-b809-4860-afb1-be1252eda3c8", "node_type": "1", "metadata": {"date": "2023-04-09T21:08:29.172+00:00"}, "hash": "2babef5ec9e9507065b15739ced623302c38aee9695b34ba3aff464276c67780", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23d8bbd5-aee0-458b-b5ae-ddaa9d465c67", "node_type": "1", "metadata": {}, "hash": "526feb4d73704b4ad1d4c137d528b4f41a00bbd84203ecbd43ee50b4bdcf0427", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHi! Is it possible to use Llama's children with llamaindex? (alpaca, vicuna etc) ?\nLogan M:\nShould be supported! See the FAQ in the pinned mesaages for the general apporach to custom LLMs\n\nMight take a couple of tweaks to the prompt templates to work well. I've been meaning to make a github repo with those models soon \ud83d\ude4f", "start_char_idx": 0, "end_char_idx": 333, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23d8bbd5-aee0-458b-b5ae-ddaa9d465c67": {"__data__": {"id_": "23d8bbd5-aee0-458b-b5ae-ddaa9d465c67", "embedding": null, "metadata": {"date": "2023-04-10T04:27:54.812+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094841164626133022", "node_type": "4", "metadata": {"date": "2023-04-10T04:27:54.812+00:00"}, "hash": "a911ba54ddda0e178fe7168ab20f8cec53946721420e7c3987236b594c2a6165", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffb348bf-8dd3-4631-b798-c8ef848b600d", "node_type": "1", "metadata": {"date": "2023-04-09T22:18:04.24+00:00"}, "hash": "32069e2647ec76f80696fa285078b57fddcb43665f51f8ea720584f644866a5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2674e8ca-ee9b-4f67-a60c-4a3f1600a1c3", "node_type": "1", "metadata": {}, "hash": "67b6dd580798627e5245a42aa96739e2fec00f01b44858e9cd0159af3f0d6c46", "class_name": "RelatedNodeInfo"}}, "text": "sha701:\nCan someone help explain why the answer was not generated even when node text was found. Using composable indexes, ( documents of simple vector , over keyword table) . Same result is seen with list index in the composable graph.\nLogan M:\nThis seems to be a common problem with chatgpt. I think the refine prompt is not fully optimized yet \ud83e\udd14 if you checkout the FAQ in the pinned channel messages, you can see how to customize the refine prompt. Maybe you can find one that works better \ud83d\ude4f \ud83d\ude4f\nLLYX:\nAnd please share, I've already gone through tens of iterations of the refine prompt and it's still wonky lol Maybe there's a better way of applying it in the actual pipeline...", "start_char_idx": 0, "end_char_idx": 680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2674e8ca-ee9b-4f67-a60c-4a3f1600a1c3": {"__data__": {"id_": "2674e8ca-ee9b-4f67-a60c-4a3f1600a1c3", "embedding": null, "metadata": {"date": "2023-04-10T04:59:07.968+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094849021211836476", "node_type": "4", "metadata": {"date": "2023-04-10T04:59:07.968+00:00"}, "hash": "cc91b2a3aacacbc0a5e84e2878a324a784a7e0abd6b34713115bc2ed7c659130", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23d8bbd5-aee0-458b-b5ae-ddaa9d465c67", "node_type": "1", "metadata": {"date": "2023-04-10T04:27:54.812+00:00"}, "hash": "15213807c25b1a5a3d07c74f8fc0cab411c5922d9c75a61986210e95451d1792", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bc7e058-339b-4d86-85c4-bba13de48a07", "node_type": "1", "metadata": {}, "hash": "610fe2fecb37ea308a919e1ac2b5bcb919fb68328ecc7c9745f487b91d51200b", "class_name": "RelatedNodeInfo"}}, "text": "KrisWood:\nAs far as I can tell it's all based off a leak from Meta's implementation of GPT but beyond that, \ud83e\udd37\u200d\u2642\ufe0f\nLLYX:\nYou don't need to use llama at all", "start_char_idx": 0, "end_char_idx": 153, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bc7e058-339b-4d86-85c4-bba13de48a07": {"__data__": {"id_": "8bc7e058-339b-4d86-85c4-bba13de48a07", "embedding": null, "metadata": {"date": "2023-04-10T04:59:29.222+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094849110357586090", "node_type": "4", "metadata": {"date": "2023-04-10T04:59:29.222+00:00"}, "hash": "490097d4b2c7ed5271e7e6e6d2eea9a5856d67cf954ff2684d3dc452aa535a9f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2674e8ca-ee9b-4f67-a60c-4a3f1600a1c3", "node_type": "1", "metadata": {"date": "2023-04-10T04:59:07.968+00:00"}, "hash": "573669a291303a1bc89c12767729b1189a9d22a42477f01d46d124f77f658121", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d381d80f-531a-444f-85cc-8432ce4883ec", "node_type": "1", "metadata": {}, "hash": "308d90a8e997fbc2f49d92012319aaf1b48360963b839af17ce490859ab55b41", "class_name": "RelatedNodeInfo"}}, "text": "KrisWood:\nHow does this compare to / differ from using the OpenAI API to talk to GPT?\nLLYX:\nThis can work together with OpenAI's API, one provides an interface to a LLM, the other helps you index things and then retrieve from created indices", "start_char_idx": 0, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d381d80f-531a-444f-85cc-8432ce4883ec": {"__data__": {"id_": "d381d80f-531a-444f-85cc-8432ce4883ec", "embedding": null, "metadata": {"date": "2023-04-10T14:13:44.275+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1094988592159404042", "node_type": "4", "metadata": {"date": "2023-04-10T14:13:44.275+00:00"}, "hash": "10a836a2b6d730a41196cee29bce41b1f0d258d0fb3f202f6b787f880cf03817", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8bc7e058-339b-4d86-85c4-bba13de48a07", "node_type": "1", "metadata": {"date": "2023-04-10T04:59:29.222+00:00"}, "hash": "7fcd87904822585ec099c7270ab3a7face9a360c737ad898ce60c9582574bd19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e1496a1-a762-428b-8d01-8ca5eac468da", "node_type": "1", "metadata": {}, "hash": "ab6e05af861f1701f3fdff1168ab33dd65dddae9827e0ca8428463619cf29dd9", "class_name": "RelatedNodeInfo"}}, "text": "Siddhant Saurabh:\nhey @jerryjliu98  I am from @Albus team.\nour use case is train the document and store it and load it in when ever the user query it.\nother 2 function we provide are add and and delete specific chunks when required by the user.\n\nCurrenlty I am working on using PineVectorStore.\nI have tried different ways of implementing PineVectoreStore for our use case. but in all the ways there was some or the other problem\n(all the versions are in the file attached)\n\nPlease assist me\nLogan M:\nI think your first implementation should work. But one thing, try replacing `top_k` with `similarity_top_k` in the query\nSiddhant Saurabh:\nwith response = index.query(\"How many floater leaves do we get?\", similarity_top_k=2) in implementation 1\n\ngetting error TypeError: __init__() missing 1 required positional argument: 'top_k'\nLogan M:\nOhhh you ate querying the index directly, the GPTPineconeIndex is commented out\nSiddhant Saurabh:\nyes, because our use case is \ntrain the document and store it and load it in when ever the user query it.\nso can not preprocess document everytime at the time of query.\nLogan M:\nWith GPTPineconeIndex, once the documents are stored in pinecone, you should be able to  re-initialize the index without documents \n\n`index = GPTPineconeIndex([], pinecone_index=index)`\nSiddhant Saurabh:\nknown this, you can see I have used in implementation 3\nbut index = GPTPineconeIndex([], pinecone_index=index) \ncan not be queried because it is empty, right?", "start_char_idx": 0, "end_char_idx": 1478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e1496a1-a762-428b-8d01-8ca5eac468da": {"__data__": {"id_": "0e1496a1-a762-428b-8d01-8ca5eac468da", "embedding": null, "metadata": {"date": "2023-04-10T16:35:08.743+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095024178597474386", "node_type": "4", "metadata": {"date": "2023-04-10T16:35:08.743+00:00"}, "hash": "52551b758523186e86c68859c95c0befb24d6bfba6b9428f22d0842f4bd8e2ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d381d80f-531a-444f-85cc-8432ce4883ec", "node_type": "1", "metadata": {"date": "2023-04-10T14:13:44.275+00:00"}, "hash": "807725fd0c684fd13f268d4e68184073ecd974e9df4bb8a5acb58a3d54e140e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3db0bb35-4746-4f32-93a6-544c737e0c05", "node_type": "1", "metadata": {}, "hash": "cb4d39c17ec10b31bdecc88317292ed946b2f5462173a384cff9349a06a25f4f", "class_name": "RelatedNodeInfo"}}, "text": "TomPro:\nHi! All is good with below but the ChatBot is actually aware only of what is in the index. For example, if the index is about books and I ask about the book it is ok. When I ask about Italy it returns \"none\". How can I make it work to first check the index but if something is not in the index just use standard GTP-3.5-Trubo knowleadge?\n\nIndex:\nllm_predictor = **ChatGPTLLMPredictor**(llm=ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\"))\n    service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, chunk_size_limit=512)\n\n    index = GPTSimpleVectorIndex.load_from_disk(input_index, service_context=service_context) \n\nRespond:\n response = index.query(\n            query,\n            service_context=service_context,\n            similarity_top_k=3\n        )\nLogan M:\nYou'll want to modify the qa and refine templates. See the bottom of the FAQ in the pinned messages for the channel \ud83d\udc4d\nTomPro:\nSorry, I tried but I can't get it. I keep getting \"None\" as an answer as index is almost empty - but in this case I wanted GTP-3.5-Turbo use general knowledge. I can make this refine Prompt but how can I used this to query index? Any small example?\n\nhttps://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/chat_prompts.py\nLogan M:\nThe text qa prompt and refine prompt can be customized to say something like \"...If the answer is not in the provided context, answer with the best of your knowledge\"\n\nThen you can pass in your custom prompts like `index.query(..., text_qa_templae=my_qa_template, refine_template=my_refine_template)`\nTomPro:\nI did that - I think. \n\n# Refine Prompt\nCHAT_REFINE_PROMPT_TMPL_MSGS = [\n    HumanMessagePromptTemplate.from_template(\"{query_str}\"),\n    AIMessagePromptTemplate.from_template(\"{existing_answer}\"),\n    HumanMessagePromptTemplate.from_template(\n        \"We have the opportunity to refine the above answer \"\n        \"(only if needed) with some more context below.\\n\"\n        \"------------\\n\"\n        \"{context_msg}\\n\"\n        \"------------\\n\"\n        \"Given the new context, refine the original answer to better \"\n        \"answer the question. \"\n        \"If the context isn't useful, use general knowleadge.\",\n    ),\n]\n\n\nCHAT_REFINE_PROMPT_LC = ChatPromptTemplate.from_messages(CHAT_REFINE_PROMPT_TMPL_MSGS)\nCHAT_REFINE_PROMPT = RefinePrompt.from_langchain_prompt(CHAT_REFINE_PROMPT_LC)\n\nLater\n\nresponse = index.query(\n            query_str,\n            service_context=service_context,\n            similarity_top_k=3,\n            text_qa_template=QA_PROMPT,\n            refine_template=CHAT_REFINE_PROMPT\n        )\n\nNo change \ud83d\ude2d\nLogan M:\nDid you change the QA prompt too? I don't see it in the snippet\nTomPro:\nSorry to bother you.... I feel like idiot, but I am close to finish what I want and this is so sad\n\nThis is a missing part:\n\nfrom llama_index import QuestionAnswerPrompt, RefinePrompt\nQA_PROMPT_TMPL = (\n    \"We have provided context information below. \\n\"\n    \"---------------------\\n\"\n    \"{context_str}\"\n    \"\\n---------------------\\n\"\n    \"Given this information, please answer the question: {query_str}\\n\"\n    \"If the context isn't useful, use general knowleadge.\"\n)\nQA_PROMPT = QuestionAnswerPrompt(QA_PROMPT_TMPL)", "start_char_idx": 0, "end_char_idx": 3206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3db0bb35-4746-4f32-93a6-544c737e0c05": {"__data__": {"id_": "3db0bb35-4746-4f32-93a6-544c737e0c05", "embedding": null, "metadata": {"date": "2023-04-10T18:01:03.431+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095045798925975613", "node_type": "4", "metadata": {"date": "2023-04-10T18:01:03.431+00:00"}, "hash": "efc44a6ac308a6d13e3d8efdd1b971e6a1b5d8a5939af4cf01ad3c24dd201a8e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e1496a1-a762-428b-8d01-8ca5eac468da", "node_type": "1", "metadata": {"date": "2023-04-10T16:35:08.743+00:00"}, "hash": "5b8f421c4bd8c63d9d575a1b13b514e2611e2e03e22baa242fb8982dc9375fc9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92dabdfa-058e-439f-88fe-30233074b59e", "node_type": "1", "metadata": {}, "hash": "d748f6a505cd5af7b0022279e1119c22621e2c818d07ca1db47cb0168824a42a", "class_name": "RelatedNodeInfo"}}, "text": "Greg Tanaka:\nI am trying to make a composable index like in the SEC 10-K example. I have two GPTSimpleVectorIndex indexes both for them I can query without a problem. I create a graph:\n\n> graph = ComposableGraph.from_indices(\n>     ListIndex,\n>     [index1, index2],\n>     index_summaries=[\n>         \"summary 1\", \n>         \"summary 2\"\n>         ],\n> )\n\nThis runs okay and I use similar query string and config as the SEC example, but I am getting this error when I try to run this: \n\n> response_summary = graph.query(graph_query_str, query_configs=query_configs)\n*AttributeError                            Traceback (most recent call last)\nCell In[35], line 1\n----> 1 response_summary = graph.query(graph_query_str, query_configs=query_configs)\n\nFile ~/anaconda3/envs/424b/lib/python3.11/site-packages/llama_index/indices/composability/graph.py:145, in ComposableGraph.query(self, query_str, query_configs, query_transform, service_context)\n    136 service_context = service_context or self._service_context\n    137 query_runner = QueryRunner(\n    138     index_struct=self._index_struct,\n    139     service_context=service_context,\n   (...)\n    143     recursive=True,\n    144 )\n--> 145 return query_runner.query(query_str)\n\nFile ~/anaconda3/envs/424b/lib/python3.11/site-packages/llama_index/indices/query/query_runner.py:341, in QueryRunner.query(self, query_str_or_bundle, index_id, level)\n    323 \"\"\"Run query.\n    324 \n    325 NOTE: Relies on mutual recursion between\n   (...)\n    336     composable graph.\n    337 \"\"\"\n    338 query_combiner, query_bundle = self._prepare_query_objects(\n    339     query_str_or_bundle, index_id=index_id\n    340 )\n...\n     83             )\n     84         )\n     85     node_embeddings: List[List[float]] = []\n\nAttributeError: 'tuple' object has no attribute 'embedding'*\n\nThe SEC example runs fine for me. Does anyone know what I am doing wrong?\nGreg Tanaka:\nI figured out the issue, I had extra comma's in this: \n> risk_query_str = (\n>     \"Describe the current risk factors. If the year is provided in the information, \",\n>     \"provide that as well. If the context contains risk factors for multiple years, \",\n>     \"explicitly provide the following:\\n\",\n>     \"- A description of the risk factors for each year\\n\",\n>     \"- A summary of how these risk factors are changing across years\"\n> )\n> \n> Should be:\n> risk_query_str = (\n>     \"Describe the current risk factors. If the year is provided in the information, \"\n>     \"provide that as well. If the context contains risk factors for multiple years, \"\n>     \"explicitly provide the following:\\n\"\n>     \"- A description of the risk factors for each year\\n\"\n>     \"- A summary of how these risk factors are changing across years\"\n> )", "start_char_idx": 0, "end_char_idx": 2731, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92dabdfa-058e-439f-88fe-30233074b59e": {"__data__": {"id_": "92dabdfa-058e-439f-88fe-30233074b59e", "embedding": null, "metadata": {"date": "2023-04-10T19:08:50.876+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095062859026792560", "node_type": "4", "metadata": {"date": "2023-04-10T19:08:50.876+00:00"}, "hash": "f1b30a4af2d3bb76d06fb0182d221e6f4de10291c2f5e4a33f949bf1d4b039a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3db0bb35-4746-4f32-93a6-544c737e0c05", "node_type": "1", "metadata": {"date": "2023-04-10T18:01:03.431+00:00"}, "hash": "e0ffb4889ac7eba72c5cad37dfa59ec8f77019a5697a5f1f209b392296e90032", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8bae67c8-1d8e-4b07-b641-6e58d570d75b", "node_type": "1", "metadata": {}, "hash": "cb7187d920f5ea8193b9c829669b2c2a6cfddc146c9dbc935b9d7abca3c82946", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nHow can I create a GPTQdrantIndex without passing in the documents again? This used to work:\n```py\nindex = GPTQdrantIndex(\n    collection_name=\"<name>\", client=client, index_struct=QdrantIndexDict()\n)\n```\nBut no longer?\nLogan M:\nTry this?\n```python\nindex = GPTQdrantIndex([],  collection_name=\"<name>\", client=client)\n```\nSandkoan:\nThanks!", "start_char_idx": 0, "end_char_idx": 349, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8bae67c8-1d8e-4b07-b641-6e58d570d75b": {"__data__": {"id_": "8bae67c8-1d8e-4b07-b641-6e58d570d75b", "embedding": null, "metadata": {"date": "2023-04-10T20:07:11.533+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095077541846462716", "node_type": "4", "metadata": {"date": "2023-04-10T20:07:11.533+00:00"}, "hash": "6f2a50bf5d1e49a6059ab357741f65adc89e5932349c7d2636e1a4675f9571ad", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92dabdfa-058e-439f-88fe-30233074b59e", "node_type": "1", "metadata": {"date": "2023-04-10T19:08:50.876+00:00"}, "hash": "8691e843222a793c9f6bcc1add8019ecc0fc27f332d56bfeb85a88aea171f32d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b5592cf-b58e-4f03-9ddf-62ae0e13d456", "node_type": "1", "metadata": {}, "hash": "01d32ccfc055d569f9950e3e94b83fac09bbf9b1bf68837585d2b0da56d78d0c", "class_name": "RelatedNodeInfo"}}, "text": "KurtKobalt:\nis there any way to easily see what llama index is injecting as context in a query?\nAugusto Correa:\nI set the openAI logging to DEBUG and see the full request\nKurtKobalt:\ngracias!", "start_char_idx": 0, "end_char_idx": 191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b5592cf-b58e-4f03-9ddf-62ae0e13d456": {"__data__": {"id_": "5b5592cf-b58e-4f03-9ddf-62ae0e13d456", "embedding": null, "metadata": {"date": "2023-04-10T21:14:53.967+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095094580929630329", "node_type": "4", "metadata": {"date": "2023-04-10T21:14:53.967+00:00"}, "hash": "f7f812c52c04ed3d8afd585a9a551a44a3e7d5369e86803f4c90834fb6a4d721", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8bae67c8-1d8e-4b07-b641-6e58d570d75b", "node_type": "1", "metadata": {"date": "2023-04-10T20:07:11.533+00:00"}, "hash": "236afe3085fdfea6138d41a663de7f619c091a677d844310e9163f587605981b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9524fcec-be63-4fce-8c74-a61f2e969ef3", "node_type": "1", "metadata": {}, "hash": "ca6d66c7119fe4ff89ee0cd8c8f524c11dedc6b7ccbfc92ea8ca16bc4839f352", "class_name": "RelatedNodeInfo"}}, "text": "Sandkoan:\nIf I have code like this\n```py\ntools = [Tool(name, index.query, description, return_direct=True)]\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\nllm = OpenAI(temperature=0)\nagent_chain = initialize_agent(\n    tools, llm, agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION, memory=memory\n)\n```\nhow can I pass in a custom prefix/prompt?\nLogan M:\nMake a wrapper function around `index.query`, and in that function, pass the prompt as needed\nSandkoan:\nIf the prompt I want to give is an instruction about tone/delivery style, does it still make sense to pass it in via index.query?", "start_char_idx": 0, "end_char_idx": 599, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9524fcec-be63-4fce-8c74-a61f2e969ef3": {"__data__": {"id_": "9524fcec-be63-4fce-8c74-a61f2e969ef3", "embedding": null, "metadata": {"date": "2023-04-10T21:21:59.432+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095096365459189880", "node_type": "4", "metadata": {"date": "2023-04-10T21:21:59.432+00:00"}, "hash": "9b9e02f0ff673baaa67dc817482af6054ffe70f87f5e6b184eb961fd7c2ef9bd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b5592cf-b58e-4f03-9ddf-62ae0e13d456", "node_type": "1", "metadata": {"date": "2023-04-10T21:14:53.967+00:00"}, "hash": "15943362e8ccc232bdb8439532192512d0c36cdcc1e40fe651719ff3bfd2e0a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74fa9688-d0d2-4b90-af75-76ee6335536f", "node_type": "1", "metadata": {}, "hash": "1885b6c3d07c17c1c7e52c64f03dce8fa74d87afa2a8f209092a9acda2bbf7f2", "class_name": "RelatedNodeInfo"}}, "text": "gengordo:\nVicuna and alpaca released models that is not available for commercial use. Same with dolly from Databricks. Is there a recommended open source model supported by LLamaIndex that is also free to use commercially for Q and A on on local docs?\nLogan M:\nAsking the real questions I see lol\n\nEveryone is building models that either build off of llama (non-commercial) or use training data generated by OpenAI (against TOS, also non-commericial)\n\nHere are some promising ones that actually look open source (I havent tried any of these yet tbh, except for opt-iml):\nhttps://huggingface.co/OpenAssistant/oasst-sft-1-pythia-12b\nhttps://huggingface.co/models?search=opt-iml-max\nhttps://huggingface.co/togethercomputer/GPT-NeoXT-Chat-Base-20B\ngengordo:\nThanks @Logan M. Will check them out\ngengordo:\n@Logan M and all - https://www.databricks.com/blog/2023/04/12/dolly-first-open-commercially-viable-instruction-tuned-llm\nthemadcanudist:\nI'm curious what everyone's opinon is on open sourced LLMs? Do you think Dolly 2.0 is the best of all the ones out there, considering it's license is commercial and open vs. performance?\nLogan M:\nWell, I don't see any provided evaluation or benchmark for dolly 2.0 in that link? They are mostly like \"trust us, it works\" lol", "start_char_idx": 0, "end_char_idx": 1262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74fa9688-d0d2-4b90-af75-76ee6335536f": {"__data__": {"id_": "74fa9688-d0d2-4b90-af75-76ee6335536f", "embedding": null, "metadata": {"date": "2023-04-11T00:39:20.841+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095146031928328242", "node_type": "4", "metadata": {"date": "2023-04-11T00:39:20.841+00:00"}, "hash": "19addd286c48e719b38bd45f3cdf6b8ddddccf059ac3626053dbb2753a811fa9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9524fcec-be63-4fce-8c74-a61f2e969ef3", "node_type": "1", "metadata": {"date": "2023-04-10T21:21:59.432+00:00"}, "hash": "d13de1e3593d872e9af5a83c4daf62e9588a7c6d4337db72862da604edc2daa2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac2972ba-0881-47c2-80a8-45ca8162e698", "node_type": "1", "metadata": {}, "hash": "c5d967a0859242d7d2023cc796421934b5f3e3a9c470a40db7259248734c29a2", "class_name": "RelatedNodeInfo"}}, "text": "offskiies:\nGuys, Im trying to combine multiple indices into one using the following example from the docs: \n\n> from llama_index import GPTSimpleVectorIndex, ListIndex\n> \n> index1 = GPTSimpleVectorIndex.from_documents(documents1)\n> index2 = GPTSimpleVectorIndex.from_documents(documents2)\n> \n> index3 = ListIndex([index1, index2])\n\nHowever, I'm getting the following error: `ValueError: nodes must be a list of Node objects.`\n\nI made sure that my documents are actually of `Document` objects and the indices are definitely `GPTSimpleVectorIndex` objects. Struggling to see where I'm getting this error from?\nLogan M:\nThe docs are a little out of date in this section. See this demo for the new syntax https://github.com/jerryjliu/llama_index/blob/main/examples/composable_indices/ComposableIndices.ipynb", "start_char_idx": 0, "end_char_idx": 802, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac2972ba-0881-47c2-80a8-45ca8162e698": {"__data__": {"id_": "ac2972ba-0881-47c2-80a8-45ca8162e698", "embedding": null, "metadata": {"date": "2023-04-11T01:44:30.812+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095162431535317122", "node_type": "4", "metadata": {"date": "2023-04-11T01:44:30.812+00:00"}, "hash": "9b6527d58190783f3bcb39e214910472558e8e700298ff9236c8dbd88a2398d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74fa9688-d0d2-4b90-af75-76ee6335536f", "node_type": "1", "metadata": {"date": "2023-04-11T00:39:20.841+00:00"}, "hash": "3e092894e2baa602321364a6b2f1d0228f4faa4176c7f56b9586620ed4a2895d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1aaa0a55-9bd4-43ad-a86e-51363a5d266f", "node_type": "1", "metadata": {}, "hash": "5135491056be187aec857d4fddfd50535c6ccc464e02806a35ec2d316941aa77", "class_name": "RelatedNodeInfo"}}, "text": "Hammad:\nHello,\nI am getting this error\n```\n_InactiveRpcError: <_InactiveRpcError of RPC that terminated with:\n    status = StatusCode.INVALID_ARGUMENT\n    details = \"Wrong input: Vector inserting error: expected dim: 4096, got 1536\"\n    debug_error_string = \"UNKNOWN:Error received from peer ipv4:34.233.63.91:6334 {created_time:\"2023-04-11T05:02:14.203649+05:00\", grpc_status:3, grpc_message:\"Wrong input: Vector inserting error: expected dim: 4096, got 1536\"}\"\n```\nfor code\n```\nindex = GPTQdrantIndex([], collection_name='pubmed_qa', client=qdrant_client)\nresponse = index.query('Do mitochondria play a role in remodelling lace plant leaves during programmed cell death?')\n```\nCause I am using cohere(large) for embedding but using same GPT3 for response can i some how change or overwrite default only for embeddings in query?\nLLYX:\nyou should make sure the service context uses the same embed_model", "start_char_idx": 0, "end_char_idx": 902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1aaa0a55-9bd4-43ad-a86e-51363a5d266f": {"__data__": {"id_": "1aaa0a55-9bd4-43ad-a86e-51363a5d266f", "embedding": null, "metadata": {"date": "2023-04-11T03:15:24.856+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095185307453894656", "node_type": "4", "metadata": {"date": "2023-04-11T03:15:24.856+00:00"}, "hash": "b71f9b411267d67cf56c4a3a080aacb223bd56b092d177a209dcd6854a1315c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac2972ba-0881-47c2-80a8-45ca8162e698", "node_type": "1", "metadata": {"date": "2023-04-11T01:44:30.812+00:00"}, "hash": "7b16e0726364f150579d4bb79c99512835c6ed24408105c4e0dcdabf930e068c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fd69a8c-00b8-4f01-bf38-6d8383983711", "node_type": "1", "metadata": {}, "hash": "98be90b21751f2476349a085f1472b0c26d781f1be066eccb6fc6091958c865b", "class_name": "RelatedNodeInfo"}}, "text": "rainbow:\nhello, everyone. \nI have some command texts. I want to user index match most similar command with input. but I saw in document, it just use to answer, not match. how should I do?\nLogan M:\nYup, like @LLYX said, this is how the vector index works by default \ud83d\udcaa", "start_char_idx": 0, "end_char_idx": 266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fd69a8c-00b8-4f01-bf38-6d8383983711": {"__data__": {"id_": "2fd69a8c-00b8-4f01-bf38-6d8383983711", "embedding": null, "metadata": {"date": "2023-04-11T03:31:39.491+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095189395369365584", "node_type": "4", "metadata": {"date": "2023-04-11T03:31:39.491+00:00"}, "hash": "846662f96e8251022e498264435c618ccb784b86cff5591dd45af464cd0f1d6e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1aaa0a55-9bd4-43ad-a86e-51363a5d266f", "node_type": "1", "metadata": {"date": "2023-04-11T03:15:24.856+00:00"}, "hash": "267699d58faa4e977e5c09eac5669ef018e79f64c302f4bbe5ca98c5145d9b5b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6e53a25-2719-4f8d-8fe8-cdc505c55424", "node_type": "1", "metadata": {}, "hash": "3f1b79115f2545faf4b7c79975212fb05e061e77dd87fc7f83322091ad2eeda0", "class_name": "RelatedNodeInfo"}}, "text": "kartik:\nFiass vs LlamaIndex - Fiass gets the answer but Llama index doesn't - we will try with GPT3.5 model but not sure if we are doing something wrong\nLogan M:\nThere have been a lot of recent problems with gpt-3.5-turbo today \ud83e\udd74 I think something got changed in the model and the internal prompt templates need to be updated.\nkartik:\noh I see / what do you recommend using? 3.5 or 4?\nLogan M:\nI would try text-davinci-003 for now (it's the default)", "start_char_idx": 0, "end_char_idx": 449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6e53a25-2719-4f8d-8fe8-cdc505c55424": {"__data__": {"id_": "d6e53a25-2719-4f8d-8fe8-cdc505c55424", "embedding": null, "metadata": {"date": "2023-04-11T04:00:57.611+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095196769459118080", "node_type": "4", "metadata": {"date": "2023-04-11T04:00:57.611+00:00"}, "hash": "f1c56601779019a6d08eb9fbde68097d0e29f3a553bdd4ddaa32500bbbd83841", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fd69a8c-00b8-4f01-bf38-6d8383983711", "node_type": "1", "metadata": {"date": "2023-04-11T03:31:39.491+00:00"}, "hash": "9cd3397b077058601a21f8931ebd1161086a3988e6aed7a6f0f82c4824861bd6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba8309ca-61b2-4426-971a-2aa6721e8db8", "node_type": "1", "metadata": {}, "hash": "c46fe06e383b3163e90dc33347fa6a099ddf5cf49e8b0dc654f3dbb18726ce1a", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI'm sending data formatted in a specific way and want to query it. How should I provide an example of the incoming data to the query?\nLLYX:\nI would probably put instruct examples in the template if you consistently query for that type of data\npaulo:\nThanks! Where would I go to insert that?\nLLYX:\nYou can model them based on the ones in  https://github.com/jerryjliu/llama_index/blob/main/gpt_index/prompts/default_prompts.py and then add in your examples, and check the interface for querying your specific index to see which ones you can replace\npaulo:\nAfter creating the prompt using the PROMPT_TMPL, how do I should I use it? \nFor example, currently I am doing `response = index.query(\"Insert query here\")`\nLLYX:\nyou can add the keyword args text_qa_template and/or refine_template and replace it with your own prompt", "start_char_idx": 0, "end_char_idx": 828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba8309ca-61b2-4426-971a-2aa6721e8db8": {"__data__": {"id_": "ba8309ca-61b2-4426-971a-2aa6721e8db8", "embedding": null, "metadata": {"date": "2023-04-11T04:36:26.857+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095205700164136980", "node_type": "4", "metadata": {"date": "2023-04-11T04:36:26.857+00:00"}, "hash": "d97c238fea5a3bdcd2c3f126b608689f77edb8a551fc600cf9ed980e93a54c05", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6e53a25-2719-4f8d-8fe8-cdc505c55424", "node_type": "1", "metadata": {"date": "2023-04-11T04:00:57.611+00:00"}, "hash": "0395d8263dfd965a9ab37f94452fe8366e9f835eef7bbe021e9ce751fbdef442", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5c26f20-ef31-44f0-8fd0-752e45444813", "node_type": "1", "metadata": {}, "hash": "62e8ffeeb53059924b4df064b4f1cd40d29a6a9bb08c04ccfff945613da863e3", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nAh I see, so I would still need to write text for the first parameter? The `text_qa_template` is simply telling the llm what to expect and how to respond?\nLLYX:\nYeah you still need a query string that's unique to each call", "start_char_idx": 0, "end_char_idx": 229, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5c26f20-ef31-44f0-8fd0-752e45444813": {"__data__": {"id_": "f5c26f20-ef31-44f0-8fd0-752e45444813", "embedding": null, "metadata": {"date": "2023-04-11T04:37:50.712+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095206051877502986", "node_type": "4", "metadata": {"date": "2023-04-11T04:37:50.712+00:00"}, "hash": "2d7f12b7ec255a90b68a08042ddcba07d2cc5ff0201646dc8743a055af6c4710", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba8309ca-61b2-4426-971a-2aa6721e8db8", "node_type": "1", "metadata": {"date": "2023-04-11T04:36:26.857+00:00"}, "hash": "bf9f600836e6fa09ca4d8b8fb5e9fc92e329650fe134bb9419dc32915b48ff62", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61c9444b-d74f-4008-aedb-c04b6d6b4f7d", "node_type": "1", "metadata": {}, "hash": "ab564b0d0f99540807f906a8fec71d4ac5004390d6c2ced85979342e05e9ddb7", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nAlso, how do you know which prompt to use e.g. DEFAULT_INSERT_PROMPT_TMPL vs DEFAULT_REFINE_PROMPT_TMPL? I'm curious as to how they're different fundamentally\nLLYX:\nThey're called at different steps, the text qa one is the main one, and refine is called if your input ever exceeds your max context length\nzainab:\nWhen the context exceeds the maximum length, the refine prompt runs with the rest of the context, right? let's say the maximum length was 1000 and the context was 1200. The default qa prompt will use the first 1000 tokens and the rest will be sent with the refine prompt. Am i right?\nLLYX:\nThe rest + the output from the qa prompt together, so the output can be modified by the extra context if necessary", "start_char_idx": 0, "end_char_idx": 724, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61c9444b-d74f-4008-aedb-c04b6d6b4f7d": {"__data__": {"id_": "61c9444b-d74f-4008-aedb-c04b6d6b4f7d", "embedding": null, "metadata": {"date": "2023-04-11T05:00:34.802+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095211773285650512", "node_type": "4", "metadata": {"date": "2023-04-11T05:00:34.802+00:00"}, "hash": "f26771d2cafc4b089997ae230288c0a42be7ca05104626c81776b52e4057a996", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5c26f20-ef31-44f0-8fd0-752e45444813", "node_type": "1", "metadata": {"date": "2023-04-11T04:37:50.712+00:00"}, "hash": "f6f60440e8f5def7ccf472291c219b1069eb1c0093c71e71e88662cb1a8a5364", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1b9e406-a9ea-4736-aecf-c628bef50aff", "node_type": "1", "metadata": {}, "hash": "7622a89c2c9445778b6825d833e07a0f63568471c9508bb1b38d9eb7f0098967", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nDo I leave {query_str} and {context_str}? Or do I create a variable and fill this out?\nLLYX:\nYou leave those in, it'll be autopopulated in the pipeline", "start_char_idx": 0, "end_char_idx": 158, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1b9e406-a9ea-4736-aecf-c628bef50aff": {"__data__": {"id_": "f1b9e406-a9ea-4736-aecf-c628bef50aff", "embedding": null, "metadata": {"date": "2023-04-11T05:13:36.7+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095215052803551292", "node_type": "4", "metadata": {"date": "2023-04-11T05:13:36.7+00:00"}, "hash": "19a70a98aeb36df04e363382b209474d4f7db7391954fbcaf481810261dac33a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61c9444b-d74f-4008-aedb-c04b6d6b4f7d", "node_type": "1", "metadata": {"date": "2023-04-11T05:00:34.802+00:00"}, "hash": "0fef77134da050340423ab48fa52d17296f688f2c0883b1430b8320fbb90d73e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ad43a27-1382-477d-9113-776b1948ed99", "node_type": "1", "metadata": {}, "hash": "8ad6375308514c04cd601ac418b8d93fbc2943ad0d365f7c3c2838f723badd13", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI'm confused as to where I type the context then?\nLLYX:\nThe query_str is just whatever you're actually putting in for the query, the context is what is retrieved from your underlying indices", "start_char_idx": 0, "end_char_idx": 197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ad43a27-1382-477d-9113-776b1948ed99": {"__data__": {"id_": "2ad43a27-1382-477d-9113-776b1948ed99", "embedding": null, "metadata": {"date": "2023-04-11T05:14:45.857+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095215342869037177", "node_type": "4", "metadata": {"date": "2023-04-11T05:14:45.857+00:00"}, "hash": "e3ed2179f426bee631d7f4852101fa7faedddb213bf9b48c7a4c2740b8df750c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1b9e406-a9ea-4736-aecf-c628bef50aff", "node_type": "1", "metadata": {"date": "2023-04-11T05:13:36.7+00:00"}, "hash": "4e4c892b0d189a3ca6555a106c1797d026844aba1457329496338f526607daf2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84893197-80c6-4fdc-b0ca-4186ed1b9564", "node_type": "1", "metadata": {}, "hash": "fba84f3362791853ecd649001d6034edd3607f4a7368762201568559d325727c", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nSo where would I tell it \"Here's the data to expect:\" and then show it example data? In the query string?\nLLYX:\nI would just put it somewhere in the actual text, don't need to modify the variables, as long as you're ok with every prompt having the same examples (but I think that should be fine, I do that with my prompts for structure)", "start_char_idx": 0, "end_char_idx": 343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84893197-80c6-4fdc-b0ca-4186ed1b9564": {"__data__": {"id_": "84893197-80c6-4fdc-b0ca-4186ed1b9564", "embedding": null, "metadata": {"date": "2023-04-11T06:40:17.386+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095236866061643796", "node_type": "4", "metadata": {"date": "2023-04-11T06:40:17.386+00:00"}, "hash": "0f83d3033c5b9e05c6356ade3f67861f87302f3c79a5bec861ecfbaf4be7633d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ad43a27-1382-477d-9113-776b1948ed99", "node_type": "1", "metadata": {"date": "2023-04-11T05:14:45.857+00:00"}, "hash": "4f9cfe38aa03ab1bed02037879b205d525f46efa0a67229ae817b921229b37b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "88774674-4267-4513-b8f1-113f263a7bd9", "node_type": "1", "metadata": {}, "hash": "13db04a63884d2ea00cd91134838e42ac4c87f78362fddcd7acc16197e3ab124", "class_name": "RelatedNodeInfo"}}, "text": "sha701:\nWith GPTPineconeIndex , are there provisions for namespaces because i cant see that in any examples. Help ploz!\nkartik:\nNamespace: https://docs.pinecone.io/docs/namespaces\nhttps://gpt-index.readthedocs.io/en/latest/reference/indices/vector_store.html#gpt_index.indices.vector_store.vector_indices.GPTPineconeIndex\nThere doesn't seem to be any parameter for namespace. \nWhy?: want to separate each client documents in one index by namespace\n@Logan M", "start_char_idx": 0, "end_char_idx": 456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88774674-4267-4513-b8f1-113f263a7bd9": {"__data__": {"id_": "88774674-4267-4513-b8f1-113f263a7bd9", "embedding": null, "metadata": {"date": "2023-04-11T07:15:36.251+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095245753225576538", "node_type": "4", "metadata": {"date": "2023-04-11T07:15:36.251+00:00"}, "hash": "8a4c2c3701bc7962e7ed9854ea2e04d2ab6849c34e05954bcafa2227f71c3e99", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84893197-80c6-4fdc-b0ca-4186ed1b9564", "node_type": "1", "metadata": {"date": "2023-04-11T06:40:17.386+00:00"}, "hash": "5bb305608c92117c4adfbdb52e4476e24fadfde65cbc1e01495983d30d3e4950", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13f389ab-732b-4868-a668-33ad338783a8", "node_type": "1", "metadata": {}, "hash": "04c92b38ca387636e72cd3c9404c3a3c654556957e8f0b0d3163ecf5ffa0105d", "class_name": "RelatedNodeInfo"}}, "text": "kartik:\nhttps://gpt-index.readthedocs.io/en/latest/how_to/integrations/vector_stores.html#vector-store-index\ndocumentation says #1\nSiddhant Saurabh:\nif we use 1> then should we reinitialise pc_index everytime for inserting a single doc_chunk ?\n@Logan M", "start_char_idx": 0, "end_char_idx": 252, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13f389ab-732b-4868-a668-33ad338783a8": {"__data__": {"id_": "13f389ab-732b-4868-a668-33ad338783a8", "embedding": null, "metadata": {"date": "2023-04-11T08:56:24.036+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095271119474401344", "node_type": "4", "metadata": {"date": "2023-04-11T08:56:24.036+00:00"}, "hash": "4fe0344cdc9183d5bf06ce7c332c65a6aaf2a5db82f61c69b4ee94331ca9c3fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88774674-4267-4513-b8f1-113f263a7bd9", "node_type": "1", "metadata": {"date": "2023-04-11T07:15:36.251+00:00"}, "hash": "9882ac792233adc2c94489b7a3a005edfca4834051c2b72be6c8c93ad5724f87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab2e76b5-6c66-4ae1-aaf5-8828e45c735f", "node_type": "1", "metadata": {}, "hash": "5154b8f4b16b2defe79c272fada8c6e289a13c56a3297eacf14a8f2711f6648e", "class_name": "RelatedNodeInfo"}}, "text": "rahoof:\nHi, i am using ComposableGraph to indices multiple documents, when i query to index it prvoide information not from my given context , what will do?\nLLYX:\nYou can try adding some more/stronger guardrails in the prompts, the default ones have some but I find they're not strong enough, at least with gpt-3.5\noffskiies:\nI've tried to modify the prompt to tell it to only use the context given but still getting answers outside the context. Do you have any examples of modified prompts that worked?\nLLYX:\nNot perfectly, i just keep adding more and more words about not using prior/external/additional knowledge", "start_char_idx": 0, "end_char_idx": 615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab2e76b5-6c66-4ae1-aaf5-8828e45c735f": {"__data__": {"id_": "ab2e76b5-6c66-4ae1-aaf5-8828e45c735f", "embedding": null, "metadata": {"date": "2023-04-11T11:40:29.849+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095312415807246496", "node_type": "4", "metadata": {"date": "2023-04-11T11:40:29.849+00:00"}, "hash": "1f09770387d0d68dee0fd761fd502340149bd6a517221ddc93234f0daccbde01", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13f389ab-732b-4868-a668-33ad338783a8", "node_type": "1", "metadata": {"date": "2023-04-11T08:56:24.036+00:00"}, "hash": "89fef71c116d9fb375eb0921d64378ff03ca143209182c1d30457135a94279d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9309355d-a533-48cf-ba61-92161cb48705", "node_type": "1", "metadata": {}, "hash": "2bc86ff4dfed57352a821b331b44234e6937f6f7d2c26c46259d6e541ee96d88", "class_name": "RelatedNodeInfo"}}, "text": "maxanjo512:\nWhy gpt 3.5 turbo is so slow? With other models, i get response almost instantly, but with turbo it takes about 30 seconds. What is your response time with gpt turbo?\npikachu888:\nIf you\u2019ve noticed, response time also varies during the day. E.g.: sometimes it responds fast, sometimes slow and sometimes it just stuck.", "start_char_idx": 0, "end_char_idx": 329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9309355d-a533-48cf-ba61-92161cb48705": {"__data__": {"id_": "9309355d-a533-48cf-ba61-92161cb48705", "embedding": null, "metadata": {"date": "2023-04-11T11:46:56.908+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095314039250374757", "node_type": "4", "metadata": {"date": "2023-04-11T11:46:56.908+00:00"}, "hash": "78db8beef2a1d8d8711ad44f793630e068ad2770c45be2cba37ea0128f26888e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab2e76b5-6c66-4ae1-aaf5-8828e45c735f", "node_type": "1", "metadata": {"date": "2023-04-11T11:40:29.849+00:00"}, "hash": "0ddc17c188f83d390c749a4f82f7a1872312ff7b4ce4fdcfeef8672e84b4a31b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00425b4e-42a4-4241-b725-f5a3484241a2", "node_type": "1", "metadata": {}, "hash": "1c6956baa95e3413edfb5c9e67ce7aa40cb9ad56147e1ccf95eb3ef30647cda5", "class_name": "RelatedNodeInfo"}}, "text": "RedJohn:\nWhich other models are you referring to ?\nmaxanjo512:\nText davinci, text currie. They seem much faster", "start_char_idx": 0, "end_char_idx": 111, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00425b4e-42a4-4241-b725-f5a3484241a2": {"__data__": {"id_": "00425b4e-42a4-4241-b725-f5a3484241a2", "embedding": null, "metadata": {"date": "2023-04-11T12:25:39.815+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095323782228475924", "node_type": "4", "metadata": {"date": "2023-04-11T12:25:39.815+00:00"}, "hash": "b0f70a4ef79da0cde746e95dad12fc883e2d851fe3dc9f4ab0d86463f1ac6bb3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9309355d-a533-48cf-ba61-92161cb48705", "node_type": "1", "metadata": {"date": "2023-04-11T11:46:56.908+00:00"}, "hash": "0989e53123c7ee8b9dc66aeb537fc185ed47b12ae5b06cd4f0068ae591955563", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b10278f9-3b5e-4ba0-ae61-a2ac888e8e04", "node_type": "1", "metadata": {}, "hash": "a28c14d48189ac65bd3b8c50bebfb6fdce74d0b4cf5381adfec7d18bc3b07504", "class_name": "RelatedNodeInfo"}}, "text": "RedJohn:\nIf I understand, If you have a big chunk of data, (ex. a 120Ko text file), you could \n- split it into 4 parts (I choosed 4   just for the example)  \n- index each part (With GPTSimpleVectorIndex.from_documents for ex)\n- When I a have a user question :\n  - Determine in witch \"part\" is the answer\n  - query the corresponding index (with \"index.query\". for ex)\nKurtKobalt:\nI understood that \"from_documents\" would take car of the splitting... Anyone can confirm?\noffskiies:\nyeah it does", "start_char_idx": 0, "end_char_idx": 492, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b10278f9-3b5e-4ba0-ae61-a2ac888e8e04": {"__data__": {"id_": "b10278f9-3b5e-4ba0-ae61-a2ac888e8e04", "embedding": null, "metadata": {"date": "2023-04-11T15:45:19.608+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095374029122179174", "node_type": "4", "metadata": {"date": "2023-04-11T15:45:19.608+00:00"}, "hash": "f61ebc216f48212f6dc137046f188dda328c89f36e5b9765fd3745e27ca5b1b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00425b4e-42a4-4241-b725-f5a3484241a2", "node_type": "1", "metadata": {"date": "2023-04-11T12:25:39.815+00:00"}, "hash": "54cd0578a6ba452193cff4513eada5959f570e15e61c50b746ec7e2d955b1d4d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a24bf793-2b51-4a6d-8836-517c571ffab8", "node_type": "1", "metadata": {}, "hash": "bae6da680a20c8b22ab45a2cbe1c55d4781e8bd549837768befef681953e5775", "class_name": "RelatedNodeInfo"}}, "text": "themadcanudist:\nI have a question about the magic behind indexing and my strategy here. I'm just learning this stuff, so bear with me. I have a markdown document that is formatted with sections and headings that are topical. It's a best practices document. So, everything in it is about best practices. I've tried to ask the kapa ai, but I'm still unclear if it's sending me in the right direction \ud83d\ude09 An experienced human still seems more trustworthy.\n\nSo, I've used the Markdown loader and successfully ingested this document. I build a simplevector index. When I index.query() and ask it for best practices on X, I usually get a good set of context responses and the information that gpt extracts and synthesizes is decent.\n\nHowever, if I ask it a question like: \"Please provide me a summary of all of our best practices\".\n\nThe context that is returned to work with is just one sentence after the title and the resultant response is \"The document contains your best practices\" \ud83d\ude02 \n\nI feel like this is a indexing/embedding issue. How do you interpret the request and ensure that the context retrieved is the entire document for gpt to work with? Cosine distance based on words seems to be the wrong approach?\n\nIt's almost like there needs to be some metadata about the document that is associated with ALL the data being indexed in that particular doc that provides more context to it and gets consulted on an index.query()\n\nAm I making sense?\nLogan M:\nFor summaries, it's best to use a list index with response_mode=\"tree_summarize\" set in the query call. A list index will check every node which is what a summary should do\n\nThere is also a pre-made graph that will support both qa and summarize queries here https://github.com/jerryjliu/llama_index/blob/main/examples/composable_indices/QASummaryGraph.ipynb\nrui:\nI tried this notebook and seems like `from llama_index.composability.joint_qa_summary import QASummaryGraphBuilder` is outdated.\n\nwas this deprecated?\nLogan M:\nI see this exact path/file still exists in the repo. Do you have the latest version of llama_index installed?", "start_char_idx": 0, "end_char_idx": 2085, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a24bf793-2b51-4a6d-8836-517c571ffab8": {"__data__": {"id_": "a24bf793-2b51-4a6d-8836-517c571ffab8", "embedding": null, "metadata": {"date": "2023-04-11T16:43:15.882+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095388609672126524", "node_type": "4", "metadata": {"date": "2023-04-11T16:43:15.882+00:00"}, "hash": "9418c34e8fabceecd214b4af88b4588d24de7768cfc846a9a8f5b127baf23f30", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b10278f9-3b5e-4ba0-ae61-a2ac888e8e04", "node_type": "1", "metadata": {"date": "2023-04-11T15:45:19.608+00:00"}, "hash": "d1887e423609e8ffe8d2ef9323d2bf3532e545e86395ac1fa53529886b9000f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d0b9405b-367a-4999-87fd-501ef4df14bb", "node_type": "1", "metadata": {}, "hash": "e051d1d8b742cb5e3a3bdd397af9a3d3d21e86a5c0adcedcc9e354f8e6fb1748", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\noh you do not need to specify the llm for it to use davinci. Just leave the service context/llm predictor blank and it will default to DaVinci.\nSince yesterday this the fifth case. Hopefully it gets fixed soon.\noffskiies:\nohh thats good to know. Funnily enough the DaVinci one is working perfectly , just abit slow", "start_char_idx": 0, "end_char_idx": 325, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d0b9405b-367a-4999-87fd-501ef4df14bb": {"__data__": {"id_": "d0b9405b-367a-4999-87fd-501ef4df14bb", "embedding": null, "metadata": {"date": "2023-04-11T17:37:14.32+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095402192665583656", "node_type": "4", "metadata": {"date": "2023-04-11T17:37:14.32+00:00"}, "hash": "76381e69634fabbf9e645d6fda9d5bfe3edec1f9a2ade37685590b17f45fd90f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a24bf793-2b51-4a6d-8836-517c571ffab8", "node_type": "1", "metadata": {"date": "2023-04-11T16:43:15.882+00:00"}, "hash": "31e0b506d0575032792a1626b62e183c5ee6a6a3d406bbd592af104c254aa765", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91a0f10f-46c3-4128-a0a1-d61928046782", "node_type": "1", "metadata": {}, "hash": "4f5779670fdb0aa0634e44f89f4e760865ca950228abd56ef5f9524bcc9b3d94", "class_name": "RelatedNodeInfo"}}, "text": "BioHacker:\n@Logan M is the extra info variable in each node indexed? and can it be used when querying? For example can keywords be inputted there for retreival?\nLogan M:\nYea the extra info is used in the embeddings. So any keywords in there could help bias the embeddings", "start_char_idx": 0, "end_char_idx": 271, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91a0f10f-46c3-4128-a0a1-d61928046782": {"__data__": {"id_": "91a0f10f-46c3-4128-a0a1-d61928046782", "embedding": null, "metadata": {"date": "2023-04-11T19:18:38.296+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095427710710464543", "node_type": "4", "metadata": {"date": "2023-04-11T19:18:38.296+00:00"}, "hash": "8a0cb9c2a40cf29abba2688bd8b45f1d3e4f2533eb4a15af18e582c5865fe8bc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d0b9405b-367a-4999-87fd-501ef4df14bb", "node_type": "1", "metadata": {"date": "2023-04-11T17:37:14.32+00:00"}, "hash": "57955edb96e451ee72a36b1c21f6465c0a911371bd87e9d0fdf60427cc06d19e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83db2d37-6714-4c8e-b315-1f350d7853d8", "node_type": "1", "metadata": {}, "hash": "5fecadecbea23837f2b383edd814f0907b2ca47657792b0c1423d103566b822b", "class_name": "RelatedNodeInfo"}}, "text": "rui:\nhi @Logan M  I wonder if Llama allows custom splitting when loading documents and building index.\n\nRight now I see the directory loader basically loads each file as a document, but when I print out the source nodes after queyr, I found that its really cutting off many stuff and concatenating contents across different areas together.\n\nI was thinking of 2 approches. 1) load each page of a document as a `Document` instead, or 2) somehow use a custom splitter as in Langchain.\nLogan M:\nYea, under the hood it uses a very simple token splitter that splits documents into overlapping chunks.\n\nYou can definitely pre-split your documents any way you like. Or even create the node ojects ahead of time, there's a small example of doing that here \n\nhttps://gpt-index.readthedocs.io/en/latest/guides/primer/usage_pattern.html#parse-the-documents-into-nodes\nrui:\nawesome! I was wondering if there are Any best practices for choosing the appropriate node length? IMHO a larger window may adds too much noise yet a small window might lose context info/", "start_char_idx": 0, "end_char_idx": 1048, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83db2d37-6714-4c8e-b315-1f350d7853d8": {"__data__": {"id_": "83db2d37-6714-4c8e-b315-1f350d7853d8", "embedding": null, "metadata": {"date": "2023-04-11T19:44:32.394+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095434229069918350", "node_type": "4", "metadata": {"date": "2023-04-11T19:44:32.394+00:00"}, "hash": "e49206f0c67181f48ea0ae9d57376eedba2894e6a602e4006afbf0e86254fda4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91a0f10f-46c3-4128-a0a1-d61928046782", "node_type": "1", "metadata": {"date": "2023-04-11T19:18:38.296+00:00"}, "hash": "5130c127cf8690d7b2774387ac6d68fc7ef81dc7ac333636014153ca1320bcf1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60ab0005-e3ec-4dec-a93d-df9cd9e56a50", "node_type": "1", "metadata": {}, "hash": "f5560c746c74fae162f90405f67ffd554004d09bbbbbae0428e838ba5d8e7cb5", "class_name": "RelatedNodeInfo"}}, "text": "equious.eth:\nMorning, everyone. I'm looking to change the model that the package uses by default. Can anyone point me to the correct location?\nthomoliver:\nthink you want to change the underlying LLM, which you can read about in the docs here https://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_llms.html\nequious.eth:\nI must be stupid. Can you explain which file I'm editing? I think the class I'm editing is PromptHelper, but I'm unsure how to even open the file containing that class.", "start_char_idx": 0, "end_char_idx": 504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60ab0005-e3ec-4dec-a93d-df9cd9e56a50": {"__data__": {"id_": "60ab0005-e3ec-4dec-a93d-df9cd9e56a50", "embedding": null, "metadata": {"date": "2023-04-11T20:35:12.97+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095446982170001498", "node_type": "4", "metadata": {"date": "2023-04-11T20:35:12.97+00:00"}, "hash": "714079583d0b79683cd1e82c609f0e5699abfe1ee77c7b26cade021964e9fa81", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83db2d37-6714-4c8e-b315-1f350d7853d8", "node_type": "1", "metadata": {"date": "2023-04-11T19:44:32.394+00:00"}, "hash": "91313b3d8d3cd2da280cb82eefbb982d02928dd37a284a0504c0fa727998b400", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "037b47f1-13bf-4152-a6cc-d962a1d1ec66", "node_type": "1", "metadata": {}, "hash": "a225dac14bccf5759ce2b7a3ce1c6be61a6565e2e8e70b7f4eca985c6c54c23e", "class_name": "RelatedNodeInfo"}}, "text": "krishnan99:\nHi @Logan M! I was just wondering if there are any functionalities inside llama-index that iteratively outputs the reasoning (the prompt template with the input prompt), the subsequent answer and so on in an easy to read format?\nLogan M:\nThe closest you will get is parsing the output from llama logger.\n\nIf you call get logs after each query, you can see each prompt sent to openai and how that evolved over time\n\nSee the bottom of this notebook for an example of the llama loggerhttps://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/SimpleIndexDemo.ipynb\nkrishnan99:\nGreat Thanks!", "start_char_idx": 0, "end_char_idx": 615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "037b47f1-13bf-4152-a6cc-d962a1d1ec66": {"__data__": {"id_": "037b47f1-13bf-4152-a6cc-d962a1d1ec66", "embedding": null, "metadata": {"date": "2023-04-11T21:02:57.461+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095453963551260763", "node_type": "4", "metadata": {"date": "2023-04-11T21:02:57.461+00:00"}, "hash": "bc71d8b5287474f6fe8fb0371e956cde5ff7b6b205daac39c5053bddb0a6c1c6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60ab0005-e3ec-4dec-a93d-df9cd9e56a50", "node_type": "1", "metadata": {"date": "2023-04-11T20:35:12.97+00:00"}, "hash": "c2bda28bc9d6c86ea98219b92f25970970597b2552f27179d6496bf4398e4b92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2bbc81a7-f545-44ab-b24c-f9fc58758a16", "node_type": "1", "metadata": {}, "hash": "dcf48efa2c3977e5900dcc7aba8b6639a113035632905d9f4d16eec89e2fdff4", "class_name": "RelatedNodeInfo"}}, "text": "Qrow:\nHi @Logan M ! \n\nI'm looking to create an index that I can use on readthedocs / rst documentation; \n(e.g. for llama index itself : p).\n\nI don't see any examples that deal with code blocks in the docs. Crucial is that code blocks in the documentation is not split (or at least not losing meaning in the end).\n\nHave you or anyone else here have been able to create reliable indexes from code and any Llama Index components would you would most advise to use?\nLogan M:\nI haven't looked into creating an index from code. I've seen some people try and it usually requires pre-processing your documents into nodes to ensure it's not split. If it's python, I know langchain has a specific text splitter for python code \n\nI hope llama index has better support for code in the future \ud83d\ude4f\nQrow:\nThanks for the advice!", "start_char_idx": 0, "end_char_idx": 810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2bbc81a7-f545-44ab-b24c-f9fc58758a16": {"__data__": {"id_": "2bbc81a7-f545-44ab-b24c-f9fc58758a16", "embedding": null, "metadata": {"date": "2023-04-11T21:11:13.289+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095456043204624394", "node_type": "4", "metadata": {"date": "2023-04-11T21:11:13.289+00:00"}, "hash": "4aa34a4df4b40ae9985ccfc3a0b701c304604c3f1f64bc8c7e0c467286f0c5dc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "037b47f1-13bf-4152-a6cc-d962a1d1ec66", "node_type": "1", "metadata": {"date": "2023-04-11T21:02:57.461+00:00"}, "hash": "659ac98da9623c6a0c75e09b0a560e3e24a38eeeaf2fcb03ef8eacbe0ecec4ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "203826cd-3009-4583-b166-93fcaa0fd0b8", "node_type": "1", "metadata": {}, "hash": "e9aae7becef6c0e7527e1218f36eda0d9759b0bf3b8404905983e6fee14bd20f", "class_name": "RelatedNodeInfo"}}, "text": "Zee:\ne.g. I make an index about Physics and if I ask for information on American politics it won't answer it\nLogan M:\nIt should already be pretty restricted when answering. You can try modifying the prompt templates and give it more verbose instructions (see the bottom of the FAQ doc in the pinned messages)", "start_char_idx": 0, "end_char_idx": 308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "203826cd-3009-4583-b166-93fcaa0fd0b8": {"__data__": {"id_": "203826cd-3009-4583-b166-93fcaa0fd0b8", "embedding": null, "metadata": {"date": "2023-04-11T21:15:01.565+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095457000663568474", "node_type": "4", "metadata": {"date": "2023-04-11T21:15:01.565+00:00"}, "hash": "ef4da44b4d55615b2bef051340b9424cde030c26e533e962d325c3a879e14f49", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2bbc81a7-f545-44ab-b24c-f9fc58758a16", "node_type": "1", "metadata": {"date": "2023-04-11T21:11:13.289+00:00"}, "hash": "32d22301097bf1589c3c57b3626f3839d583a07f7e1bc08ca38611a60e022a98", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20d95ffe-ba54-4593-9eb5-159c144f339a", "node_type": "1", "metadata": {}, "hash": "594c213fbc9f53b84076b0a77ef32b66731acdf2e2e671082f2b6b224f0b2256", "class_name": "RelatedNodeInfo"}}, "text": "Zee:\nI am trying to make a Physics knowledge base aimed at a specific academic level. I passed a collection of PDFs into it all centred around Physics, however when I query it it can answer anything... even if its not even remotely related!\nLogan M:\nI guess the model is just really eager to talk about physics lol. Yea look into the prompt template thing, more verbose instructions should help", "start_char_idx": 0, "end_char_idx": 394, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20d95ffe-ba54-4593-9eb5-159c144f339a": {"__data__": {"id_": "20d95ffe-ba54-4593-9eb5-159c144f339a", "embedding": null, "metadata": {"date": "2023-04-11T21:59:37.443+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095468224109367437", "node_type": "4", "metadata": {"date": "2023-04-11T21:59:37.443+00:00"}, "hash": "c64d6bd74e443b76a094cd39c865f040610b5ca123941f387378f15f8ee3a63e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "203826cd-3009-4583-b166-93fcaa0fd0b8", "node_type": "1", "metadata": {"date": "2023-04-11T21:15:01.565+00:00"}, "hash": "47c8674e0933bd3fcea08e0534828fbfd34b2849dd8a0ca08c45897e3a959397", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b995fe7-9f88-47f9-8950-c675fcfebb82", "node_type": "1", "metadata": {}, "hash": "ddb3777ad7173f6fcc380aa4870e64fb4bf2f8cf66da3125bc43c79558e0af8d", "class_name": "RelatedNodeInfo"}}, "text": "Zee:\nSo, just checking, is it normal for a query on an index about Physics to be able answer the question 'What is American Politics?\". Do I just make a verbose prompt to disallow such queries.\nLogan M:\nNormally, the model should be following the instructions in the default prompt template. But it doesn't always listen (and is hallucinating an answer in your case - a commonish issue in general with llms)\n\nAre you using openAI? You might find better results using text-davinci-003 (the default model) compared to gpt-3.5-turbo", "start_char_idx": 0, "end_char_idx": 529, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b995fe7-9f88-47f9-8950-c675fcfebb82": {"__data__": {"id_": "8b995fe7-9f88-47f9-8950-c675fcfebb82", "embedding": null, "metadata": {"date": "2023-04-11T23:44:29.967+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095494616867930223", "node_type": "4", "metadata": {"date": "2023-04-11T23:44:29.967+00:00"}, "hash": "84c4c96f53b7c76a8ba6562bbba903082ab03de3ca9d74f76c4b1022d4b7ca89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20d95ffe-ba54-4593-9eb5-159c144f339a", "node_type": "1", "metadata": {"date": "2023-04-11T21:59:37.443+00:00"}, "hash": "828818ca90f2a7d2688ba0ef1d20f69e024f95f3c50c1b75d638ef3beaed045b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c4861e0-9bab-4580-9488-79ce0cb082d3", "node_type": "1", "metadata": {}, "hash": "61b3d45d2902044c32a0fea54db022078de6d8f0d27616012f8ea2be1fb198b4", "class_name": "RelatedNodeInfo"}}, "text": "migueldejesus:\nHello everyone, hope you're doing great. I need your help with this. Thanks.\nLogan M:\nAre you loading an index saved from an earlier version? Is it possible to recreate the index?\nmigueldejesus:\nYes, I'm loading an index saved from an earlier version. Is it possible to use this same index? I can recreate the index but I think it will cost a lot of OpenAI tokens.\nLogan M:\nI saw one other person have this issue... not sure what the cause is.\n\nFor now, maybe downgrade your llama index version a bit? (Also, If your graph is mostly vector indices, at embeddings are cheap to calculate)\nmigueldejesus:\nI'll try with downgrade llama index version. Thanks for your help.", "start_char_idx": 0, "end_char_idx": 683, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c4861e0-9bab-4580-9488-79ce0cb082d3": {"__data__": {"id_": "2c4861e0-9bab-4580-9488-79ce0cb082d3", "embedding": null, "metadata": {"date": "2023-04-12T01:43:09.25+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095524477305094184", "node_type": "4", "metadata": {"date": "2023-04-12T01:43:09.25+00:00"}, "hash": "272537b578f6debcc8ea3ca2d66b9f0be402b7e1021857b7cd974fc7183432e4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b995fe7-9f88-47f9-8950-c675fcfebb82", "node_type": "1", "metadata": {"date": "2023-04-11T23:44:29.967+00:00"}, "hash": "722821f77c98c257b0b5f68cf34a60e7c43a6931f1109df41effeb68d472f71d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "defe5a4a-60c3-4943-849c-9d2f24f5129b", "node_type": "1", "metadata": {}, "hash": "b7733530bf697551b2eddbfe6b8bf0ab0e8e98535814546a9b621c7e87ba4c52", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI built an index for a transcript that is 20 minutes long and whenever I query it, it only brings up things that were said up to around 30 seconds in the transcript. Is this caused by the warning message I got above ^?\nLogan M:\nI think it's less about the warning and probably more about what you set similarity_top_k to (assuming you are using a vector index)\n\nI've seen that warning before and tbh I have no idea where it comes from lol\npaulo:\nOh interesting thank you. Yes I'm using a vector index. Does the `similarity_top_k` argument control the # of relevant findings to be returned?\nLogan M:\nYup! By default, it is one.\n\nIf you increase it, you might also want to set `response_mode=\"compact\"`, and also maybe tweak the chunk size.\n\nBoth of those settings will help offset any increase in runtime that come with increasing the top k\npaulo:\nThanks! Where would I tweak the chunk size? \n\nAlso I can tell that when I run the query, the response gets cut off (I'm assuming this is something to do with the max number of tokens it's allowed to use?)\u2014\u00a0how would I go about solving this?", "start_char_idx": 0, "end_char_idx": 1094, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "defe5a4a-60c3-4943-849c-9d2f24f5129b": {"__data__": {"id_": "defe5a4a-60c3-4943-849c-9d2f24f5129b", "embedding": null, "metadata": {"date": "2023-04-12T03:05:16.061+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095545141848187042", "node_type": "4", "metadata": {"date": "2023-04-12T03:05:16.061+00:00"}, "hash": "a5083cc07b73f850eacda4750d50aa1f27fd9930bcff3cab898b19cd6726b7f2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c4861e0-9bab-4580-9488-79ce0cb082d3", "node_type": "1", "metadata": {"date": "2023-04-12T01:43:09.25+00:00"}, "hash": "b6c89451d64e288b4c6e57a02a0e6cdb5aa23c4369df2d93e9890aee53029c79", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c880b5b-7e47-4d5f-bff4-b5f7af537526", "node_type": "1", "metadata": {}, "hash": "f7994de79b501fbe449db54f33c9260a86ff4fa06afe72b0a568e0ea4e7bf0b1", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI\u2019m sending a query to GPT-3 to produce a JSON object, and it does that successfully. However, I found it to be pretty costly. I was wondering if the chatgpt api can produce a similar result (JSON object) since it\u2019s much cheaper?\nLLYX:\nYes, you can definitely instruct gpt-3.5 to return a well formed JSON object, I also use a Pydantic parser from langchain to make sure the return is well formed, though sometimes it might mess up (in my custom function I do a few retries, and that works maybe 95% of the time)", "start_char_idx": 0, "end_char_idx": 519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c880b5b-7e47-4d5f-bff4-b5f7af537526": {"__data__": {"id_": "4c880b5b-7e47-4d5f-bff4-b5f7af537526", "embedding": null, "metadata": {"date": "2023-04-12T16:47:30.776+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095752066640642059", "node_type": "4", "metadata": {"date": "2023-04-12T16:47:30.776+00:00"}, "hash": "2716ace2c97129525acadbc53c13313a17a905344bcd6024821093abc81098a5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "defe5a4a-60c3-4943-849c-9d2f24f5129b", "node_type": "1", "metadata": {"date": "2023-04-12T03:05:16.061+00:00"}, "hash": "c849369beb741b88e6087ed7e4313f26c07a6dcaf4164e0230ac95971055a8ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6698be22-ed69-49a8-851f-32998d95754c", "node_type": "1", "metadata": {}, "hash": "d8baef66981494d6a80179f95a12d461ef543ad7cc5ed5ca4f6b4bc93719cef4", "class_name": "RelatedNodeInfo"}}, "text": "cincy:\n@Logan M Hi, I'm using Langchain SQLDatabase to wrap with actual SQL database connection, but creating SQLDatabase object takes long time, over 2m sometimes. Is there any way to make it faster? Seems only creating SQLDatabase object takes a long time. Without creating this object, just create SQLAlchemy engine to connect to db is really fast. Why creating Langchain SQLDatabase object takes such a long time? Is there any way to faster it?\nLogan M:\nI'm really not sure why it takes so long. This is the source code for the class: https://github.com/jerryjliu/llama_index/blob/main/gpt_index/langchain_helpers/sql_wrapper.py#L9", "start_char_idx": 0, "end_char_idx": 635, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6698be22-ed69-49a8-851f-32998d95754c": {"__data__": {"id_": "6698be22-ed69-49a8-851f-32998d95754c", "embedding": null, "metadata": {"date": "2023-04-12T16:54:32.995+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095753837555486811", "node_type": "4", "metadata": {"date": "2023-04-12T16:54:32.995+00:00"}, "hash": "17c98f7d7f2ae322c173198143b1d3d1ac6c60cfeddb3f57f06600e0e03455dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c880b5b-7e47-4d5f-bff4-b5f7af537526", "node_type": "1", "metadata": {"date": "2023-04-12T16:47:30.776+00:00"}, "hash": "2c400935a34d2406b6b4018f8a935d412b9e14437f1fd2dadb797a5bf1f60794", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3f0daee-f9de-42ef-afa8-84c04c87b87d", "node_type": "1", "metadata": {}, "hash": "94ecb0b9b9e4f6838641963687a4d4466f905d5779192f9c86dfa08362223c7b", "class_name": "RelatedNodeInfo"}}, "text": "cincy:\n@Logan M  So is there any way to fasten it? Or not using this wrapper, but jus use normal sql connection using sql alchemy when creating sql index?\nLogan M:\nBut you need this wrapper to use the sql index right? It doesn't look like there's an obvious way to speed it up. Maybe calling reflect() or bind() is calling a long time? I'm not very familiar with why those are needed \ud83d\ude05", "start_char_idx": 0, "end_char_idx": 385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3f0daee-f9de-42ef-afa8-84c04c87b87d": {"__data__": {"id_": "c3f0daee-f9de-42ef-afa8-84c04c87b87d", "embedding": null, "metadata": {"date": "2023-04-12T17:00:35.405+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095755357613199510", "node_type": "4", "metadata": {"date": "2023-04-12T17:00:35.405+00:00"}, "hash": "6f4e3467e22c477f7088c355d1cdd40ca0675421fd883fdaddf82b583d9b6f72", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6698be22-ed69-49a8-851f-32998d95754c", "node_type": "1", "metadata": {"date": "2023-04-12T16:54:32.995+00:00"}, "hash": "1dcf5642f876efc48a6c1bef5205901fc26b77ff80b786bc746c03fbe141b233", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c088087b-6a71-4be9-9f91-3f41a3affefa", "node_type": "1", "metadata": {}, "hash": "3b9adfc484c7465e76f254c36506eb6ce5960dbaa3d052e9d3c56788ba1cc484", "class_name": "RelatedNodeInfo"}}, "text": "cincy:\n@Logan M Thanks! Do you know if anyone else who can help for this?\nLogan M:\n@jerryjliu98 or @disiok might have an idea. But I would open a github issue to track this as well!", "start_char_idx": 0, "end_char_idx": 181, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c088087b-6a71-4be9-9f91-3f41a3affefa": {"__data__": {"id_": "c088087b-6a71-4be9-9f91-3f41a3affefa", "embedding": null, "metadata": {"date": "2023-04-12T17:09:12.897+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095757528131977316", "node_type": "4", "metadata": {"date": "2023-04-12T17:09:12.897+00:00"}, "hash": "0752118d3f191c42cc363d308dc84897887a2bc0858fa3e4661595340a73560e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3f0daee-f9de-42ef-afa8-84c04c87b87d", "node_type": "1", "metadata": {"date": "2023-04-12T17:00:35.405+00:00"}, "hash": "61b0b8e6ad09d797fd8480464fc2dbac779fd498c1666d9468c5f5a54ad28362", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e54ac9d-a900-4af3-8387-48185e1a9f7c", "node_type": "1", "metadata": {}, "hash": "9dff31a519f52918bfe29ca4d0ac98fc95f1e88493d009cf9d8f54dd7c24fe17", "class_name": "RelatedNodeInfo"}}, "text": "conic:\nUsing ComposableGraph index, what if... two List Indices happen to have the information needed to answer a query, will one be ignored??\nLLYX:\ndepends, if you set child branch factor high enough you could get both\nconic:\nWhat would be the drawback of just setting the child branch factor to 9999 or something?\nLLYX:\nIt'll take forever to run and cost you a shit ton of credits if you're using OpenAI", "start_char_idx": 0, "end_char_idx": 405, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e54ac9d-a900-4af3-8387-48185e1a9f7c": {"__data__": {"id_": "9e54ac9d-a900-4af3-8387-48185e1a9f7c", "embedding": null, "metadata": {"date": "2023-04-12T17:11:42.251+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095758154568060959", "node_type": "4", "metadata": {"date": "2023-04-12T17:11:42.251+00:00"}, "hash": "db3f6bc334ee520be38c9d1f3cdf488878fc00bec9f522be1b453076f41fef8d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c088087b-6a71-4be9-9f91-3f41a3affefa", "node_type": "1", "metadata": {"date": "2023-04-12T17:09:12.897+00:00"}, "hash": "fcacf5176a97e156506d1efef4b2755928ea15bfb4c02944e2ac9c0a376b5199", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d10f3695-7eb7-4e64-ac38-51b95def3b9c", "node_type": "1", "metadata": {}, "hash": "55561718a940b8f985d5c9e953e3522a8bd4e7b4312e1eb9637fea47df746191", "class_name": "RelatedNodeInfo"}}, "text": "conic:\nThere's that\nLLYX:\nunless you only have 2 indices, but then it would just always select both", "start_char_idx": 0, "end_char_idx": 99, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d10f3695-7eb7-4e64-ac38-51b95def3b9c": {"__data__": {"id_": "d10f3695-7eb7-4e64-ac38-51b95def3b9c", "embedding": null, "metadata": {"date": "2023-04-12T17:12:03.761+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095758244787535932", "node_type": "4", "metadata": {"date": "2023-04-12T17:12:03.761+00:00"}, "hash": "b94ceefb978630b2cbf3b2dd40f04d59651993d98528b16cca90c210cff8d395", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e54ac9d-a900-4af3-8387-48185e1a9f7c", "node_type": "1", "metadata": {"date": "2023-04-12T17:11:42.251+00:00"}, "hash": "aa0688cfc3fc1080594bc12c557df9b0a9beffb0319bddedfeee34a0c655a5f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53e0adfd-5597-4204-9f6d-992ebb44f526", "node_type": "1", "metadata": {}, "hash": "84ae65d5489d031c282b50a054383b644be4119638fcc962dbbc9cbf9032ee75", "class_name": "RelatedNodeInfo"}}, "text": "conic:\nok that makes sense\nLLYX:\nbasically the composable graph just goes through all your summaries and picks the top {number of branches you specified} that might be likely", "start_char_idx": 0, "end_char_idx": 174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53e0adfd-5597-4204-9f6d-992ebb44f526": {"__data__": {"id_": "53e0adfd-5597-4204-9f6d-992ebb44f526", "embedding": null, "metadata": {"date": "2023-04-12T21:28:58.979+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095822900898050171", "node_type": "4", "metadata": {"date": "2023-04-12T21:28:58.979+00:00"}, "hash": "ab294a3cf7a50da1aac5dbf737509a1c0111a88f5d0ef26d36557a21c5637def", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d10f3695-7eb7-4e64-ac38-51b95def3b9c", "node_type": "1", "metadata": {"date": "2023-04-12T17:12:03.761+00:00"}, "hash": "576f9a5f7a1389c62be661fec51f63fbc9f58e06f10f883daf6014e77e5b447c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "61520052-1b60-49a4-aa79-a5d15039a4e9", "node_type": "1", "metadata": {}, "hash": "43f33be16db7cee30722f125d31ca7da0b4f6d7caf32815ceb9056612c506d25", "class_name": "RelatedNodeInfo"}}, "text": "conic:\nWhat happens when a returned node-score is none?   \n\n```python\nfor n in response.source_nodes:\n    print(n.score)\n```\n\na few of these are `None`\nconic:\nyeah right?", "start_char_idx": 0, "end_char_idx": 170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "61520052-1b60-49a4-aa79-a5d15039a4e9": {"__data__": {"id_": "61520052-1b60-49a4-aa79-a5d15039a4e9", "embedding": null, "metadata": {"date": "2023-04-12T22:49:25.735+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095843145780056145", "node_type": "4", "metadata": {"date": "2023-04-12T22:49:25.735+00:00"}, "hash": "0450706a8309bd171ef14cb39b81c448b1c30ca3ad75af5947e9b049429ffda7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53e0adfd-5597-4204-9f6d-992ebb44f526", "node_type": "1", "metadata": {"date": "2023-04-12T21:28:58.979+00:00"}, "hash": "59fc430d6b008707f9a6715f6ebe946cdc309bdec2575f21a839e9e5ff50b5ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6178d4eb-7b45-4e45-97d3-bb85e0ece32e", "node_type": "1", "metadata": {}, "hash": "d0ab8a0410718431e5748a5eedf237ea8d844fcc7edd0e6f0a344c9ef78b1095", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nHey does anyone know how to solve this?  I've used the prompt helper and service context but it didn't resolve it.\n\n`INFO:openai:error_code=context_length_exceeded error_message=\"This model's maximum context length is 4097 tokens. However, you requested 4137 tokens (3109 in the messages, 1028 in the completion). Please reduce the length of the messages or completion.\" error_param=messages error_type=invalid_request_error message='OpenAI API error received' stream_error=False`\nLogan M:\n(If anyone else was curious, pretty sure the solution here is setting the chunk size limit, since num_output is now very large)", "start_char_idx": 0, "end_char_idx": 624, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6178d4eb-7b45-4e45-97d3-bb85e0ece32e": {"__data__": {"id_": "6178d4eb-7b45-4e45-97d3-bb85e0ece32e", "embedding": null, "metadata": {"date": "2023-04-12T23:17:49.871+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095850293444477008", "node_type": "4", "metadata": {"date": "2023-04-12T23:17:49.871+00:00"}, "hash": "6e2586f2fd7651c76e1eafaac3b0b8277847ba7baa35d5efb31cbd57cbde59c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "61520052-1b60-49a4-aa79-a5d15039a4e9", "node_type": "1", "metadata": {"date": "2023-04-12T22:49:25.735+00:00"}, "hash": "f63d58ff56baaacb1b1b02b5daf18dfdc822c4182c7ca2f16f4e72ba3dc741fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "73cd57cb-23c9-4945-bed3-91eebc6cd22a", "node_type": "1", "metadata": {}, "hash": "40cb5a72d97af0db0ab07895e6481cfbc55c244e6d9078dc2285bf7c9cd26038", "class_name": "RelatedNodeInfo"}}, "text": "DonRucastle:\nAnyone got insight on how to avoid hitting the 50mb limit on Vercel? Never launched there before but currently failing deployment due to the inital serverless functioning having a size of 58mb.\ndecentralizer:\nwe had the same issue. we are using heroku now", "start_char_idx": 0, "end_char_idx": 268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "73cd57cb-23c9-4945-bed3-91eebc6cd22a": {"__data__": {"id_": "73cd57cb-23c9-4945-bed3-91eebc6cd22a", "embedding": null, "metadata": {"date": "2023-04-13T01:07:40.305+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095877935728169061", "node_type": "4", "metadata": {"date": "2023-04-13T01:07:40.305+00:00"}, "hash": "fe352c6ac2b72ca3fc00cd84ae007f5a26045246854723eadc746c4abe372580", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6178d4eb-7b45-4e45-97d3-bb85e0ece32e", "node_type": "1", "metadata": {"date": "2023-04-12T23:17:49.871+00:00"}, "hash": "8b130937ea3c4bcea978ea42cd777d236ad223455c3b8a586b1accd2d6f252cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cec70050-f129-4d87-91e8-0a13602e73b8", "node_type": "1", "metadata": {}, "hash": "7074b8d67f7b4e84b65e5f235cd66d7652c9587e85ab76c71a5c63eaaac9b999", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\nHi everyone, i have a problem, i got a simple script that create an index.json file with GTPSimpleVectorIndex.from_documents(...)\nAnd then i call GPTsimpleVectorIndex.load_from_disk(...) And index.query(...) on that json to have a response. Now, if i do it through the terminal it works perfectly, but I need to run this script from my laravel web application, and when I do it, I have tried every possible way to run a python script from php, the following error pops up, can someone please hel me???\nThe weirder thing is that the error is a \"IsADirectoryError\" on the working folder, \"public\" but I do not pass that path anywhere in the whole code\nLogan M:\nI can't help with the PHP stuff, but I can tell you you will probably have a smoother experience if you set up a python api server instead (flask, fastapi) \ud83d\ude05", "start_char_idx": 0, "end_char_idx": 827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cec70050-f129-4d87-91e8-0a13602e73b8": {"__data__": {"id_": "cec70050-f129-4d87-91e8-0a13602e73b8", "embedding": null, "metadata": {"date": "2023-04-13T04:00:11.644+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095921352390754425", "node_type": "4", "metadata": {"date": "2023-04-13T04:00:11.644+00:00"}, "hash": "c758fc7e3d5b765d8a5fd23f0773f102b6930f86263c0a7252718f90944f50a4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "73cd57cb-23c9-4945-bed3-91eebc6cd22a", "node_type": "1", "metadata": {"date": "2023-04-13T01:07:40.305+00:00"}, "hash": "0d6cce8113a446130f63389d64a1a0b719bf7163b7a70c23696a08316f60a628", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25897e8f-757a-4d06-8b4e-fcdf29778318", "node_type": "1", "metadata": {}, "hash": "a64ede50e3797ffaf88fc9bf7ab458d9a3829b50a80610aae14f62a7480f0129", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI\u2019m currently using GPTSimpleVectorIndex to discover findings from a single document. If I want to make a query against ALL of those documents to find common patterns among all of them, would GPTSimpleVectorIndex still work well for this?\nLogan M:\nmaaaaybe, but you might need a large `similarity_top_k` value. And possibly also use `response_mode=\"tree_summarize\"`\n\nThere is a pre-made composable index that handles general QA and summarization focused queries at the same time, you might be interested \ud83d\ude4f  https://github.com/jerryjliu/llama_index/blob/main/examples/composable_indices/QASummaryGraph.ipynb", "start_char_idx": 0, "end_char_idx": 613, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25897e8f-757a-4d06-8b4e-fcdf29778318": {"__data__": {"id_": "25897e8f-757a-4d06-8b4e-fcdf29778318", "embedding": null, "metadata": {"date": "2023-04-13T07:29:15.416+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095973964783812668", "node_type": "4", "metadata": {"date": "2023-04-13T07:29:15.416+00:00"}, "hash": "5c47148d022d7835a5b7952071091d60ea65eaa60e87aa712db07871730b3f16", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cec70050-f129-4d87-91e8-0a13602e73b8", "node_type": "1", "metadata": {"date": "2023-04-13T04:00:11.644+00:00"}, "hash": "4d5ed6315b5dd54c50dc9ed0ce6f56152dc1a5b4f29915a6466d2871c177561e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "634536f8-c5bc-443d-a2c3-d5c599a8bfbd", "node_type": "1", "metadata": {}, "hash": "f380ac3a18ffc57758802f8299a5111623265e19cd58f9fedb503c2143d30781", "class_name": "RelatedNodeInfo"}}, "text": "Greg Tanaka:\nHas anyone figured out how to do custom prompts with  ComposableGraph.query()?\nLLYX:\nPass in query configs, you can replace the prompt templates there", "start_char_idx": 0, "end_char_idx": 163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "634536f8-c5bc-443d-a2c3-d5c599a8bfbd": {"__data__": {"id_": "634536f8-c5bc-443d-a2c3-d5c599a8bfbd", "embedding": null, "metadata": {"date": "2023-04-13T07:36:05.702+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1095975685648023683", "node_type": "4", "metadata": {"date": "2023-04-13T07:36:05.702+00:00"}, "hash": "07b9c1646730e19a1b130c5074301a1b349bc9efb64063f1d6ee2bd53e872a67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25897e8f-757a-4d06-8b4e-fcdf29778318", "node_type": "1", "metadata": {"date": "2023-04-13T07:29:15.416+00:00"}, "hash": "9f88fd411998671c40275852111d4b29b2fedfa31a67e5ae72a51b965f0f7136", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cca8668c-6225-490e-bbd5-5bd22d482c68", "node_type": "1", "metadata": {}, "hash": "0622ebfb70711a9ddbdd11b908ec4ca87e6096db75be94bd6f2c1f68cec04654", "class_name": "RelatedNodeInfo"}}, "text": "wangjunjie:\n@Logan MI have converted the document type into a json vector file, if I want to query some questions in multiple json vector files, what should I do?\nHow to use the index collection to search, the code is as follows, I need to query the document content in the two json vectors\u3002thanks\nDonRucastle:\nDepending on your setup, you will likely want to summarise both those indexes into an overarching index. If summarised content is okay, then simply feed the top index for context with the prompt. Otherwise for more detailed responses have a look at routing through the tree to the sub-indexes.", "start_char_idx": 0, "end_char_idx": 604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cca8668c-6225-490e-bbd5-5bd22d482c68": {"__data__": {"id_": "cca8668c-6225-490e-bbd5-5bd22d482c68", "embedding": null, "metadata": {"date": "2023-04-13T10:08:16.164+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096013981581328405", "node_type": "4", "metadata": {"date": "2023-04-13T10:08:16.164+00:00"}, "hash": "d1431869cbf5aa92ad254506e44c7fe55d36587611854af85524dd964328d858", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "634536f8-c5bc-443d-a2c3-d5c599a8bfbd", "node_type": "1", "metadata": {"date": "2023-04-13T07:36:05.702+00:00"}, "hash": "0ec76e37b33c2a5c1b1e139c981dfff3f6212408631e30ad7b80917c77451a49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b8985f02-7491-431d-8af8-09496c73b1ba", "node_type": "1", "metadata": {}, "hash": "54f7f97bd74d3d9db3c1c50d8baffbd71125f89d663d5a6aa3652cb2b8a69c51", "class_name": "RelatedNodeInfo"}}, "text": "kawami:\nWhen I was building an index from a 4MB file, I received an error from OpenAI , \"You have exceeded your current quota\". I want to know how I can build the index locally\nrahoof:\nyour OpenApi plan may be expired, check usage dashboard in https://platform.openai.com/account/usage\nkawami:\nThis is a new OpenApi account, building the index needs OpenApi api? it's not locally?", "start_char_idx": 0, "end_char_idx": 380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8985f02-7491-431d-8af8-09496c73b1ba": {"__data__": {"id_": "b8985f02-7491-431d-8af8-09496c73b1ba", "embedding": null, "metadata": {"date": "2023-04-13T14:48:04.979+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096084398975230104", "node_type": "4", "metadata": {"date": "2023-04-13T14:48:04.979+00:00"}, "hash": "66829dfa79087b1c5dc4550a5e4cc51b63d8ac45f3e1ac3da130e2bc51da72b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cca8668c-6225-490e-bbd5-5bd22d482c68", "node_type": "1", "metadata": {"date": "2023-04-13T10:08:16.164+00:00"}, "hash": "3e8dc49b319a941ba7e94fb68babcd6ea8d5627cb35ee2de7152c9a0faf2dc7b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba56cf17-c471-426f-b550-731fab9c5476", "node_type": "1", "metadata": {}, "hash": "0fc9a5af88ef9193df142559789f8b2d5027c6f51366e12aa55317d6f239c588", "class_name": "RelatedNodeInfo"}}, "text": "Markos:\nHello everyone. I was trying langchain integration with llama index. But, it looks like it is not responding, I assume because of the token limit. After all, it takes the document chunk, the query, the prompts and now the memory of its previous conversation. Before moving forward, I want to know if someone has tried it and worked.\nLogan M:\nThe memory of the langchain agent is not connected to anything inside of llama index, only the question the agent asks and the response it receives from llama index.", "start_char_idx": 0, "end_char_idx": 515, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba56cf17-c471-426f-b550-731fab9c5476": {"__data__": {"id_": "ba56cf17-c471-426f-b550-731fab9c5476", "embedding": null, "metadata": {"date": "2023-04-13T15:01:47.706+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096087849742377042", "node_type": "4", "metadata": {"date": "2023-04-13T15:01:47.706+00:00"}, "hash": "e22e8973257830f8ec4c67f23dcf4fb47a6aaf9fc63b0c6c2366c90d4c3aed15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b8985f02-7491-431d-8af8-09496c73b1ba", "node_type": "1", "metadata": {"date": "2023-04-13T14:48:04.979+00:00"}, "hash": "167b0f9217c89782c97e2a6978456281227683bde516ef5b2acb59ba5c345493", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8742a08e-2a40-4159-ba89-6df5f910b4c5", "node_type": "1", "metadata": {}, "hash": "4a458ba1606e597980686de31b50c34dc254b4684d22a2ba647a3b7b1934aceb", "class_name": "RelatedNodeInfo"}}, "text": "ravitheja:\n`ImportError: cannot import name 'RequestsWrapper' from 'langchain.utilities' (/opt/conda/envs/py38_env/lib/python3.8/site-packages/langchain/utilities/__init__.py)`\n\nGetting this error while importing SimpleDirectoryReader\nLogan M:\nDowngrade a langchain version for now. Looks like they moved/renamed  the import https://github.com/hwchase17/langchain/commit/fe1eb8ca5f57fcd7c566adfc01fa1266349b72f3", "start_char_idx": 0, "end_char_idx": 411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8742a08e-2a40-4159-ba89-6df5f910b4c5": {"__data__": {"id_": "8742a08e-2a40-4159-ba89-6df5f910b4c5", "embedding": null, "metadata": {"date": "2023-04-13T17:06:35.827+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096119257198243972", "node_type": "4", "metadata": {"date": "2023-04-13T17:06:35.827+00:00"}, "hash": "7134410a7959bcbcfbc8f11efcb30c9ac1bcf05bdd959bf3f34a7a5a976185b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba56cf17-c471-426f-b550-731fab9c5476", "node_type": "1", "metadata": {"date": "2023-04-13T15:01:47.706+00:00"}, "hash": "9bf96f3b6b54f9490661a40367b97917c0656b4a6368244c64702a96c7a6e193", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0fdfc48a-f91c-4a13-83cb-63ff9e2b96e9", "node_type": "1", "metadata": {}, "hash": "87cc8ca90f0c8f3b6db6435cad091ca95e03e6d88f54dbaa75fcd67894431827", "class_name": "RelatedNodeInfo"}}, "text": "bmax:\n```\n    extra_prompt = self.data[\"prompt\"] if \"prompt\" in self.data else \"\"\n\n    prompt = f\"\"\"Write three concise summaries, make sure each of them are unique. {extra_prompt} \\n Make sure the length of each summary is no longer than 4 sentences. Return the format in a JSON Object {{\"summaries\": [\"Summary 1\", \"Summary 2\", \"Summary 3\"]}}:\"\"\"\n\n    queryBundle = QueryBundle(prompt, [\"Write it as an exciting podcast description\", \"Act as an Copywriter\", \"Try to include all topics\", \"No longer than 200 tokens\"])\n    response =  self.index.query(queryBundle)\n```\n\nSomething like this?\nLogan M:\nLooking at the source code, that list you passed into the query bundle is being used to generate the query embeddings (probably not what you intended?)\n\nAlso, you probably want to increase `similarity_top_k` in the query (default is 1, so it will.only be summarizing one node)\n\nYou might also want `response_mode=\"tree_summarize\"` in the query call too", "start_char_idx": 0, "end_char_idx": 951, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fdfc48a-f91c-4a13-83cb-63ff9e2b96e9": {"__data__": {"id_": "0fdfc48a-f91c-4a13-83cb-63ff9e2b96e9", "embedding": null, "metadata": {"date": "2023-04-13T17:22:39.039+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096123297202176173", "node_type": "4", "metadata": {"date": "2023-04-13T17:22:39.039+00:00"}, "hash": "8d6fc980e9f39414e3dc4fd5ebdfe4a03feafd2b9416188feff258ecec526749", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8742a08e-2a40-4159-ba89-6df5f910b4c5", "node_type": "1", "metadata": {"date": "2023-04-13T17:06:35.827+00:00"}, "hash": "22c6d983bb4c8fe7774a8506a6d538487f24cfd4ccea16b3ae99ca5706ee7c6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b417734-a13c-4b07-a8ba-33fb48809154", "node_type": "1", "metadata": {}, "hash": "bba72b43d98a39188355ff408a6cbfff87696df41fa043797e822d9dac4f6571", "class_name": "RelatedNodeInfo"}}, "text": "kittenkill:\nHi all. im trying the Whatsapp loader, and noticed it created a document for each chat-line. So llamaindex is sending requests to openai for each line for embedding (SimpleVectorIndex). How could I make llamaindex group documents together, so it can stick N messages into 1 openai call?  kind of the reverse than chunking\nLogan M:\nTry adding response_mode=\"compact\" to your query call (in addition to increasing similarity_top_k in the query call)", "start_char_idx": 0, "end_char_idx": 459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b417734-a13c-4b07-a8ba-33fb48809154": {"__data__": {"id_": "7b417734-a13c-4b07-a8ba-33fb48809154", "embedding": null, "metadata": {"date": "2023-04-13T17:26:55.555+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096124373108261005", "node_type": "4", "metadata": {"date": "2023-04-13T17:26:55.555+00:00"}, "hash": "344dd65aa9095adf038dc5b995ab70b0d5e8c2be79b081889df4772b7729c192", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0fdfc48a-f91c-4a13-83cb-63ff9e2b96e9", "node_type": "1", "metadata": {"date": "2023-04-13T17:22:39.039+00:00"}, "hash": "5d985d03174707c0d7692fef27280f91539e558da7911d544d65dbe5b80b0c59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8cef5eb4-ca82-4fc3-98d1-a76397b89b54", "node_type": "1", "metadata": {}, "hash": "0d56293fb66ea1750b7a585c4c1c72cfe4caf790f66a5106e3fc7a625a64a95a", "class_name": "RelatedNodeInfo"}}, "text": "kittenkill:\nI meat at index building time. the chat history is very long.\nkittenkill:\nOr maybe would be a greater idea to use another type of index, != GPTSimpleVectorIndex ?", "start_char_idx": 0, "end_char_idx": 174, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8cef5eb4-ca82-4fc3-98d1-a76397b89b54": {"__data__": {"id_": "8cef5eb4-ca82-4fc3-98d1-a76397b89b54", "embedding": null, "metadata": {"date": "2023-04-13T19:35:47.754+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096156804301455401", "node_type": "4", "metadata": {"date": "2023-04-13T19:35:47.754+00:00"}, "hash": "3828107b1fb50a5e376b3ab4c13df21b7bf01b1ed1dad6c9e33c7764a613ce73", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b417734-a13c-4b07-a8ba-33fb48809154", "node_type": "1", "metadata": {"date": "2023-04-13T17:26:55.555+00:00"}, "hash": "4f2e93d06a36269838396ed760619ddd5724fec63a98a03a20d65cd0e0f8b759", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5850161b-0271-4d65-8927-e08ce19cb407", "node_type": "1", "metadata": {}, "hash": "01fdfc5ef59a963c103c6366eaed8c1c61df8f06c8074baca6a55900daee55ad", "class_name": "RelatedNodeInfo"}}, "text": "Killer Queen:\n```\ntool = Tool(\n        name = file + ' Graph',\n        func=lambda q: str(graph.query(q,refine_template=CHAT_REFINE_PROMPT_TMPL_MSGS)),\n        description=\"useful for when you want to answer questions about the \" + desc,\n        return_direct=True\n)\n```\nI got error `TypeError: query() got an unexpected keyword argument 'refine_template'`\nHow can I add refine-template to a ComposableGraph ?\nLogan M:\nPut it in the query_configs for the graph, under the query_kwargs", "start_char_idx": 0, "end_char_idx": 484, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5850161b-0271-4d65-8927-e08ce19cb407": {"__data__": {"id_": "5850161b-0271-4d65-8927-e08ce19cb407", "embedding": null, "metadata": {"date": "2023-04-13T21:35:07.883+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096186836059160656", "node_type": "4", "metadata": {"date": "2023-04-13T21:35:07.883+00:00"}, "hash": "582bc174a7ce771a948877f9206711bf6a47282a1a85d980bdff775140521049", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8cef5eb4-ca82-4fc3-98d1-a76397b89b54", "node_type": "1", "metadata": {"date": "2023-04-13T19:35:47.754+00:00"}, "hash": "1ba97dd771543c2634ff774ba1d231e4213309e16e1d2fd85f66cd3f1d160a4e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c4c9e1e-5777-4681-a22c-ce8885fe08a4", "node_type": "1", "metadata": {}, "hash": "e5c124097d11ff8865bf738e09b0ac9bb66f1a5301662cb5c115ee5cfb86dac6", "class_name": "RelatedNodeInfo"}}, "text": "prefetch:\nbut not sure how to switch to 4.  i have openai api access to 4, so that's not a problem - just not sure if llamaindex can 'speak' gpt4.\ndecentralizer:\nyou can simply change the model to gpt-4. However, the reponse rate is extremely slow for me. Over 15-20 seconds in most cases", "start_char_idx": 0, "end_char_idx": 288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c4c9e1e-5777-4681-a22c-ce8885fe08a4": {"__data__": {"id_": "1c4c9e1e-5777-4681-a22c-ce8885fe08a4", "embedding": null, "metadata": {"date": "2023-04-13T22:32:08.314+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096201182386606135", "node_type": "4", "metadata": {"date": "2023-04-13T22:32:08.314+00:00"}, "hash": "8973024252bc683bb64a3121824d8878a4bd47bdd7a956701677d7eca62c1450", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5850161b-0271-4d65-8927-e08ce19cb407", "node_type": "1", "metadata": {"date": "2023-04-13T21:35:07.883+00:00"}, "hash": "36e10cf585848a87b2219b554069424427a419a9eb32d5c1e47bee2535cd96b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ce0519a-012e-45c1-9b00-e9e9ffea09e0", "node_type": "1", "metadata": {}, "hash": "7a7df5496e495457f687770308e092ad978ebbf3175d3032c9c4e1bcec2fa288", "class_name": "RelatedNodeInfo"}}, "text": "prefetch:\ni tried this and it did not seem to produce gpt-4 like results.\nLogan M:\nThat's it! But you might get better results with a larger chunk size (or if not, try increasing the similarity_top_k if you are using a vector index)", "start_char_idx": 0, "end_char_idx": 232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ce0519a-012e-45c1-9b00-e9e9ffea09e0": {"__data__": {"id_": "3ce0519a-012e-45c1-9b00-e9e9ffea09e0", "embedding": null, "metadata": {"date": "2023-04-13T23:39:39.732+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096218175265312878", "node_type": "4", "metadata": {"date": "2023-04-13T23:39:39.732+00:00"}, "hash": "f2d1e7c4e447078608ff8ad2ffa6e093b1a9d446318e343b651a24e4e01ff716", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1c4c9e1e-5777-4681-a22c-ce8885fe08a4", "node_type": "1", "metadata": {"date": "2023-04-13T22:32:08.314+00:00"}, "hash": "5dd9e61460a00938b80b6d20e5f56b9477b3a511784ff876b5f6ca1038fa1659", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa7a0cee-2c9c-4081-baaf-1505bee18dc7", "node_type": "1", "metadata": {}, "hash": "2368bb688aae2a1cba6dc10afbc1dceeb0f56602e798d486f20efa03bd0cf339", "class_name": "RelatedNodeInfo"}}, "text": "decentralizer:\nhey @Logan M is there a way to use 2 simple vector indices to build a QA summary graph on top of them? or using 2 QA graph indices and building a QA graph on top of those 2 indices? I tried a few solutions.\n\n`index1 = GPTSimpleVectorIndex.load_from_disk('./vector1.json')\nindex2 = GPTSimpleVectorIndex.load_from_disk('./vector2.json')\n\ngraph_builder = QASummaryGraphBuilder(service_context=service_context_gpt4)\ngraph = graph_builder.build_graph_from_documents(documents=[index1, index2])`\n\nI got the following error: 'GPTSimpleVectorIndex' object has no attribute 'get_text'. \n\nI tried adding summaries  similar to ComposableGraph but didn't work.\nLogan M:\nHmm, I think the qa summary graph is setup to only work with documents, since it creates a list and vector index with those documents under the hood \ud83e\udd14 I'd have to take a peek at the source code to see whats possible though\ndecentralizer:\nIf I pass the documents directly:\n\n`PDFReader = download_loader(\"PDFReader\")\nloader = PDFReader()\ndocument1 = loader.load_data(file=Path('./file1.pdf'))\ndocument2 = loader.load_data(file=Path('./file2.pdf'))\n\ngraph_builder = QASummaryGraphBuilder(service_context=service_context_gpt4)\ngraph = graph_builder.build_graph_from_documents(documents=[document1, document2])`\n\n`'list' object has no attribute 'get_text'`", "start_char_idx": 0, "end_char_idx": 1324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa7a0cee-2c9c-4081-baaf-1505bee18dc7": {"__data__": {"id_": "aa7a0cee-2c9c-4081-baaf-1505bee18dc7", "embedding": null, "metadata": {"date": "2023-04-14T05:20:31.373+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096303955664969828", "node_type": "4", "metadata": {"date": "2023-04-14T05:20:31.373+00:00"}, "hash": "296934f34936f5687503671c0f37a6cc89c24a74429cf4b3bfb4339db5d941bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ce0519a-012e-45c1-9b00-e9e9ffea09e0", "node_type": "1", "metadata": {"date": "2023-04-13T23:39:39.732+00:00"}, "hash": "40e7776e194f2142160bb5fcb778d754d0adb2e83c0922507459e053726a6e15", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a1cf0cbc-dd60-40bd-9cc6-815f63ba834e", "node_type": "1", "metadata": {}, "hash": "e97d033fb456185a53579e6c87e3ddf1f112afc53f61b45b801ee0345f2ca47b", "class_name": "RelatedNodeInfo"}}, "text": "Anant Patankar:\nIs there any document for comparison between indices\nLogan M:\nTry this \n\nhttps://gpt-index.readthedocs.io/en/latest/guides/primer/index_guide.html", "start_char_idx": 0, "end_char_idx": 162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a1cf0cbc-dd60-40bd-9cc6-815f63ba834e": {"__data__": {"id_": "a1cf0cbc-dd60-40bd-9cc6-815f63ba834e", "embedding": null, "metadata": {"date": "2023-04-14T07:07:43.992+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096330936024563752", "node_type": "4", "metadata": {"date": "2023-04-14T07:07:43.992+00:00"}, "hash": "25550b6f0e1891758afbbee6914743b904b3ff5c2b23843ff314cce8060757d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa7a0cee-2c9c-4081-baaf-1505bee18dc7", "node_type": "1", "metadata": {"date": "2023-04-14T05:20:31.373+00:00"}, "hash": "46a1134d40a63e61c7e366b394e091bd0706fe38dbbbcc6920a8060fa6a0ba9b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "099ae5de-e4de-43d3-866d-582531537807", "node_type": "1", "metadata": {}, "hash": "756cba2fe2d98c013bd120ce3c68ced3d97af9d0f86fc631fcc6f3c131ee03f1", "class_name": "RelatedNodeInfo"}}, "text": "alexpolymath:\nhello\nis there any guidance on how to get most related documents by input text\nwithout gpt3.5 post-processing.\nLLYX:\nFor some indices there should be a retrieve response_mode and setting to embedding mode should get you what you want", "start_char_idx": 0, "end_char_idx": 247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "099ae5de-e4de-43d3-866d-582531537807": {"__data__": {"id_": "099ae5de-e4de-43d3-866d-582531537807", "embedding": null, "metadata": {"date": "2023-04-14T07:28:33.46+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096336176673202198", "node_type": "4", "metadata": {"date": "2023-04-14T07:28:33.46+00:00"}, "hash": "dcd0b43421e8455e801105fae5c1216380a4c82a44787b7180eb381cadfa2aaf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a1cf0cbc-dd60-40bd-9cc6-815f63ba834e", "node_type": "1", "metadata": {"date": "2023-04-14T07:07:43.992+00:00"}, "hash": "734796fd3645fd687e1a2bdc7033c8d220cb9aba57b5bf249b8a865bf5f23f14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c634af56-7b5c-4e09-a464-985e4282eb29", "node_type": "1", "metadata": {}, "hash": "358fe6305f78bdab7747c70d8fc5d4139c75c9aed3a1ed51b01855c7cd8224d3", "class_name": "RelatedNodeInfo"}}, "text": "Siddhant Saurabh:\nhey @ravitheja , receiving error on inserting docuements in pinecone, can you please assist here?\nI have posted the error stack.\nSiddhant Saurabh:\n@ravitheja  @kartik  @jerryjliu98", "start_char_idx": 0, "end_char_idx": 198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c634af56-7b5c-4e09-a464-985e4282eb29": {"__data__": {"id_": "c634af56-7b5c-4e09-a464-985e4282eb29", "embedding": null, "metadata": {"date": "2023-04-14T07:28:45.653+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096336227814342707", "node_type": "4", "metadata": {"date": "2023-04-14T07:28:45.653+00:00"}, "hash": "5c623a15402b88d1bbb41839c2a857d200f6ce1e3db42c27b17feb53e0e95be9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "099ae5de-e4de-43d3-866d-582531537807", "node_type": "1", "metadata": {"date": "2023-04-14T07:28:33.46+00:00"}, "hash": "f2b0917a2bd4d489851f354ec2a17a361b71712ff2e81fbde59a4431d059005d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a31c2880-ffaa-4de4-bbb3-17acdeb087bf", "node_type": "1", "metadata": {}, "hash": "103e239af5e8acd7a650161dfd2d27f4733c1920f7645efe5b26502459466e98", "class_name": "RelatedNodeInfo"}}, "text": "lspf:\nHello, is there any possibility to store/load my index in a custom database? I know save_to_disk or save_to_string methods, but I'd like to save my index to Postgres or a different database. How could I do that?\nLLYX:\nif they're not too big you could store the string as a str/text column, or the json as a blob column\nlspf:\nthanks - actually they are, it is about 10mb so I'd like to implement custom storing\nLLYX:\nthe max size for a text field is like 1gb, i would still give it a try if it's only 10mb per index, otherwise you can probably just store the json in an object storage system like s3", "start_char_idx": 0, "end_char_idx": 604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a31c2880-ffaa-4de4-bbb3-17acdeb087bf": {"__data__": {"id_": "a31c2880-ffaa-4de4-bbb3-17acdeb087bf", "embedding": null, "metadata": {"date": "2023-04-14T12:35:32.356+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096413431122374726", "node_type": "4", "metadata": {"date": "2023-04-14T12:35:32.356+00:00"}, "hash": "d245648d6b787c7636a4534c8ea3cda8d2303cfcf4b648966706f6ac5db25fac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c634af56-7b5c-4e09-a464-985e4282eb29", "node_type": "1", "metadata": {"date": "2023-04-14T07:28:45.653+00:00"}, "hash": "6731216c8c3cacdeeed490181e4a70acc822ac290914ced213520af3eb7b1c7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a28cd4b5-9fcd-49e0-acff-e12424b410e3", "node_type": "1", "metadata": {}, "hash": "7e2f377b86e2ce99b315178acc6b7311c6932bf08d3025a1b69ec8e67b03e0d0", "class_name": "RelatedNodeInfo"}}, "text": "kittenkill:\nHi all!, im trying to make llamaindex work with spanish text. and i came to this: https://github.com/jerryjliu/llama_index/blob/170150eb5cfe73000c511d97c604ddb5a6f2e9ab/gpt_index/prompts/chat_prompts.py  How could one replace that text? its seems to be too deep to be easyly customized?\nkittenkill:\nWell, looks like .query(refine_template=) does the job. \ud83e\udd37\nkittenkill:\nWell, not really. refine_template misses the \u2018converzational\u2019 stuff. (using gpt-3.5-turbo). the original text asks for {context_msg} only. but refine_template asks for that + {query_str} + {existing_anwser}\nkittenkill:\nNot sure how to translate the templates to another language", "start_char_idx": 0, "end_char_idx": 659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a28cd4b5-9fcd-49e0-acff-e12424b410e3": {"__data__": {"id_": "a28cd4b5-9fcd-49e0-acff-e12424b410e3", "embedding": null, "metadata": {"date": "2023-04-14T16:39:53.908+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096474926128566332", "node_type": "4", "metadata": {"date": "2023-04-14T16:39:53.908+00:00"}, "hash": "af2da6f09d935be449fb2e0e8aab0291a090ad1b7290f616ed30bd961767d6ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a31c2880-ffaa-4de4-bbb3-17acdeb087bf", "node_type": "1", "metadata": {"date": "2023-04-14T12:35:32.356+00:00"}, "hash": "2cd55b2e3f1c5468659974ec59bc331382139f3dedbb1422cbc066388f4f0a3c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2546504f-f4e4-4ec6-b437-f20503f00db8", "node_type": "1", "metadata": {}, "hash": "4d1066a6776ec6d254b840f7078f145fdc2bc7113cfe16153b5ff10035c8601e", "class_name": "RelatedNodeInfo"}}, "text": "intvijay:\n@Logan M @ravitheja \nI have 2 pinecone vector index.  How can I query both for the given query as my answer may be available in either of the two\nLogan M:\nTry to wrap them with a composable index, using ListIndex at the top level \n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/index_structs/composability.html\nintvijay:\nCan we do this without loading it on local as I want to query both of them directly?", "start_char_idx": 0, "end_char_idx": 419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2546504f-f4e4-4ec6-b437-f20503f00db8": {"__data__": {"id_": "2546504f-f4e4-4ec6-b437-f20503f00db8", "embedding": null, "metadata": {"date": "2023-04-14T20:18:19.57+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096529895259123852", "node_type": "4", "metadata": {"date": "2023-04-14T20:18:19.57+00:00"}, "hash": "d60c999a62f6c099d60c7d3d8d8bb5f2ebb1915e57cfd64d7c65fe944de64094", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a28cd4b5-9fcd-49e0-acff-e12424b410e3", "node_type": "1", "metadata": {"date": "2023-04-14T16:39:53.908+00:00"}, "hash": "5fc23353e1f3e86efee9f431d659622489b95ae9a904dc13c2d4f50d0c7e98e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9c279f5-82ab-4dc4-9902-72850de1d25f", "node_type": "1", "metadata": {}, "hash": "29cc4a2a6fd8a27ea687938f2578bbc8d912f780f4a9ce7345d0c1004c10b50b", "class_name": "RelatedNodeInfo"}}, "text": "kittenkill:\nWhere does that message come from?\nLogan M:\nI've never been able to fully track down this error \ud83e\udd14 \n\nbut when I do see it, it usually doesn't cause problems. I think it's related to non-latin-based languages (I.e. not English or similar) \ud83e\udd14\nkittenkill:\nWell actually spanish is latin based, but the text contains many emojis. Could be that (?)\nLogan M:\nHmmm maybe? I'm just not sure what part of llama index prints that warning \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9c279f5-82ab-4dc4-9902-72850de1d25f": {"__data__": {"id_": "a9c279f5-82ab-4dc4-9902-72850de1d25f", "embedding": null, "metadata": {"date": "2023-04-14T21:53:46.943+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096553917602611270", "node_type": "4", "metadata": {"date": "2023-04-14T21:53:46.943+00:00"}, "hash": "8f4a38abaa025f1ebdbc2fa60d4cb62b23ce6b39ebf52b7031bb34f00c250990", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2546504f-f4e4-4ec6-b437-f20503f00db8", "node_type": "1", "metadata": {"date": "2023-04-14T20:18:19.57+00:00"}, "hash": "0183b0df3c9701d8b7b0674e0f2ca83d2a7fc0fc93976cceb074fe93fe32ae5a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a0196f9d-69fd-4e68-a659-8e4d37c435d1", "node_type": "1", "metadata": {}, "hash": "2ab689e5970e6fbb2521722ac8b7d728183761b4d06148f8553dc6f74abf4db6", "class_name": "RelatedNodeInfo"}}, "text": "mto:\nHey friends, when working with langchain agents + llama indices, does anyone have any tips for writing a good prompt/tool description so that the agent actually calls the index?\n\nMore often than not, the agent simply does not use the index, which is bad. I've seen this issue asked a few times, e.g.:\n- https://github.com/jerryjliu/llama_index/issues/890\n- https://github.com/jerryjliu/llama_index/issues/1152\n\nThe sample notebook (link: https://github.com/jerryjliu/llama_index/blob/main/examples/langchain_demo/LangchainDemo.ipynb) seems like it's got a good description, but this seems hand-tuned, and hard to generalize. \n\nSo far I haven't had any luck, and am thinking of just skipping agents altogether, and just sticking the whole chat history into the index query QuestionAnswerPrompt instead.\nLogan M:\nIn my experience, you just need to be super verbose in the description. Or if you wanted, you could even do something like \"If user mentions the keyword [TOOL], use this tool\"\nmto:\naaah interesting, i like they keyword part too", "start_char_idx": 0, "end_char_idx": 1043, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0196f9d-69fd-4e68-a659-8e4d37c435d1": {"__data__": {"id_": "a0196f9d-69fd-4e68-a659-8e4d37c435d1", "embedding": null, "metadata": {"date": "2023-04-15T00:36:50.542+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096594952991035453", "node_type": "4", "metadata": {"date": "2023-04-15T00:36:50.542+00:00"}, "hash": "17cefb65a0c2349f141e694e0842ee4a3b361031732c10a42824c1f55932b972", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9c279f5-82ab-4dc4-9902-72850de1d25f", "node_type": "1", "metadata": {"date": "2023-04-14T21:53:46.943+00:00"}, "hash": "0685bf54e786fcd414972b342acb34dace8cc1094ce3fc06c7bfe72e5f52feda", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "48a211b3-b252-41fb-bc92-b2a9ab11213d", "node_type": "1", "metadata": {}, "hash": "24e158a2bf0f3813609218f2566a48d9bc35ea9e731de2c2bfcbb6cea298a93e", "class_name": "RelatedNodeInfo"}}, "text": "Greg Tanaka:\nHow do we specify the llm to use this openai.Edit.create(\n  model=\"text-davinci-edit-001\",\n  input=\"\",\n  instruction=\"\",\n  temperature=0.7,\n  top_p=1\n)\nGreg Tanaka:\n@Logan M any idea how to do this? I tried several method but none worked.", "start_char_idx": 0, "end_char_idx": 251, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48a211b3-b252-41fb-bc92-b2a9ab11213d": {"__data__": {"id_": "48a211b3-b252-41fb-bc92-b2a9ab11213d", "embedding": null, "metadata": {"date": "2023-04-15T16:27:54.195+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096834295299051620", "node_type": "4", "metadata": {"date": "2023-04-15T16:27:54.195+00:00"}, "hash": "9115bc4d1ada6f391ebf201f1f36f5e16763d5daaadba6f34c1c5d2d5357af69", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a0196f9d-69fd-4e68-a659-8e4d37c435d1", "node_type": "1", "metadata": {"date": "2023-04-15T00:36:50.542+00:00"}, "hash": "0fec2fe0285bb0a9c209bf7c6c78df4277d00812b0b7811159d0ab659e60e74b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e18b323-cd51-4fcf-a433-4620c106728a", "node_type": "1", "metadata": {}, "hash": "d4aef31749e9b72e02d5b1b31a9b5dd7c4c355c7ddb9ab753c2300d7fbab26d2", "class_name": "RelatedNodeInfo"}}, "text": "w0lph:\nCalling SimpleDirectoryReader on a directory that has images leads it to a path of having to download pytorch_model.bin , which has 800mb and it keeps failing to download because it's served over an unreliable connection with huggingface\nLogan M:\nThis is because llama index supports reading text from images.\n\nIf you don't want to load images, you can exclude them. For example \n\n`SimpleDirectoryReader(\"./data\", exclude=[\"*png\"])`", "start_char_idx": 0, "end_char_idx": 439, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e18b323-cd51-4fcf-a433-4620c106728a": {"__data__": {"id_": "2e18b323-cd51-4fcf-a433-4620c106728a", "embedding": null, "metadata": {"date": "2023-04-15T19:09:34.797+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096874982572822530", "node_type": "4", "metadata": {"date": "2023-04-15T19:09:34.797+00:00"}, "hash": "dec9bda303eaeeca5a557cae2976060bb65dcd1464a35619010add4928dc5e88", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48a211b3-b252-41fb-bc92-b2a9ab11213d", "node_type": "1", "metadata": {"date": "2023-04-15T16:27:54.195+00:00"}, "hash": "d020fb6ce4fd6f3ef69ff4b0ebf0879f5de127701249327110c80517a2f30e92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11796d4f-deab-4f29-9de9-f9b5eab2f0d9", "node_type": "1", "metadata": {}, "hash": "096b9d3ca3bf2b6bc4126f8954ca94d92de8839d94fd66893f95b10c4a0d3228", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nis there an updated notion tutorial or a known problem with the data loader? \n\ntrying to use the notion page data loader and not working for some reason... \n\ngrateful for any help\nJa_wangana:\nHey, facing the same issue. Did you found any solution?", "start_char_idx": 0, "end_char_idx": 259, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11796d4f-deab-4f29-9de9-f9b5eab2f0d9": {"__data__": {"id_": "11796d4f-deab-4f29-9de9-f9b5eab2f0d9", "embedding": null, "metadata": {"date": "2023-04-15T23:58:06.203+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096947591872254054", "node_type": "4", "metadata": {"date": "2023-04-15T23:58:06.203+00:00"}, "hash": "bee014ee9fae04afbb9eb5e61f33760ccd69f437c4e0ea9f0dafee057d814997", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e18b323-cd51-4fcf-a433-4620c106728a", "node_type": "1", "metadata": {"date": "2023-04-15T19:09:34.797+00:00"}, "hash": "5fcb19aefa356fc0828a0a6d162b6e5f0266f75e6d5649b5673df506cee32be6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "985b330d-250d-4b0f-80c3-66bca937b03a", "node_type": "1", "metadata": {}, "hash": "aaeb37da8b0191ad7404424b9984f9d02740bd8589776ef95b179cc297d8ce9a", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI'm querying several files and want to know which file GPT found an answer in. How would I pass the file name as context so it can tell me where it found certain findings?\nLogan M:\nYou can either set the doc_id of each document, or set the extra_info dict of each document object. Both should show up in the sources nodes. \n\nThe extra info dict allows for other things you might want to store (page number, section name, etc.)\n\nEither of these should be set before building/inserting into the index\npaulo:\nHow would I set the doc_id if I'm loading in multiple files at once?", "start_char_idx": 0, "end_char_idx": 581, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "985b330d-250d-4b0f-80c3-66bca937b03a": {"__data__": {"id_": "985b330d-250d-4b0f-80c3-66bca937b03a", "embedding": null, "metadata": {"date": "2023-04-16T00:03:19.935+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1096948907759632465", "node_type": "4", "metadata": {"date": "2023-04-16T00:03:19.935+00:00"}, "hash": "6cf68ae19a66635c32352f03cf0771e22c7b63cee5943564cd08104bfec7f2c6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11796d4f-deab-4f29-9de9-f9b5eab2f0d9", "node_type": "1", "metadata": {"date": "2023-04-15T23:58:06.203+00:00"}, "hash": "830b9db88e9588f9ac951e187147301a8925a5e7c8c9319b9823d964a32d507f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78e883de-21f1-4333-98fd-173b86b17cac", "node_type": "1", "metadata": {}, "hash": "6b1f6d103aacff6739d161e976b015cce0614a382aa511cc302d72f3df1825db", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nOtherwise if I just want to say the name of the book then I can just pass that into the `doc_id`?\nLogan M:\nExactly! \n\nThe only caveat with doc_id, is you need to ensure each doc_id is unique (I think an error should get thrown if this isn't true)\n\nExtra info does not have that constraint\npaulo:\nPerfect, thank you!", "start_char_idx": 0, "end_char_idx": 322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78e883de-21f1-4333-98fd-173b86b17cac": {"__data__": {"id_": "78e883de-21f1-4333-98fd-173b86b17cac", "embedding": null, "metadata": {"date": "2023-04-16T11:27:13.367+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097121014447607858", "node_type": "4", "metadata": {"date": "2023-04-16T11:27:13.367+00:00"}, "hash": "193634e0d35e5d8ac5461378f3f80869dbe67515cf6ddb5b28ee8b44dfca6c93", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "985b330d-250d-4b0f-80c3-66bca937b03a", "node_type": "1", "metadata": {"date": "2023-04-16T00:03:19.935+00:00"}, "hash": "7f35ae3cc91fa9cb61694c7fd5814656374bff139eb3d8004852724b586dd855", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "600f3b9c-55e6-4200-8258-43357b0cb268", "node_type": "1", "metadata": {}, "hash": "7b730d792aadd21be471aa3192dcb9952ff0919270ee439f6e9339030bfc464f", "class_name": "RelatedNodeInfo"}}, "text": "febbug:\nHello, sorry for noob question, how can I turn this off or adjust the level, so it is not printed to the output. Running just plain python script.\nfebbug:\nanyone please ?\nLogan M:\n```\nimport logging\nimport sys\n\nlogging.basicConfig(stream=sys.stdout, level=logging.CRITICAL)\nlogging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))\n\n```", "start_char_idx": 0, "end_char_idx": 359, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "600f3b9c-55e6-4200-8258-43357b0cb268": {"__data__": {"id_": "600f3b9c-55e6-4200-8258-43357b0cb268", "embedding": null, "metadata": {"date": "2023-04-16T21:28:21.771+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097272296298774538", "node_type": "4", "metadata": {"date": "2023-04-16T21:28:21.771+00:00"}, "hash": "021447cb67f6ae01317866d79009521542958f9414448f8d6662ad9f4786c358", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "78e883de-21f1-4333-98fd-173b86b17cac", "node_type": "1", "metadata": {"date": "2023-04-16T11:27:13.367+00:00"}, "hash": "5a2c6bbed2a0b0b59901d7d70afc49197aa1dfc7d8aadbce5991f014da7f434c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec07c5bc-1665-449e-936c-ead455b52e87", "node_type": "1", "metadata": {}, "hash": "ffb22adf87281e49edc4f02a7dcee9f6632b953e4265c284b09dbbf70794a7b7", "class_name": "RelatedNodeInfo"}}, "text": "Dallas:\nHi I'm an idiot on Windows and I want to use Llama Index to manage some information for my tabletop game that has over 1600 documents.  I have some really dumb questions, like... Does Llama Index work on windows?  It looks like the installer instructions presume I'm on Linux.\nLogan M:\nAssuming you have python installed, it should work just fine \ud83d\udc4d (though personally I use WSL for everything on windows)\nDallas:\nThanks Logan!", "start_char_idx": 0, "end_char_idx": 434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec07c5bc-1665-449e-936c-ead455b52e87": {"__data__": {"id_": "ec07c5bc-1665-449e-936c-ead455b52e87", "embedding": null, "metadata": {"date": "2023-04-16T23:21:45.986+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097300835244970115", "node_type": "4", "metadata": {"date": "2023-04-16T23:21:45.986+00:00"}, "hash": "af06d76708675efc956f5eb742c6c489f2e224134d5a119ae5a9e8372853b43c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "600f3b9c-55e6-4200-8258-43357b0cb268", "node_type": "1", "metadata": {"date": "2023-04-16T21:28:21.771+00:00"}, "hash": "31da08dab702b0bb79690172c0f65b144d1a4e87049c51d90c977d06374375b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "467f7d99-3b0c-4b32-b567-2fb2656d705f", "node_type": "1", "metadata": {}, "hash": "d1a8fd9ff3dcffca6ddf3a3de36e5f67d0c47dad9e3a6d6f1bf30d95c8f186b9", "class_name": "RelatedNodeInfo"}}, "text": "Humus:\nHey folks! Is there a way to create indexes for documents without using OpenAI key? I am trying to use only open source LLMs (eg: GPT-NeoX, J) for my question anwering bot.\nLogan M:\nCheck out the FAQ! You'll want to run a local LLM and a local embed model\n\nhttps://discord.com/channels/1059199217496772688/1059200010622873741/1088122994251010139\nHumus:\nThanks a bunch. This is exactly what I was looking for. \ud83d\ude03", "start_char_idx": 0, "end_char_idx": 417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "467f7d99-3b0c-4b32-b567-2fb2656d705f": {"__data__": {"id_": "467f7d99-3b0c-4b32-b567-2fb2656d705f", "embedding": null, "metadata": {"date": "2023-04-17T01:56:06.157+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097339675217236141", "node_type": "4", "metadata": {"date": "2023-04-17T01:56:06.157+00:00"}, "hash": "67c43c38eaed9b403cfa8355447d8b07c37b146d4ebc46bf9d495730fa36ef3c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec07c5bc-1665-449e-936c-ead455b52e87", "node_type": "1", "metadata": {"date": "2023-04-16T23:21:45.986+00:00"}, "hash": "3a1c6452e9d010989972c98c7482ddc6d4ba7a6b6ac8ed60f580b0444e50ec46", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4317051-d4ce-4b0b-8cbe-a2465f1532a5", "node_type": "1", "metadata": {}, "hash": "531b26ebdff0536332b96a19602d7d3046b41fe4b443a86816d4e63ccf19f9c2", "class_name": "RelatedNodeInfo"}}, "text": "apatrickegan:\ngreetings, I am wondering if I am in the right place.  I have a keen interest in crawling all of my PDF and word documents and creating a vector embedding of it all.  The paths I have gone down are openai fine tuning, pinecone, llama-index, chunking files etc. etc. there is always something that breaks and I think I just need someone that I can talk to about the concepts. I have watched dozens of videos and I am still a little flummoxed,  I think for example that Pinecone is down this afternoon for creating new vector indexes for my region... If I was to post code and an error message, where is the best place to do that?  edit:  I tried faiss, but of course python 3.8 is the latest and I have python 3.10 .  any suggestions given my goal.\nLogan M:\nDo you have a ton of docouments? A GPTSimpleVectorIndex might be good enough if you don't have too many (or even an index for each topic/subject, in a graph). Then you don't have to worry about 3rd party stores \ud83d\udc40\napatrickegan:\nthanks logan, define a tone, I have twenty years of legal documents so it would be in the thousands?\nLogan M:\n... yea thats a ton hahah, you need a dedicated vector store for sure. Not sure where to report pinecone issue though \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 1227, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4317051-d4ce-4b0b-8cbe-a2465f1532a5": {"__data__": {"id_": "c4317051-d4ce-4b0b-8cbe-a2465f1532a5", "embedding": null, "metadata": {"date": "2023-04-17T03:00:13.851+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097355813615571085", "node_type": "4", "metadata": {"date": "2023-04-17T03:00:13.851+00:00"}, "hash": "516ef7777da4dea189c5aecc083ae603089ab928df045cb9f7f7cad8f50c6903", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "467f7d99-3b0c-4b32-b567-2fb2656d705f", "node_type": "1", "metadata": {"date": "2023-04-17T01:56:06.157+00:00"}, "hash": "3ecdd1bb0c1ac5f60e3dedaf3fb3fb51d787a8a38d622936674a012c957680db", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93a34b87-0b20-4f7f-a3bb-404e1f15778d", "node_type": "1", "metadata": {}, "hash": "a8f4320b444d893fdaa6f8d8d03a12e60865def37db774ac109b05957398cd77", "class_name": "RelatedNodeInfo"}}, "text": "conic:\n**Getting Graph Index Structure**\n```python\ndef get_graph(documents, service_context):\n    graph_builder = QASummaryGraphBuilder(service_context=service_context)\n    graph = graph_builder.build_graph_from_documents(documents)\n    return graph\n```\nLogan M:\nthe qa summary graph has two modes of operation \n1. A normal vector index for QA (which returns top_k source nodes, with scores)\n2. A list index for summarization (checks EVERY node, no embeddings, hence no score)\nconic:\nhow would I enable the normal vector index for qa summary graph?", "start_char_idx": 0, "end_char_idx": 548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93a34b87-0b20-4f7f-a3bb-404e1f15778d": {"__data__": {"id_": "93a34b87-0b20-4f7f-a3bb-404e1f15778d", "embedding": null, "metadata": {"date": "2023-04-17T03:19:27.155+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097360650923155586", "node_type": "4", "metadata": {"date": "2023-04-17T03:19:27.155+00:00"}, "hash": "2d25e8d8923aa8c5c6f0b60a0aef0396a22db05474cd380c8c1de72653720d13", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c4317051-d4ce-4b0b-8cbe-a2465f1532a5", "node_type": "1", "metadata": {"date": "2023-04-17T03:00:13.851+00:00"}, "hash": "08ca9b863c30a9a487a13d7f3566e5eab3ee089bb4886c7c28f268437352b2ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b6979db-5482-4ad1-83ad-0c86bc0904d6", "node_type": "1", "metadata": {}, "hash": "014f197ab342145f1782153d1b16dafd77f3776e9e935a374a6ef2f9b4f1b21d", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\nHi everyone, I've got a question, when I use GPTSimpleVectorIndex.from_documents(...) To train the AI with gpt.3-5.turbo, does it use the price for \"chat\" listed in the website as \"$0.002/1k tokens\"?\nLogan M:\nYes! \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b6979db-5482-4ad1-83ad-0c86bc0904d6": {"__data__": {"id_": "2b6979db-5482-4ad1-83ad-0c86bc0904d6", "embedding": null, "metadata": {"date": "2023-04-17T05:50:46.171+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097398731076292638", "node_type": "4", "metadata": {"date": "2023-04-17T05:50:46.171+00:00"}, "hash": "596f7e7a3bfbfb7ad7c80b7a426460053e1e975d78cfd56f9b1024d99bcd4701", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93a34b87-0b20-4f7f-a3bb-404e1f15778d", "node_type": "1", "metadata": {"date": "2023-04-17T03:19:27.155+00:00"}, "hash": "51bd9d9241b305be0b83dc1b7915904a0de1f1cb319b479413d9e7293f43cb95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b91e67e-545d-4f71-a6a8-734f841b4b42", "node_type": "1", "metadata": {}, "hash": "d885b0881c011d1f81fad92c25107bf8f93926bcd555e2b8c748a13f1bb087bb", "class_name": "RelatedNodeInfo"}}, "text": "snapster:\n@Logan M @jerryjliu98 How to strictly restrict answers to the index/context provided. I'm having trouble controlling chatgpt LLM output. Its trying to get answers from its own knowledge sometimes.\nLLYX:\nNot much you can do currently aside from giving it stricter prompts.\nsnapster:\nis this issue resolvable in some other LLM apart from chatgpt?\nLLYX:\nWould probably work best with some kind of instruct tuned model, e.g. people have had better luck using gpt-3 (davinci-003)", "start_char_idx": 0, "end_char_idx": 484, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b91e67e-545d-4f71-a6a8-734f841b4b42": {"__data__": {"id_": "6b91e67e-545d-4f71-a6a8-734f841b4b42", "embedding": null, "metadata": {"date": "2023-04-17T06:02:14.093+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097401616430276608", "node_type": "4", "metadata": {"date": "2023-04-17T06:02:14.093+00:00"}, "hash": "17960c5e239a1b058dbc0a422a3142b4852511dc1f470fb06e6f54f23f745720", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b6979db-5482-4ad1-83ad-0c86bc0904d6", "node_type": "1", "metadata": {"date": "2023-04-17T05:50:46.171+00:00"}, "hash": "dd4e81093cd0ccd4f84450321020f7c4c4417a5d5b359c7be3d6dca162fac0cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1dbabf21-f16c-4db2-a845-aa0605d2e1e2", "node_type": "1", "metadata": {}, "hash": "b341ee110dd94605bb56e66cdeb4cd072787fa55e03688a5322cee0c00fbef58", "class_name": "RelatedNodeInfo"}}, "text": "Siddhant Saurabh:\nhow can we decide if the question is to be answered from given document or it should be open ended?\n@ravitheja @Logan M\nLLYX:\nYou can try using llama-index as a tool in something like langchain and then have an llm parse the user query to decide whether to use it or not", "start_char_idx": 0, "end_char_idx": 288, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1dbabf21-f16c-4db2-a845-aa0605d2e1e2": {"__data__": {"id_": "1dbabf21-f16c-4db2-a845-aa0605d2e1e2", "embedding": null, "metadata": {"date": "2023-04-17T06:11:59.476+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097404071704530984", "node_type": "4", "metadata": {"date": "2023-04-17T06:11:59.476+00:00"}, "hash": "06421da6fda845979995356006b346193a4a222f4dcb3001386a555011fbcdec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b91e67e-545d-4f71-a6a8-734f841b4b42", "node_type": "1", "metadata": {"date": "2023-04-17T06:02:14.093+00:00"}, "hash": "219b88c7aced7702462c3a95a1c26479c3dc6cc26ca35c0ad4ce443cbe907e42", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4aaf3f60-64aa-49f6-857b-ee7532b24c68", "node_type": "1", "metadata": {}, "hash": "8b8608ab6fda6c7be17547cd70547e4525c06169a91b7f72b75fe7cb221483fd", "class_name": "RelatedNodeInfo"}}, "text": "snapster:\nHow can i treat json as a structured dataset? currently chunking is happening weird in JSONReader. can i chunk it based on nesting level or something?\nLLYX:\nYou might want to manually create an ingestion pipeline depending on what your data looks like (e.g. I work with books, so I manually process books into individual chapters before further processing)\nsnapster:\nany reference code for this?\nLLYX:\nTry taking a look at https://colab.research.google.com/drive/1uL1TdMbR4kqa0Ksrd_Of_jWSxWt1ia7o?usp=sharing#scrollTo=82b43d58-5753-4035-9ea6-f8bfa860f89c where they create an index using multiple years of 10k filings for a single company\nsnapster:\nI've seen this. I dont think this tells about how to manual chunk\nLLYX:\nI guess depends on what you mean by manually chunking? If your data is structured you could chunk parts of it individually like how they process 10k files individually per year, and convert semantically relevant chunks into individual documents before running it through the embedding process", "start_char_idx": 0, "end_char_idx": 1023, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4aaf3f60-64aa-49f6-857b-ee7532b24c68": {"__data__": {"id_": "4aaf3f60-64aa-49f6-857b-ee7532b24c68", "embedding": null, "metadata": {"date": "2023-04-17T06:34:32.531+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097409746828533870", "node_type": "4", "metadata": {"date": "2023-04-17T06:34:32.531+00:00"}, "hash": "fe17acb9b1e3be5f57fdec9f543f74981811c93095beb31089edbb8fd17ac5f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1dbabf21-f16c-4db2-a845-aa0605d2e1e2", "node_type": "1", "metadata": {"date": "2023-04-17T06:11:59.476+00:00"}, "hash": "0f5a885170570f017e458710a232fd803093d3d7eeccbc429f5d485397a7e550", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aac775f7-0e63-4701-9193-14a9a006be86", "node_type": "1", "metadata": {}, "hash": "6cf62dfa88362d03d8484ed439d6cc8dbbd7e9aeb5f821748eb21b6ed3941a90", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\n@Logan M if I use around 100 documents to train the AI with GPTSimpleVectorIndex.from_document(...) Will it work or it's too much?\nLLYX:\nI think that should be fine, depending on the size of those documents individually, I usually have 60-70 docs per index\nTesterMan:\nThe biggest file is not even 20MB", "start_char_idx": 0, "end_char_idx": 312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aac775f7-0e63-4701-9193-14a9a006be86": {"__data__": {"id_": "aac775f7-0e63-4701-9193-14a9a006be86", "embedding": null, "metadata": {"date": "2023-04-17T06:53:41.323+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097414565211414579", "node_type": "4", "metadata": {"date": "2023-04-17T06:53:41.323+00:00"}, "hash": "dcb414aadd853f642379e95e7d2018cf377206a2126ce4706adebcb456273441", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4aaf3f60-64aa-49f6-857b-ee7532b24c68", "node_type": "1", "metadata": {"date": "2023-04-17T06:34:32.531+00:00"}, "hash": "306b10e6be92dc4bfa9d931bd00cbb83613757be7416298bd301704b0c8ba306", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66a11a95-3d6b-468e-b193-6238c8f1e5aa", "node_type": "1", "metadata": {}, "hash": "fe61af29c56c918364690ee6d28d9a67c4ade0cb5ab0610851430aa8d45f4337", "class_name": "RelatedNodeInfo"}}, "text": "Abhishek22:\n@ravitheja @jerryjliu98 @Logan M What is the optimal chunk size and chunk overlap to use with pinecone? I have tried chunk size between [512 and 256] but didn't get good results\nLLYX:\nI think that depends on the nature of your data/questions, as well as your chunking strategy. I find that for my use case semantically chunking the data actually results in better performance than just doing it randomly, and that I need a larger chunk size because answers in my data are spread over a lot of text\nAbhishek22:\nThanks, But if semantically chunking the data isn't a solution for now and had to go with randomly chunking the data, what would you suggest? \nCurrently using the llama-index token text splitter for creating chunks\nLLYX:\nI've seen some blog posts that seem to show having at least 1024 length chunks giving drastically better results, and beyond that the gains are more incremental, so could start with trying that out\nAbhishek22:\nHi @LLYX, I tried out setting chunk size to 1024. It provided me good results from pinecone. Thanks, It gave the matching source/vector in the first rank. But when I used it with llama-index, It was unable to answer from the source and started hallucinating.\nLLYX:\nYou might want to add a custom prompt for text_qa and revise for llama-index and add a lot more strict wording about only using the information from the context given and such.", "start_char_idx": 0, "end_char_idx": 1394, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66a11a95-3d6b-468e-b193-6238c8f1e5aa": {"__data__": {"id_": "66a11a95-3d6b-468e-b193-6238c8f1e5aa", "embedding": null, "metadata": {"date": "2023-04-17T07:51:19.193+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097429068569387078", "node_type": "4", "metadata": {"date": "2023-04-17T07:51:19.193+00:00"}, "hash": "bf978fef0ac65d06b5ed1c0bec4410d2713108827d4e57a138e3365e09eedc92", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aac775f7-0e63-4701-9193-14a9a006be86", "node_type": "1", "metadata": {"date": "2023-04-17T06:53:41.323+00:00"}, "hash": "07cbe173c66b9ddfb5022a3075930c3bdd2127c8b3f9ed0c7dad9dcab3409199", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66a145e7-56b3-4b68-8164-7fc6b14b9cfd", "node_type": "1", "metadata": {}, "hash": "51f374229dd85b74f0dd398afb7ec9545b6ad732fc218bb8969f4cf45f434661", "class_name": "RelatedNodeInfo"}}, "text": "diridiri:\nHello guys, In llama-index 0.5.16, I guess document inserted cannot be found with docstore.get_document method,\nhere's simple test code to reproduce an error,\n\n```from llama_index import GPTSimpleVectorIndex, Document\n\ndoc = Document(text=\"11\", doc_id=\"original_doc_id\")\nindex = GPTSimpleVectorIndex.from_documents([doc])\nprint (index.docstore.get_document(\"original_doc_id\"))```\n\nthis gives ValueError: doc_id original_doc_id not found.\ndiridiri:\nI guess also, update method is still not functioning as expected, not deleting the original document, it just adds new document.\n\nhere's simple test code to reproduce index update related error.\n\n```\nfrom llama_index import GPTSimpleVectorIndex, Document\n\ndocument1 = Document(text=\"11\", doc_id=\"original_doc_id\")\nindex = GPTSimpleVectorIndex.from_documents([document1])\n\nprint (index.docstore)\ndocument1.text = \"asdf\"\nindex.update(document1)\nprint (\"----------- after doc1 update ----------\")\nprint (index.docstore)\n```\n\nthis shows two documents created in index after updating document\n\n@Logan M Need your superpower logan! \ud83e\udd72", "start_char_idx": 0, "end_char_idx": 1085, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66a145e7-56b3-4b68-8164-7fc6b14b9cfd": {"__data__": {"id_": "66a145e7-56b3-4b68-8164-7fc6b14b9cfd", "embedding": null, "metadata": {"date": "2023-04-17T10:20:03.611+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097466500291510322", "node_type": "4", "metadata": {"date": "2023-04-17T10:20:03.611+00:00"}, "hash": "3a22e9f33a60d09477a7ee2038c259f5e6630065d03847367319bc2eaa0e2c3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66a11a95-3d6b-468e-b193-6238c8f1e5aa", "node_type": "1", "metadata": {"date": "2023-04-17T07:51:19.193+00:00"}, "hash": "10abe23c3256550c739a1a480f7a55e29a2edb1ab0496ab72aa5590f3ece200e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1673038-c0e5-49ae-9265-e6d0bf56b2c2", "node_type": "1", "metadata": {}, "hash": "4ebfb1627ca3453e2a59db772ac40fe223d3ef71b05a837b2877004dc10fc16a", "class_name": "RelatedNodeInfo"}}, "text": "viaan:\nCan anyone help me with chosing from a list of documents, user will select the document he needs and then ask questions to it\nmeowmix:\ncan you share more about the context / documents?\nviaan:\nThey are pdf files", "start_char_idx": 0, "end_char_idx": 217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1673038-c0e5-49ae-9265-e6d0bf56b2c2": {"__data__": {"id_": "b1673038-c0e5-49ae-9265-e6d0bf56b2c2", "embedding": null, "metadata": {"date": "2023-04-17T13:53:09.005+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097520126120710224", "node_type": "4", "metadata": {"date": "2023-04-17T13:53:09.005+00:00"}, "hash": "75794a804576311fc5bfc5cce94f3ec7389200b3fabf9cb5617a4e4f351026d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66a145e7-56b3-4b68-8164-7fc6b14b9cfd", "node_type": "1", "metadata": {"date": "2023-04-17T10:20:03.611+00:00"}, "hash": "e177be0dd14f2a6fa206faf1931707607936d01f04090ad5182e1c7b6fc1f5c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "288e7525-a573-42f8-8a3a-3d1f784b0925", "node_type": "1", "metadata": {}, "hash": "97e49e86cde94e00c75b6b9df0b259d5b8cb231cba2aad6c1ef6e6c9363a4aae", "class_name": "RelatedNodeInfo"}}, "text": "krishnan99:\nIt'll be great if you can send it\nTeemu:\nhttps://www.pinecone.io/learn/chunking-strategies/\nkrishnan99:\nThanks!", "start_char_idx": 0, "end_char_idx": 123, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "288e7525-a573-42f8-8a3a-3d1f784b0925": {"__data__": {"id_": "288e7525-a573-42f8-8a3a-3d1f784b0925", "embedding": null, "metadata": {"date": "2023-04-17T15:00:45.923+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097537142068101241", "node_type": "4", "metadata": {"date": "2023-04-17T15:00:45.923+00:00"}, "hash": "5d8ba80d57c004aa2e91d682104b2264163ace57c931b59fdf38dbbc49f1964f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1673038-c0e5-49ae-9265-e6d0bf56b2c2", "node_type": "1", "metadata": {"date": "2023-04-17T13:53:09.005+00:00"}, "hash": "34b69f94ec166ef385ff9073142e13266992a7883abfc68b61e3084ee7e96497", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "294221e5-3108-4d07-96f1-55025d939c65", "node_type": "1", "metadata": {}, "hash": "3f43039e207571c5f74ea1245f35b10e818713bc9bfc3b9e7c522f4ded7008fa", "class_name": "RelatedNodeInfo"}}, "text": "Ratsock:\nhi, im wondering what the best way approach reindexing is for data sources that are changing regularly. Especially I'm wondering on something like streaming data in to prompt the reindexing in a somewhat efficient manner as opposed to dumping a large data set then reindexing it offline. Does anyong have any tips here?\ndiridiri:\nIt may depend on the model you use and your applications, I think update method and refresh method is made for that,\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/index_structs/update.html#update\n\nIt's not quite explained in document but you'll figure out in the source code!\nRatsock:\nthat's perfect. I'll have a play with this on performance as well.", "start_char_idx": 0, "end_char_idx": 695, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "294221e5-3108-4d07-96f1-55025d939c65": {"__data__": {"id_": "294221e5-3108-4d07-96f1-55025d939c65", "embedding": null, "metadata": {"date": "2023-04-17T16:26:13.207+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097558647455887462", "node_type": "4", "metadata": {"date": "2023-04-17T16:26:13.207+00:00"}, "hash": "cfd868ad7f799638d1e269823ced1c03f985a6a21491eb55840a6bcbf3d1a20a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "288e7525-a573-42f8-8a3a-3d1f784b0925", "node_type": "1", "metadata": {"date": "2023-04-17T15:00:45.923+00:00"}, "hash": "6d04adfa74fea1c5b4cbd69d5049821fb72a37b8d41e6ac79233543022003902", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8997ca1d-08c7-48e8-9e05-4d9202f3bc17", "node_type": "1", "metadata": {}, "hash": "3190ea0d84fdb77d59bd2e24622f43b3e3f9a1a5808978668b3d2819362572f0", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nanyone got any experience using llama with azure open ai service? #\u2753issues-and-help #\ud83d\udccaenterprise-use-cases\nAndreaSel93:\nMe!", "start_char_idx": 0, "end_char_idx": 135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8997ca1d-08c7-48e8-9e05-4d9202f3bc17": {"__data__": {"id_": "8997ca1d-08c7-48e8-9e05-4d9202f3bc17", "embedding": null, "metadata": {"date": "2023-04-17T17:17:57.562+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097571668064477424", "node_type": "4", "metadata": {"date": "2023-04-17T17:17:57.562+00:00"}, "hash": "c601e38af292760df7c155c59c07dc78c04b17c2c47ced283ac294bad335b883", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "294221e5-3108-4d07-96f1-55025d939c65", "node_type": "1", "metadata": {"date": "2023-04-17T16:26:13.207+00:00"}, "hash": "39a6cab187c6a1a969b3b068d2d0ba6e2abd2ef31a79e96a54e5bdae2bc4cbc2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56422d1e-4ea2-42a2-bcfd-b60e6c6c82d9", "node_type": "1", "metadata": {}, "hash": "b700467fca222e5f61dfff313856f4e1d738160c75d0320574eb3553581ae54b", "class_name": "RelatedNodeInfo"}}, "text": "krishnan99:\nHello! Is there a way to get the cosine similarity score of the top k context nodes with the query? This will be useful to understand if the context is relevant to the query \ud83d\ude42\n\nIn addition to this I was wondering if there was any functionalities that allows us to obtain the number of query tokens, context tokens and output tokens used in a single call? Or would we have to manually find it using tiktoken package?\nLogan M:\nYou can check the response object for the score of each source node\n\n`response.source_nodes[0].score` will get the score of the first node, for example\n\nNot an easy way to get those numbers though \ud83e\udd14 only the total number of tokens used, instead of those split into categories\nkrishnan99:\nThank you! How can we get the total tokens used?\nLogan M:\n`index._service_context.llm.last_token_usage()`\n\n`index._service_context.embed_model.last_token_usage()`", "start_char_idx": 0, "end_char_idx": 887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56422d1e-4ea2-42a2-bcfd-b60e6c6c82d9": {"__data__": {"id_": "56422d1e-4ea2-42a2-bcfd-b60e6c6c82d9", "embedding": null, "metadata": {"date": "2023-04-17T18:45:47.48+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097593771702624366", "node_type": "4", "metadata": {"date": "2023-04-17T18:45:47.48+00:00"}, "hash": "fab22e3e056351ba0321c16067b12d1140ed5fdc753ec4d1f1d799027422d25b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8997ca1d-08c7-48e8-9e05-4d9202f3bc17", "node_type": "1", "metadata": {"date": "2023-04-17T17:17:57.562+00:00"}, "hash": "25391fb44db5950852655d56a932f52ba94ec68d4e40d8de4fe82b27a2877ad4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e3ad923-50bd-4ca4-8598-fc741c0d2bf0", "node_type": "1", "metadata": {}, "hash": "1d590a681bf5df20c65acd5345941d73e7515a83ba5c9134d883a02946cf080c", "class_name": "RelatedNodeInfo"}}, "text": "npravecek:\nFor this tutorial: https://gpt-index.readthedocs.io/en/latest/guides/tutorials/sql_guide.html in the Storing Table Context within an Index part they have an index.query but that index isn't defined in that code segment. Is that just using the index = SQLStructStoreIndex.from_documents(\n    wiki_docs, \n    sql_database=sql_database, \n    table_name=\"city_stats\",\n    sql_context_container=context_container,\n) or is it something different?\nLogan M:\nI think it should be that one! (Just need to rebuild it with thew new context container data)\nnpravecek:\nWill the user be able to query against multiple tables using joins with that tutorial or do I need to do something differently for that?", "start_char_idx": 0, "end_char_idx": 702, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e3ad923-50bd-4ca4-8598-fc741c0d2bf0": {"__data__": {"id_": "1e3ad923-50bd-4ca4-8598-fc741c0d2bf0", "embedding": null, "metadata": {"date": "2023-04-17T23:27:43.706+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097664723497009304", "node_type": "4", "metadata": {"date": "2023-04-17T23:27:43.706+00:00"}, "hash": "1bd719b8695939ccc3aee10cc86edbcb175d96014192dda8e9fbceb13999d443", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56422d1e-4ea2-42a2-bcfd-b60e6c6c82d9", "node_type": "1", "metadata": {"date": "2023-04-17T18:45:47.48+00:00"}, "hash": "3c9b05c702b3fd25c4a958dcc2e8b2d02ff459159e894491216d411cf2d51254", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "033a5b12-7a77-4ca9-9b98-4c77c13d0ba2", "node_type": "1", "metadata": {}, "hash": "849c4f8b818b046087d6d38502b94b533f19e74cff78cb153f79ffa56c165533", "class_name": "RelatedNodeInfo"}}, "text": "apatrickegan:\nwould anyone like to spend thirty minutes with me on a zoom call and walk me through some concepts. I have everything setup, but am just dying, nothing I am doing is working out.\nmeowmix:\nsure, sent you a DM", "start_char_idx": 0, "end_char_idx": 221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "033a5b12-7a77-4ca9-9b98-4c77c13d0ba2": {"__data__": {"id_": "033a5b12-7a77-4ca9-9b98-4c77c13d0ba2", "embedding": null, "metadata": {"date": "2023-04-18T00:54:00.262+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097686435546529823", "node_type": "4", "metadata": {"date": "2023-04-18T00:54:00.262+00:00"}, "hash": "4863350f848c7af6928379c701cf3994cd0d1cd805cc365a51e3016eea2c5d3c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e3ad923-50bd-4ca4-8598-fc741c0d2bf0", "node_type": "1", "metadata": {"date": "2023-04-17T23:27:43.706+00:00"}, "hash": "3b131b76bc69507a656e7a06adec6615807e846d126d96cb21f6561e1d874a0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "40fec9b8-a0e4-45a3-999e-e4383eef6011", "node_type": "1", "metadata": {}, "hash": "e71f51229748df2c604fa897f824df0c653f9c4df09027a3c7b5eee3e0a93dc0", "class_name": "RelatedNodeInfo"}}, "text": "apatrickegan:\nGreetings.... I am stuck on some code.  I was using gpt4 and the pinecone-client does not have some of the functions that the code is referencing.  I am just trying to upsert data into pinecone and its gagging every time..  Enter 'new' to create a new index, 'existing_empty' to use an empty existing index, or 'existing_populated' to use a populated existing index: existing_empty\nEnter the name of the existing index: deerfield\n\n  0%|          | 0/25 [00:00<?, ?it/s]Error processing file 'C:/Users/widge/Auto-GPT/auto_gpt_workspace/deerfield\\17-73APlan16R-11376 (1).pdf': name 'index' is not defined\n\n  4%|\u258d         | 1/25 [00:00<00:04,  5.57it/s]Error processing file 'C:/Users/widge/Auto-GPT/auto_gpt_workspace/deerfield\\17-73APlan16R-11376.pdf': name 'index' is not defined\n\n  8%|\u258a         | 2/25 [00:00<00:03,  6.51it/s]Error processing file 'C:/Users/widge/Auto-GPT/auto_gpt_workspace/deerfield\\17-73BPlan16R-11378.pdf': name 'index' is not defined\n\nAttributeError: module 'pinecone' has no attribute 'compute_vector'\napatrickegan:\nhttps://docs.pinecone.io/docs/insert-data\napatrickegan:\nI am thinking i have not defined the word index properly.  index.upsert(vectors=ids_vectors_chunk)  # Assuming `index` defined elsewhere is the code from the site.", "start_char_idx": 0, "end_char_idx": 1273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40fec9b8-a0e4-45a3-999e-e4383eef6011": {"__data__": {"id_": "40fec9b8-a0e4-45a3-999e-e4383eef6011", "embedding": null, "metadata": {"date": "2023-04-18T02:35:43.6+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097712034801524756", "node_type": "4", "metadata": {"date": "2023-04-18T02:35:43.6+00:00"}, "hash": "82809e233ead403401562031d2143a0e48bc94e30899502c651b579bd68909c6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "033a5b12-7a77-4ca9-9b98-4c77c13d0ba2", "node_type": "1", "metadata": {"date": "2023-04-18T00:54:00.262+00:00"}, "hash": "8dc5821c7f34f36fc8b609afa871ac5257d8f3b385b21b88a3ec795023cb9b20", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7a84c16-45ad-435a-a389-56a23a0bda78", "node_type": "1", "metadata": {}, "hash": "dcb1132ba09aa237bc9b9e240745eb0f058a3cf95212c6e6d17b8aa94259674c", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\nHi everyone, I have one quick question, I didn't understand, probably I missed it while reading the docs, if GPT Index is free to use also for profit?\nLogan M:\nLike, can you use llama index in a commercial app? Definitely! It's MIT licensed\n\n(Also feel free to share what you build in the #\ud83d\ude0eapp-showcase channel!)\nTesterMan:\nAmazing, and are the data I use to train the ai sent somewhere?", "start_char_idx": 0, "end_char_idx": 399, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7a84c16-45ad-435a-a389-56a23a0bda78": {"__data__": {"id_": "d7a84c16-45ad-435a-a389-56a23a0bda78", "embedding": null, "metadata": {"date": "2023-04-18T03:17:18.516+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097722499237695488", "node_type": "4", "metadata": {"date": "2023-04-18T03:17:18.516+00:00"}, "hash": "a54712f583b00223ac2796ccc75f5280b1f71f61c8b8aac6bcbebc4bde8eeee0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "40fec9b8-a0e4-45a3-999e-e4383eef6011", "node_type": "1", "metadata": {"date": "2023-04-18T02:35:43.6+00:00"}, "hash": "c4f372c9c854922418a7e9d1d4e2af32551f4faf4150967789ba2aaf16b83479", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b91b8ba-b948-422b-89a2-fa38730655be", "node_type": "1", "metadata": {}, "hash": "124d358678637782bbe65a6b6e9a33d3dddd0cc4811fecc6a48294ae3ac5d488", "class_name": "RelatedNodeInfo"}}, "text": "guardiang:\n@Logan M was trying out the sandbox and ran into an issue with the Term Extractor, here's a screenshot\nLogan M:\nOh weird! I'll add that dependency to the space, thanks for finding that! \ud83d\ude4f\nguardiang:\ni'm really good at finding bugs apparently \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 254, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b91b8ba-b948-422b-89a2-fa38730655be": {"__data__": {"id_": "0b91b8ba-b948-422b-89a2-fa38730655be", "embedding": null, "metadata": {"date": "2023-04-18T05:58:26.604+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097763050137858048", "node_type": "4", "metadata": {"date": "2023-04-18T05:58:26.604+00:00"}, "hash": "34f85ccd372e27ad8f4ab5fe1b97be5cdc21ba9e6ed6aaf5b051156aa38cf89e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7a84c16-45ad-435a-a389-56a23a0bda78", "node_type": "1", "metadata": {"date": "2023-04-18T03:17:18.516+00:00"}, "hash": "a351c7abac90adea7734885c990b407a4395ee1a77f0bdb8c9c02280d0360b38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75d38914-29d9-459e-b76e-d522f704f23a", "node_type": "1", "metadata": {}, "hash": "faed170bc015e36c4866bd52c5b719f8c73d1edee0e3bc2e4f3a30e826d65a13", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\nIs there a way to update the json output file instead of rebuild it? Because I have many files i use for GTPSimpleVectorIndex and I probably will change some small things in the future, and re do it all will cost me a lot\ud83d\ude05\nTesterMan:\nHello, i am sorry I haven't seen if someone answered this question, but i am still wandering if this is possible", "start_char_idx": 0, "end_char_idx": 357, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75d38914-29d9-459e-b76e-d522f704f23a": {"__data__": {"id_": "75d38914-29d9-459e-b76e-d522f704f23a", "embedding": null, "metadata": {"date": "2023-04-18T06:12:38.202+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097766621998751766", "node_type": "4", "metadata": {"date": "2023-04-18T06:12:38.202+00:00"}, "hash": "8e1ecb0d53e80224a6baae9bacfc7610b6a2558fccb23e29e4d34b30f11f2efc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b91b8ba-b948-422b-89a2-fa38730655be", "node_type": "1", "metadata": {"date": "2023-04-18T05:58:26.604+00:00"}, "hash": "0b5a0420acc523cba83d3344cad0cb6254b63f38f2cda19b4e41c2e750a1b9cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ccbbf90-23c7-4290-befa-6008252fe975", "node_type": "1", "metadata": {}, "hash": "f054bd304a5bce4fdcd4b4ebb40026508a0650421dadea9f0914bb6b56e90853", "class_name": "RelatedNodeInfo"}}, "text": "LLYX:\nSometimes I have as many as 3-4 sentences in my prompt dedicated to telling the model to not hallucinate lol\nAbhishek22:\nTrue, We tested with custom QA prompt which works earlier. But recently it cannot control hallucination with gpt-3.5/4 using llama-index. Suprisingly, When we use it with a langchain agent it works\nLLYX:\nHow did you use it with the langchain agent? Did you use llama-index as a tool or just directly using pinecone + langchain?\nAbhishek22:\nIt was more of a manual task we did to test it out, we extracted sources from pinecone and then use langchain to query over those sources", "start_char_idx": 0, "end_char_idx": 604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ccbbf90-23c7-4290-befa-6008252fe975": {"__data__": {"id_": "4ccbbf90-23c7-4290-befa-6008252fe975", "embedding": null, "metadata": {"date": "2023-04-18T06:28:35.583+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097770637545721876", "node_type": "4", "metadata": {"date": "2023-04-18T06:28:35.583+00:00"}, "hash": "7ed47aace1c7125d679ca73f9322a817b0e67ea03af6ebcae8ec2180096b45b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75d38914-29d9-459e-b76e-d522f704f23a", "node_type": "1", "metadata": {"date": "2023-04-18T06:12:38.202+00:00"}, "hash": "8f8b3c5d8e63ac1fc4caf083993429964db367280c2432e52c6d48159a1b7262", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84315fdc-5780-4066-8f54-11cfb25164f2", "node_type": "1", "metadata": {}, "hash": "c7713a50c547bffad5bea9eef7faa96f7b7df3328198ea65ac9657fa170fec58", "class_name": "RelatedNodeInfo"}}, "text": "Abhishek22:\n@LLYX Do you think refine prompt is forcing hallucination?\nLLYX:\nAre you going beyond the context window size? If you're only using a single 1024 length chunk + custom prompt I don't think you'd usually need refinement\nAbhishek22:\nYes i tested it with passing similarity_top_k = 1/2/3 for querying but with chunk size set to 1024 It started hallucinating\nLLYX:\nYeah with those params I don't thiiink you'd trigger the refine prompt with a simple vector store... what phrases are you using to avoid hallucination currently?\nAbhishek22:\nBtw, We are using GPTPineconeIndex\nLLYX:\nShould still be ok and not need any refinement I think", "start_char_idx": 0, "end_char_idx": 642, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84315fdc-5780-4066-8f54-11cfb25164f2": {"__data__": {"id_": "84315fdc-5780-4066-8f54-11cfb25164f2", "embedding": null, "metadata": {"date": "2023-04-18T08:57:54.468+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097808213832892426", "node_type": "4", "metadata": {"date": "2023-04-18T08:57:54.468+00:00"}, "hash": "eb7838dbc0e508a5aef91b7c4720882c4216e587d6069204b82b4d136e277217", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ccbbf90-23c7-4290-befa-6008252fe975", "node_type": "1", "metadata": {"date": "2023-04-18T06:28:35.583+00:00"}, "hash": "ed400f5cf08d4bb8a465c2fd3de3ccbdea8e7f135afd0baa326d05e37d34c438", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14128ad0-4144-4b23-adc0-bbff73d529c5", "node_type": "1", "metadata": {}, "hash": "574e78c89644f8d448c3e33f01aa3cf398d9c69d4d1f48e2cf1747604ec3fd46", "class_name": "RelatedNodeInfo"}}, "text": "aleks_wordcab:\nWe're using an internal tool to assess various open source LLMs against GPT-3.5. Is there a way to retrieve the exact prompt / prompt chain that was fed to OpenAI via llama_index (like the stuff you see when verbose is set to True and the logger is set to DEBUG)? This way we can create a test set for comparison.\naleks_wordcab:\nFor example here's the schema I extracted based on the DEBUG logs for a PrevNext-based query\n\n> >>> QUERY 1\n> \n> Context information is below. \n> \n> ---------------------\n> \n> TEXT CHUNK 1\n> \n> \n> TEXT CHUNK 2\n> \n> ---------------------\n> \n> Given the context information and not prior knowledge, answer the question: QUESTION\n> \n> \n> >>> OUTPUT 1\n> \n> \n> >>> QUERY 2\n> \n> [USER] QUESTION\n> \n> [ASSISTANT] OUTPUT 1\n> \n> [USER] We have the opportunity to refine the above answer (only if needed) with some more context below.\n> \n> ------------\n> \n> TEXT CHUNK 3\n> \n> TEXT CHUNK 4\n> \n> TEXT CHUNK 5\n> \n> ------------\n> \n> Given the new context, refine the original answer to better answer the question. If the context isn't useful, output the original answer again.\n> \n> \n> >>> OUTPUT 2\n> \n> \n> >>> QUERY 3\n> \n> [USER] QUESTION\n> \n> [ASSISTANT] OUTPUT 2\n> \n> [USER] We have the opportunity to refine the above answer (only if needed) with some more context below.\n> \n> ------------\n> \n> TEXT CHUNK 6\n> \n> TEXT CHUNK 7\n> \n> TEXT CHUNK 8\n> \n> ------------\n> \n> Given the new context, refine the original answer to better answer the question. If the context isn't useful, output the original answer again.\n> \n> \n> >>> OUTPUT 3\n> \n> \n> >>> QUERY 4\n> \n> [USER] QUESTION\n> \n> [ASSISTANT] OUTPUT 3\n> \n> [USER] We have the opportunity to refine the above answer (only if needed) with some more context below.\n> \n> ------------\n> \n> TEXT CHUNK 9\n> \n> ------------\n> \n> Given the new context, refine the original answer to better answer the question. If the context isn't useful, output the original answer again.\n> \n> \n> >>> FINAL OUTPUT\naleks_wordcab:\nAny way to just get the above prompt chain as a simple array or dict?\naleks_wordcab:\nFinally, for one example query, I counted ~5k tokens for the above prompt chain ($0.01 with turbo). However, the final cost seemed to be in the $0.30-$0.40 range. Any idea what I'm missing from the final token count?", "start_char_idx": 0, "end_char_idx": 2287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14128ad0-4144-4b23-adc0-bbff73d529c5": {"__data__": {"id_": "14128ad0-4144-4b23-adc0-bbff73d529c5", "embedding": null, "metadata": {"date": "2023-04-18T12:30:36.608+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097861742127755354", "node_type": "4", "metadata": {"date": "2023-04-18T12:30:36.608+00:00"}, "hash": "40c064bf04648033ae2a46bd6c4e02d208da90ca6d4805937344b2707c48820f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84315fdc-5780-4066-8f54-11cfb25164f2", "node_type": "1", "metadata": {"date": "2023-04-18T08:57:54.468+00:00"}, "hash": "75e57e58223aad2c70b38cf67f4e291af1f65eeb43b1f64a9afbadde128c939e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "acb092cf-ddeb-4236-84b6-4c168d344395", "node_type": "1", "metadata": {}, "hash": "4ce871a041c210e348cb111151c4a9359de101a11fb7993d13cc829d24074547", "class_name": "RelatedNodeInfo"}}, "text": "iamarunchauhan:\nDear folks, I would like read a local video .mp4 files from my local directly and would like to index it using llama_index \n\nBelow is the code which helped me to read it from youtube by using YoutubeTranscriptReader and it worked.\n\nBut I'm not sure how to read a video from my local storage.\ncan some please help and guide on this. I checked the documentation but not able to find it yet. \n\n**YoutubeTranscriptReader = download_loader(\"YoutubeTranscriptReader\")\nloader = YoutubeTranscriptReader()\ndocuments = loader.load_data(ytlinks=['https://youtu.be/....'])**\niamarunchauhan:\nDear @Logan M if you can share your inputs here & help  me out please.\nLogan M:\nI'm assuming if you are loading a local mp4 file, you'll need to extract the audio and apply some model to get the transcript first right? Mayn\nBe whisper? I'm not an expert on this \ud83d\ude05\n\nYouTube is easier since they auto-generate captions to download\niamarunchauhan:\nYes sure, I'll try this out also after transcripting first.\nTo give a more better picture of my problem, let me elaborate it more.\n\nI took one youtube video link which was in English. I loaded it & indexed it using GPTSimpleVectorIndex & then queried the index according to my question. This worked well.\n\n**YoutubeTranscriptReader = download_loader(\"YoutubeTranscriptReader\")\nloader = YoutubeTranscriptReader()\ndocuments = loader.load_data(ytlinks=['https://youtu.be/...'])\nindex = GPTSimpleVectorIndex.from_documents(documents) **\n\nNow next part is I downloaded this youtube video in my local and saved it as **myyoutubevideo.mp4** in the same directory where this code script is present. I'd like to perform the same task i.e. loading, indexing & querying, but I don't know how to implement that from local storage", "start_char_idx": 0, "end_char_idx": 1757, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acb092cf-ddeb-4236-84b6-4c168d344395": {"__data__": {"id_": "acb092cf-ddeb-4236-84b6-4c168d344395", "embedding": null, "metadata": {"date": "2023-04-18T17:31:37.147+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097937493518733453", "node_type": "4", "metadata": {"date": "2023-04-18T17:31:37.147+00:00"}, "hash": "195e99d9c78f328bbc30090967835a8bfbc88341a2fd28865ff7e3241e73bd42", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14128ad0-4144-4b23-adc0-bbff73d529c5", "node_type": "1", "metadata": {"date": "2023-04-18T12:30:36.608+00:00"}, "hash": "bda6b552975f1604285b4aff91fb5d99fb4b16eea7fa2db853dac6e9039ee6de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e319c23-ea18-4392-8367-9d7b1d345fd6", "node_type": "1", "metadata": {}, "hash": "10158738628b7f51e66be2d973bd7bc8fef5a5cee659141a8f054ea97e578087", "class_name": "RelatedNodeInfo"}}, "text": "rui:\nHi. Does llama index support cacheing like langchain? I thought the llm_predictor uses langchain's LLM and thus caching would wokr, but i was wrong...\naleks_wordcab:\n@Logan M any plans to integrate with https://github.com/zilliztech/GPTCache\nLogan M:\nI just took a quick look, but it basically just uses embedding similarity to see if queries are the same?\n\nI guess if you set the similarity threshold high enough, this would work alright. Could even do our own implementation super easily with GPTSimpleVectorIndex\naleks_wordcab:\nWould be awesome to have a native version", "start_char_idx": 0, "end_char_idx": 577, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e319c23-ea18-4392-8367-9d7b1d345fd6": {"__data__": {"id_": "8e319c23-ea18-4392-8367-9d7b1d345fd6", "embedding": null, "metadata": {"date": "2023-04-18T19:47:00.377+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097971564814794842", "node_type": "4", "metadata": {"date": "2023-04-18T19:47:00.377+00:00"}, "hash": "3b70ab1cbb152f4b4be9e29749245f101f16286948f5cb444c03594d8b90eca7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acb092cf-ddeb-4236-84b6-4c168d344395", "node_type": "1", "metadata": {"date": "2023-04-18T17:31:37.147+00:00"}, "hash": "9d18ffa24c5f87e44558ac2bee4cec96a1f2edbd1917e43d35d95c00d05a500a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25094501-8d87-4df7-af72-38e76d5e6a98", "node_type": "1", "metadata": {}, "hash": "9032069199b13701128f1aecd7b2dec804ce8b8662374dd579bc890d5d70dc1f", "class_name": "RelatedNodeInfo"}}, "text": "skydel0:\nhei guys I have a problem. My code just stop working today. I try to fix it by making it as simple as possible and going back to other version of the packages. But it still always crashes: code https://gist.github.com/devinSpitz/e7aabdf1036f81745543739d0d5a59b9 error: https://gist.github.com/devinSpitz/3e83f8ab3d3d49a2875d31c1263d0d9a     I use that in a docker and after the restart today everything stop working (normaly restarts where no problem until today xD).\nLogan M:\nI'll take a look at the error, but plz plz pin the versions of python packages if you are deploying \ud83d\ude4f\ud83d\ude4f it will save you many headaches trust me haha\nskydel0:\ni try that now \ud83d\ude04 Thanks for the advice. These are the packages i already did go back to without making it better xD langchain==0.0.142\nllama_index==0.5.17\ntransformers>=4.28.0", "start_char_idx": 0, "end_char_idx": 819, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25094501-8d87-4df7-af72-38e76d5e6a98": {"__data__": {"id_": "25094501-8d87-4df7-af72-38e76d5e6a98", "embedding": null, "metadata": {"date": "2023-04-18T21:20:15.457+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097995032281239652", "node_type": "4", "metadata": {"date": "2023-04-18T21:20:15.457+00:00"}, "hash": "5092d8629d4fb13567c102fc3de8eebe820cf814d9606af835347664d69e77cd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e319c23-ea18-4392-8367-9d7b1d345fd6", "node_type": "1", "metadata": {"date": "2023-04-18T19:47:00.377+00:00"}, "hash": "90e1ad12b12c4555c61134e6565c5d7b0168eb5cccf9b948c41aca619fd00a96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37b62100-9ed9-4337-99cd-6b2f4fcf3aed", "node_type": "1", "metadata": {}, "hash": "bb7494746211598ff9437b53101f766d545a4630f9489a7ecf04a7b40800420a", "class_name": "RelatedNodeInfo"}}, "text": "Killer Queen:\n```Traceback (most recent call last):\n  File \"chat.py\", line 240, in <module>\n    index = build_index(['AAPL'], [2022])\n  File \"chat.py\", line 204, in build_index\n    index = GPTSimpleVectorIndex.load_from_disk(file_path)\n  File \"/PATH_TO_PROJECT_DIRECTORY/env/lib/python3.8/site-packages/llama_index/indices/base.py\", line 369, in load_from_disk\n    return cls.load_from_string(file_contents, **kwargs)\n  File \"/PATH_TO_PROJECT_DIRECTORY/env/lib/python3.8/site-packages/llama_index/indices/base.py\", line 345, in load_from_string\n    return cls.load_from_dict(result_dict, **kwargs)\n  File \"/PATH_TO_PROJECT_DIRECTORY/env/lib/python3.8/site-packages/llama_index/indices/vector_store/base.py\", line 260, in load_from_dict\n    vector_store = load_vector_store_from_dict(\n  File \"/PATH_TO_PROJECT_DIRECTORY/env/lib/python3.8/site-packages/llama_index/vector_stores/registry.py\", line 52, in load_vector_store_from_dict\n    type = vector_store_dict[TYPE_KEY]\nKeyError: '__type__'\n```\n\nHi, I got this error when I run `index = GPTSimpleVectorIndex.load_from_disk(file_path)`\nnezkikul:\nyep. I had a working POC for hackathon and need to present it tomorrow morning to my boss. Checked earlier and had the same error. Almost went nuts, but just re-indexing my docs and re-creating the graph did the job.... Almost went the \"download the old release and install it on colab\"-route lol", "start_char_idx": 0, "end_char_idx": 1391, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37b62100-9ed9-4337-99cd-6b2f4fcf3aed": {"__data__": {"id_": "37b62100-9ed9-4337-99cd-6b2f4fcf3aed", "embedding": null, "metadata": {"date": "2023-04-18T21:22:58.867+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097995717672448020", "node_type": "4", "metadata": {"date": "2023-04-18T21:22:58.867+00:00"}, "hash": "f9ab29caaae2bc41e9289d6555627220ee13b4169885878cc27cebd44f4691b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25094501-8d87-4df7-af72-38e76d5e6a98", "node_type": "1", "metadata": {"date": "2023-04-18T21:20:15.457+00:00"}, "hash": "7c89f7db590f581debd0f9ccc1bfcceab96050b359e9f7dedab87692bfed4232", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd697c7d-0249-488a-90d8-7b635e032367", "node_type": "1", "metadata": {}, "hash": "b90bd39add95915d7060738941f2b606b7454f762775da1c34d15a0db871c202", "class_name": "RelatedNodeInfo"}}, "text": "Killer Queen:\nI see someone suggest recreate the index.\nLogan M:\nYea was just going to say this. Minor change in llama index caused this for older indexes.. if the old index isn't too big it should be fine to recreate", "start_char_idx": 0, "end_char_idx": 217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd697c7d-0249-488a-90d8-7b635e032367": {"__data__": {"id_": "cd697c7d-0249-488a-90d8-7b635e032367", "embedding": null, "metadata": {"date": "2023-04-18T21:31:14.555+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1097997796738609222", "node_type": "4", "metadata": {"date": "2023-04-18T21:31:14.555+00:00"}, "hash": "2e67b2496f87933b2e2aa22c0a5930f9835175705a6dbd77ec88c40a73a8938d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37b62100-9ed9-4337-99cd-6b2f4fcf3aed", "node_type": "1", "metadata": {"date": "2023-04-18T21:22:58.867+00:00"}, "hash": "5147441198143a753f5f2e9abc230e92877d844bd9ce3bc9a0604e7b1f2f1d29", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdd13c24-8bf5-4b5c-afd8-b555ddd8fe7c", "node_type": "1", "metadata": {}, "hash": "b561ece02691ab221b1a0b1ef3d47344f7e569744ded4d1027b2d45b7661c018", "class_name": "RelatedNodeInfo"}}, "text": "Killer Queen:\n`AttributeError: 'GPTSimpleVectorIndex' object has no attribute 'set_text'` Does the new version remove `set_text` method from `GPTSimpleVectorIndex`?\nLogan M:\nYea, see the updated guide on graphs. I'm guessing you must have been on a pretty old version? \ud83d\ude05 https://gpt-index.readthedocs.io/en/latest/how_to/index_structs/composability.html", "start_char_idx": 0, "end_char_idx": 353, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdd13c24-8bf5-4b5c-afd8-b555ddd8fe7c": {"__data__": {"id_": "fdd13c24-8bf5-4b5c-afd8-b555ddd8fe7c", "embedding": null, "metadata": {"date": "2023-04-18T22:58:13.335+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098019685888434308", "node_type": "4", "metadata": {"date": "2023-04-18T22:58:13.335+00:00"}, "hash": "42892eeb1d4641ac3dd203959c24fd33aa4b588f3112b13e4c971a385a162b4f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd697c7d-0249-488a-90d8-7b635e032367", "node_type": "1", "metadata": {"date": "2023-04-18T21:31:14.555+00:00"}, "hash": "fa109f5b70dd58ec667516d86ca2f43d660770a4fe589ff30a80e6310d21e697", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "894351bc-fdf8-42c1-a75d-7f416d44e48a", "node_type": "1", "metadata": {}, "hash": "326ea3b56320a31b7c2c3bc5421e72f033b1c5e526f31e618e074bbfe68f2af1", "class_name": "RelatedNodeInfo"}}, "text": "evets:\nIs it possible to index a CSV and ask questions using gpt-4 against said index?\nLogan M:\nDefinitely. If the columns are simple (maybe a title and description, something like that), then the default loader using SimpleDirectoryReader will work fine. It creates a document for each row\n\nIf column names are important, you can use the PagedCSVReader https://llamahub.ai/l/file-paged_csv\nevets:\nIs it possible to query gpt-4 with the data, though? That API is only available via the ChatCompletion API\nLogan M:\nDefinitely! If you can index it, you can query with any LLM\nevets:\nBy any chance can you point me to an example?", "start_char_idx": 0, "end_char_idx": 626, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "894351bc-fdf8-42c1-a75d-7f416d44e48a": {"__data__": {"id_": "894351bc-fdf8-42c1-a75d-7f416d44e48a", "embedding": null, "metadata": {"date": "2023-04-18T23:21:48.964+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098025623466811432", "node_type": "4", "metadata": {"date": "2023-04-18T23:21:48.964+00:00"}, "hash": "a1807a4d31417464618c5be46061f19bcbf2e55eae24e1ddbb892a49f5a0201d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdd13c24-8bf5-4b5c-afd8-b555ddd8fe7c", "node_type": "1", "metadata": {"date": "2023-04-18T22:58:13.335+00:00"}, "hash": "7a15130e175588ae4f724050f92877ac9299be60147608e443f8ea4d992cd9f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9899cb33-2493-49b7-9365-e9716e4c2f31", "node_type": "1", "metadata": {}, "hash": "334e4288c8060c4d536774bffba0ebd46745fc2e5c55203a96448a431c21bf3b", "class_name": "RelatedNodeInfo"}}, "text": "heihei:\nis there a xlsx reader to split file by row? so we can embedding each row.\nLogan M:\nTry this\n\nhttps://llamahub.ai/l/file-pandas_excel", "start_char_idx": 0, "end_char_idx": 141, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9899cb33-2493-49b7-9365-e9716e4c2f31": {"__data__": {"id_": "9899cb33-2493-49b7-9365-e9716e4c2f31", "embedding": null, "metadata": {"date": "2023-04-19T00:51:31.056+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098048197596819516", "node_type": "4", "metadata": {"date": "2023-04-19T00:51:31.056+00:00"}, "hash": "4073e69c5a125119e65c77c8763691adbf20349da28db91fb005d725b901b24a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "894351bc-fdf8-42c1-a75d-7f416d44e48a", "node_type": "1", "metadata": {"date": "2023-04-18T23:21:48.964+00:00"}, "hash": "ed0f75b51b81c42b9e41ab834616ffc1b354843aab6486fb2bb4caf13035b6a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4b0e69e-23af-4e72-a916-0ff6e559dcea", "node_type": "1", "metadata": {}, "hash": "98336f3c83bd20d6ab1d792d64bfec9afce881d267b82ab60f9e6e5bf5ae6cf2", "class_name": "RelatedNodeInfo"}}, "text": "SeaCat:\nHi! I'm trying to implement the app where users could specify their own OpenAI API key but I can't figure out how to pass it as a variable, not as an environment variable. To create an index, I call GPTQdrantIndex.from_documents but there is no variable or parameter or whatever to specify the API key. Thanks!\ndiridiri:\nI think this is langchain related question.\nIf you're using OpenAI llm or ChatOpenAI llm, you can set openai_api_key as constructor param. see source down below!\nhttps://github.com/hwchase17/langchain/blob/master/langchain/chat_models/openai.py\nSeaCat:\nThanks, but I don't understand how and what to use here. When I call from_documents, inside it calls the OpenAI() instance where the openai key could be passed to but I don't see any way to do it. Maybe it can be done via customization?", "start_char_idx": 0, "end_char_idx": 818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4b0e69e-23af-4e72-a916-0ff6e559dcea": {"__data__": {"id_": "d4b0e69e-23af-4e72-a916-0ff6e559dcea", "embedding": null, "metadata": {"date": "2023-04-19T08:25:06.224+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098162346284826764", "node_type": "4", "metadata": {"date": "2023-04-19T08:25:06.224+00:00"}, "hash": "13a41664efd8340fc36e67a9cceb3ad4647e1b531ef7e73d6434730558946d36", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9899cb33-2493-49b7-9365-e9716e4c2f31", "node_type": "1", "metadata": {"date": "2023-04-19T00:51:31.056+00:00"}, "hash": "0de4a59c81858bc267e7fab9d71f3317182bac4941e52da637efd250643e7ca8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b1cf702-dc1f-4926-a57e-dc2340801041", "node_type": "1", "metadata": {}, "hash": "8aa2641c8fb7975713956251fa4c4ef9217a82a6614b07219982e4bfca0ef237", "class_name": "RelatedNodeInfo"}}, "text": "RY:\nHi everyone!\n\nCurrently, I read multiple documents, create multiple indexes(Use TreeIndex), compose and route(Use TreeIndex).\nAccuracy is low when similar content is written in some documents.\nI thought about improving the accuracy of the summary and changing the way chunks are divided, using LangChain, but\nIs there any solution? thanks\nnezkikul:\nto me it looks like your summaries are too similar", "start_char_idx": 0, "end_char_idx": 403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b1cf702-dc1f-4926-a57e-dc2340801041": {"__data__": {"id_": "8b1cf702-dc1f-4926-a57e-dc2340801041", "embedding": null, "metadata": {"date": "2023-04-19T15:02:44.536+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098262415298269294", "node_type": "4", "metadata": {"date": "2023-04-19T15:02:44.536+00:00"}, "hash": "3a4b2e3f8ff8789fbab987487060878ef11c92dc15df293f2fbc3323d441975e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4b0e69e-23af-4e72-a916-0ff6e559dcea", "node_type": "1", "metadata": {"date": "2023-04-19T08:25:06.224+00:00"}, "hash": "87e6747e1cec9f014f29c1f0e4f0d6b0a823993738c9fa01683f30c646976479", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1d9e9f9-76be-476a-b307-04807f3b6a98", "node_type": "1", "metadata": {}, "hash": "8e93e319aa64e8a0f8bb5f648a5e1cfd5c9a68b39d884b3894976f1f8ca1a3eb", "class_name": "RelatedNodeInfo"}}, "text": "derhyperschlaue:\nHi there, I have a simple question. What data is submitted to OpenAI? I want to build a simple chatbot with sensitive pdf information but I don't want to send this information into a cloud. The processing should be onPrem.\nLogan M:\nBy default, your data will be sent off-prem (encrypted) over the network to openai, and is subject to their current privacy policies \n\nCheck out #\ud83d\udcacgeneral for some links I just gave about using local LLMs and embedding models \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1d9e9f9-76be-476a-b307-04807f3b6a98": {"__data__": {"id_": "d1d9e9f9-76be-476a-b307-04807f3b6a98", "embedding": null, "metadata": {"date": "2023-04-19T16:19:48.261+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098281808606531694", "node_type": "4", "metadata": {"date": "2023-04-19T16:19:48.261+00:00"}, "hash": "ff21481db184fdb6fdf1bc43dbb7c1653fc968faebbd71d570dd58973cde677b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b1cf702-dc1f-4926-a57e-dc2340801041", "node_type": "1", "metadata": {"date": "2023-04-19T15:02:44.536+00:00"}, "hash": "c91d20bae789665eed41b0c1b80748d6ab79035fa5a5b64c28751a6c777278ea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f16fbedd-d0ef-4dbd-8af5-418776a7f8bd", "node_type": "1", "metadata": {}, "hash": "8a68be4005604dade2f53c759295cb1e10de9ffb606de08c43b689be3f4cc3ed", "class_name": "RelatedNodeInfo"}}, "text": "Jack2020:\nHey guys, is it normal for a ComposableGraph to take an average of 53.972308 seconds to process a query? Why is it so slow? Is there any way to fix it?\nLogan M:\nWhat does your graph look like? Response time is dependent on a ton of things (how busy openAI is, what indexes you use, how many layers your graph has)", "start_char_idx": 0, "end_char_idx": 323, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f16fbedd-d0ef-4dbd-8af5-418776a7f8bd": {"__data__": {"id_": "f16fbedd-d0ef-4dbd-8af5-418776a7f8bd", "embedding": null, "metadata": {"date": "2023-04-19T16:28:21.762+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098283962385838180", "node_type": "4", "metadata": {"date": "2023-04-19T16:28:21.762+00:00"}, "hash": "df1d9469e63264066e79faf0e539ddafa63bceafaca3d1052d292cbcc9a00c1b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1d9e9f9-76be-476a-b307-04807f3b6a98", "node_type": "1", "metadata": {"date": "2023-04-19T16:19:48.261+00:00"}, "hash": "7dffe103e2d596d5de7b39ece09f5e7bb5e1d0c172e7cef75cca4355e9268256", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0ecf228-9acc-4349-821c-4c2945bca796", "node_type": "1", "metadata": {}, "hash": "0130fb1d9ab3d4a5424f89f9e33fb7eec410644266abaf43b8f46da4f395fd86", "class_name": "RelatedNodeInfo"}}, "text": "Jeff123:\nHello, I've a question on loading html files. I'm following the tutorial here (https://github.com/jerryjliu/llama_index/blob/main/examples/chatbot/Chatbot_SEC.ipynb), but with my own html file. However, I'm getting this error for some html files:\n\n```\nINFO:unstructured:Reading document from string ...\nINFO:unstructured:Reading document ...\nTraceback (most recent call last):\n  File \"/Users/user/crawl/index.py\", line 14, in <module>\n    html = loader.load_data(file=Path(f'./output1.html'))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/user/crawl/venv/lib/python3.11/site-packages/llama_index/readers/llamahub_modules/file/unstructured/base.py\", line 36, in load_data\n    elements = partition(str(file))\n               ^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/user/crawl/venv/lib/python3.11/site-packages/unstructured/partition/auto.py\", line 86, in partition\n    elements = partition_html(\n               ^^^^^^^^^^^^^^^\n  File \"/Users/user/crawl/venv/lib/python3.11/site-packages/unstructured/partition/html.py\", line 85, in partition_html\n    layout_elements = document_to_element_list(document, include_page_breaks=include_page_breaks)\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/user/crawl/venv/lib/python3.11/site-packages/unstructured/partition/common.py\", line 71, in document_to_element_list\n    num_pages = len(document.pages)\n                    ^^^^^^^^^^^^^^\n  File \"/Users/user/crawl/venv/lib/python3.11/site-packages/unstructured/documents/xml.py\", line 52, in pages\n    self._pages = self._read()\n                  ^^^^^^^^^^^^\n  File \"/Users/user/crawl/venv/lib/python3.11/site-packages/unstructured/documents/html.py\", line 101, in _read\n    etree.strip_elements(self.document_tree, [\"script\"])\n  File \"src/lxml/cleanup.pxi\", line 100, in lxml.etree.strip_elements\n  File \"src/lxml/apihelpers.pxi\", line 41, in lxml.etree._documentOrRaise\nTypeError: Invalid input object: NoneType\n\n```\nJeff123:\nAny idea why this is? For some websites it works, for example google.com", "start_char_idx": 0, "end_char_idx": 2088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0ecf228-9acc-4349-821c-4c2945bca796": {"__data__": {"id_": "c0ecf228-9acc-4349-821c-4c2945bca796", "embedding": null, "metadata": {"date": "2023-04-19T16:42:57.621+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098287636004737095", "node_type": "4", "metadata": {"date": "2023-04-19T16:42:57.621+00:00"}, "hash": "c81f0f6ce4bd0b683bd076aef8f7c9e8aaf4c73f5c49328f0c1860da8748a77d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f16fbedd-d0ef-4dbd-8af5-418776a7f8bd", "node_type": "1", "metadata": {"date": "2023-04-19T16:28:21.762+00:00"}, "hash": "7437647a567fec4affce9f25c9a403e40f996c32ff276fec3a45b31ac9377f89", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2fd2c70-b265-4306-bce0-6d596d50e1c4", "node_type": "1", "metadata": {}, "hash": "3a0b7457f58aa442ef7d6a3ed8dd5728484ec4906983b104e3c51e07131a6430", "class_name": "RelatedNodeInfo"}}, "text": "korzhov_dm:\nIs there a way to filter what is already in the index based on the metadata?\n\nLet's say I have 1000 documents and have metadata with creation date and let's say I want to ask the question created in the last year. Can you please tell me if it is possible to do this?\nLogan M:\nAs long as you know the date range ahead of time, check out this demo\n\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/node_postprocessor/RecencyPostprocessorDemo.ipynb\nkorzhov_dm:\nWhat about other metadata? Like category?", "start_char_idx": 0, "end_char_idx": 522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2fd2c70-b265-4306-bce0-6d596d50e1c4": {"__data__": {"id_": "f2fd2c70-b265-4306-bce0-6d596d50e1c4", "embedding": null, "metadata": {"date": "2023-04-20T03:46:55.183+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098454726850383892", "node_type": "4", "metadata": {"date": "2023-04-20T03:46:55.183+00:00"}, "hash": "d1b7887957ad76aab6baf4db8e30901a17ada25c36ef66034d8fcd02d6c56069", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0ecf228-9acc-4349-821c-4c2945bca796", "node_type": "1", "metadata": {"date": "2023-04-19T16:42:57.621+00:00"}, "hash": "413237ea188282da6345e59fc28c838fdd73667420e2e64b033627d9f8fed6c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b3d5372-7e31-4318-adc8-f6822e9ea5c3", "node_type": "1", "metadata": {}, "hash": "e97d4d3def1b6b658f0a472fe1065d2b4a73366e5827565242dfb90ffaa22d7a", "class_name": "RelatedNodeInfo"}}, "text": "nostalgic_nightingale:\ni'm trying to understand `query_config`s , in particular the example from the documentation https://gpt-index.readthedocs.io/en/latest/guides/tutorials/graph.html#querying-our-unified-interface\nLLYX:\nIf you are using a Graph, then you have multiple types of indices in that graph, most likely (vector stores, trees, lists). Query configs just let you pass in the params that you would've passed in to individual .query() calls to each of those individual types of indices\naleks_wordcab:\nDoes the order of the configs matter?\nLogan M:\nYes (but only if you are using index IDs)\n\nThe last config in the list is the last applied, if I'm remembering this right", "start_char_idx": 0, "end_char_idx": 678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b3d5372-7e31-4318-adc8-f6822e9ea5c3": {"__data__": {"id_": "2b3d5372-7e31-4318-adc8-f6822e9ea5c3", "embedding": null, "metadata": {"date": "2023-04-20T15:48:41.796+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098636367950532668", "node_type": "4", "metadata": {"date": "2023-04-20T15:48:41.796+00:00"}, "hash": "9f744135950a41bee208c8e98f7614a4ecf9f0067e787dc77969df7b95d3dcca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2fd2c70-b265-4306-bce0-6d596d50e1c4", "node_type": "1", "metadata": {"date": "2023-04-20T03:46:55.183+00:00"}, "hash": "c47efd05fbd6cf85fc7d9eec9637e382525c53f85ce50fb549530ae79cc476de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35c0543a-44dc-45a8-8255-1a423a0f7fea", "node_type": "1", "metadata": {}, "hash": "e27e13d994f5d506e3399fb2beb31b37a1baa1e5528883879bc8d0f101c3b07e", "class_name": "RelatedNodeInfo"}}, "text": "vincentyee:\ncan anyone help with the issue of importing llama-index in visual studio code (mac)? i have installed the packages but it's not showing\nAugusto Correa:\ncheck if the vs code is using the right interpreter", "start_char_idx": 0, "end_char_idx": 215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35c0543a-44dc-45a8-8255-1a423a0f7fea": {"__data__": {"id_": "35c0543a-44dc-45a8-8255-1a423a0f7fea", "embedding": null, "metadata": {"date": "2023-04-20T18:55:17.898+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098683327805919253", "node_type": "4", "metadata": {"date": "2023-04-20T18:55:17.898+00:00"}, "hash": "c202922ce942b7e5e8293f97b1bd01f29146b66dd1f8d67f8f4b36600e00743e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b3d5372-7e31-4318-adc8-f6822e9ea5c3", "node_type": "1", "metadata": {"date": "2023-04-20T15:48:41.796+00:00"}, "hash": "7badbcc168c40a7ef3eed9813a87ef59898edccce5dd7aba023b8d2cb2583343", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1c9944b-7794-400b-bb8f-927788336331", "node_type": "1", "metadata": {}, "hash": "7829ad92a9d844947f350dc706303ee0df74097213c5f1e9d54e1262d0b18912", "class_name": "RelatedNodeInfo"}}, "text": "Joie:\nI even provided this context for the agent:\n\nPREFIX = \"\"\"Assistant is a large language model trained by OpenAI, specifically designed to provide assistance and information based on a given documentation. Skilled at generating human-like text, Assistant enables natural-sounding conversations that are coherent and directly related to the topics covered within the source material.\n    \n    As a language model, Assistant focuses on processing and understanding the documentation it is provided, ensuring accurate and informative responses derived from the relevant text. Its primary function is to offer insights and information directly linked to the topics covered in the documentation.\n    \n    In addition to providing valuable insights from the source material, Assistant is also capable of engaging in basic conversation with users. It can respond to common greetings and inquiries while keeping the focus on the documentation-based topics. When faced with an unclear query, Assistant will first consult the documentation for relevance before requesting additional details from the user to provide accurate and contextually appropriate responses.\n    \n    Overall, Assistant is a specialized system that offers in-depth knowledge and support derived exclusively from the provided documentation. This ensures users receive pertinent and reliable information related to their questions and interests. Whether you need assistance with a specific query or simply want to chat about topics covered in the documentation, Assistant is here to help.\"\"\"\n    agent_chain = initialize_agent(\n        toolkit.get_tools(),\n        llm,\n        agent=\"chat-conversational-react-description\",\n        memory=memory,\n        verbose=True,\n        agent_kwargs={\"system_message\": PREFIX}\n    )\nLogan M:\nI've had a lot of trouble lately getting gpt 3.5 to follow instructions \ud83d\ude43", "start_char_idx": 0, "end_char_idx": 1871, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1c9944b-7794-400b-bb8f-927788336331": {"__data__": {"id_": "d1c9944b-7794-400b-bb8f-927788336331", "embedding": null, "metadata": {"date": "2023-04-20T19:03:17.096+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098685337708023988", "node_type": "4", "metadata": {"date": "2023-04-20T19:03:17.096+00:00"}, "hash": "6a30f14f39e07bf980b7ab552d3506fa5f3fbb6e6f68583f2fb4451324288c07", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35c0543a-44dc-45a8-8255-1a423a0f7fea", "node_type": "1", "metadata": {"date": "2023-04-20T18:55:17.898+00:00"}, "hash": "48e3377360095a29cce2f953689da83f1e6e0a8e8224b9cb256842968b7aac75", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b1b3451-2128-433f-ad07-d345077aed9b", "node_type": "1", "metadata": {}, "hash": "44a7e124be05a0411a1cf2ee8fa76716fdaf743295a32069af8afd0fc3082094", "class_name": "RelatedNodeInfo"}}, "text": "Joie:\nmaybe gpt 3.5 is not smart enough\nLogan M:\nIf you don't need the whole \"chatbot\" experience, you could just query the index directly, and return the answer and where it got its sources from  \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b1b3451-2128-433f-ad07-d345077aed9b": {"__data__": {"id_": "8b1b3451-2128-433f-ad07-d345077aed9b", "embedding": null, "metadata": {"date": "2023-04-20T19:10:36.843+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098687182140616745", "node_type": "4", "metadata": {"date": "2023-04-20T19:10:36.843+00:00"}, "hash": "4dba35d4e3f70b54a6c9ecb09038fad2d866371462991025c3d9c6d3e31adbd4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1c9944b-7794-400b-bb8f-927788336331", "node_type": "1", "metadata": {"date": "2023-04-20T19:03:17.096+00:00"}, "hash": "1161045ed581a83e41d1d0359a0e9a54cd0d6622684db656e7473dc8eaafb31a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a372065-573e-48bc-a2df-105369985510", "node_type": "1", "metadata": {}, "hash": "c60e37e5ba9d2590559dcd8b9454d30a9fd0672716c5e4653746e09a87d2d571", "class_name": "RelatedNodeInfo"}}, "text": "Joie:\nYou recommend just index queries and composable graphs to select between things like general vs specific summary info?\nLogan M:\nYea that's what I think works best personally, at least in my experience", "start_char_idx": 0, "end_char_idx": 206, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a372065-573e-48bc-a2df-105369985510": {"__data__": {"id_": "3a372065-573e-48bc-a2df-105369985510", "embedding": null, "metadata": {"date": "2023-04-21T01:10:05.236+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098777646537650206", "node_type": "4", "metadata": {"date": "2023-04-21T01:10:05.236+00:00"}, "hash": "a1eac70cec4eea8b2ed1835ca89548ce65cee014af690a322f7a9afbdbc2da53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b1b3451-2128-433f-ad07-d345077aed9b", "node_type": "1", "metadata": {"date": "2023-04-20T19:10:36.843+00:00"}, "hash": "e4a70f499670e60ba14b211b75a3f1fa935dde770fe9c1735fd7775f42cadb5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f72f83f-2740-438f-bfa5-910950143c1b", "node_type": "1", "metadata": {}, "hash": "b744c8279377943a74874be53d50277624c02316881ee54fe413b5c00bd2663a", "class_name": "RelatedNodeInfo"}}, "text": "sapchan:\nHey guys, I just started using Llama Index today, so still trying to figure everything out. I was just wondering, is it possible to create a composable graph made of other composable graphs?\nLogan M:\nDefinitely! Check out the latest tutorial that does just that \n\nhttps://gpt-index.readthedocs.io/en/latest/guides/tutorials/graph.html", "start_char_idx": 0, "end_char_idx": 343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f72f83f-2740-438f-bfa5-910950143c1b": {"__data__": {"id_": "0f72f83f-2740-438f-bfa5-910950143c1b", "embedding": null, "metadata": {"date": "2023-04-21T02:09:50.247+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1098792683163623475", "node_type": "4", "metadata": {"date": "2023-04-21T02:09:50.247+00:00"}, "hash": "60aa5def709a52ba2fdd2c8189c68b7ca44e341df89de782dbcc3d6ea22ce3c4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a372065-573e-48bc-a2df-105369985510", "node_type": "1", "metadata": {"date": "2023-04-21T01:10:05.236+00:00"}, "hash": "5bdbe338f5629dee34d5002b0044779c8904eb74a6e7bdf9d4aa8215e866772e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90c69b5a-8198-440f-ab3c-f72daa7cdfb8", "node_type": "1", "metadata": {}, "hash": "9d11e5d31e9a274401ffe48e1f83f31053f96e3523caefb357458bab96c2be07", "class_name": "RelatedNodeInfo"}}, "text": "abi:\ndoes llama index come with a website crawler/loader?\nLogan M:\nDefinitely! Plus a bunch more\n\nCheckout how to use them all here\n\nhttps://llamahub.ai/\nabi:\nthanks i did see that. is there one specifically for loading an entire website? looks like BeautifulSoupWebReader only takes in a list of individual page URLs.\nashishsha:\nI have one in works. Stay tuned I will put it up in couple of days . I am testing it . But I am limiting the page count to 20 for now", "start_char_idx": 0, "end_char_idx": 463, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90c69b5a-8198-440f-ab3c-f72daa7cdfb8": {"__data__": {"id_": "90c69b5a-8198-440f-ab3c-f72daa7cdfb8", "embedding": null, "metadata": {"date": "2023-04-21T18:33:18.722+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099040182646362203", "node_type": "4", "metadata": {"date": "2023-04-21T18:33:18.722+00:00"}, "hash": "c52433eaeb4ab7c5ecdb42ebb02bb39222fc686f54b7ac0e6ba940ca19786d0a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f72f83f-2740-438f-bfa5-910950143c1b", "node_type": "1", "metadata": {"date": "2023-04-21T02:09:50.247+00:00"}, "hash": "7caba378aa9c4605766d0b0f3c988b5dcac5405cc9669c0ae2d6eef2ae7742cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd60da02-3b0f-401f-8a70-37ee18cc97b2", "node_type": "1", "metadata": {}, "hash": "53d618f36838ede3c76d8f66acf86057dcf379a9a8c9a4fdbdddcf7c6203ff7f", "class_name": "RelatedNodeInfo"}}, "text": "mmp7700:\nI'm getting a permission denied error when trying to load a loader via the llamahub_modules/library.json on a server. Anyone run into this? Can I just download the loader locally and deploy it?\nLogan M:\nWhich loader are you loading?", "start_char_idx": 0, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd60da02-3b0f-401f-8a70-37ee18cc97b2": {"__data__": {"id_": "cd60da02-3b0f-401f-8a70-37ee18cc97b2", "embedding": null, "metadata": {"date": "2023-04-21T18:42:05.878+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099042393698865192", "node_type": "4", "metadata": {"date": "2023-04-21T18:42:05.878+00:00"}, "hash": "809db092cd38cf73416e214c190adc4dd9b2610907903010b4fff22e4af24916", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90c69b5a-8198-440f-ab3c-f72daa7cdfb8", "node_type": "1", "metadata": {"date": "2023-04-21T18:33:18.722+00:00"}, "hash": "ea91118509cf1fda61ae0cd6d0c28bbd46e9bd585cceadd66806d6368a34a88a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07acc492-fab7-416c-92b7-0be30eeb79d1", "node_type": "1", "metadata": {}, "hash": "09c33961d83fe5805f7fce325c43ff07fe4fb6e6098c2c3029d85b300de0fab0", "class_name": "RelatedNodeInfo"}}, "text": "mmp7700:\njust the docx loader. It's a simple function to include in a helper file but would be nice to load loaders on the server.\nLogan M:\nHmmm yea might be some server settings\n\nThe most common loaders are also available inside llama_index already.\n\n`from llama_index.readers.file.docs_parser import DocxParser`", "start_char_idx": 0, "end_char_idx": 313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07acc492-fab7-416c-92b7-0be30eeb79d1": {"__data__": {"id_": "07acc492-fab7-416c-92b7-0be30eeb79d1", "embedding": null, "metadata": {"date": "2023-04-22T00:09:50.855+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099124874590556210", "node_type": "4", "metadata": {"date": "2023-04-22T00:09:50.855+00:00"}, "hash": "177937a49936dfcc230ffee1a4b79bffb9cedd8541dadf1667da505ad957d9be", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd60da02-3b0f-401f-8a70-37ee18cc97b2", "node_type": "1", "metadata": {"date": "2023-04-21T18:42:05.878+00:00"}, "hash": "a1dc6c5a6f25c0f42c466dfc963555cca996c1684fdcec219d39aa2db2bd286f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f952f43-3ebb-42fa-bbe3-1be9cfba28bb", "node_type": "1", "metadata": {}, "hash": "795beaccd42041a9e772ae8ed6ecdf6e624619ef18f4eb8b6fd4d121c4de4a82", "class_name": "RelatedNodeInfo"}}, "text": "shere:\nhey team i'm getting index_struct error when trying to load a SQL structured store. I also don't see index struct in the saved index\n\n{\"index_id\": \"91ff3aa1-ac38-4cf7-9fd2-8a681b7b698f\", \"docstore\": {\"docs\": {}, \"ref_doc_info\": {}}, \"sql_context_container\": {\"context_dict\": {\"mailchimp.list_members_temp\": \"Schema of table mailchimp.list_members_temp:\\nTable 'mailchimp.list_members_temp' has columns: email_type (VARCHAR), member_rating (FLOAT), list_id (VARCHAR), lname (VARCHAR), phone (VARCHAR), address (VARCHAR), address_zip (VARCHAR), address_country (VARCHAR), address_addr2 (VARCHAR), address_city (VARCHAR), address_addr1 (VARCHAR), address_state (VARCHAR), mmerge6 (VARCHAR), birthday (VARCHAR), fname (VARCHAR), tag_name (VARCHAR), tag_id (INTEGER), unsubscribe_reason (VARCHAR), id (VARCHAR), timestamp_opt (TIMESTAMP), _sdc_table_version (INTEGER), country_code (VARCHAR), dstoff (INTEGER), timezone (VARCHAR), latitude (FLOAT), gmtoff (INTEGER), longitude (FLOAT), status (VARCHAR), tags_count (INTEGER), _sdc_received_at (TIMESTAMP), last_changed (TIMESTAMP), _sdc_sequence (INTEGER), source (VARCHAR), ip_opt (VARCHAR), unique_email_id (VARCHAR), vip (BOOLEAN), web_id (INTEGER), email_address (VARCHAR), language (VARCHAR), email_client (VARCHAR), _sdc_batched_at (TIMESTAMP), ip_signup (VARCHAR), avg_click_rate (FLOAT), avg_open_rate (FLOAT) and foreign keys: .\\n\"}, \"context_str\": null}}\n\n\nFile ~/virtualenvs/bright-black-ai-chat-template/lib/python3.10/site-packages/llama_index/indices/base.py:345, in BaseIndex.load_from_string(cls, index_string, **kwargs)\n    326 \"\"\"Load index from string (in JSON-format).\n    327 \n    328 This method loads the index from a JSON string. The index data\n   (...)\n...\n--> 319 index_struct = load_index_struct_from_dict(result_dict[INDEX_STRUCT_KEY])\n    320 assert isinstance(index_struct, cls.index_struct_cls)\n    321 docstore = load_docstore_from_dict(result_dict[DOCSTORE_KEY], **kwargs)\n\nKeyError: 'index_struct'\nLogan M:\nWith SQL indexes, it's definitely a bug that you can't save them.\n\nBut really, there's not much to save/load, since all the data is in the sql database (besides those context strings)\n\nAs a work around, you can reinitialize the index, which should be just as fast and does the same thing", "start_char_idx": 0, "end_char_idx": 2280, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f952f43-3ebb-42fa-bbe3-1be9cfba28bb": {"__data__": {"id_": "2f952f43-3ebb-42fa-bbe3-1be9cfba28bb", "embedding": null, "metadata": {"date": "2023-04-22T03:19:30.363+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099172603706486835", "node_type": "4", "metadata": {"date": "2023-04-22T03:19:30.363+00:00"}, "hash": "94396b887746d2a5c41508bba4265c024234f9269d61c1950a1a2434567d7a40", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07acc492-fab7-416c-92b7-0be30eeb79d1", "node_type": "1", "metadata": {"date": "2023-04-22T00:09:50.855+00:00"}, "hash": "cd9e2fd3894ea4f058ffcbc77702baa14ca0be96be42f49742967d7a020d1629", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffc0fadd-242f-47d5-be61-de7930b39ce2", "node_type": "1", "metadata": {}, "hash": "20a84c5a4c49e7977997ae3462f1253582a43a3085f3d13d36d83010b73f172c", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nwhen I create an agent to look for the answers from my vector indices (where each index==text from one pdf file). Do I create a separate tool for each index, or I need to create one tool?\nLogan M:\nUnless you create a graph over your indexes, you'll need one tool per index.\n\nBe careful though, you'll run out of prompt space around 30ish tools", "start_char_idx": 0, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffc0fadd-242f-47d5-be61-de7930b39ce2": {"__data__": {"id_": "ffc0fadd-242f-47d5-be61-de7930b39ce2", "embedding": null, "metadata": {"date": "2023-04-22T21:00:10.92+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099439531549265960", "node_type": "4", "metadata": {"date": "2023-04-22T21:00:10.92+00:00"}, "hash": "6998fffb3c68bbf3679f00a3597748afa7ca21567d5f2129d271d8a67a951404", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f952f43-3ebb-42fa-bbe3-1be9cfba28bb", "node_type": "1", "metadata": {"date": "2023-04-22T03:19:30.363+00:00"}, "hash": "7af92aa0416f4eec736e589abc81af836a515c512c35437e22e608e0f5d2dbdc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f071f721-ff1c-4ccd-b167-8505146968a4", "node_type": "1", "metadata": {}, "hash": "438dde0448b4c254b83b6456b05ef7b847c5f3699ea823cfd3372cde6dc3fe9a", "class_name": "RelatedNodeInfo"}}, "text": "moti.malka:\nHi, \nSomeone can help me hoe to manage the session history? \nwhat is the best way to inject the session history that I can aks the chatbot ? i try to inject the chat history into the prompt template like this but not sure if it the right way:\n\n    ```    QA_PROMPT_TMPL = (\n        \"You are a personal assistant. \\n\"\n        \"Here some rule: \\n\"\n        \"1. answer in the same language as a user. \\n\"\n        \"2. answer only for questions relatedd to the given information below\\n\"\n        \"Here the chat history from this user: \\n\"\n        \"---------------------\\n\"\n        f'{chat.chat_history}'\n        \"\\n---------------------\\n\"\n        \"We have provided context information below: \\n\"\n        \"---------------------\\n\"\n        \"{context_str}\"\n        \"\\n---------------------\\n\"\n        \"Given this information, please answer the question from context or from chat history: {query_str}\\n\"\n        ) ```\nLogan M:\nYea that looks right to me. You might also want to add the chat history to the refine template too\n\nIf you are using gpt 3.5, you can also create message/role based templates.\n\nYou could also use langchain if you want, to manage the chat history externally to llama index", "start_char_idx": 0, "end_char_idx": 1201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f071f721-ff1c-4ccd-b167-8505146968a4": {"__data__": {"id_": "f071f721-ff1c-4ccd-b167-8505146968a4", "embedding": null, "metadata": {"date": "2023-04-22T21:37:50.487+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099449008860184586", "node_type": "4", "metadata": {"date": "2023-04-22T21:37:50.487+00:00"}, "hash": "1d5dd9ec2b4b259e331aa69bb0894482e60090f4ebf90c728b4d7c4cb393c077", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffc0fadd-242f-47d5-be61-de7930b39ce2", "node_type": "1", "metadata": {"date": "2023-04-22T21:00:10.92+00:00"}, "hash": "84109e7f6e8fe297ec72cbf7886f5fc5a5aeade407981a84f16d40bc5551dfc3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7b0a6975-6a54-4101-8ed7-895ec211727a", "node_type": "1", "metadata": {}, "hash": "66941f504d7a3d755972f0e1d5d4ac1e3a8c044b2694a32ec4958315d2e6dcbf", "class_name": "RelatedNodeInfo"}}, "text": "moti.malka:\nBut then i will be statefull no? i have client\\api application (running on kubernetes) and not all requests from the client going bake into the same server\nLogan M:\nIsn't it already stateful if you are keeping track of conversation history?\n\nLangchain memory can be loaded to/from disk. I think they even have some redis Integration \n\nBut yea, if creating the qa amd refine templates for every query is more simple, definitely do that lol", "start_char_idx": 0, "end_char_idx": 450, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7b0a6975-6a54-4101-8ed7-895ec211727a": {"__data__": {"id_": "7b0a6975-6a54-4101-8ed7-895ec211727a", "embedding": null, "metadata": {"date": "2023-04-22T21:42:14.481+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099450116131258530", "node_type": "4", "metadata": {"date": "2023-04-22T21:42:14.481+00:00"}, "hash": "fc84ba749550389fe9edf767f2f311e66344d2aa8737fa910473ccc94f7411ac", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f071f721-ff1c-4ccd-b167-8505146968a4", "node_type": "1", "metadata": {"date": "2023-04-22T21:37:50.487+00:00"}, "hash": "911b7c12a97b79cc2807396606e8fddb3a120982aa1bf14411d1c8cad7e4e6b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "beb318d6-6dd0-4ba8-972d-f9e510233586", "node_type": "1", "metadata": {}, "hash": "069c7cc74e7d14a6109745bb9ca141d026d8491780373ca6daa467bd50a703d0", "class_name": "RelatedNodeInfo"}}, "text": "moti.malka:\nit's not statefull now, i pass the chat history in each request from the client 2 api, so the way i implemet it it's ok if i understand you ?\nLogan M:\nYup should be fine! (Just don't forget to customize the refine prompt too)", "start_char_idx": 0, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "beb318d6-6dd0-4ba8-972d-f9e510233586": {"__data__": {"id_": "beb318d6-6dd0-4ba8-972d-f9e510233586", "embedding": null, "metadata": {"date": "2023-04-22T22:40:24.437+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099464754067685438", "node_type": "4", "metadata": {"date": "2023-04-22T22:40:24.437+00:00"}, "hash": "1f872effe8f3a6b596193c29e8fdcf3b9f27dd68d7e01857f5465838e0b6c141", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7b0a6975-6a54-4101-8ed7-895ec211727a", "node_type": "1", "metadata": {"date": "2023-04-22T21:42:14.481+00:00"}, "hash": "c1655f7c3ebe37678e2ab6ed5d6653a1d6484589faf1f3770acd2cbfd2d650cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f886fa2a-e017-468d-a62c-4fca9551a7eb", "node_type": "1", "metadata": {}, "hash": "83f9f7e1a8d9d5bc4eaa1decd72eec591ad22f356b1f8c7e9cc9f5d69ddf574a", "class_name": "RelatedNodeInfo"}}, "text": "korzhov_dm:\nHey Guys! \n\nI've tried to upload Pinecone index, but faced with it: \n\n`ForbiddenException: (403)\nReason: Forbidden\nHTTP response headers: HTTPHeaderDict({'content-length': '0', 'date': 'Sat, 22 Apr 2023 22:14:29 GMT', 'server': 'envoy', 'connection': 'close'})`\n\nAPI key is right, enviroment as well. Any ideas? Appreciate in advance:)\ud83e\udd1e  @Logan M\nLogan M:\nYou followed the code from the pincecone demo here? https://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/PineconeIndexDemo.ipynb\n\nBeyond that, I'm not sure. Maybe double check the details/credentials with pinecone \ud83e\udd14\nkorzhov_dm:\nAny ideas why reference you provided contain this?\n\n`import logging\nimport sys\n\nlogging.basicConfig(stream=sys.stdout, level=logging.INFO)\nlogging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))`\n\nI noticed that such code only with Pinecone case", "start_char_idx": 0, "end_char_idx": 880, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f886fa2a-e017-468d-a62c-4fca9551a7eb": {"__data__": {"id_": "f886fa2a-e017-468d-a62c-4fca9551a7eb", "embedding": null, "metadata": {"date": "2023-04-22T23:01:05.504+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099469959479955621", "node_type": "4", "metadata": {"date": "2023-04-22T23:01:05.504+00:00"}, "hash": "8076a5f91b0bf8ee6b54f81074f03c39c9c3bf65e7be51c0f1e6e14abb76a4b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "beb318d6-6dd0-4ba8-972d-f9e510233586", "node_type": "1", "metadata": {"date": "2023-04-22T22:40:24.437+00:00"}, "hash": "30e34c6beb283c992892b0794326bfe523d5f974f4b992ec1199f24ed8c9338d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65bd1ca0-776b-4693-aa29-b54c43e2daaf", "node_type": "1", "metadata": {}, "hash": "d9170bb89e959b206b599fda02770037a9c019ae50462e5b60a0711e5c7a55fa", "class_name": "RelatedNodeInfo"}}, "text": "CharlesWave:\nHello LlamaIndex community! I'm working on a review datasets that contains reviews for different insurance companies. I'm trying to feed this dataset to AI and understand what are the good and bad things people say about each insurance company. \n\nI wonder what specific index I should use, and how I can make sure AI will treat each review as a chunk instead of mixing different reviews together? \n\nThanks a lot!\nLogan M:\nAssuming the data is in a csv, I would use the SimpleDirectoryReader to load the file. Then, each row will be turned into a document, so they won't be mixed. You could also create the documents from the dataframe by iterating over the rows and creating the document object directly `Document(\"row text\")`\n\nFrom there, you could split the documents and create a list index for each insurance company, and query the general good/bad things from there \n\n`index.query(\"Summarize all the good things people mention in reviews\", response_mode=\"tree_summarize\")`\nCharlesWave:\nHi Logan. I have a following question that I hope you could take a look. I iterated each review, which are string, and created document object. I then tried to load them into ListIndex but it returns the error.", "start_char_idx": 0, "end_char_idx": 1214, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65bd1ca0-776b-4693-aa29-b54c43e2daaf": {"__data__": {"id_": "65bd1ca0-776b-4693-aa29-b54c43e2daaf", "embedding": null, "metadata": {"date": "2023-04-23T13:50:47.106+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099693858146754660", "node_type": "4", "metadata": {"date": "2023-04-23T13:50:47.106+00:00"}, "hash": "6f791bcfcd7f575212346db4e4eec9c715705e0f3620088d0051059733fd2332", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f886fa2a-e017-468d-a62c-4fca9551a7eb", "node_type": "1", "metadata": {"date": "2023-04-22T23:01:05.504+00:00"}, "hash": "5452b4b531b8131ed96de6294b72868099be00ccdab9b9e1d8599199e821cde0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f4851f95-c0d2-4252-ac20-9e7a89468761", "node_type": "1", "metadata": {}, "hash": "7038a91421dc337071117cc7747960b61f671c66419ad3d7b1344e5ae537e96f", "class_name": "RelatedNodeInfo"}}, "text": "Quentin:\nhow to set prompt to agent when create agent via create_llama_chat_agent()\nLogan M:\nIt's a little different depending on the agent type (some agents use prefix/suffix, others use different kwargs)\n\nBut in general, something like this works \n`create_llama_agent(..., agent_kwargs={\"prefix\": prefix, \"suffix\": suffix})`\n\nThis is the defaults for the zero shot agent in langchain\nhttps://github.com/hwchase17/langchain/blob/master/langchain/agents/mrkl/prompt.py\ncyberandy:\nHi @Logan M I created the agent as follows:\n\n```\nfrom langchain.chat_models import ChatOpenAI\nfrom llama_index import ServiceContext\n\nmemory = ConversationBufferMemory(memory_key=\"chat_history\", ai_prefix=system_message)\nllm=ChatOpenAI(temperature=0, model_name=\"gpt-4\")\nagent_chain = create_llama_chat_agent(\n    toolkit,\n    llm,\n    memory=memory,\n    verbose=True,\n    agent_kwargs={\"prefix\": system_message})\n```\n\nUnfortunately when the agent uses the tool llama-index, it doesn't get the system_message, should I personalize the prompt templates for each of the index? Thanks in advance for your help.", "start_char_idx": 0, "end_char_idx": 1087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f4851f95-c0d2-4252-ac20-9e7a89468761": {"__data__": {"id_": "f4851f95-c0d2-4252-ac20-9e7a89468761", "embedding": null, "metadata": {"date": "2023-04-23T20:17:43.898+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099791236430319687", "node_type": "4", "metadata": {"date": "2023-04-23T20:17:43.898+00:00"}, "hash": "89d8e62d8bcd3aa9b5ff8992ea3514aae052c2a9020652dbaae637fa96988623", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65bd1ca0-776b-4693-aa29-b54c43e2daaf", "node_type": "1", "metadata": {"date": "2023-04-23T13:50:47.106+00:00"}, "hash": "787adb57259e1e4b4b6575adaa4124ca3d8d49173ce77a98196e2798fffc24fc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b517c91-529c-466a-bfc2-4e7c643002ba", "node_type": "1", "metadata": {}, "hash": "e867e4edd7f60854b1a5de4da514c5690a265899689b60de178d0c6a216daba2", "class_name": "RelatedNodeInfo"}}, "text": "Wuf:\nUsing GPTSimpleVectorIndex and top_k = 3, the LLM is returning an answer that is a merge of the top 3 documents it finds, however it merges in information that is not correct, how are you guys solving this?\nLLYX:\nWhat are the main ways it's messing up? It probably will come down to just prompt engineering, and sometimes that may not be enough.\nWuf:\nLike I have 2 documents that are for different user stories, and it combines the requirements of both user stories when asked about 1\nLLYX:\nYou could try something like a tree index instead so it doesn't end up retrieving things from different user stories, or add something in your prompt like \"only use information from the most relevant piece of context\"\nWuf:\nYeah, I wanna try the prompt engineering approach first, thanks", "start_char_idx": 0, "end_char_idx": 782, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b517c91-529c-466a-bfc2-4e7c643002ba": {"__data__": {"id_": "4b517c91-529c-466a-bfc2-4e7c643002ba", "embedding": null, "metadata": {"date": "2023-04-23T23:21:52.331+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099837576917024808", "node_type": "4", "metadata": {"date": "2023-04-23T23:21:52.331+00:00"}, "hash": "cb1d8d1d97cc7be88ace3f9791c2be8bb450ddbaf0647903009439c250ee8b1f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f4851f95-c0d2-4252-ac20-9e7a89468761", "node_type": "1", "metadata": {"date": "2023-04-23T20:17:43.898+00:00"}, "hash": "226538659f092b4035a596c9aa9828bf649cf498e212095e4571c437f5b2e415", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc077470-35b3-41ea-8128-44df82447e77", "node_type": "1", "metadata": {}, "hash": "555bb995f10401c64a7f76d0488bc7c48ce844e82b98bcd099189004b4c31516", "class_name": "RelatedNodeInfo"}}, "text": "CharlesWave:\nHi community! Wondering if anyone know why it keeps returning this warning message when there are still lots of balance left in my open ai ccount?\nLogan M:\nDo you have just the initial $5 worth of free tokens? Pretty sure I've seen this for that \ud83e\udd14\nCharlesWave:\nHi Logan, thanks again for replying my question! I'm on free trial but I have $15 remaining. Does this error message suggest that my remaining balance is far from what is required?", "start_char_idx": 0, "end_char_idx": 454, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc077470-35b3-41ea-8128-44df82447e77": {"__data__": {"id_": "dc077470-35b3-41ea-8128-44df82447e77", "embedding": null, "metadata": {"date": "2023-04-23T23:37:59.167+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099841632121135134", "node_type": "4", "metadata": {"date": "2023-04-23T23:37:59.167+00:00"}, "hash": "a8e87de5323f0ea1483313e23bf86e93528b2a4afdcff5e725dc8d4ee12beb3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b517c91-529c-466a-bfc2-4e7c643002ba", "node_type": "1", "metadata": {"date": "2023-04-23T23:21:52.331+00:00"}, "hash": "49fd05544ab370a066fbd83dbad59523b438b3a83e5cf4b2eba84b0d099f34fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91d9dc9c-dc03-4b2e-bc43-b0560ab29d24", "node_type": "1", "metadata": {}, "hash": "1db2cc73a22b617e1d76e539ccd94b8dfd42024c6c98a15e68af7a0ae624c929", "class_name": "RelatedNodeInfo"}}, "text": "Wuf:\nIs there a way of preventing the agent from modifying the prompt to the tool?\nLogan M:\nNot that I know of. But I'm not a langchain expert lol\n\nYou might be able to give some instructions in the tool description though \"Useful for..... Repeat the human query exactly when using this tool.\" Maybe that will help, or something along those lines\nWuf:\nThat's actually a lot better, but it still summarises Can you explain the roadmap to -> what is the roadmap", "start_char_idx": 0, "end_char_idx": 459, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91d9dc9c-dc03-4b2e-bc43-b0560ab29d24": {"__data__": {"id_": "91d9dc9c-dc03-4b2e-bc43-b0560ab29d24", "embedding": null, "metadata": {"date": "2023-04-24T00:43:58.61+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099858239228743741", "node_type": "4", "metadata": {"date": "2023-04-24T00:43:58.61+00:00"}, "hash": "fb7c99ab326f8640562e7c5977d580cf493c6547d6ab873307201fcf3f3192a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc077470-35b3-41ea-8128-44df82447e77", "node_type": "1", "metadata": {"date": "2023-04-23T23:37:59.167+00:00"}, "hash": "d28e974e6005e7fd7ee2feded0edcb2892efd02226aed400b8ca714d499869b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49c1cc03-1fa7-4622-a6d1-fb0917fa2172", "node_type": "1", "metadata": {}, "hash": "87bde1e200064576a9609b9ea51770103dae1b6d9fee30e0cd13adbde0bc4650", "class_name": "RelatedNodeInfo"}}, "text": "Kira \ud83d\udc8e Glory Lab:\nSearching for a certain name in the index does not yield any related results, what could be the reason?\nKira \ud83d\udc8e Glory Lab:\nFor example, when I searched for \"Disney\", there were no relevant results in the source text. But when I searched for \"D isney\", the correct content about Disney appeared.", "start_char_idx": 0, "end_char_idx": 311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49c1cc03-1fa7-4622-a6d1-fb0917fa2172": {"__data__": {"id_": "49c1cc03-1fa7-4622-a6d1-fb0917fa2172", "embedding": null, "metadata": {"date": "2023-04-24T03:57:12.47+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099906867402133596", "node_type": "4", "metadata": {"date": "2023-04-24T03:57:12.47+00:00"}, "hash": "ff890b034198a3a94d8af1dbec5e9ab77881d4480d2eddc6eb1629ecdcb8ecbc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91d9dc9c-dc03-4b2e-bc43-b0560ab29d24", "node_type": "1", "metadata": {"date": "2023-04-24T00:43:58.61+00:00"}, "hash": "46526ec2b6ebd45f6bca49e9dbd9acda263a5cc046debad13b06b3730f64c60c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ab1dcf6-3d58-44cb-8613-9209fd9fa7cf", "node_type": "1", "metadata": {}, "hash": "9565bb20e9f3ffd07122cce513906ebc03629703df1256bf3ea630cb36e92609", "class_name": "RelatedNodeInfo"}}, "text": "AbleAndrew:\n@clay I have a feeling this is a local configuration issue with your MedResearch https://github.com/run-llama/llama-lab/tree/jerry/add_insight_submodule/external But I'm getting Traceback errors: \n\nTraceback (most recent call last):\n  File \"...main.py\", line 13, in <module>\n    from agents import boss_agent, worker_agent\n  File \"...agents.py\", line 8, in <module>\n    from utils import generate_tool_prompt, get_gpt_chat_completion, get_gpt_completion\n  File \"...utils.py\", line 24, in <module>\n    openai.api_key = os.environ[\"OPENAI_API_KEY\"]\n  File \"...python/3.10.4/lib/python3.10/os.py\", line 679, in __getitem__\n    raise KeyError(key) from None\nKeyError: 'OPENAI_API_KEY'\nclay:\nPlease see the readme \u2014 you need to expose 3 environment variables\nAbleAndrew:", "start_char_idx": 0, "end_char_idx": 777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ab1dcf6-3d58-44cb-8613-9209fd9fa7cf": {"__data__": {"id_": "2ab1dcf6-3d58-44cb-8613-9209fd9fa7cf", "embedding": null, "metadata": {"date": "2023-04-24T04:14:47.689+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099911293311397950", "node_type": "4", "metadata": {"date": "2023-04-24T04:14:47.689+00:00"}, "hash": "e4a94065f01dbfafc183f98fef05a878247438e7da7338faa6070edef7a1d3b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49c1cc03-1fa7-4622-a6d1-fb0917fa2172", "node_type": "1", "metadata": {"date": "2023-04-24T03:57:12.47+00:00"}, "hash": "2ed8ff28a5ad44854ae612a9d2205c69699ebd10d43f1e89614b74a9ca81c0ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a59d5af6-b4b7-4680-9544-37869267198c", "node_type": "1", "metadata": {}, "hash": "ab56ed3f45cf8e458e8f631fd7a321eec053ce2fe2285ece15e2962dc48c986d", "class_name": "RelatedNodeInfo"}}, "text": "clay:\nIf you\u2019d like you can just hard code them. Delete the os.environ[] and just have the string\nAbleAndrew:\nFree tokens for all, LOL I will make sure not to commit for sure, but good to know! Ok I'll try that, and also good tips on the .bashrc and .zshrc too. I appreciate the best practices. So that I don't bug you. Where is best to put then the email variable, or is hard coding that in the code fine for testing too, with the presumption I don't commit just yet.", "start_char_idx": 0, "end_char_idx": 468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a59d5af6-b4b7-4680-9544-37869267198c": {"__data__": {"id_": "a59d5af6-b4b7-4680-9544-37869267198c", "embedding": null, "metadata": {"date": "2023-04-24T04:18:59.654+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099912350129197196", "node_type": "4", "metadata": {"date": "2023-04-24T04:18:59.654+00:00"}, "hash": "dec44c671caead899b41327a5a9f732fe8f9a98300f31fd053604f4ed60bc041", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ab1dcf6-3d58-44cb-8613-9209fd9fa7cf", "node_type": "1", "metadata": {"date": "2023-04-24T04:14:47.689+00:00"}, "hash": "bf77692f353d48828b4a44a96b6b48de52c78a976e44097d44be94d8cc4a34d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ea9e6ef3-a52d-498b-a39e-19d61c9740a2", "node_type": "1", "metadata": {}, "hash": "09c80c0c900a53cde6a5b9796d5b1168cdd0675ce15e006053040f1dfe418ba2", "class_name": "RelatedNodeInfo"}}, "text": "clay:\nEmail actually isn\u2019t _required_ but pubmed really wants it for some reason and spams you with warnings if you don\u2019t give it\nAbleAndrew:\nok got them hardcoded just because I'm inpatient, and will go back and do it the right way for longer-term testing (I can just generate a new key later). I have the keys, and email, and the \"research\", hard-coded, and going to save and run and see how this goes.", "start_char_idx": 0, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea9e6ef3-a52d-498b-a39e-19d61c9740a2": {"__data__": {"id_": "ea9e6ef3-a52d-498b-a39e-19d61c9740a2", "embedding": null, "metadata": {"date": "2023-04-24T05:32:23.786+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1099930822397661225", "node_type": "4", "metadata": {"date": "2023-04-24T05:32:23.786+00:00"}, "hash": "a8905f0232b747a3f1688d147afd6feb6d45d06e0e80435ae6e13a6457905e54", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a59d5af6-b4b7-4680-9544-37869267198c", "node_type": "1", "metadata": {"date": "2023-04-24T04:18:59.654+00:00"}, "hash": "4b2b87699e92d92bc0c2e537077ded83c1b1d918d0416078a7bba26000edfa74", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f0935c29-1188-4fac-b51c-7523cea835b6", "node_type": "1", "metadata": {}, "hash": "5bc0d2c0e192cbea0e42fce02adaaa768e1e1cdfe4db03300c503022ffbc9530", "class_name": "RelatedNodeInfo"}}, "text": "sbautistadaniel:\nHi guys, I have a beginner question. When I use LlamaIndex to create an index over my personal documents and start making queries, does OpenAI have access to the information contained in my documents? I hope someone can help me\nclay:\nShort answer is yes. But you could use a different LLM/LLM provider.\nsbautistadaniel:\nIs there a LLM provider I can use without exposing my data?\nclay:\nYou can host your own open source LLM \ud83d\ude04", "start_char_idx": 0, "end_char_idx": 442, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0935c29-1188-4fac-b51c-7523cea835b6": {"__data__": {"id_": "f0935c29-1188-4fac-b51c-7523cea835b6", "embedding": null, "metadata": {"date": "2023-04-24T10:10:08.947+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100000721149104178", "node_type": "4", "metadata": {"date": "2023-04-24T10:10:08.947+00:00"}, "hash": "8946434cd7852e71fe95e06360c5388cfae9a727661f8114793d3f2945daa94c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ea9e6ef3-a52d-498b-a39e-19d61c9740a2", "node_type": "1", "metadata": {"date": "2023-04-24T05:32:23.786+00:00"}, "hash": "2f121a6904b3f42c6b94d9da5ec4913273627fafc0d3de77c7a451b490b5e8b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1ea0946-d458-4758-8f3e-600b29c9dbc1", "node_type": "1", "metadata": {}, "hash": "953e4b84f6957cc189d21c8f7e42e87b46d3184cb51233429136ef017172a7b3", "class_name": "RelatedNodeInfo"}}, "text": "Seb_Lz:\nHello, does anyone know how to reduce the embeddings creation requests rate with GPTSimpleVectorIndex.from_documents() ? I'm trying to create embeddings for a folder containing source code files for a total of around 3 000 000 tokens. When I launch the process (that works fine for smaller folders), I get the following error (using Azure OpenAI API - text-embedding-ada-002):\n\n\"INFO:openai:error_code=429 error_message='Requests to the Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms. Operation under Azure OpenAI API version 2023-03-15-preview have exceeded call rate limit of your current OpenAI S0 pricing tier. Please retry after 1 second. Please go here: https://aka.ms/oai/quotaincrease if you would like to further increase the \ndefault rate limit.' error_param=None error_type=None message='OpenAI API error received' stream_error=False\"\nMilkman:\nI'm running into exactly the same issue", "start_char_idx": 0, "end_char_idx": 970, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1ea0946-d458-4758-8f3e-600b29c9dbc1": {"__data__": {"id_": "b1ea0946-d458-4758-8f3e-600b29c9dbc1", "embedding": null, "metadata": {"date": "2023-04-24T16:55:07.85+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100102638135169138", "node_type": "4", "metadata": {"date": "2023-04-24T16:55:07.85+00:00"}, "hash": "7c48c72954d9f29f8aea1586d4e13950b7e82a2172b88f6ae5c806cad9d7be06", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f0935c29-1188-4fac-b51c-7523cea835b6", "node_type": "1", "metadata": {"date": "2023-04-24T10:10:08.947+00:00"}, "hash": "131df8ae18a8ad6b9d2efda5956ddc1635b920ab3cd5ae96474ebf0522ba2498", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "649519f6-ef92-4a7d-8fd1-c9213ec5a907", "node_type": "1", "metadata": {}, "hash": "0a43b0e0dd346867b39c8b909922cdcec137be948b22cc869f04a8e1bb9508a3", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHow to handle `Could not parse LLM output:` when using `CHAT_ZERO_SHOT_REACT_DESCRIPTION` agent? I have 3 tools:\n\n1. Index with pdf data 1\n2. Index with pdf data 2\n3. Web-search (searX)\n\nI keep getting the error above when I call the agent with:\n\n```python\nresponse_dict = agent_chain({\n                \"input\": text\n            })\n```\n\nI initialized my agent as:\n\n```python\ninitialize_agent(tools, llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n                                           memory=memory,\n                                           verbose=True, max_iterations=5, early_stopping_method=\"generate\",\n                                           return_intermediate_steps=True)\n```\n\n\nI see on the stdout that the Agent is going in a right direction, but suddenly fails with the above exception\nLogan M:\nProbably the LLM stopped following instructions and printed some output that langchain couldn't parse\n\nPretty common error with langchain tbh. The parsing code for that specific agent it here https://github.com/hwchase17/langchain/blob/master/langchain/agents/chat/output_parser.py\n\nLangchain at some post probably needs less-brittle parsing.  Not much to do about it besides making a PR or maybe improving the tool instructions \nhttps://github.com/hwchase17/langchain/blob/master/langchain/agents/chat/prompt.py", "start_char_idx": 0, "end_char_idx": 1345, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "649519f6-ef92-4a7d-8fd1-c9213ec5a907": {"__data__": {"id_": "649519f6-ef92-4a7d-8fd1-c9213ec5a907", "embedding": null, "metadata": {"date": "2023-04-24T17:24:38.753+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100110065840697464", "node_type": "4", "metadata": {"date": "2023-04-24T17:24:38.753+00:00"}, "hash": "82d34abc9fb9e46d53298ab5887171df68b59da05e96616179ca140b963bd741", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1ea0946-d458-4758-8f3e-600b29c9dbc1", "node_type": "1", "metadata": {"date": "2023-04-24T16:55:07.85+00:00"}, "hash": "723d1525a0bd3f45e6b2ca281d440766dd9f278f76d05353758b2a328e33ec8b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f22ac06-879a-4cff-bf76-0000e9cc5f1a", "node_type": "1", "metadata": {}, "hash": "70cdd2031ae64b3acd9f52d3b51780049fcb9022224e8137f49c87bd0a41b62f", "class_name": "RelatedNodeInfo"}}, "text": "Joie:\nI\u2019m thinking of building a way to dynamically determine whether to do List query, Vector query with top k, or summary query, striving to minimize LLM usage while getting the answer, and only making more expensive calls as needed. Has anyone worked on something like this, and is this something feasible and worth pursuing? For example: Do a top 3 nodes, and if the answer is insufficient, expand to top 5 within the same document, increasing until the answer is sufficient\nLogan M:\nNot exactly the same (it doesn't increase the top k dynamically), but this will do its best to decide between using a vector index (for general qa) vs a list index (for summaries) depending on the query\n\n\nhttps://github.com/jerryjliu/llama_index/blob/main/examples/composable_indices/QASummaryGraph.ipynb", "start_char_idx": 0, "end_char_idx": 792, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f22ac06-879a-4cff-bf76-0000e9cc5f1a": {"__data__": {"id_": "3f22ac06-879a-4cff-bf76-0000e9cc5f1a", "embedding": null, "metadata": {"date": "2023-04-24T22:49:43.04+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100191872749682738", "node_type": "4", "metadata": {"date": "2023-04-24T22:49:43.04+00:00"}, "hash": "63bde9c51f5a8ebd75fce5380bb2c712491f9e514f6b2e451a6ca1531ea38bdf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "649519f6-ef92-4a7d-8fd1-c9213ec5a907", "node_type": "1", "metadata": {"date": "2023-04-24T17:24:38.753+00:00"}, "hash": "2e7888be3290536a6b630a6de561bd88470b4605fec46210ae0df7687de56393", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7e37b62-daa6-4982-a17e-14915141f89b", "node_type": "1", "metadata": {}, "hash": "144159293d5248bed77ddccd08de3e35e865030b7ef138cc801ad129d0c29dca", "class_name": "RelatedNodeInfo"}}, "text": "kokonutoil:\nDoes anyone know how to get the k nearest neighbors from an index given a query *without* actually querying the index?\nLogan M:\n`response = index.query(\"my query\", similarity_top_k=5, response_mode=\"no_text\")`\n\nThis will return the top 5 nodes in `response.source_nodes`, but it won't call the LLM to generate an answer\nkokonutoil:\nohhh okay gotcha, thanks \ud83d\ude01", "start_char_idx": 0, "end_char_idx": 370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7e37b62-daa6-4982-a17e-14915141f89b": {"__data__": {"id_": "d7e37b62-daa6-4982-a17e-14915141f89b", "embedding": null, "metadata": {"date": "2023-04-25T09:42:30.407+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100356152593756172", "node_type": "4", "metadata": {"date": "2023-04-25T09:42:30.407+00:00"}, "hash": "444bdf72118d43631cb3cd6c5fb571b3e9f3b0e145f0af083315322bfcbbbba6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f22ac06-879a-4cff-bf76-0000e9cc5f1a", "node_type": "1", "metadata": {"date": "2023-04-24T22:49:43.04+00:00"}, "hash": "ba846dbd850a6878dac0941149b729a5142e93a5fbbd01bd88ddfd2bbb02a062", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4188fa39-fab5-4d2d-8386-fbf8aff57c0c", "node_type": "1", "metadata": {}, "hash": "872c38b01c3c4ac47d397740d17cc1bdccac6fb1688caca248a9eb59b041cf8b", "class_name": "RelatedNodeInfo"}}, "text": "OverclockedClock:\nI am using the GPTWeaviateIndex combined with a custom llm which I have defined in my service_context. When I am attempting to build the WeaviateIndex it still errors on the fact that I have to provide an openai API key? Am I misunderstanding how the weaviateindex works? I assumed that the fact that it has been embedded by Weaviate would be enough for an index to be created, but it turns out that OpenAI is still required for something (?)\njjmachan:\nI think its used for embeddings. can you try and change that too in the service context? From the codebase I think LlamaIndex doesnot use weaviate to compute the embeddings, it only uses the vector store to *store* the text and embeddings and compute similarity. \nDoes weaviate have capabilities to compute embeddings?\nOverclockedClock:\nWhen storing data in Weaviate it is automatically embedded using a model of your choice, in my case, my data is embedded with OpenAI's `ada-002`, but you can also use a free `huggingface` embedder or provide a `cohere` API key. Right now I am using the weaviatereader to retrieve the data and assumed that the data returned from this reader still contained the embeddings, which the GPTWeaviateIndex could use straight away. Although thinking about it, the embeddings returned from weaviate would be represented in a different embedding space than the one used by my custom_llm model I defined in my service context. Then the question still remains, why would my GPTWeaviateIndex require an OpenAI key when I have a custom_llm defined in my service context, which I am providing?", "start_char_idx": 0, "end_char_idx": 1587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4188fa39-fab5-4d2d-8386-fbf8aff57c0c": {"__data__": {"id_": "4188fa39-fab5-4d2d-8386-fbf8aff57c0c", "embedding": null, "metadata": {"date": "2023-04-25T11:33:22.133+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100384051954712596", "node_type": "4", "metadata": {"date": "2023-04-25T11:33:22.133+00:00"}, "hash": "ad4b2b70439027d37d305b91f51a3036547b055b8a051d472cd5a5cd8a64f90b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7e37b62-daa6-4982-a17e-14915141f89b", "node_type": "1", "metadata": {"date": "2023-04-25T09:42:30.407+00:00"}, "hash": "736144b07cb262e55ec2084ffe4a0018a4684993ac77c01f3b790e50bf0da0d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f8bc9ac-c5b6-4b4a-acda-dd4815ac53ca", "node_type": "1", "metadata": {}, "hash": "d5e269d9ed9401a26f79bae8d697e06335728d9db1c1572c1a2f808b657979f7", "class_name": "RelatedNodeInfo"}}, "text": "JasperGA:\nAnybody know how to let the GPTSimpleVectorIndex.query() returns not only the answer, but also the doc_id where the answer from? Thx\njjmachan:\n`resp.source_nodes[0].node.ref_doc_id` should give you that. Here `resp` is the object returned from `query()` . Can you try this out?", "start_char_idx": 0, "end_char_idx": 287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f8bc9ac-c5b6-4b4a-acda-dd4815ac53ca": {"__data__": {"id_": "1f8bc9ac-c5b6-4b4a-acda-dd4815ac53ca", "embedding": null, "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100391280166588446", "node_type": "4", "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}, "hash": "3ca3cb4509a10f3bddcedfc506c4d3590b01505603e55584331c215b52ac01d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4188fa39-fab5-4d2d-8386-fbf8aff57c0c", "node_type": "1", "metadata": {"date": "2023-04-25T11:33:22.133+00:00"}, "hash": "05534a6594267339658c6e6f2868a7527a3baaa05c7114c7d94b9c7e04cf547e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9c4940c0-99d3-414e-9992-f8c4fe49408a", "node_type": "1", "metadata": {}, "hash": "a225e7f9c50edd62b10597e517f13ae3144ffbff7225028ca7920bb7f8625e3d", "class_name": "RelatedNodeInfo"}}, "text": "Akinus21:\nPardon my ignorance, but I can't seem to find this answer using normal search methods. I have a code that builds a custom LLM using \"EleutherAI/pythia-410m\" via the huggingface pipeline method. At no point in the code do I actually use OpenAI API, but the code will not run unless I provide it an OpenAI API Key, and when I do run it, I get charged an amount, albeit a small amount.  I'm not sure where I am being charged.  Here is my code ``` # define prompt helper\n# set maximum input size\nmax_input_size = 600\n# set number of output tokens\nnum_output = 400\n# set maximum chunk overlap\nmax_chunk_overlap = 20\nprompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\n\n# Custom LLM Class\nclass CustomLLM(LLM):\n\n    model_name = \"EleutherAI/pythia-410m\"\n    pipeline = pipeline(\"text-generation\", model=model_name)\n\n    def _call(self, prompt, stop=None):\n        return self.pipeline(prompt, max_new_tokens=num_output)[0][\"generated_text\"]\n\n    @property\n    def _identifying_params(self) -> Mapping[str, Any]:\n        return {\"name_of_model\": self.model_name}\n\n    @property\n    def _llm_type(self) -> str:\n        return \"custom\"\n\n# define our LLM\nllm_predictor = LLMPredictor(llm=CustomLLM())\n\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n```\njjmachan:\nthis must be for the embeddings. Your setup still uses OpenAI's embeddings endpoint. Try \n```\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings\nfrom llama_index import LangchainEmbedding, ServiceContext\n\n# load in HF embedding model from langchain\nembed_model = LangchainEmbedding(HuggingFaceEmbeddings())\nservice_context = ServiceContext.from_defaults(embed_model=embed_model)\n\nhf_embs_index = GPTSimpleVectorIndex.from_documents(\n    documents, service_context=service_context\n)\n\n# query with embed_model specified\nresponse = hf_embs_index.query(\n    \"What did the author do growing up?\", \n    mode=\"embedding\", \n    verbose=True, \n    service_context=service_context\n)\nprint(response)\n```\nsomething similar to this. Huggingface embeddings\nAkinus21:\nThank you for the quick response, I'll give it a shot.\njjmachan:\nsure! let me know if it works \ud83e\udd1e\nAkinus21:\nI should have mentioned that I was trying to use a custom LLM.  This is what I have so far, and it still queries OpenAI API. ```\n# Custom LLM Class\nclass CustomLLM(LLM):\n\n    model_name = \"EleutherAI/pythia-410m\"\n    pipeline = pipeline(\"text-generation\", model=model_name)\n\n    def _call(self, prompt, stop=None):\n        return self.pipeline(prompt, max_new_tokens=num_output)[0][\"generated_text\"]\n\n    @property\n    def _identifying_params(self) -> Mapping[str, Any]:\n        return {\"name_of_model\": self.model_name}\n\n    @property\n    def _llm_type(self) -> str:\n        return \"custom\"\n\n# define our LLM\nllm_predictor = LLMPredictor(llm=CustomLLM())\n\n# build service context\nembed_model = LangchainEmbedding(HuggingFaceEmbeddings())\n# service_context = ServiceContext.from_defaults(embed_model=embed_model)\n\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper, embed_model=embed_model)\n```\nDoes this look correct?\n\nIn a separate issue, I am trying to make a knowledge graph made of multiple indexes.  For some reason I cannot grasp what I am doing wrong, but that is for a later question. Right now, I need to stop accidentally spending money!\nOverclockedClock:\nDefinitely not an expert, but I have almost identical code right next to me, and it seems to at least work this far without having to provide an openai api key. I'd say that the code looks good. What does the rest of your code look like?\nAkinus21:\n```\n# Custom LLM Class\n...\n\ndef build_index(prompt):\n    # initialize LlamaIndex reader \n...\n\n    # Check if index file exists, if not, build it.", "start_char_idx": 0, "end_char_idx": 3834, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c4940c0-99d3-414e-9992-f8c4fe49408a": {"__data__": {"id_": "9c4940c0-99d3-414e-9992-f8c4fe49408a", "embedding": null, "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100391280166588446", "node_type": "4", "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}, "hash": "3ca3cb4509a10f3bddcedfc506c4d3590b01505603e55584331c215b52ac01d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f8bc9ac-c5b6-4b4a-acda-dd4815ac53ca", "node_type": "1", "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}, "hash": "795d101e18d415e3c2b69123c04364ae2b082204da5d488528cff79636c8ec1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b307a8a-232a-420f-8ab1-44eb7d9dc964", "node_type": "1", "metadata": {}, "hash": "031caabe73d194a4407d6b6e42c7a86390f7b8d35e1a8c6d1f62e197c9eb18eb", "class_name": "RelatedNodeInfo"}}, "text": "In a separate issue, I am trying to make a knowledge graph made of multiple indexes.  For some reason I cannot grasp what I am doing wrong, but that is for a later question. Right now, I need to stop accidentally spending money!\nOverclockedClock:\nDefinitely not an expert, but I have almost identical code right next to me, and it seems to at least work this far without having to provide an openai api key. I'd say that the code looks good. What does the rest of your code look like?\nAkinus21:\n```\n# Custom LLM Class\n...\n\ndef build_index(prompt):\n    # initialize LlamaIndex reader \n...\n\n    # Check if index file exists, if not, build it.\n   ...\n        # load local docs and index them \n        documents = attachments_loader.load_data()\n        index = TreeIndex.from_documents(documents)\n\n    # Base Knowledge Folder Index\n    ...\n    bkindex = TreeIndex.from_documents(\n        bkdocuments,\n        service_context=service_context\n    )\n    bkindex_summary = 'Use this for all queries'\n\n    # Google Search Documents\n   ...\n    google_index = TreeIndex.from_documents(\n        google_documents,\n        service_context=service_context\n    )\n    google_index_summary = 'Use this for all queries'\n\n    # Build graph and save\n    graph = ComposableGraph.from_indices(\n        TreeIndex,\n        [index, bkindex, google_index],\n        index_summaries=[index_summary, bkindex_summary, google_index_summary],\n    )\n\n    return graph\n\ndef ask_gpt_custom(prompt):\n    graph = build_index(prompt)\n    query_configs = [\n        {\n            \"index_struct_type\": \"tree\",\n            \"query_mode\": \"embedding\",\n            \"query_kwargs\": {\n                \"child_branch_factor\": 2\n            }\n        },\n    ]\n\n    response = graph.query(\n        prompt,\n        query_configs=query_configs\n    )\n\n    return f'{response}'\n```", "start_char_idx": 3194, "end_char_idx": 5019, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b307a8a-232a-420f-8ab1-44eb7d9dc964": {"__data__": {"id_": "6b307a8a-232a-420f-8ab1-44eb7d9dc964", "embedding": null, "metadata": {"date": "2023-04-25T14:46:48.996+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100432734666633309", "node_type": "4", "metadata": {"date": "2023-04-25T14:46:48.996+00:00"}, "hash": "7754aea9d410bb3dcbf5ef5ca6aa545cd60487b9bba44f94d83bd7b5d7d4b4cc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c4940c0-99d3-414e-9992-f8c4fe49408a", "node_type": "1", "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}, "hash": "aef3139a252baba05d5c85298c6d7f26760773e5a0233a988bcdada3b9f35183", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f6b4a84-c9dc-4ee5-9134-8729c00032c1", "node_type": "1", "metadata": {}, "hash": "723146e98f4d1dcfe9afbe618ea3aca4653f03f9415a6b54d17465765a1ba2fe", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nhi - doing a chatbot for work using this. we want to get it running via slack i.e. user enters question in slack and gets response in slack.\n\ni know we have one in this channel but has anyone got a way to do this that skirts slack authentication? \n\nany help welcome!\nthomoliver:\nAny thoughts on this ? Does anyone know how we built the slack tool we have on here ?\nthomoliver:\nI have actually now built this if anyone is interested! Takes a question from a slack message, uses that as the query in gpt which is asked over a series of notion pages, and then returns the responses in slack!\nmcmancsu:\nSuper cool - I am working on something similar. What sort of issues were you having with Notion? Are you using the llama hub one? https://llamahub.ai/l/notion", "start_char_idx": 0, "end_char_idx": 769, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f6b4a84-c9dc-4ee5-9134-8729c00032c1": {"__data__": {"id_": "5f6b4a84-c9dc-4ee5-9134-8729c00032c1", "embedding": null, "metadata": {"date": "2023-04-25T15:24:51.333+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100442307481849898", "node_type": "4", "metadata": {"date": "2023-04-25T15:24:51.333+00:00"}, "hash": "694e4c3e546634899f66e935f88f4d65b56192935cdb5a6053801d231cddddd5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b307a8a-232a-420f-8ab1-44eb7d9dc964", "node_type": "1", "metadata": {"date": "2023-04-25T14:46:48.996+00:00"}, "hash": "396dbbbd725c018da678f7c251cbd2cd31765b1cd10c70d7abf61f2ef4255213", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26121d41-dfb6-46b8-9e6f-b700019ebd87", "node_type": "1", "metadata": {}, "hash": "95b5efeba3af01b73c91d39f93904bab72c115bf28bfbae2168411dd4865af78", "class_name": "RelatedNodeInfo"}}, "text": "maxfrank:\nHas anyone had luck with deploying a fastapi / flask app with llama chat agent (created with `create_llama_chat_agent`) and if so how did you handle the memory across multiple sessions? Also if theres any good doumentation youve seen please send it though. I was hoping to create a fastapi which would run on AWS EKS and then be queried from the front end. Would be great to hear some suggestions and potentially some basic source code! Thanks in advance\nLogan M:\nI think a good approach for managing the memory/sessions with redis. I haven't done it personally though lol but I know langchain even has some redis integrations for memory", "start_char_idx": 0, "end_char_idx": 647, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26121d41-dfb6-46b8-9e6f-b700019ebd87": {"__data__": {"id_": "26121d41-dfb6-46b8-9e6f-b700019ebd87", "embedding": null, "metadata": {"date": "2023-04-25T18:05:02.49+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100482619596091453", "node_type": "4", "metadata": {"date": "2023-04-25T18:05:02.49+00:00"}, "hash": "d277bbfe27faa26d2e470b536c62eac253181c7765e252d4bfd28f39126f4586", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f6b4a84-c9dc-4ee5-9134-8729c00032c1", "node_type": "1", "metadata": {"date": "2023-04-25T15:24:51.333+00:00"}, "hash": "96b637c3739eaf81a169c6f89c975e620ce9c38ab15b23d8779b7c618dde2e9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f7a3b07-dcb9-49c0-a401-60de8ced3c7e", "node_type": "1", "metadata": {}, "hash": "0d7d414ca06fcb2f1e4889bb9cb022488bb8f38036e5de6c8179c18097bf34e4", "class_name": "RelatedNodeInfo"}}, "text": "Obelix:\nI wonder if anyone can help answer this question. Why does every query to Pinecone require an argument to pass in documents? What if the index already exists with the data, and I want to query the index in Pinecone without having to pass in new documents every time? Is there a workaround for this?\nLogan M:\n`index = GPTPineconeIndex([], pinecone_index=pinecone_index)`\n\nThis will use the documents you already put onto pinecone\nObelix:\nI appreciate the response. To query the index, do I just index.query(\"...\")?", "start_char_idx": 0, "end_char_idx": 521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f7a3b07-dcb9-49c0-a401-60de8ced3c7e": {"__data__": {"id_": "8f7a3b07-dcb9-49c0-a401-60de8ced3c7e", "embedding": null, "metadata": {"date": "2023-04-25T18:48:03.614+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100493445614813205", "node_type": "4", "metadata": {"date": "2023-04-25T18:48:03.614+00:00"}, "hash": "fdda28a16f85dd0bb3da6943ab76fb5b125d319b8c5f4bcd31557c15068f4e35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26121d41-dfb6-46b8-9e6f-b700019ebd87", "node_type": "1", "metadata": {"date": "2023-04-25T18:05:02.49+00:00"}, "hash": "8407b3d2ba0bd6c61459536af312025eaff8d754373c507545ccb62402547a95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f478c6da-46e1-41c5-a8ea-dfceeeb13306", "node_type": "1", "metadata": {}, "hash": "5a4bd010842deccc7aef956d0415c9c8e4dab3be2a0706cf6346c19e510f07bb", "class_name": "RelatedNodeInfo"}}, "text": "krishnan99:\nHi @Logan M! Just wondering if it was possible to reuse any part of the indexing process to move it to other vectorstores like pinecone, faiss etc without having to create the index each time?\nLogan M:\nHmmm, I don't think anything like that exists right now. Or at least nothing that isn't super hacky lol", "start_char_idx": 0, "end_char_idx": 317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f478c6da-46e1-41c5-a8ea-dfceeeb13306": {"__data__": {"id_": "f478c6da-46e1-41c5-a8ea-dfceeeb13306", "embedding": null, "metadata": {"date": "2023-04-25T20:14:56.428+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100515309741408276", "node_type": "4", "metadata": {"date": "2023-04-25T20:14:56.428+00:00"}, "hash": "4c81a72d5a45d77597945366c1eadec79bd277c310e267b357ce2c3c690e9f8d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f7a3b07-dcb9-49c0-a401-60de8ced3c7e", "node_type": "1", "metadata": {"date": "2023-04-25T18:48:03.614+00:00"}, "hash": "3a6bf7d4a74781f5094b5f8187eb3f4bd797398b1b7a083df13fe14b0162898c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23107137-061f-4123-9f27-928169d051c3", "node_type": "1", "metadata": {}, "hash": "aebbdf6a8020a3973a4df92ee8da162e0a6cd395717df24d4e6291540c44c4c4", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nDoes llama-index yet have a built-in functionality to fetch/link the original documents (like with urls etc.)?\nLogan M:\nSo far the best solution is adding that info as part of the extra_info dict of each input document \n\nThen that info will show up in the `response.source_nodes` list of source nodes\n\nWould love a PR to make this process easier \ud83d\ude05\nTeemu:\nHmm yeah definitely worth looking at, I haven't yet found a super smooth solution that's accurate enough", "start_char_idx": 0, "end_char_idx": 466, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23107137-061f-4123-9f27-928169d051c3": {"__data__": {"id_": "23107137-061f-4123-9f27-928169d051c3", "embedding": null, "metadata": {"date": "2023-04-25T22:39:32.1+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100551698147196969", "node_type": "4", "metadata": {"date": "2023-04-25T22:39:32.1+00:00"}, "hash": "40ca887996ffa507879438731f0a136527a23919fb5150d1e308f96de13cb340", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f478c6da-46e1-41c5-a8ea-dfceeeb13306", "node_type": "1", "metadata": {"date": "2023-04-25T20:14:56.428+00:00"}, "hash": "00329bfc751535d873379dd484d4332e51439acbcd4a7cf3c3d3858a10e505c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c8127902-2d75-4b85-bc60-ccfafdf554bf", "node_type": "1", "metadata": {}, "hash": "3939ec9414e728d9372d96ccf272a9d130edf282d06a7286fb8b248d1114e472", "class_name": "RelatedNodeInfo"}}, "text": "pikachu888:\nHi! I wanted to pass a search kwargs when calling `get_relevant_documents` on Qdrant vector store. Could not figure out how to achieve it. I'm doing this:\n\n```python\nretriever.get_relevant_documents(query=query, search_kwargs = {\"name\": {\"any\": chosen_collections}})\n```\ngetting:\n\n```\nTypeError: get_relevant_documents() got an unexpected keyword argument 'search_kwargs'\n```\nHow to pass the metadata properly?\nLogan M:\nIs this a llama index thing or langchain thing? If it's langchain, I got no idea \ud83d\ude05", "start_char_idx": 0, "end_char_idx": 514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c8127902-2d75-4b85-bc60-ccfafdf554bf": {"__data__": {"id_": "c8127902-2d75-4b85-bc60-ccfafdf554bf", "embedding": null, "metadata": {"date": "2023-04-25T23:17:16.582+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100561196073103461", "node_type": "4", "metadata": {"date": "2023-04-25T23:17:16.582+00:00"}, "hash": "a3b7d81213dbd37662f738980af7f0c9feebb25ec3084a957b7ff7dca03c746b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23107137-061f-4123-9f27-928169d051c3", "node_type": "1", "metadata": {"date": "2023-04-25T22:39:32.1+00:00"}, "hash": "3ce386ea83b11a8aaccb7352ebbe97277edd20f1205a11ec3aecfc4b4b0994cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83115588-461a-408c-b7eb-5b912c518ce2", "node_type": "1", "metadata": {}, "hash": "d75dadf3a681a6cafc3038995bbfefd0ca9b93882175d04460f381a36e15ac5b", "class_name": "RelatedNodeInfo"}}, "text": "Fred:\nlist_index = ListIndex(nodes, service_context=service_context)\n  list_index.save_to_disk(index_dir + '/list_index.json'\n\nthen in a subsequent session:\n\n    if os.path.exists(index_dir + '/list_index.json'):\n        print(f'Loading from cached list_index in {index_dir}')\n\n        try:\n            list_index = ListIndex.load_from_disk(index_dir + '/list_index.json',\n                                                     service_context=metadatas['service context'])\n\n       summary = index.query(\"Please summarize this document in several paragraphs.\", response_mode=\"tree_summarize\", service_context=service_context)\n\nIt always runs a bunch of calls to the llm with the summary = ..., in other words, loading the index from cache doesn't seem to be saving me anything.  It's as if it's recomputing the index each time.  Is this expected?\nLogan M:\nWhen you use a list index, each query will send the entire index to the LLM to answer the query. Usually, this is helpful for when you want to create a summary. Saving this index just saves all the documents you put into it.\n\nYou might be more interested in GPTSimpleVectorIndex, which uses embeddings to narrow down the text to the top k most relevant chunks to the query", "start_char_idx": 0, "end_char_idx": 1226, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83115588-461a-408c-b7eb-5b912c518ce2": {"__data__": {"id_": "83115588-461a-408c-b7eb-5b912c518ce2", "embedding": null, "metadata": {"date": "2023-04-26T03:38:32.266+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100626944657215541", "node_type": "4", "metadata": {"date": "2023-04-26T03:38:32.266+00:00"}, "hash": "f9e1ab26355da26cb8b837dcd7ad6dadccebb9e210b98a9aa8631a471aa699db", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c8127902-2d75-4b85-bc60-ccfafdf554bf", "node_type": "1", "metadata": {"date": "2023-04-25T23:17:16.582+00:00"}, "hash": "7468abbe5de86cabdc7fc3eb92e403c8e5d053e2cf47834cae4cb4e49fc25e97", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f0a6390-af64-44ca-8e32-f2e71b2994f9", "node_type": "1", "metadata": {}, "hash": "45c113d439df9a08e0faa2b89c298be9b8636a0eb50b9254cdf6842c6ea45982", "class_name": "RelatedNodeInfo"}}, "text": "RY:\nIs there a performance difference between discord bots and document bots?\nI asked a question in the document and came back, but I didn't understand it in discord.\nI asked the same question twice on discord, but to no avail.\nhttps://discord.com/channels/1059199217496772688/1100606690061201478/1100626421199683635\nLogan M:\nHmm yea that are both from different providers, so they likely have different approaches to answering questions (kapa vs mendable)\nRY:\nI thought they were the same thing. thank you.", "start_char_idx": 0, "end_char_idx": 507, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f0a6390-af64-44ca-8e32-f2e71b2994f9": {"__data__": {"id_": "1f0a6390-af64-44ca-8e32-f2e71b2994f9", "embedding": null, "metadata": {"date": "2023-04-26T14:46:02.255+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100794926486274100", "node_type": "4", "metadata": {"date": "2023-04-26T14:46:02.255+00:00"}, "hash": "27ba0c50ae2b24411112afcb30d602942804bb4fa89b5724ffa05635cf64d3d7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83115588-461a-408c-b7eb-5b912c518ce2", "node_type": "1", "metadata": {"date": "2023-04-26T03:38:32.266+00:00"}, "hash": "33a0f11d86d8420e15d4ff8394f2a20ff57cc4fb127df00d3017c5ef56719798", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd2c71ac-60b0-4964-afe4-3d94b4ce21b5", "node_type": "1", "metadata": {}, "hash": "16f3ad86ebae4da7cb8bb55d6fcaf02229183af2886dd2e43bd700f5352c2202", "class_name": "RelatedNodeInfo"}}, "text": "Milkman:\nHi, I was trying to run the QASummaryGraph but when running the query I get this error message: RuntimeError: asyncio.run() cannot be called from a running event loop. Anyone facing the same issue? Edit: In the query config, I set the use async as false, but I'm getting another error: RuntimeWarning: coroutine 'LLMPredictor.apredict' was never awaited\n  k, util.convert_to_openai_object(v, api_key, api_version, organization) Edit2: I think it's because I was testing on Jupyter Notebook.\nLogan M:\nYea in jupyter you need to put this at the top of your notebook and run it first \n\n```\nimport nest_asyncio\nnest_asyncio.apply()\n\n```\nMilkman:\nYea just figured that out", "start_char_idx": 0, "end_char_idx": 676, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd2c71ac-60b0-4964-afe4-3d94b4ce21b5": {"__data__": {"id_": "fd2c71ac-60b0-4964-afe4-3d94b4ce21b5", "embedding": null, "metadata": {"date": "2023-04-26T15:26:29.955+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100805108998090784", "node_type": "4", "metadata": {"date": "2023-04-26T15:26:29.955+00:00"}, "hash": "8203e62f601b9c54dd8756a86c5d41684cc42363677cfd138ede182fa4e9e570", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f0a6390-af64-44ca-8e32-f2e71b2994f9", "node_type": "1", "metadata": {"date": "2023-04-26T14:46:02.255+00:00"}, "hash": "c1edd2e29cb06604f6989421cf5a5d26f774d23b2c6647b0c005f4a5c97ad3cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4fc7f22f-1242-45fc-b2ab-68997c2d690a", "node_type": "1", "metadata": {}, "hash": "56916e3a21a11bdc9538b191b73d122b8b939c45e4697c33d4709c48815f4d96", "class_name": "RelatedNodeInfo"}}, "text": "Milkman:\nSo my understanding is that using async will accelerate the process for tree index construction and list index query?\nLogan M:\nUsing response_mode=\"tree_summarize\" yea it should", "start_char_idx": 0, "end_char_idx": 186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4fc7f22f-1242-45fc-b2ab-68997c2d690a": {"__data__": {"id_": "4fc7f22f-1242-45fc-b2ab-68997c2d690a", "embedding": null, "metadata": {"date": "2023-04-26T15:43:29.733+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100809386257043565", "node_type": "4", "metadata": {"date": "2023-04-26T15:43:29.733+00:00"}, "hash": "e5fd2ecc1cf91920250d565c4cce4c4bda4fb70041df0c67d567ef5a36b034b6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fd2c71ac-60b0-4964-afe4-3d94b4ce21b5", "node_type": "1", "metadata": {"date": "2023-04-26T15:26:29.955+00:00"}, "hash": "4e58f8f31ba76269f34c4a80a375af040d93fcdc7f280860e81a506bb63cd84c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "51e9c7fe-5425-44ee-9d0c-a16a76a0a276", "node_type": "1", "metadata": {}, "hash": "f78e83cfa75acc2a033f7ca8f4c0e60f470d495ffc7a6bbe3678e83df184312b", "class_name": "RelatedNodeInfo"}}, "text": "Oliver:\nHow significant is this increase in speed by using async?\nLogan M:\nDepends on how much data you are summarizing\n\nCheck out this notebook \nhttps://github.com/jerryjliu/llama_index/blob/main/examples/async/AsyncQueryDemo.ipynb", "start_char_idx": 0, "end_char_idx": 232, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "51e9c7fe-5425-44ee-9d0c-a16a76a0a276": {"__data__": {"id_": "51e9c7fe-5425-44ee-9d0c-a16a76a0a276", "embedding": null, "metadata": {"date": "2023-04-26T18:18:42.145+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100848445343932497", "node_type": "4", "metadata": {"date": "2023-04-26T18:18:42.145+00:00"}, "hash": "1cff53179da8e30231ed8a3a6084efb8d7418a196732ef881c27427ae56892ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4fc7f22f-1242-45fc-b2ab-68997c2d690a", "node_type": "1", "metadata": {"date": "2023-04-26T15:43:29.733+00:00"}, "hash": "d4511b777af180513d60228144500662f94973646b0761839efc2c5c2b10b9a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ab72c3d-a7d8-4e87-b5e5-a59925185306", "node_type": "1", "metadata": {}, "hash": "c78d5eb390aa89513f00c5001f2742e3f30fe7ba0abea6d9d0b91ffd65f2cdce", "class_name": "RelatedNodeInfo"}}, "text": "afewell:\nHello, the general usage pattern section of the docs has a section called creating indices on top of other indices where it shows a demo of creating a couple vector indexes and then combining them into a list index, and it says when doing so, you should assign a descriptive summary to each of the subindicies, and it shows an example of using an index.set_text method to set this summary. When I attempt to do this, it says GPTSimpleVectorIndex does not have that attribute, and according to the docs, I do not see that attribute or any way to set a summary text for an index either in simple vector index or list index. I assume the docs may be outdated here? If there is no set text method, does that mean that there is no reason to set summary text for the subindex or is there some other method I cant find?\nLogan M:\nThis is out of date. I need to make a pr for this lol. See this for the proper way to do it\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/index_structs/composability.html", "start_char_idx": 0, "end_char_idx": 1006, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ab72c3d-a7d8-4e87-b5e5-a59925185306": {"__data__": {"id_": "5ab72c3d-a7d8-4e87-b5e5-a59925185306", "embedding": null, "metadata": {"date": "2023-04-26T19:37:04.962+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100868170388086845", "node_type": "4", "metadata": {"date": "2023-04-26T19:37:04.962+00:00"}, "hash": "721062c2179e7f61453ef1348828ae72a1b59f5c85219369d0f2ecaa91fd39ec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "51e9c7fe-5425-44ee-9d0c-a16a76a0a276", "node_type": "1", "metadata": {"date": "2023-04-26T18:18:42.145+00:00"}, "hash": "4d8513d23c1e9906221c6fdf6f587ea86b279b21514594f6ac9bc004200d40a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03616788-bdec-436e-b90a-9d60521d6fae", "node_type": "1", "metadata": {}, "hash": "0135a4e3e5d700cf9194a854daea435892e5f8e67ffeb833c76b566bdd73e4c5", "class_name": "RelatedNodeInfo"}}, "text": "\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc:\nI think that is an issue : I ran \n```\nresponse = index.query(\"How do i get kudos ?\",vector_store_query_mode='svm', similarity_top_k=5)\n```\nAnd got this error : \n```\n  File \"C:\\Users\\kalle\\AppData\\Roaming\\Python\\Python310\\site-packages\\llama_index\\indices\\utils.py\", line 52, in log_vector_store_query_result\n    similarities = result.similarities or [1.0 for _ in result.ids]\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n``` \nEither top_k is incompatible with vector indexes or there is some true issue behind ?\nLooks like ,vector_store_query_mode='svm' is the culprit , i found it in a jupyter inside the examples (  (https://github.com/jerryjliu/gpt_index/tree/main/examples/vector_indices/SimpleIndexDemo.ipynb)\nOliver:\nyeah this is an issue with the implementation with the new svm, lin reg and logistic reg methods for retrieving top k.\nit seems this was tested on k=1 where this code would run fine and doesnt raise an error.\nthe error gets raised when you use an array as a boolean value in a conditional statement but the array has more than one element\n\ni fixed it by changing the line that causes the error to the following. however i don't advice changing the code in the llama_index files as it can cause other issues if you're not very careful. \n```\nsimilarities = result_similarities if len(result_similarities) > 1 else [1.0 for _ in result_ids]\n```\nLogan M:\nWould be awesome if you made a pr with thise fix \ud83d\ude4f", "start_char_idx": 0, "end_char_idx": 1496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03616788-bdec-436e-b90a-9d60521d6fae": {"__data__": {"id_": "03616788-bdec-436e-b90a-9d60521d6fae", "embedding": null, "metadata": {"date": "2023-04-26T21:48:26.039+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1100901226020884490", "node_type": "4", "metadata": {"date": "2023-04-26T21:48:26.039+00:00"}, "hash": "2e6df8d166abc46f0859d4a063d634506ab19cb14ae58d0d6c4a94a854add7a6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ab72c3d-a7d8-4e87-b5e5-a59925185306", "node_type": "1", "metadata": {"date": "2023-04-26T19:37:04.962+00:00"}, "hash": "9f6b532c5d74ec8bca5fc6c97d779a154bce6f9a335f8019e3a279b3e6d65e5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ea032ca8-20fb-4673-a416-7286a3df4212", "node_type": "1", "metadata": {}, "hash": "665bc0a941dfc31eece144ac1addefdf69092b7a8aafeaceb7589d26aecc7d07", "class_name": "RelatedNodeInfo"}}, "text": "krishnan99:\nHi @Logan M ! I had a question related to the openAI latency. Does a larger chunk size and hence context increase the response time from the API call?\nLogan M:\nTechnically yes. But that time is probably tiny compared to the network latency and how long it takes their server to actually process your request due to load", "start_char_idx": 0, "end_char_idx": 331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea032ca8-20fb-4673-a416-7286a3df4212": {"__data__": {"id_": "ea032ca8-20fb-4673-a416-7286a3df4212", "embedding": null, "metadata": {"date": "2023-04-27T05:11:24.395+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101012703725764629", "node_type": "4", "metadata": {"date": "2023-04-27T05:11:24.395+00:00"}, "hash": "f6c22986fc7b8c7f891fa5a635e092ead6922a24d32f403331f00c735f0b36b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03616788-bdec-436e-b90a-9d60521d6fae", "node_type": "1", "metadata": {"date": "2023-04-26T21:48:26.039+00:00"}, "hash": "c817efa3fc340d6685a1994e604e47218c6e5d2e627534dd316f1b8b14026b59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f20b13f-5ce8-4e0f-9b49-23e82c7b8d86", "node_type": "1", "metadata": {}, "hash": "a6b32634f7871fffa60055545bacf14f7d8f6dd8237f0981fdaff8c303bbf0f9", "class_name": "RelatedNodeInfo"}}, "text": "Subhrajit Pramanick:\nHi @Logan M \nThis is my block of code for Jira connector. the functions are running without any error but I am getting [] in print document whereas I am having 2 tickets on my Jira account. I can see similar issues on github connectors also.\nOliver:\nI haven\u2019t looked at Jira connector specifically but most if not all data readers return a list of \u2018documents\u2019. The square brackets you see just shows you it\u2019s a list.\n\nSo your documents look like this under the hood documents = [doc1, doc2, doc3, etc]\nThen if you print documents you\u2019ll see the list. If you want to print just one element you can do.\nprint(documents[0]) where 0 determines which element of the list you want. In the example documents[0] would be doc1.", "start_char_idx": 0, "end_char_idx": 739, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f20b13f-5ce8-4e0f-9b49-23e82c7b8d86": {"__data__": {"id_": "2f20b13f-5ce8-4e0f-9b49-23e82c7b8d86", "embedding": null, "metadata": {"date": "2023-04-27T13:34:16.13+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101139253154549800", "node_type": "4", "metadata": {"date": "2023-04-27T13:34:16.13+00:00"}, "hash": "ab19ec346ec893efa158e0d675b976863914b56dc4dd07b9689f4bcdc99c1a35", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ea032ca8-20fb-4673-a416-7286a3df4212", "node_type": "1", "metadata": {"date": "2023-04-27T05:11:24.395+00:00"}, "hash": "68619dcbdcce2d33d890d37f188502a21a37615eeb107f36788a7cd4dfcb5813", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38508ea9-3dec-4741-9276-6b7c00edb16b", "node_type": "1", "metadata": {}, "hash": "f5c73a1e31255752c209613b83dacfdece1b8a72eb421f621fd70b1f6dcbb0cb", "class_name": "RelatedNodeInfo"}}, "text": "\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc:\nI got an issue trying to use an optimizer, the code is something like this : \n```\nembed_model = LangchainEmbedding(HuggingFaceEmbeddings())\nllm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0.7, model_name=\"text-curie-001\"))\nservice_context = ServiceContext.from_defaults(embed_model=embed_model, llm_predictor=llm_predictor)\nindex = GPTSimpleVectorIndex.load_from_disk('index.json')\nresponse = index.query(\"How do i get kudos ?\", similarity_top_k=5, mode='embedding', service_context=service_context, optimizer=SentenceEmbeddingOptimizer(percentile_cutoff=0.5))\n```\nAnd i get : \n```\n C:\\Users\\kalle\\AppData\\Roaming\\Python\\Python310\\site-packages\\llama_index\\embeddings\\base.py:43  \u2502\n\u2502 in similarity                                                                                    \u2502\n\u2502                                                                                                  \u2502\n\u2502    40 \u2502   \u2502   product = np.dot(embedding1, embedding2)                                           \u2502\n\u2502    41 \u2502   \u2502   return product                                                                     \u2502\n\u2502    42 \u2502   else:                                                                                  \u2502\n\u2502 \u2771  43 \u2502   \u2502   product = np.dot(embedding1, embedding2)                                           \u2502\n\u2502    44 \u2502   \u2502   norm = np.linalg.norm(embedding1) * np.linalg.norm(embedding2)                     \u2502\n\u2502    45 \u2502   \u2502   return product / norm                                                              \u2502\n\u2502    46                                                                                            \u2502\n\u2502 in dot:180                                                                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nValueError: shapes (768,) and (1536,) not aligned: 768 (dim 0) != 1536 (dim 0)\n```\nI'd say it's an issue with llamaindex itself ?\nLogan M:\nYou are loading an existing vector index that wasn't generated with the same embedding model\n\nDifferent embedding models have different output dimensions (1536 vs 768 here), but the output dimensions need to be consistent in order for cosine similarity to work\n\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc\u1cbc:\nChanged it to this and same error \n```\nembed_model = LangchainEmbedding(HuggingFaceEmbeddings())\nllm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0.7, model_name=\"text-curie-001\"))\nservice_context = ServiceContext.from_defaults(embed_model=embed_model, llm_predictor=llm_predictor)\nindex = GPTSimpleVectorIndex.from_documents(documents, service_context=service_context)\nindex.save_to_disk('index.json')\nindex = GPTSimpleVectorIndex.load_from_disk('index.json')\nresponse = index.query(\"How do i get kudos ?\", similarity_top_k=5, mode='embedding', service_context=service_context, optimizer=SentenceEmbeddingOptimizer(percentile_cutoff=0.5))\n```", "start_char_idx": 0, "end_char_idx": 2877, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38508ea9-3dec-4741-9276-6b7c00edb16b": {"__data__": {"id_": "38508ea9-3dec-4741-9276-6b7c00edb16b", "embedding": null, "metadata": {"date": "2023-04-27T15:30:34.229+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101168521423101974", "node_type": "4", "metadata": {"date": "2023-04-27T15:30:34.229+00:00"}, "hash": "349693085d8549f0ed711842b65f5f5c19a7280f36aa40562a4faf62e8bf93b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f20b13f-5ce8-4e0f-9b49-23e82c7b8d86", "node_type": "1", "metadata": {"date": "2023-04-27T13:34:16.13+00:00"}, "hash": "82b6b9cef50c65abcda49e18a096164f73bb4687ccdb587f9b55bb45918a07b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ead220b2-c156-4a00-8c50-39bbb3c671f7", "node_type": "1", "metadata": {}, "hash": "f69d4cb782974073dcb90e075bb48dff5a6e291cb984dcfa0d66611a377af0b6", "class_name": "RelatedNodeInfo"}}, "text": "Tmeister:\nHey there, making progress here. So by now, I have set up a pretty basic working example with custom documents, and it works great. Now, the indexes are stored on JSON files and loaded every time we want to make a query. I've read about embeddings and how these are stored on vector tables for future queries.  \n\nMy question is about performance. How different is using json files for the indexes or Vector tables?\n\nTBH, I'm not sure if that question makes sense; maybe I'm comparing apples vs oranges.\nLogan M:\nNormally, you'd want to keep the json/index loaded in memory in some sort of global variable in a server, so that you don't have to reload every time for every query.\n\nThe simple vector index usually is good for smaller use cases (like up 2-4GB JSON files). If you have larger indexes, you might want to look into vector store integrations like weaviate or qdrant, which are optimized for having a huge amount of vectors\nTmeister:\nThank you, Logan. I understand now when you said, \"Keep it in memory,\" In the PHP world from where I came from ;), we use to use Redis, for example, to save data in memory. What would be the Python or Llama index way?", "start_char_idx": 0, "end_char_idx": 1170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ead220b2-c156-4a00-8c50-39bbb3c671f7": {"__data__": {"id_": "ead220b2-c156-4a00-8c50-39bbb3c671f7", "embedding": null, "metadata": {"date": "2023-04-27T19:23:08.234+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101227048762085458", "node_type": "4", "metadata": {"date": "2023-04-27T19:23:08.234+00:00"}, "hash": "02abceaac45ea9e51eceba742fe36a7f7b865f396c9ae4e3cc10b41e4fbde616", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38508ea9-3dec-4741-9276-6b7c00edb16b", "node_type": "1", "metadata": {"date": "2023-04-27T15:30:34.229+00:00"}, "hash": "54be41f2a9b8551ddd5312f6e57ff9e0c5b37a4230a948e64c8f7223910fb098", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b431c8c9-4338-45b4-90f5-b1cf3e71e184", "node_type": "1", "metadata": {}, "hash": "191b11b37da97b2900fa110be9b2b0ceff42b21ba47f983dedb0f60a50d60949", "class_name": "RelatedNodeInfo"}}, "text": "maximmm:\nHi all. Can someone please explain the difference (or point me to documentation)  between chunk_size_limit when set in PromptHelper vs. ServiceContext?\nLogan M:\nThere are two chunk sizes\n\nOne during index construction, and one during queries\n\nPutting in the service context sets the same chunk size for both steps\n\nBut if you pass in the prompt helper, it uses the chunk size limit set in the prompt helper for queries\n\nThe reason there is two is because sometimes you might want to embed larger chunks of text, but want to only show the LLM smaller chunks of text.\n\nI hope that makes sense... it's a little confusing haha\nmaximmm:\n@Logan M thanks, that helps. Somewhat related question, how does tree_summarize response mode handle context length? If I have a long document say 60k tokens, that i'm using with a listindex with 3k chunks.  Since all 20 nodes summaries won't fit into 1 context window for a final node, does it automatically build up as many layers as necessary?\nLogan M:\nYea exactly. It will build a summary tree from the bottom up and return the root summary. There's also an async option to help speed this up", "start_char_idx": 0, "end_char_idx": 1137, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b431c8c9-4338-45b4-90f5-b1cf3e71e184": {"__data__": {"id_": "b431c8c9-4338-45b4-90f5-b1cf3e71e184", "embedding": null, "metadata": {"date": "2023-04-27T22:57:09.436+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101280908666994719", "node_type": "4", "metadata": {"date": "2023-04-27T22:57:09.436+00:00"}, "hash": "73e8f1e24ea4b01768e659babd0a17d8125ea4150f8707447c6e6893334d4904", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ead220b2-c156-4a00-8c50-39bbb3c671f7", "node_type": "1", "metadata": {"date": "2023-04-27T19:23:08.234+00:00"}, "hash": "05c308b0bd35e5b7b1774c6c1084a7feac2304c530152d7adfc5b11b364ec5c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c22d1869-cc51-4fb2-b7fb-7fee9d946791", "node_type": "1", "metadata": {}, "hash": "317294853fabe807ea68259ab2d514ade20839f509c65e893b3090b79887852a", "class_name": "RelatedNodeInfo"}}, "text": "itsgeorgep:\nWhen I do a prompt like:\n\n```\nImagine you are an experienced tour guide at a popular tourist attraction. Please provide a vivid and enticing description of the place I tell you, highlighting its history, unique features, and significance for visitors to experience and explore. Be relatively concise. Keep it under 150 words. The place is in Medellin. The place I want you to tell you about: Los Patios Hostel\n```\n\nIn ChatGPT it takes under 2 seconds. But with with this code it takes 8-13 seconds. Why would that be? Shouldn't I be getting the same speed?\n\n```\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"system\", \"content\": prompt_final},\n    ],\n    temperature=0,\n    max_tokens=2048,\n)\n```\nLogan M:\nPretty sure chatGPT and gpt-3.5 are two different models \n\nThe traffic on chatGPT is probably way less than the load on the gpt-3.5 endpoint is my guess", "start_char_idx": 0, "end_char_idx": 924, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c22d1869-cc51-4fb2-b7fb-7fee9d946791": {"__data__": {"id_": "c22d1869-cc51-4fb2-b7fb-7fee9d946791", "embedding": null, "metadata": {"date": "2023-04-28T00:50:34.962+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101309453111926815", "node_type": "4", "metadata": {"date": "2023-04-28T00:50:34.962+00:00"}, "hash": "2932342b8fc2db66cb73796b2c357d73ec2c5c5e6380b7853f144b44aaa2ca1c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b431c8c9-4338-45b4-90f5-b1cf3e71e184", "node_type": "1", "metadata": {"date": "2023-04-27T22:57:09.436+00:00"}, "hash": "818414a8fd2225d32ef5d05eda17d20e9e9ba9e0fd56ba540c9c566b93b117ca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d8b1cd7-13b6-4588-aed5-f506ae988f50", "node_type": "1", "metadata": {}, "hash": "11647ca97a3dfac769a37c85b8c333ebac803fe845d1afc2e829320879052023", "class_name": "RelatedNodeInfo"}}, "text": "brenn:\nI am trying to get started using llama index, everything is working well, but i am being charged for text-davinci when i am specifying \n\n`llm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\", max_tokens=num_outputs))`\n\nWhat am i doing wrong?\nLogan M:\nYou'll need to make sure you pass in the service context when loading from disk too (that's an easy one to miss)", "start_char_idx": 0, "end_char_idx": 403, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d8b1cd7-13b6-4588-aed5-f506ae988f50": {"__data__": {"id_": "1d8b1cd7-13b6-4588-aed5-f506ae988f50", "embedding": null, "metadata": {"date": "2023-04-28T01:03:08.54+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101312613847138354", "node_type": "4", "metadata": {"date": "2023-04-28T01:03:08.54+00:00"}, "hash": "b11585656b8fb5fb67b2d293987e8f30010392d1622bf0e7786800de6f10d8ec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c22d1869-cc51-4fb2-b7fb-7fee9d946791", "node_type": "1", "metadata": {"date": "2023-04-28T00:50:34.962+00:00"}, "hash": "18b5b2eb78983bdd0189a5a8c8e790c42ddc2278ecad5fa4346ced0158864986", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2b68c4d-cc43-4145-add1-94108329aaca", "node_type": "1", "metadata": {}, "hash": "77c9d65624b04b6eb11972ee00ef5a38b4d47f2a28c3f7067bd7828aa6128395", "class_name": "RelatedNodeInfo"}}, "text": "brenn:\n@Logan M Thanks, I think you are correct, all i am doing is\n\n```index = GPTSimpleVectorIndex.load_from_disk('index.json')\nresponse = index.query(input_text, response_mode=\"compact\")```\n\nwhat change do i need to make here?\nLogan M:\n`... load_from_disk(\"index.json\", service_context=service_context)`\n\nWhere you use the service context that has that llm_predictor set \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 374, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2b68c4d-cc43-4145-add1-94108329aaca": {"__data__": {"id_": "c2b68c4d-cc43-4145-add1-94108329aaca", "embedding": null, "metadata": {"date": "2023-04-28T03:02:21.942+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101342617389781042", "node_type": "4", "metadata": {"date": "2023-04-28T03:02:21.942+00:00"}, "hash": "6ad28252259556d08a40ed843550f5717bc62377929a7630a43453170eab39fe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d8b1cd7-13b6-4588-aed5-f506ae988f50", "node_type": "1", "metadata": {"date": "2023-04-28T01:03:08.54+00:00"}, "hash": "a8dbefe7deb3f014f9cda262dc1ff1982eb0b6c28791c2db38d10a83dcfcb03a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47597dc3-1420-40d2-97e0-0f1c29eb86b3", "node_type": "1", "metadata": {}, "hash": "5fa29797ebaa7ffa5bc0c1d6c2c545c609456d7c29c7d41ca876892a7fe4f4fd", "class_name": "RelatedNodeInfo"}}, "text": "SeaCat:\nHello! Can you give a bit of an explanation on using tokens? After indexing the text I ask a question and got this message:\n```\nINFO:llama_index.token_counter.token_counter:> [query] Total LLM token usage: 943 tokens\nINFO:llama_index.token_counter.token_counter:> [query] Total embedding token usage: 8 tokens\n```\nI know the answer was found in my index (I asked ChatGPT and it doesn't know the answer) but not sure why it used LLM a lot and so few for embeddings. Generally speaking, what does the used tokens amount depend on? Thanks!!\nLogan M:\nThose are actually pretty low numbers!\n\nThe embedding tokens are 8 because it only has to embed your query text (which is usually very short)\n\nThen it uses your query text to fetch relevant text from you index, and sends that text along with your query to the LLM. So in total the LLM used 943 tokens to read your query + the retrieved text + make an answer in natural language\nSeaCat:\nAh, got it! Yes, the question was short and now it's clear why the embedding token usage is low. I saw the responses of approx same length but 2-3 times shorter. Another observation is if LLM finds the answer not in my index but in the common ChatGPT database, the number is higher (but it's just my guess, I'm not sure). I'd be happy to read your comments on it, thanks!", "start_char_idx": 0, "end_char_idx": 1312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47597dc3-1420-40d2-97e0-0f1c29eb86b3": {"__data__": {"id_": "47597dc3-1420-40d2-97e0-0f1c29eb86b3", "embedding": null, "metadata": {"date": "2023-04-28T04:15:46.292+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101361090572582942", "node_type": "4", "metadata": {"date": "2023-04-28T04:15:46.292+00:00"}, "hash": "2cf503b79c8ee225998c14f0c6b2161391543d99f4a9369a1ec904f2e5512f8f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2b68c4d-cc43-4145-add1-94108329aaca", "node_type": "1", "metadata": {"date": "2023-04-28T03:02:21.942+00:00"}, "hash": "6fb9c9568546ab520da1ff12b3b9430eb3b6ef8dec888e72327b97cd58206857", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b042631f-2260-45b7-ae97-e7e7f18c9029", "node_type": "1", "metadata": {}, "hash": "6b96be81449425f9462bbd4db568d8a3368d62b1fb1ede76ea1b90f6f68d98ed", "class_name": "RelatedNodeInfo"}}, "text": "trungbb:\nHello , i try to use myscale from gpt_index , i ready upgrade llama-index but get this error   \n ` from gpt_index import QuestionAnswerPrompt,GPTMyScaleIndex\nImportError: cannot import name 'GPTMyScaleIndex' from 'gpt_index `\nAny one can help .Thanks\nDonRucastle:\nTry importing from llama_index instead of gpt_index?\ntrungbb:\nThanks you .it works  now \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 362, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b042631f-2260-45b7-ae97-e7e7f18c9029": {"__data__": {"id_": "b042631f-2260-45b7-ae97-e7e7f18c9029", "embedding": null, "metadata": {"date": "2023-04-28T06:30:44.389+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101395056453222480", "node_type": "4", "metadata": {"date": "2023-04-28T06:30:44.389+00:00"}, "hash": "499b718b6496201581412777e067d234519818bda9c17efcd5268fd3d9b4fdd9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47597dc3-1420-40d2-97e0-0f1c29eb86b3", "node_type": "1", "metadata": {"date": "2023-04-28T04:15:46.292+00:00"}, "hash": "e2c758c6288380773a85ca43c2d20932e3da1548bf76685f4746de0d2c2b14d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "99ad73aa-0a0f-411c-ad59-e712037b9493", "node_type": "1", "metadata": {}, "hash": "aa76a5d99f045eb24b2ea331d88c9d7defea64074d4c43a88877579d01aca563", "class_name": "RelatedNodeInfo"}}, "text": "Siddhant Saurabh:\nhey, we are building a langchain agent with tools mechanism and we are trying to integrate the following tools, \nCompanywiki = for answering from company pages\nAI_answer = from answering directly for general Q/A\nSupport_answer = for answering some predefined questions and answer\ndo you, @Logan M @ravitheja @jerryjliu98, think its a good idea to have these tools? any challenge we might face? any other feedback?\nJoie:\nYup! This tool should be just what you need. Just play around with the basic index query like top 3 as a start, find the limitations where it can\u2019t answer some of your questions efficiently or accurately, and build composite graphs from there", "start_char_idx": 0, "end_char_idx": 680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99ad73aa-0a0f-411c-ad59-e712037b9493": {"__data__": {"id_": "99ad73aa-0a0f-411c-ad59-e712037b9493", "embedding": null, "metadata": {"date": "2023-04-28T06:42:04.774+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101397910194757692", "node_type": "4", "metadata": {"date": "2023-04-28T06:42:04.774+00:00"}, "hash": "cead7880134f8ced0acf3dd5b55f5febaef0544ee41d509eae56831290b7ca11", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b042631f-2260-45b7-ae97-e7e7f18c9029", "node_type": "1", "metadata": {"date": "2023-04-28T06:30:44.389+00:00"}, "hash": "806fa9cfc26aed286a13436be13c49693d00510446e610db736948bd5359e935", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "331f6745-7455-4f0a-95a7-36b459fa2abe", "node_type": "1", "metadata": {}, "hash": "9afceabfd39deb074fd526a7ec794363e9bd238d29a69cab8de5bf8f1335a9b7", "class_name": "RelatedNodeInfo"}}, "text": "Marcel STRATxAI:\nHi\n\nI am currently trying to build a chatbot for our website using LlamaIndex and chatGPT. Our chatbot has around 50 documents, each around 1-2 pages long, containing tutorials and other information from our site. While the answers I'm getting are great, the performance is slow. On average, it takes around 15-20 seconds to retrieve an answer, which is not practical for our use case.\n\nI have tried using Optimizers, as suggested in the documentation, but haven't seen much improvement. Currently, I am using GPTSimpleVectorIndex and haven't tested other indexes yet. \n\nI am pretty new to this, would like to hear if this is expected times or if it could be improved by, e.g., building indices in a more efficient way, setting different params, etc. Basically looking for any suggestions on how to improve the performance of the bot so that it can provide answers more quickly.\n\nThank you!\nJoie:\nWhat is the top K you are using for GPTSimpleVectorIndex?\nMarcel STRATxAI:\nHi Joie! I was leaving it to the default value, I am reading about it now, is that the similarity_top_k parameter? \n\nA quick test with  it to set to 3 does not seem to make it any better, I tried to set chunk_size_limit to 1024 and \nnot great either\n\n`index.query(..., similarity_top_k = 3, response_mode = \"compact\")`", "start_char_idx": 0, "end_char_idx": 1307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "331f6745-7455-4f0a-95a7-36b459fa2abe": {"__data__": {"id_": "331f6745-7455-4f0a-95a7-36b459fa2abe", "embedding": null, "metadata": {"date": "2023-04-28T18:26:13.593+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101575114585292850", "node_type": "4", "metadata": {"date": "2023-04-28T18:26:13.593+00:00"}, "hash": "fd9bda241488d40e4d291d513fd6765efdc38e4bb8b57741a0c61ac012678a8d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "99ad73aa-0a0f-411c-ad59-e712037b9493", "node_type": "1", "metadata": {"date": "2023-04-28T06:42:04.774+00:00"}, "hash": "a4e9716821f94980c365db761363cd9dfb90c3a2a9ef083df9388441b0a7a587", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f1423d6-1e6e-45b1-858f-cd72b823ee13", "node_type": "1", "metadata": {}, "hash": "393b30f34df5c73d4174cdc8e289a43796caca2e6d200a8a76172d123d46a107", "class_name": "RelatedNodeInfo"}}, "text": "afewell:\nThis syntax is in several examples but doesnt work for me:\n```\nSimpleDirectoryReader = download_loader(\"SimpleDirectoryReader\")\n\nloader = SimpleDirectoryReader()\n``` \nI get this error: `__init__() missing 1 required positional argument: 'input_dir'` so  I am supposed to specify the document directory like `SimpleDirectoryReader('/data')` - that doesnt make sense to me as if I run this and print it, it doesnt have data loaded, so I still need to call the load_data method, and if I call that without inputs it errors. I am trying to follow the instructions from the unstructured loader, it has instructions for using it together with simpledirectory reader, but I cant get the example to work. Any guidance would be appreciated!!!\nLogan M:\nThe simple directory reader is already in llama index, no need to download the loader\n\n```python\nfrom llama_index import SimpleDirectoryReader\ndocuments = SimpleDirectoryReader(\"./data\", file_extractor={...}).load_data()\n```", "start_char_idx": 0, "end_char_idx": 976, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f1423d6-1e6e-45b1-858f-cd72b823ee13": {"__data__": {"id_": "4f1423d6-1e6e-45b1-858f-cd72b823ee13", "embedding": null, "metadata": {"date": "2023-04-28T21:36:48.866+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101623077596569671", "node_type": "4", "metadata": {"date": "2023-04-28T21:36:48.866+00:00"}, "hash": "054f90560b04a7188606e12e256593d61f8ba81ed878c83fda31fbabee6c6f33", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "331f6745-7455-4f0a-95a7-36b459fa2abe", "node_type": "1", "metadata": {"date": "2023-04-28T18:26:13.593+00:00"}, "hash": "49c3aa18976852de819a5de4057ac83758007e851db9f7d7887f0675da7ffd8b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "42c270d4-f42d-4e17-9841-bebe9106bf12", "node_type": "1", "metadata": {}, "hash": "e31488b47c400cfee6c22f122c7796460af7a05e7be54c36b53805858e6975e8", "class_name": "RelatedNodeInfo"}}, "text": "brian:\n\"we have some sensitive data which we want to Data Ingestion, Data Indexing locally on prem but should not be sent externally from the company network In this case such as langchain.vectorstores stores locally for Data Ingestion, Data Indexing what sort of information goes externally to openAI or outside company network\"\nafewell:\nllamaindex works with azure openai service if that makes you feel any better about sensitive data. I dont know the contractual or security differences between the services, personally my primary concern is keeping the bosses happy, and at least for me, using azure gives the bosses a little more assurance which gives me a little more freedom \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 683, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "42c270d4-f42d-4e17-9841-bebe9106bf12": {"__data__": {"id_": "42c270d4-f42d-4e17-9841-bebe9106bf12", "embedding": null, "metadata": {"date": "2023-04-29T00:05:45.854+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101660562041098321", "node_type": "4", "metadata": {"date": "2023-04-29T00:05:45.854+00:00"}, "hash": "7976bfe6da44f47d527d0941a95279659ea181b4a8b3d56275f7d0439f470d1d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4f1423d6-1e6e-45b1-858f-cd72b823ee13", "node_type": "1", "metadata": {"date": "2023-04-28T21:36:48.866+00:00"}, "hash": "4a885f8dbdb721a4ccd6dbf45b8ca27294ba26f61f137323317b9d67a8c51266", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc84788c-477b-424f-b10a-00407f20209c", "node_type": "1", "metadata": {}, "hash": "dbe15f290cf74a9619f86d559615911b606bcd5b31deae7595fa80af19cdb9ab", "class_name": "RelatedNodeInfo"}}, "text": "m3t30r4:\nI dont know what to do... i tried a lot of things i just keep getting so small output, what can i do?\nLogan M:\nHow many tokens is that output if you copy and paste into this tool? \n\nhttps://platform.openai.com/tokenizer\nm3t30r4:", "start_char_idx": 0, "end_char_idx": 237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc84788c-477b-424f-b10a-00407f20209c": {"__data__": {"id_": "cc84788c-477b-424f-b10a-00407f20209c", "embedding": null, "metadata": {"date": "2023-04-29T00:09:05.938+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101661401254203442", "node_type": "4", "metadata": {"date": "2023-04-29T00:09:05.938+00:00"}, "hash": "ff20c3329122c8723ff36f32dbbcba73b49650ffbcadb03fab77ea415e7df0e6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "42c270d4-f42d-4e17-9841-bebe9106bf12", "node_type": "1", "metadata": {"date": "2023-04-29T00:05:45.854+00:00"}, "hash": "fe8b75bcb0f8ee43367814ee184143152019655d4bbd8340d96fa69ca328c54a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "201b384c-cbc4-4fcb-ac84-dbb0d43757cd", "node_type": "1", "metadata": {}, "hash": "6ad407515b87a69a27092b0eed2b8f5abef020aab5ab2214a6f68ffe8780a780", "class_name": "RelatedNodeInfo"}}, "text": "m3t30r4:\n\nLogan M:\nOh I see an issue. Make sure you pass in the service context as a kwarg when loading from disk\n\nTbh you might have some issues with num_output/max_tokens that high, you might have to lower it. But yea try it out\nm3t30r4:\nHow can i pass in the service context as a kwarg?", "start_char_idx": 0, "end_char_idx": 289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "201b384c-cbc4-4fcb-ac84-dbb0d43757cd": {"__data__": {"id_": "201b384c-cbc4-4fcb-ac84-dbb0d43757cd", "embedding": null, "metadata": {"date": "2023-04-29T10:34:58.593+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101818908505280552", "node_type": "4", "metadata": {"date": "2023-04-29T10:34:58.593+00:00"}, "hash": "7e2adae4568ac9f1bf292c96f7c810ff7e5892a1b8e574f09d84c28ce9418984", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc84788c-477b-424f-b10a-00407f20209c", "node_type": "1", "metadata": {"date": "2023-04-29T00:09:05.938+00:00"}, "hash": "2a791cd9ee00be91c73d80d888107c4f11a717ac765735cdea4a317e9d7a2762", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "16497a05-dbc1-4079-828f-e4b52032b5da", "node_type": "1", "metadata": {}, "hash": "29165d485af539e743f462b7e5cf926c4267b1a78d40fd3c16d34af50a7c43de", "class_name": "RelatedNodeInfo"}}, "text": "pineapple:\nHi all, I am trying to access the 'load_index_from_storage method and the StorageContext method. But for both I get a \"ImportError: cannot import name 'load_index_from_storage' from 'llama_index' \"error. \n\nOther methods such as SimpleDirectoryReader, LangchainEmbedding, ListIndex, GPTSimpleVectorIndex, PromptHelper, VectorStoreIndex, Document\n\nAll import correctly. \n\nAny tips what might be going wrong would be gratefully received! \ud83d\ude4f\npineapple:\nI checked, and both these methods are currently missing in release 1.5.27\nTeemu:\nI think you need the latest version to use those: https://discord.com/channels/1059199217496772688/1073670729054294197/1101669153993138297", "start_char_idx": 0, "end_char_idx": 678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "16497a05-dbc1-4079-828f-e4b52032b5da": {"__data__": {"id_": "16497a05-dbc1-4079-828f-e4b52032b5da", "embedding": null, "metadata": {"date": "2023-04-29T15:58:12.197+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101900251176116335", "node_type": "4", "metadata": {"date": "2023-04-29T15:58:12.197+00:00"}, "hash": "454827026bcb7d9b915ee70a0d1b9d8f80aea203395776af086c18d0e9384caf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "201b384c-cbc4-4fcb-ac84-dbb0d43757cd", "node_type": "1", "metadata": {"date": "2023-04-29T10:34:58.593+00:00"}, "hash": "15e8a9d986e5ddbdf69664c909d7e82741020040d024a4ec7eba075f99bbe624", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc6af57b-54a8-4e13-abfa-e658c8254b94", "node_type": "1", "metadata": {}, "hash": "1a70d95f86337ff78e12b4e8adf33dbbf85b8fb03cc3b000aca826717f1d9406", "class_name": "RelatedNodeInfo"}}, "text": "tilleul:\nIs it possible use the top_k nodes directly in the query/prompt sent to openai instead of using them to refine the answer with multiple queries\n(as explained in this openai cookbook: https://github.com/openai/openai-cookbook/blob/main/examples/Question_answering_using_embeddings.ipynb where the top_k wikipedia articles are embedded in the query prompt)\nLogan M:\nYou are still limited by the token limit of the model (4096), but you can set response_mode=\"compact\" in the query to stuff as much text as possible into each LLM call.\ntilleul:\nThanks.\n\nI'm thinking that maybe I should do some sort of pre-request first and ask openai to decompose my query into smaller ones ...\n\nWhen I ask: write a procedure that takes two arguments (x and y) and that displays a random number on the screen at location x,y\n\nI get as top_k #1, a reference to the node/doc/file where it is explained what it the correct syntax to write a procedure. Then as #2, the node that explains how to generate a random number, then as #3 a node that explains how to display stuff on screen at locations ...\nUsually the first node is used correctly and the procedure syntax is correct, but the code inside is wrong because it does not know how to generate a random number and display it in position x,y yet ... and thus the subsequent refine queries are kind of useless because it will hardly understand what was wrong in the syntax of the code inside the procedure.\n\nSo I'm thinking maybe if I can decompose the main query into smaller ones (with a first call to openai) and get the node most relevant to each sub-query (internal using response_mode:\"no text\" if I got this right), by insisting that the part that is the most interesting should be the syntax and the examples (and this I need to tweak in order to return/vectorize the appropiate chunks of info), then maybe the final query to openai could include what it needs to answer precisely the question with a prompt like :\n```\nGiven the question: write a procedure that takes two arguments (x and y) and that displays a random number on the screen at location x,y\nUse the following info to answer:\n(text from node returned by small_query #1)\n(text from node returned by small_query #2)\n(text from node returned by small_query #3)\n```\nof course there's the token limit but ... what do you think ?\nLogan M:\nYea I think that makes sense! You basically need to pull the most relevant information out of those top 3 nodes, and use that info to answer your original query.\n\nBut also, if your chunk sizes are pretty small, response_mode=\"compact\" should hopefully send all 3 chunks at the same time to the llm \ud83d\ude4f\ntilleul:\nI'll try the compact mode first but thanks ! I think I'm beginning to understand how this all works ... not easy when you've never done this before ... lots of concepts that are not explained in a straightforward manner even on llama_index or langchain websites ... you just understand that you're about to see magic but you don't know how to cast the spell \ud83d\ude42\nLogan M:\nHaha very true! Takes some time for it to soak in for sure.", "start_char_idx": 0, "end_char_idx": 3082, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc6af57b-54a8-4e13-abfa-e658c8254b94": {"__data__": {"id_": "cc6af57b-54a8-4e13-abfa-e658c8254b94", "embedding": null, "metadata": {"date": "2023-04-29T17:15:17.574+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101919651413381171", "node_type": "4", "metadata": {"date": "2023-04-29T17:15:17.574+00:00"}, "hash": "b3b01bcbbca001a0b0db18eee825a04839176b3097118e5819a31663834b515d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "16497a05-dbc1-4079-828f-e4b52032b5da", "node_type": "1", "metadata": {"date": "2023-04-29T15:58:12.197+00:00"}, "hash": "66f7aea3c6e7bca5fbd1754661c7def3433de146e72b9fac1af601614210b417", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1cfba289-4be3-43ad-a972-5e136dcd02c9", "node_type": "1", "metadata": {}, "hash": "fd2b4f7e541cf89c63defdc140d1ab78f4e4c081a0629d9447034154a86a395f", "class_name": "RelatedNodeInfo"}}, "text": "bradcohn:\nIt looks like the default SimpleDirectoryReader doesn't have builtin methods for html parsing. Has anyone had any luck integrating langchain document loaders? It seems like they each generate document objects but with different attributes. Curious if there are scripts or methods to convert between them.\ntilleul:\nhtml files are not parsed with SimpleDirectoryReader\nhttps://github.com/jerryjliu/llama_index/blob/main/gpt_index/readers/file/base.py", "start_char_idx": 0, "end_char_idx": 458, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1cfba289-4be3-43ad-a972-5e136dcd02c9": {"__data__": {"id_": "1cfba289-4be3-43ad-a972-5e136dcd02c9", "embedding": null, "metadata": {"date": "2023-04-29T18:03:49.473+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1101931864802984008", "node_type": "4", "metadata": {"date": "2023-04-29T18:03:49.473+00:00"}, "hash": "5e521a626caf1ce8b8afb206325664b3277012cb14ec9dbfe3f777166c073972", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc6af57b-54a8-4e13-abfa-e658c8254b94", "node_type": "1", "metadata": {"date": "2023-04-29T17:15:17.574+00:00"}, "hash": "e0b53689d912dc9d67d6fcf422b51129183b69806fa64211f913a7a996913b33", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "30653371-ba2e-4bd3-926d-5072d7bd2d80", "node_type": "1", "metadata": {}, "hash": "80b96f083f89acbcc5c94c521ccfabaeb6fe2be2b10e19a48b296a5db780d22e", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nWhat are best practises to get accurate formatted sources? Would that be the evaluation module? The LLM responses I'm getting (without evaluation) are excellent but the similarity between the response and formatted sources seems way off...\nLogan M:\nCan you explain a little more? Not sure what you mean\nTeemu:\nEven this example snippet (I might be misunderstanding the formatted sources module) https://gpt-index.readthedocs.io/en/latest/guides/primer/usage_pattern.html#parsing-the-response", "start_char_idx": 0, "end_char_idx": 498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "30653371-ba2e-4bd3-926d-5072d7bd2d80": {"__data__": {"id_": "30653371-ba2e-4bd3-926d-5072d7bd2d80", "embedding": null, "metadata": {"date": "2023-04-30T01:10:27.557+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102039230949118033", "node_type": "4", "metadata": {"date": "2023-04-30T01:10:27.557+00:00"}, "hash": "ae33eee39416ddab146d0fdd20ca035f3fb9e5a056902f39c8c6fd2df16606dc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1cfba289-4be3-43ad-a972-5e136dcd02c9", "node_type": "1", "metadata": {"date": "2023-04-29T18:03:49.473+00:00"}, "hash": "a679ce2566e69d3f362c49498edcba30a3319a430faebf56a262d1107b52ea56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd078825-c4dd-437b-a819-b30fbec4101a", "node_type": "1", "metadata": {}, "hash": "d65f1f2f6fea468a18ff5e0f41fae183732df3625f175d6c1c827631494c2603", "class_name": "RelatedNodeInfo"}}, "text": "Tmeister:\nHi guys, I'm making good progress here; thank you all for your help. I have another question, this time about how would be the best way to load an index on-demand and keep it in memory (for a couple of hours) for subsequences queries without using a vector db; the idea is not to load the index every time a query is made, but also I don't want to load ALL the indexes at once. Does this make sense?\nLogan M:\nI think this makes sense! Basically just have to map each user to their index(es)\n\nYou could even do some kind of time based cache, that unloads the index from memory after a set amount of inactive time \ud83e\udd14\nTmeister:\nThank you, Logan; yeah, that's my goal; my question is more about how to load the index on memory. My first idea is to load the index on Redis (I see there is an open issue here https://github.com/jerryjliu/llama_index/issues/452), but it is not supported yet. I was wondering if maybe I could use Chroma, but I'm not sure if Chroma can \"live\" in memory.\nLogan M:\nMy first thought is you could just load the index.json into some global dictionary of user_id->index\n\nChroma has in memory options as well, but I'm not sure how the data is persisted in terms of saving/loading \ud83e\udd14", "start_char_idx": 0, "end_char_idx": 1209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd078825-c4dd-437b-a819-b30fbec4101a": {"__data__": {"id_": "fd078825-c4dd-437b-a819-b30fbec4101a", "embedding": null, "metadata": {"date": "2023-04-30T08:15:40.064+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102146238159261736", "node_type": "4", "metadata": {"date": "2023-04-30T08:15:40.064+00:00"}, "hash": "fa865b17e9112126c912c78bf30f98914a61f6c659011c3f00e8c1e921886436", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "30653371-ba2e-4bd3-926d-5072d7bd2d80", "node_type": "1", "metadata": {"date": "2023-04-30T01:10:27.557+00:00"}, "hash": "bc35988845cd223d53bffdd1f15d6b5a39ff91c3e0dc431e1939292dfa0a8ff4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2ee4887a-6ab5-4434-9431-910907fcaa7e", "node_type": "1", "metadata": {}, "hash": "e786495db951666d34fec9d0354a216afa87b3dd6da060749e86481f32cdcd6e", "class_name": "RelatedNodeInfo"}}, "text": "Vishal Donderia:\nHello everyone,\nI am wondering if all the indexes are loaded into the main memory before any query is executed? I plan to use 50 GB of data to create an index, and it seems impractical to keep everything in memory for querying purposes.\nVishal Donderia:\nHello ,\n\nI am wondering if all the indexes are loaded into the main memory before any query is executed? I plan to use 50 GB of data to create an index, and it seems impractical to keep everything in memory for querying purposes.\nFurthermore, I have noticed that duplicate logs are being generated every time a query is executed (this is occurring on the main branch). I am uncertain whether this is a logging problem or if we are being charged twice for each query.\n```\nINFO:gpt_index.token_counter.token_counter:> [get_response] Total LLM token usage: 1809 tokens\nINFO:gpt_index.token_counter.token_counter:> [get_response] Total embedding token usage: 0 tokens\nINFO:gpt_index.token_counter.token_counter:> [get_response] Total LLM token usage: 1809 tokens\nINFO:gpt_index.token_counter.token_counter:> [get_response] Total embedding token usage: 0 tokens", "start_char_idx": 0, "end_char_idx": 1127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2ee4887a-6ab5-4434-9431-910907fcaa7e": {"__data__": {"id_": "2ee4887a-6ab5-4434-9431-910907fcaa7e", "embedding": null, "metadata": {"date": "2023-04-30T19:16:58.676+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102312662320283808", "node_type": "4", "metadata": {"date": "2023-04-30T19:16:58.676+00:00"}, "hash": "a1416068a856ebf62929023dd71f46331e178593496813f7bee9254f726295b9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fd078825-c4dd-437b-a819-b30fbec4101a", "node_type": "1", "metadata": {"date": "2023-04-30T08:15:40.064+00:00"}, "hash": "c7dc4a9c9e9b4d31ad8f37fd6458b3d1277f0fe6e9a3343f89021c66cc039a4a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b881fcf-7354-4326-bcb8-bc23fbeb2723", "node_type": "1", "metadata": {}, "hash": "a757f7cbb135b8be2816c6c0a560f631191b61ebfe24903f299074599153d680", "class_name": "RelatedNodeInfo"}}, "text": "unbittable:\nDoes anyone know how one might go about precalculating embeddings for a query and then reusing those embeddings to query different indexes?  I see the QueryBundle class docs, but it's not clear to me how that would be used in context.\nLogan M:\nThe query bundle can be passed to the query instead of a string. So if the query bundle already has embeddings set, it will use those", "start_char_idx": 0, "end_char_idx": 389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b881fcf-7354-4326-bcb8-bc23fbeb2723": {"__data__": {"id_": "9b881fcf-7354-4326-bcb8-bc23fbeb2723", "embedding": null, "metadata": {"date": "2023-04-30T20:22:32.86+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102329163483979897", "node_type": "4", "metadata": {"date": "2023-04-30T20:22:32.86+00:00"}, "hash": "fe4a0b1149ee9ca8f2c94fd1b9158f3f0fbbd8a9879b8bc97a11787e21d1cef6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2ee4887a-6ab5-4434-9431-910907fcaa7e", "node_type": "1", "metadata": {"date": "2023-04-30T19:16:58.676+00:00"}, "hash": "b3d37a4fdd13b5ea29daf64481f3ba7829f27f8b374a6f0b67638a711a3ebb4a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "695df484-e151-4c8a-a4b2-a537cbd71292", "node_type": "1", "metadata": {}, "hash": "9cc56434bc94893d25b51c8e8ccdcd6a551a2e3bec76d105f83410ef19363cd9", "class_name": "RelatedNodeInfo"}}, "text": "unbittable:\nSo something to this effect? ```\nembeddings = my_embedder.embed_query('summarize the FooBar article')\nqb = QueryBundle(embedding=embeddings)\nresponse = my_index.query(qb)```\nLogan M:\nI think so! But don't forget to include the query string in the bundle too \n\n`QueryBundle(\"my query\"  embedding=embeddings)`\nunbittable:\nThanks!  How come it needs both?\nLogan M:\nThe query string is still needed to synthesize an answer. The embeddings are only used for retrieving the most similar modes \ud83d\udc4d\nunbittable:\nso does the query string get passed to the model which will re-calculate the embeddings anyway, then? Or... since (to my understanding) the model doesn't understand the _meaning_ of the string, only the tokens it's parsed into, how does the model use the raw string to synthesize the answer without having to re-embed it anyway?", "start_char_idx": 0, "end_char_idx": 841, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "695df484-e151-4c8a-a4b2-a537cbd71292": {"__data__": {"id_": "695df484-e151-4c8a-a4b2-a537cbd71292", "embedding": null, "metadata": {"date": "2023-04-30T23:55:20.174+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102382713480171540", "node_type": "4", "metadata": {"date": "2023-04-30T23:55:20.174+00:00"}, "hash": "5c759bd7587b8071be1c44c93fda151baea4f98e289b3063313c79568edba51c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b881fcf-7354-4326-bcb8-bc23fbeb2723", "node_type": "1", "metadata": {"date": "2023-04-30T20:22:32.86+00:00"}, "hash": "0b914824721710a7c38d0592cf138835743d47330c9fe3272986924daa0abe8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a5892394-1134-4d5c-a646-936e5a5f75e4", "node_type": "1", "metadata": {}, "hash": "063a36d556fd9f281de4f29210f3c593a41e214e26f0d2e95e928f0eea58ff2e", "class_name": "RelatedNodeInfo"}}, "text": "kavinstewart:\ndumb question... i'm trying to use StorageContext for persisting an index, but did the name change in the upgrade from gpt_index to llama_index or something?\nLogan M:\nYea there was a name change a while back, but long story short some of the examples will say gpt_index, but always use llama_index\n\nFor the storage changes, they are actually in alpha at the moment. You'll want to specify when you install\n\n`pip install llama-index==0.6.0.alpha3`", "start_char_idx": 0, "end_char_idx": 460, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a5892394-1134-4d5c-a646-936e5a5f75e4": {"__data__": {"id_": "a5892394-1134-4d5c-a646-936e5a5f75e4", "embedding": null, "metadata": {"date": "2023-05-01T02:12:19.531+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102417187962105886", "node_type": "4", "metadata": {"date": "2023-05-01T02:12:19.531+00:00"}, "hash": "1934332c8a7837a5154a398629b5d09113dcb68ab3ab0589a9736cca86ecb84e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "695df484-e151-4c8a-a4b2-a537cbd71292", "node_type": "1", "metadata": {"date": "2023-04-30T23:55:20.174+00:00"}, "hash": "27d26471fd52a5b147634f88f0277b88771fbce76c3d94a81f5ab42fb3c9994c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af7f26b0-9d58-49ac-9a75-f62f822595f2", "node_type": "1", "metadata": {}, "hash": "9f8eb613607148b48b2404afe8653daf79299e1e60ceec13d20986b3212012ae", "class_name": "RelatedNodeInfo"}}, "text": "kavinstewart:\ni seem to be doing something stupid with my attempt to use TreeIndex... it looks like it's making requests to the LLM to do the summarization on my test document, but for some reason when it reaches the end it seems to have built an empty index (it says it has no context and when it persists the index all the files are basically empty). here's the code:\n\n```\nimport os\nfrom llama_index import TreeIndex, SimpleDirectoryReader, SummaryPrompt, LLMPredictor, ServiceContext, StorageContext, PromptHelper\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain import OpenAI\n\n# Ingest a specified directory of text files\ndirectory_path = \"resources/stories/single_story_test\"  # Replace with your directory of text files\nindex = None\n\n# Set maximum input size\nmax_input_size = 1024\n# Set number of output tokens\nnum_output = 256\n# Set maximum chunk overlap\nmax_chunk_overlap = 20\n\nprompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)\n\n# Define LLM\nllm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\", request_timeout=120))\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\nstorage_context = StorageContext.from_defaults()\n\nif os.path.isdir(directory_path):\n    if os.path.isfile(os.path.join(directory_path, \"index_store.json\")):\n        print(\"Index already exists. Loading from persisted values.\")\n        index = TreeIndex.from_storage(directory_path, service_context=service_context)\n    else:\n        print(\"Index does not exist. Creating from scratch.\")\n        documents = SimpleDirectoryReader(directory_path).load_data()\n\n        # Index and summarize using TreeIndex\n        index = TreeIndex.from_documents(documents, service_context=service_context)\n        storage_context.persist()\nelse:\n    raise ValueError(f\"Directory {directory_path} does not exist.\")\n\n# Query the index to get the summaries\nquery_str = \"What is a summary of this collection of text?\"\nquery_engine = index.as_query_engine(response_mode=\"tree_summarize\")\nresponse = query_engine.query(query_str)\n\nprint(response)\n```\nhere's the output i get. any ideas?\n```\nIndex does not exist. Creating from scratch.\nINFO:llama_index.indices.common_tree.base:> Building index from nodes: 80 chunks\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n    - Avoid using `tokenizers` before the fork if possible\n    - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nINFO:llama_index.indices.common_tree.base:> Building index from nodes: 8 chunks\nINFO:llama_index.token_counter.token_counter:> [build_index_from_nodes] Total LLM token usage: 58639 tokens\nINFO:llama_index.token_counter.token_counter:> [build_index_from_nodes] Total embedding token usage: 0 tokens\nINFO:llama_index.indices.tree.select_leaf_retriever:>[Level 0] Selected node: [9]/[9]\nINFO:llama_index.indices.tree.select_leaf_retriever:>[Level 2] Selected node: [3]/[3]\nINFO:llama_index.token_counter.token_counter:> [retrieve] Total LLM token usage: 974 tokens\nINFO:llama_index.token_counter.token_counter:> [retrieve] Total embedding token usage: 0 tokens\nINFO:llama_index.indices.common_tree.base:> Building index from nodes: 1 chunks\nINFO:llama_index.token_counter.token_counter:> [get_response] Total LLM token usage: 112 tokens\nINFO:llama_index.token_counter.token_counter:> [get_response] Total embedding token usage: 0 tokens\nINFO:llama_index.token_counter.token_counter:> [get_response] Total LLM token usage: 1222 tokens\nINFO:llama_index.token_counter.token_counter:> [get_response] Total embedding token usage: 0 tokens\nIt is impossible to provide a summary as there is no context or information provided to understand the meaning of the text.\n```\nRY:\nI don't know why it's an error, but I saw it written like this. It says to do this to persist data.\n```\nindex.storage_context.persist()\n```", "start_char_idx": 0, "end_char_idx": 4028, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af7f26b0-9d58-49ac-9a75-f62f822595f2": {"__data__": {"id_": "af7f26b0-9d58-49ac-9a75-f62f822595f2", "embedding": null, "metadata": {"date": "2023-05-01T10:37:53.674+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102544418579431454", "node_type": "4", "metadata": {"date": "2023-05-01T10:37:53.674+00:00"}, "hash": "9aca9f8fa22ae38bf9bdc2fe850150f62095afc6dd7df0310ded73ece28bfca3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a5892394-1134-4d5c-a646-936e5a5f75e4", "node_type": "1", "metadata": {"date": "2023-05-01T02:12:19.531+00:00"}, "hash": "dafe108e6dedc661c480ceddf77b658e31988e68c5389009ff72cf3c7ad0c9cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91f64f9c-2af0-439e-83d3-71a3048e3600", "node_type": "1", "metadata": {}, "hash": "4ced805a7cce955062cb7c61063856c24d8ad938088e214a9bda7e18156c524c", "class_name": "RelatedNodeInfo"}}, "text": "tilleul:\nIs it possible to ask llama to return the top k results but only use the top n ?\nI'd like to know what were the other top results without using them, just to know how I could possibly refine either my documents or my queries so that the lower result will be higher the next time\nLogan M:\nHmm, I feel like the easiest way for now is setting a larger top k with response_mode=\"no_text\" so that it doesn't call the llm\n\nThen make your second call as normal\ntilleul:\nyes, this is my current strategy ... just wondering if some other option was built in ...", "start_char_idx": 0, "end_char_idx": 561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91f64f9c-2af0-439e-83d3-71a3048e3600": {"__data__": {"id_": "91f64f9c-2af0-439e-83d3-71a3048e3600", "embedding": null, "metadata": {"date": "2023-05-01T12:27:35.489+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102572024712405044", "node_type": "4", "metadata": {"date": "2023-05-01T12:27:35.489+00:00"}, "hash": "942aeb7b912bb62ca0a7a16b33c694dc25a6cd508d97e663c7159539c2292779", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af7f26b0-9d58-49ac-9a75-f62f822595f2", "node_type": "1", "metadata": {"date": "2023-05-01T10:37:53.674+00:00"}, "hash": "f8c18870bad1fe3beaad51aceafed88fb7c68b3832e93b95387391f0e18539cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d7cfc97-f4ac-4dbf-a373-2452b1ca60f2", "node_type": "1", "metadata": {}, "hash": "60062e44cfc1b9378e6a2c179029e2ab0e026c082ec02b33aba455120b41b796", "class_name": "RelatedNodeInfo"}}, "text": "gman:\nhi all, just tried the chatbox example but encountering this error: ModuleNotFoundError: No module named 'gpt_index.query_engine' . I did 'pip install gpt-index' previously \ud83d\ude05 . Has anyone experienced this ?\nLogan M:\nYea you'll want to install and use llama_index, not gpt_index\n\n`pip install llama-index==0.6.0.alpha4`\n\nIt's a very long story, but some examples might still use gpt_index.", "start_char_idx": 0, "end_char_idx": 394, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d7cfc97-f4ac-4dbf-a373-2452b1ca60f2": {"__data__": {"id_": "6d7cfc97-f4ac-4dbf-a373-2452b1ca60f2", "embedding": null, "metadata": {"date": "2023-05-01T14:34:52.99+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102604058713395330", "node_type": "4", "metadata": {"date": "2023-05-01T14:34:52.99+00:00"}, "hash": "e0debe473cfbe0db5539e8d7a5aa20f1600ffcfef439a42579c3cd1c1734c462", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91f64f9c-2af0-439e-83d3-71a3048e3600", "node_type": "1", "metadata": {"date": "2023-05-01T12:27:35.489+00:00"}, "hash": "f529d6c678449e0ccf361b6ea3d053b52bc0f255b4a1f7974a513dd2241341a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6071a3a9-3215-4846-97ce-78ca6b0be67c", "node_type": "1", "metadata": {}, "hash": "3f9045e63fe95ec60d58bd6c846f654e8ed6a95f420e845352eea7f535d5c39b", "class_name": "RelatedNodeInfo"}}, "text": "OverclockedClock:\nFalse alarm.. I think? I am still able to query and get relevant responses. I'm just kind of confused about how the whole VectorStore and VectorStoreIndex work together. Could anyone explain to me when embeddings of nodes are created and where they are stored (if they are) when working with the VectorStores?\nLogan M:\nThey should be generated and stored when the index is created like you said \ud83e\udd14\n\nIf you remove either the storage context or service context, do the logs come back?\n\nSounds like a bug to me", "start_char_idx": 0, "end_char_idx": 524, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6071a3a9-3215-4846-97ce-78ca6b0be67c": {"__data__": {"id_": "6071a3a9-3215-4846-97ce-78ca6b0be67c", "embedding": null, "metadata": {"date": "2023-05-01T16:10:43.618+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102628178595426406", "node_type": "4", "metadata": {"date": "2023-05-01T16:10:43.618+00:00"}, "hash": "b05d9d371d2fb8be32b093221c277edaf5defe3830842949d3eb1a7d03f794ed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d7cfc97-f4ac-4dbf-a373-2452b1ca60f2", "node_type": "1", "metadata": {"date": "2023-05-01T14:34:52.99+00:00"}, "hash": "8b7540762266f0edc4b175f7ac5dcc2b6a132b470bfe1877f8c851668a955421", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3be02cdd-2d80-4c46-80b6-849d4db8da3c", "node_type": "1", "metadata": {}, "hash": "0115bfb3b30dfd86fd50453f8acf902d787ce2b4cc2817c9e6b400e2f6980b08", "class_name": "RelatedNodeInfo"}}, "text": "yaya90:\nWhen I read in a document in markdown format (originally an annual report in .pdf format) using the following, it turns it into ~100 documents.\n`documents = SimpleDirectoryReader(directory).load_data()`\n\nAny idea why this is happening? Some of the documents end up being two words; others end up being 100 words\nconfused_skelly:\nThis is new to me. What version are you on?", "start_char_idx": 0, "end_char_idx": 380, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3be02cdd-2d80-4c46-80b6-849d4db8da3c": {"__data__": {"id_": "3be02cdd-2d80-4c46-80b6-849d4db8da3c", "embedding": null, "metadata": {"date": "2023-05-01T20:14:59.609+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102689650277105717", "node_type": "4", "metadata": {"date": "2023-05-01T20:14:59.609+00:00"}, "hash": "7dd2380b0fb9e5b7d443113fc2bba204044e36cd4b18c61886d4c67e65bbd81e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6071a3a9-3215-4846-97ce-78ca6b0be67c", "node_type": "1", "metadata": {"date": "2023-05-01T16:10:43.618+00:00"}, "hash": "f4a54e03b734077764c12a7bf0aa7e89027695712217991d511a36e476c72448", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15d35758-eced-4758-ab91-720014081f96", "node_type": "1", "metadata": {}, "hash": "33d0faa854a1659ba97fde4af50c158e7915f4a0b4c9074842a4faa88233f818", "class_name": "RelatedNodeInfo"}}, "text": "Cetti:\nanyone know if someone has trained llama documentation with ai yet? xD\nkavinstewart:\nbest i've seen so far is the help channel #\ud83d\ude4bask-kapa-gpt-index but it couldn't help me with my specific questions", "start_char_idx": 0, "end_char_idx": 205, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15d35758-eced-4758-ab91-720014081f96": {"__data__": {"id_": "15d35758-eced-4758-ab91-720014081f96", "embedding": null, "metadata": {"date": "2023-05-01T21:12:02.888+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102704008549908630", "node_type": "4", "metadata": {"date": "2023-05-01T21:12:02.888+00:00"}, "hash": "24044f7b8c859f66d553dba9e65a83eb98c0dbc8f16eb988144e323bac59a521", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3be02cdd-2d80-4c46-80b6-849d4db8da3c", "node_type": "1", "metadata": {"date": "2023-05-01T20:14:59.609+00:00"}, "hash": "92cff3c6a03a5bfc97b0250226e27e0ad901e21c0bc15e9e70b199c5ea5315b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df674f95-f7bc-4b30-af18-69bd251ac2e8", "node_type": "1", "metadata": {}, "hash": "07094ad38cd52d5418e6c1dba76c0365109a6cda8aa616d514bfd0fc4dcf2ec5", "class_name": "RelatedNodeInfo"}}, "text": "krishnan99:\nHi @Logan M ! I was trying to calculate the cost for creating the vector index and for some reason the llama-index token tracker seems to give a slightly different answer to the OpenAI token usage data. Can you confirm if llama-index has any \"under the hood\" mechanisms that increases/decreases tokens?\nFrom my understanding, the total token used during indexing is the (tokens per chunk x no. of chunks) + number of tokens in the document and node \"extra information\" and the number ok tokens in the document summary attribute. Could you let mw know if I am missing anything? Thanks!!\nLogan M:\nSo, all the token counts in llama index are done using the gpt2 tokenizer. I know gpt3.5 and whatnot use a slightly different tokenizer which might be creating more tokens, so that could be the cause of the mismatch \ud83e\udd14\nkrishnan99:\nOk I\u2019ll check that out. And interms of calculating tokens manually what components contribute to the total token usage?\n\nJust thinking of doing a manual calculation to understand ahah", "start_char_idx": 0, "end_char_idx": 1020, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df674f95-f7bc-4b30-af18-69bd251ac2e8": {"__data__": {"id_": "df674f95-f7bc-4b30-af18-69bd251ac2e8", "embedding": null, "metadata": {"date": "2023-05-01T22:10:13.251+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102718648193404928", "node_type": "4", "metadata": {"date": "2023-05-01T22:10:13.251+00:00"}, "hash": "a98906d701f46454b5b4cb7a82c68c4cbefbeafa5b1f111a22dca71ee27afcd2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15d35758-eced-4758-ab91-720014081f96", "node_type": "1", "metadata": {"date": "2023-05-01T21:12:02.888+00:00"}, "hash": "2fd40bad9536994e2bae1dd1a9a1d37357a4d60241755e2480ff8d29f2b96eca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cc58d7f-d1f7-4547-9dcf-6a594a47298f", "node_type": "1", "metadata": {}, "hash": "cb81e8024802b89c0e5b05a8605888aced90d88922a1a4730efcb8d00ad97ccd", "class_name": "RelatedNodeInfo"}}, "text": "Joe_Pastrami:\n@Logan M llama-index provides different source documentation than langchain, is there any plan to update the source documentation format? langchain format seems to be better locating the source with page # etc. https://gpt-index.readthedocs.io/en/latest/reference/node.html#gpt_index.data_structs.node_v2.DocumentRelationship.SOURCE\nLogan M:\nYea I think there's plans to make this a little better, but a PR would also be cool!\n\nThere is the extra_info dict on each document object that gets inherited to each node. This can be manually set with any metadata you want \n\nA big thing to think about is that there are a lot of different file loaders, especially from llama hub. And each one of these would need to be revamped with better source tracing \ud83e\udd74", "start_char_idx": 0, "end_char_idx": 764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cc58d7f-d1f7-4547-9dcf-6a594a47298f": {"__data__": {"id_": "3cc58d7f-d1f7-4547-9dcf-6a594a47298f", "embedding": null, "metadata": {"date": "2023-05-01T22:50:30.923+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102728788644728902", "node_type": "4", "metadata": {"date": "2023-05-01T22:50:30.923+00:00"}, "hash": "65ec1c752d34cb948c84b2fef4ba58f91ed0894ddbbbdd61b0e1ce7d3fd24d30", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df674f95-f7bc-4b30-af18-69bd251ac2e8", "node_type": "1", "metadata": {"date": "2023-05-01T22:10:13.251+00:00"}, "hash": "418a9f374702ce9120f24f160864730e7c20296c8fde52e46ec1b901d5caf80b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d83c3ca5-05a6-4cac-9212-c8e72254af30", "node_type": "1", "metadata": {}, "hash": "b264cc6ddf92063ebd7e47e0e2d9972f31860d4c8d9936740cf0c32350ee2092", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nBut looking at the retrieval method for the vector stores, there's nothing preventing a node that exists in different indices to be picked up as the closest match (https://github.com/jerryjliu/llama_index/blob/c5d8768f5d0e5789e977c474457b2634f452957e/gpt_index/indices/vector_store/retrievers.py#L73)\nJoe_Pastrami:\nawesome discovery! i would also recommend make a post on github issues", "start_char_idx": 0, "end_char_idx": 402, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d83c3ca5-05a6-4cac-9212-c8e72254af30": {"__data__": {"id_": "d83c3ca5-05a6-4cac-9212-c8e72254af30", "embedding": null, "metadata": {"date": "2023-05-02T03:57:04.584+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102805937250639942", "node_type": "4", "metadata": {"date": "2023-05-02T03:57:04.584+00:00"}, "hash": "7183e4ec6f06d190f308317d8cf6e9a74c12265d987c8f4f03e7aa93f9a3480a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cc58d7f-d1f7-4547-9dcf-6a594a47298f", "node_type": "1", "metadata": {"date": "2023-05-01T22:50:30.923+00:00"}, "hash": "495ccd918c1f7e653f406ed9eac5a0095d92afd3208b33e6e1e3f63b38144ea8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90b0162f-1b33-4ab5-b600-3ea0853e2be0", "node_type": "1", "metadata": {}, "hash": "d9e94f7fb752dee7a94cb07226156a3d25f7a54df1f90bba01cc65e6349d5be6", "class_name": "RelatedNodeInfo"}}, "text": "Siddhant Saurabh:\nhey, https://github.com/jerryjliu/llama_index/blob/main/examples/llms/SimpleIndexDemo-StableLM.ipynb, seems to be an invalid notebook.\nplease look into it. @Logan M @ravitheja @jerryjliu98 \nand is there any notebook for LLM (apart from (https://github.com/jerryjliu/llama_index/tree/main/examples/langchain_demo )) ?\nLogan M:\nWhat kind of examples are you looking for? Ones that use langchain?\nSiddhant Saurabh:\nexamples where we have custom langchain agent with multiple tools where some of tools are base on gptindex.query()", "start_char_idx": 0, "end_char_idx": 544, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90b0162f-1b33-4ab5-b600-3ea0853e2be0": {"__data__": {"id_": "90b0162f-1b33-4ab5-b600-3ea0853e2be0", "embedding": null, "metadata": {"date": "2023-05-02T12:21:57.634+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1102932995511439410", "node_type": "4", "metadata": {"date": "2023-05-02T12:21:57.634+00:00"}, "hash": "c8daa5bdccec5869de04590e3f61a15236d07cf85134507579c9daa7cde95974", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d83c3ca5-05a6-4cac-9212-c8e72254af30", "node_type": "1", "metadata": {"date": "2023-05-02T03:57:04.584+00:00"}, "hash": "14feca08a1c35a8a2d66247bb278e41a0360183dff54626f3bd51dfa3bf7b6dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da7b03d3-7376-4966-8611-3fa5ebca1cad", "node_type": "1", "metadata": {}, "hash": "f64aa7f1fc6ce91c9f29fd42bc725536fae55e7069d1e9abd4790abb9e7f69cf", "class_name": "RelatedNodeInfo"}}, "text": "Akinus21:\nI have two SimpleVector Indices that I've stored in an array called 'indices', and their summaries in an array called 'index_summaries'.  The code is this:\n\n```\n    # # Build graph and save\n    graph = ComposableGraph.from_indices(\n        GPTSimpleVectorIndex,\n        indices,\n        index_summaries=index_summaries,\n        service_context=service_context\n    )\n\n    return graph\n\ndef ask_gpt_custom(prompt):\n    graph = build_index(prompt)\n    # query_engine = graph.as_query_engine()\n\n    # query_configs = [\n    #     {\n    #         \"index_struct_type\": \"vector\",\n    #         \"query_mode\": \"embedding\"\n    #     }\n    # ]\n    print(f'\\n\\nQuerying Graph...\\n\\n')\n    try:\n\n        response = graph.query(\n            prompt,\n            service_context=service_context,\n            # query_configs=query_configs\n        )\n        # response = query_engine.query(prompt)\n    except Exception as error:\n        logger.error(f'An error occurred: {error}')\n        log(f'ERROR!---------\\n{error}\\nExiting....')\n        remove_load_file()\n        remove_lock_file()\n        sys.exit(0)\n\n    \n    print(f'\\n\\nQuery Complete...\\n\\n')\n\n    return f'{response}'\n```\n\nThe error I get is\"\n```\n1 validation error for Generation\ntext\n  str type expected (type=type_error.str)\n```\n\nCan anyone clue me in as to why I am getting that error when I query the graph?\nLogan M:\nAre you using a custom LLM still? That error looks familiar lol\nAkinus21:\nYes.  Custom LLM using pythia and a pipeline", "start_char_idx": 0, "end_char_idx": 1494, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da7b03d3-7376-4966-8611-3fa5ebca1cad": {"__data__": {"id_": "da7b03d3-7376-4966-8611-3fa5ebca1cad", "embedding": null, "metadata": {"date": "2023-05-02T17:12:19.764+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103006069220970557", "node_type": "4", "metadata": {"date": "2023-05-02T17:12:19.764+00:00"}, "hash": "1787bd3e6ebb949fd1a217651461feb623fb92d9c9b869b6a5b119042cce7f84", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90b0162f-1b33-4ab5-b600-3ea0853e2be0", "node_type": "1", "metadata": {"date": "2023-05-02T12:21:57.634+00:00"}, "hash": "0752105100d7508bccf93039e424ac746df84063b905cf25bce1ecf28a078ec8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65763979-88f1-4a30-a432-3357b0983461", "node_type": "1", "metadata": {}, "hash": "1f9b3076e55d5e44ffed416a8e675db8caa20207aa165d26b6b60741a4de453a", "class_name": "RelatedNodeInfo"}}, "text": "cdh:\nIs this package called gpt_index or llama_index? I cloned the repo, did `pip install -e .`, and I can import `gpt_index` but not `llama_index`...?\nLogan M:\nIf you install from source like that, it will be gpt_index\n\nIf you install from pip, it will be llama_index \n\nVery long story haha but hopefully the renaming will be fully finished at some point", "start_char_idx": 0, "end_char_idx": 355, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65763979-88f1-4a30-a432-3357b0983461": {"__data__": {"id_": "65763979-88f1-4a30-a432-3357b0983461", "embedding": null, "metadata": {"date": "2023-05-02T17:16:15.505+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103007057990385674", "node_type": "4", "metadata": {"date": "2023-05-02T17:16:15.505+00:00"}, "hash": "b73a815a37c00c53697c4e1143f0a27e0967aea26d081856f77c27e077fcc901", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da7b03d3-7376-4966-8611-3fa5ebca1cad", "node_type": "1", "metadata": {"date": "2023-05-02T17:12:19.764+00:00"}, "hash": "9de0762431c5f844ed133d7af2e13e6a414b1535502f08047ab66b1b9139001b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "072310e2-df95-4d38-aff7-d4013593e3aa", "node_type": "1", "metadata": {}, "hash": "9d4690f7943727c6dcd8032c79ac80978f0aa7a7d705847d6a492b0c7b850645", "class_name": "RelatedNodeInfo"}}, "text": "cdh:\nWhich is the target/end goal name? \ud83d\ude42\nLogan M:\nLlama Index \ud83e\udd99", "start_char_idx": 0, "end_char_idx": 64, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "072310e2-df95-4d38-aff7-d4013593e3aa": {"__data__": {"id_": "072310e2-df95-4d38-aff7-d4013593e3aa", "embedding": null, "metadata": {"date": "2023-05-02T17:59:04.914+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103017834872852560", "node_type": "4", "metadata": {"date": "2023-05-02T17:59:04.914+00:00"}, "hash": "2f95e08fc55f450a7b2b73622c882c8b5f9c6a3363275d855ed387ed5c630e56", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65763979-88f1-4a30-a432-3357b0983461", "node_type": "1", "metadata": {"date": "2023-05-02T17:16:15.505+00:00"}, "hash": "421c9c9ed4004d520fbde16146020e8d34d73b5d71e8e7a1e89d0326710b70c8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4939d517-fcf8-4f41-b8d8-59c24986fe57", "node_type": "1", "metadata": {}, "hash": "6f0ba86152c0d28d91712a72c9a536f83aade8a9b15a80fecbe036823f5b1bb4", "class_name": "RelatedNodeInfo"}}, "text": "bmax:\nDoes LlamaIndex have built in protection for helping w/ rate limits?\nLogan M:\nNot really thay im aware of, theres some retry mechanisms but it's more for unstable connections rather than rate limits\n\nWould be something good to add maybe, especially for openai and whatnot \ud83e\udd14\nconfused_skelly:\nDoesn\u2019t langchain already handle this?\nLogan M:\nI'm not sure if langchain handles the rate limiting does it? I guess haven't looked too closely at it either lol", "start_char_idx": 0, "end_char_idx": 457, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4939d517-fcf8-4f41-b8d8-59c24986fe57": {"__data__": {"id_": "4939d517-fcf8-4f41-b8d8-59c24986fe57", "embedding": null, "metadata": {"date": "2023-05-02T18:56:38.406+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103032319868141569", "node_type": "4", "metadata": {"date": "2023-05-02T18:56:38.406+00:00"}, "hash": "c248e42928ee932c90ec39e93bb0818fa23ae081f4791b3307ffc1448475576c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "072310e2-df95-4d38-aff7-d4013593e3aa", "node_type": "1", "metadata": {"date": "2023-05-02T17:59:04.914+00:00"}, "hash": "7779aa59cce718b868610342a2cc18bd16cf88a61c5431c489a9094c651c16d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd1f835f-abd1-4f4c-97b1-2568b63a9061", "node_type": "1", "metadata": {}, "hash": "1e357f9fef3b73cde67f808f252e89ba37c9647b1ac38ebf928bfef5bac8a924", "class_name": "RelatedNodeInfo"}}, "text": "AndrewRessler:\nDoes the alpha 0.6 version require a different version of langchain to?  I've just installed the 0.6 and the llm_predictor/base.py refers to something called BaseLanguageModel\nconfused_skelly:\nYea it uses the latest langchain", "start_char_idx": 0, "end_char_idx": 240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd1f835f-abd1-4f4c-97b1-2568b63a9061": {"__data__": {"id_": "cd1f835f-abd1-4f4c-97b1-2568b63a9061", "embedding": null, "metadata": {"date": "2023-05-02T19:44:51.108+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103044452739723394", "node_type": "4", "metadata": {"date": "2023-05-02T19:44:51.108+00:00"}, "hash": "1446f964140729ee679caa64b5598cf250da2f41dc2194024095cc78aa9e56a9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4939d517-fcf8-4f41-b8d8-59c24986fe57", "node_type": "1", "metadata": {"date": "2023-05-02T18:56:38.406+00:00"}, "hash": "f49a01b09556fdc28fc406b14e7ca66c6e651573ff2256974e634548424f7b97", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d970902e-50b6-45d2-829e-78a2ced4aab4", "node_type": "1", "metadata": {}, "hash": "87851c38afca4d7f35a87acfa1f9461ec146d241ad40b4e94f2f3490760aa0e5", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nDoes 0.6.0 have some sort of multiprocessing manager that I can\u2019t find? It broke thread based callbacks on langchain LLMs\nAndrewRessler:\nThanks. Is the latest langchain in a separate repo?  Or is it an officially released one?", "start_char_idx": 0, "end_char_idx": 243, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d970902e-50b6-45d2-829e-78a2ced4aab4": {"__data__": {"id_": "d970902e-50b6-45d2-829e-78a2ced4aab4", "embedding": null, "metadata": {"date": "2023-05-02T19:46:52.412+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103044961525567499", "node_type": "4", "metadata": {"date": "2023-05-02T19:46:52.412+00:00"}, "hash": "222a84f779b08318d88174492ef02e773634a5fd9333060e50baccb026bce581", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd1f835f-abd1-4f4c-97b1-2568b63a9061", "node_type": "1", "metadata": {"date": "2023-05-02T19:44:51.108+00:00"}, "hash": "6ce16430d74f3ad3033c6a9638e46f5cffeb1b7df8db009bbfea3188c82a516c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02f06687-98f2-4bb0-a4fc-ef5dfdce4c54", "node_type": "1", "metadata": {}, "hash": "7f589c85b36d47641d5642437279e262985ed47b16f2a265d81d69aa3e722e48", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nI\u2019m on 0.0.154\nAndrewRessler:\nWow this stuff moves fast.  Thanks again", "start_char_idx": 0, "end_char_idx": 87, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02f06687-98f2-4bb0-a4fc-ef5dfdce4c54": {"__data__": {"id_": "02f06687-98f2-4bb0-a4fc-ef5dfdce4c54", "embedding": null, "metadata": {"date": "2023-05-02T19:57:27.961+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103047627211284603", "node_type": "4", "metadata": {"date": "2023-05-02T19:57:27.961+00:00"}, "hash": "48c57d548312501fa53d00d37bb123f2c06ff8175f557cf1b43d3dea8380afe7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d970902e-50b6-45d2-829e-78a2ced4aab4", "node_type": "1", "metadata": {"date": "2023-05-02T19:46:52.412+00:00"}, "hash": "c5b27e1f9dd5c88d65257bdc26604a1f530b86d3a79502c9e39c06beb1adc31e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "589e4dfc-77c2-4051-93ec-cb6b72160b2e", "node_type": "1", "metadata": {}, "hash": "64d01673b9dbde26a7fc40c00f19ef606bc78d64ff4fe8d358ae61dbbd6f7e47", "class_name": "RelatedNodeInfo"}}, "text": "Hajravasas:\nHello, I'm following the tutorial and made it thus far without any issues - https://gpt-index.readthedocs.io/en/latest/guides/primer/usage_pattern.html#query-the-index. When I try to query the index, I keep getting the following error. I am wondering if anyone could possibly help me get unstuck here. I tried to ask ChatGPT about this, but it looks like it is referencing an outdated library. \"AttributeError              \n----> 1 query_engine = index.as_query_engine()\n      2 response = query_engine.query(\"What did the author do growing up?\")\n      3 print(response)\n\nAttributeError: 'VectorStoreIndex' object has no attribute 'as_query_engine'\nconfused_skelly:\nWhat version langchain are you on? the default pip install is the stable release\nHajravasas:\nThank you for getting back to me. Name: langchain\nVersion: 0.0.142", "start_char_idx": 0, "end_char_idx": 837, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "589e4dfc-77c2-4051-93ec-cb6b72160b2e": {"__data__": {"id_": "589e4dfc-77c2-4051-93ec-cb6b72160b2e", "embedding": null, "metadata": {"date": "2023-05-02T20:02:44.72+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103048955794817084", "node_type": "4", "metadata": {"date": "2023-05-02T20:02:44.72+00:00"}, "hash": "ca5b57ad3594831e7562e1c683eea7d39ec213c92d6a3a79786855b80207dfff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02f06687-98f2-4bb0-a4fc-ef5dfdce4c54", "node_type": "1", "metadata": {"date": "2023-05-02T19:57:27.961+00:00"}, "hash": "9062349fdd6eedb90d5d2226cd6356b81f06b2c5878c863c4f3b6990b0f4e2a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0e2e4d6-3d54-4e54-b14c-5474ec226d86", "node_type": "1", "metadata": {}, "hash": "305fce3496bf47aee2bd78720fd7da6b11482ce7a61ba00eefdf428aff60f2e1", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nBut it looks like you're on 0.5.27\nHajravasas:\nthat's right.", "start_char_idx": 0, "end_char_idx": 77, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0e2e4d6-3d54-4e54-b14c-5474ec226d86": {"__data__": {"id_": "c0e2e4d6-3d54-4e54-b14c-5474ec226d86", "embedding": null, "metadata": {"date": "2023-05-02T20:03:28.782+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103049140604248154", "node_type": "4", "metadata": {"date": "2023-05-02T20:03:28.782+00:00"}, "hash": "bf1793823e56099ec13d0b1268dc55136e751ee42cec8cf8100750f9689ad860", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "589e4dfc-77c2-4051-93ec-cb6b72160b2e", "node_type": "1", "metadata": {"date": "2023-05-02T20:02:44.72+00:00"}, "hash": "533f532d5166897a31b510994eb53be128b8319eb179955e4158f6a44b23ce75", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b6abba7e-9b62-4759-b2a4-aadb77bf9905", "node_type": "1", "metadata": {}, "hash": "2d531a32430564a037982b5dc568fd3d46a92fee988ed5be2c6b1022a389eb0d", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nThe documentation you're looking at is for the new alpha llama index (https://pypi.org/project/llama-index/0.6.0a6/)\nHajravasas:\nOh, awesome!!! Thank you. I'll probably go with the latest version then. Unless you think that's the wrong choice.", "start_char_idx": 0, "end_char_idx": 260, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b6abba7e-9b62-4759-b2a4-aadb77bf9905": {"__data__": {"id_": "b6abba7e-9b62-4759-b2a4-aadb77bf9905", "embedding": null, "metadata": {"date": "2023-05-02T20:05:07.347+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103049554015826064", "node_type": "4", "metadata": {"date": "2023-05-02T20:05:07.347+00:00"}, "hash": "d4d86528a361d681c9bf5f23fe18f32864d361b69ef331255bffb0b938740aeb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0e2e4d6-3d54-4e54-b14c-5474ec226d86", "node_type": "1", "metadata": {"date": "2023-05-02T20:03:28.782+00:00"}, "hash": "abb0ff2d60926548761a1709e637742c7e25972e05bb87a027d6bd72ef15a180", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80e5b360-29c9-4f03-ae80-50c2ff65285f", "node_type": "1", "metadata": {}, "hash": "62fc0d8197c3b72a13150c117638d7435dcca60fb00304546b4359847e7b4655", "class_name": "RelatedNodeInfo"}}, "text": "confused_skelly:\nErm, from what I can tell, nothing's outright broken in the alpha...\nHajravasas:\nSure enough, that got me sorted, and I'm passed that error. Thank you for your help.", "start_char_idx": 0, "end_char_idx": 182, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80e5b360-29c9-4f03-ae80-50c2ff65285f": {"__data__": {"id_": "80e5b360-29c9-4f03-ae80-50c2ff65285f", "embedding": null, "metadata": {"date": "2023-05-03T05:10:23.675+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103186776241209384", "node_type": "4", "metadata": {"date": "2023-05-03T05:10:23.675+00:00"}, "hash": "f0a7a2d0a762b6ac0df87c40f9634c01f0ff9ab5e1d681cea98c253b3f7c59ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6abba7e-9b62-4759-b2a4-aadb77bf9905", "node_type": "1", "metadata": {"date": "2023-05-02T20:05:07.347+00:00"}, "hash": "87826410f0c20b5a0c4d454ce14849fe68cacedcacb53d2a8cfaf54e223bccae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19b5d5dd-9164-4c5b-a253-b7b3d059c3ab", "node_type": "1", "metadata": {}, "hash": "af85954cece5b505f844c1ef0cb444152c06c29a695ce1980f14df15dd74b680", "class_name": "RelatedNodeInfo"}}, "text": "Joie:\nIs there a way to view the existing documents in an index? I'd like to periodically check to see if the existing documents in the directory match the ones loaded in the index. If they don't remove from the index. The docs don't seem to be loaded in index.storage_context.docstore.docs\nJoie:\nI\u2019m on v 0.6.0 by the way", "start_char_idx": 0, "end_char_idx": 322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19b5d5dd-9164-4c5b-a253-b7b3d059c3ab": {"__data__": {"id_": "19b5d5dd-9164-4c5b-a253-b7b3d059c3ab", "embedding": null, "metadata": {"date": "2023-05-03T20:14:43.985+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103414360476483715", "node_type": "4", "metadata": {"date": "2023-05-03T20:14:43.985+00:00"}, "hash": "1aea91d209e8d9482d371685a132d8f6b9c59e61d96fc74e428241c7387f2c0f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80e5b360-29c9-4f03-ae80-50c2ff65285f", "node_type": "1", "metadata": {"date": "2023-05-03T05:10:23.675+00:00"}, "hash": "f99d9658bfba7dfdf855d8990ed8448363613bcfbd87944cee8c2f26f95402b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19575006-b864-4094-afd0-79c4309c764d", "node_type": "1", "metadata": {}, "hash": "7cf9a719ccdae8e82120fd11d4e79f206cf632fb00ba40f06191750de258a400", "class_name": "RelatedNodeInfo"}}, "text": "unbittable:\nalso, what's the reason for the choice t remove the `save_to_*` methods from the index classes?  Is there a workaround?  I kind of needed those (particularly `save_to_string`).\nLogan M:\nReally the only import that's changed is `GPTSimpleVectorIndex` is now `VectorStoreIndex`\n\nThe rest of the changes are mostly interface changes \ud83d\udc40\nunbittable:\nDefinitely not just an interface change.  that facility is completely gone, and I'm trying to dig down into the code in order to find a way to serialize to string.", "start_char_idx": 0, "end_char_idx": 519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19575006-b864-4094-afd0-79c4309c764d": {"__data__": {"id_": "19575006-b864-4094-afd0-79c4309c764d", "embedding": null, "metadata": {"date": "2023-05-03T22:21:31.405+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103446268308619327", "node_type": "4", "metadata": {"date": "2023-05-03T22:21:31.405+00:00"}, "hash": "8fb9b7eb9720c0aa6ceb360a4d080c568770c22e8fc76180de9a1b400de5e0ea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19b5d5dd-9164-4c5b-a253-b7b3d059c3ab", "node_type": "1", "metadata": {"date": "2023-05-03T20:14:43.985+00:00"}, "hash": "b9190302985da111bfadfbbbf9e1e2b464f4bb599817624e44c5b6b450db6f22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1be8c88-7508-41df-ab65-cb8cbddf9937", "node_type": "1", "metadata": {}, "hash": "9b6f8e47835a2fd0ad7fa986b196e5b3270484244fa51f2a36c1ef910c91d856", "class_name": "RelatedNodeInfo"}}, "text": "dhrubobfg:\nHi everyone. I am sure this is a very basic question but I haven't really found a good resource for solving my problem. \n\nI have a bunch of structured data that I am currently able to query and perform well using `PandasIndex`. However, what I would like to do is to build a text-based interface on top of this whose results in turn can be fed into some other part of the pipeline. Think about the following situation: Suppose my structured data is a massive inventory of objects. The user inputs a query such as `Select 100 objects with the property that size of object is greater than 100mm` .  Once I have the output of this query, I want to run a python program on this output to perform some other operations. This could be something like. adding the output to a queue, and then using some other analysis on it. \n\nSo while I get the first part: getting the output from the query (I am currently using `eval` in python so open to better ideas), I want to be able to connect the query to other external python programs.\ndhrubobfg:\nJust bumping this up. I wonder whether using an agent via something like langchain is the way to go ?", "start_char_idx": 0, "end_char_idx": 1146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1be8c88-7508-41df-ab65-cb8cbddf9937": {"__data__": {"id_": "f1be8c88-7508-41df-ab65-cb8cbddf9937", "embedding": null, "metadata": {"date": "2023-05-03T23:51:29.106+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103468907907518506", "node_type": "4", "metadata": {"date": "2023-05-03T23:51:29.106+00:00"}, "hash": "c9ce6d1a624451925dd20c1efaef4091990b01ccac6dbb41fc2998f67e2c360d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19575006-b864-4094-afd0-79c4309c764d", "node_type": "1", "metadata": {"date": "2023-05-03T22:21:31.405+00:00"}, "hash": "9b8bb3d7e53ccbe7b2acb0b906edbd37321d1b31232ee99a92d6e3d26dec4994", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e6f77b5-4b62-4b47-90c5-d161d29a1c7e", "node_type": "1", "metadata": {}, "hash": "1460b66348fbe95415583e5e0041fd3ac339010befa128d3415d7cd287976b9a", "class_name": "RelatedNodeInfo"}}, "text": "ali:\nIs anyone else dealing with this regarding the new VectorStoreIndex? \n\n```\nAttributeError: type object 'VectorStoreIndex' has no attribute 'load_from_string'\n\n```\nLogan M:\nYou might be interested in this thread \n\nhttps://discord.com/channels/1059199217496772688/1103418068102819852/1103419225210617959", "start_char_idx": 0, "end_char_idx": 306, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e6f77b5-4b62-4b47-90c5-d161d29a1c7e": {"__data__": {"id_": "3e6f77b5-4b62-4b47-90c5-d161d29a1c7e", "embedding": null, "metadata": {"date": "2023-05-04T04:47:27.408+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103543391624642642", "node_type": "4", "metadata": {"date": "2023-05-04T04:47:27.408+00:00"}, "hash": "e6cf18ba613832eac71c5db869fc84b38c1d061e1df18ff741891b48c3fa5415", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1be8c88-7508-41df-ab65-cb8cbddf9937", "node_type": "1", "metadata": {"date": "2023-05-03T23:51:29.106+00:00"}, "hash": "2116c9c58e2614a53d402f20fa4713e31edcea0d07f6ccf8d7a1f06b9dde47e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec22ea1e-a0c0-4b34-823b-fd7f11abb46e", "node_type": "1", "metadata": {}, "hash": "dcecb701f96a4001a2311ecc60838093187b793ce97ea57dd5c09867df71d473", "class_name": "RelatedNodeInfo"}}, "text": "alisalih:\nGood evening folks - I am new to LlamaIndex, and playing around. Currently, I have built a proof-of-concept that can load a PDF file (using PDFReader), and I can query for 1 PDF document. Now, I'd like to expand this to multiple PDF files located in a Folder. I do not have a background in this type of work, so the concept of Index and adding documents is confusing me. Do I need to pick a certain Index type? Do I have to build a graph and then ingest indices 1 by 1? How can I go about what I am trying to accomplish? I am looking for some rookie guidance. Thank you.\nVrillain:\nnah just cast the document to a Document() type and slamjam it into the index, like this:\n```new_docs = [Document(t) for t in docs if t not in old_docs]\n  if len(new_docs) > 0:\n       for doc in new_docs:\n            index.insert(doc)```\nalisalih:\nI thought I did that -- But it seems like the query response is mixing up documents in the responses? How do we go about keeping document boundaries separate? If I make any sense.", "start_char_idx": 0, "end_char_idx": 1018, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec22ea1e-a0c0-4b34-823b-fd7f11abb46e": {"__data__": {"id_": "ec22ea1e-a0c0-4b34-823b-fd7f11abb46e", "embedding": null, "metadata": {"date": "2023-05-04T04:54:33.288+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103545177894817843", "node_type": "4", "metadata": {"date": "2023-05-04T04:54:33.288+00:00"}, "hash": "76d015c9b642774a11d1e0de02b4fc8f97a201f9ad61967b04e4caf88c71353e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e6f77b5-4b62-4b47-90c5-d161d29a1c7e", "node_type": "1", "metadata": {"date": "2023-05-04T04:47:27.408+00:00"}, "hash": "bba8cd941aedd62d4de8843818981f26cc06205827ac7e8c2632bdab34669f26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e71eca27-b160-4154-b376-106e1f8d1085", "node_type": "1", "metadata": {}, "hash": "4c9f139df64bc7908cb7a838181dd3c3d53bd41a76b6f04adaeefdcd4200fa87", "class_name": "RelatedNodeInfo"}}, "text": "Vrillain:\nHah, I'm actually running into a similar problem. Can't help you there unfortunately. I suspect you might be looking for nodes though.\n```\nparser = SimpleNodeParser()\nnodes = parser.get_nodes_from_documents(documents)\nindex = GPTSimpleVectorIndex(nodes, max_input_size=2048, num_output=2000, max_chunk_overlap=12)\n```\nShould break it up into discreet nodes, but I'm seeing some mixture too...\nalisalih:\nI appreciate the attempt to help!", "start_char_idx": 0, "end_char_idx": 446, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e71eca27-b160-4154-b376-106e1f8d1085": {"__data__": {"id_": "e71eca27-b160-4154-b376-106e1f8d1085", "embedding": null, "metadata": {"date": "2023-05-04T04:59:46.866+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103546493136293918", "node_type": "4", "metadata": {"date": "2023-05-04T04:59:46.866+00:00"}, "hash": "14a0c9c1d558dbe19ec1d304539c08e512ba1c3afd2f1723be8a4b8f3c45145a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec22ea1e-a0c0-4b34-823b-fd7f11abb46e", "node_type": "1", "metadata": {"date": "2023-05-04T04:54:33.288+00:00"}, "hash": "a0beb4fc53fad975df382f199d1caed6386197253ab1186d4a952917270cbb92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5a88ce72-3160-414f-9570-b0fd3c171da6", "node_type": "1", "metadata": {}, "hash": "025500f4611126ca107d8e72dd2879d83078d866b33f7c39f2c61770c4868410", "class_name": "RelatedNodeInfo"}}, "text": "alisalih:\n@Vayu It sounds like we are trying to accomplish very similar tasks, with multiple PDF files. Have you made any headway? I've asked a question above which sounded similar to yours.\nVayu:\nHi @alisalih ! Sorry I was out the whole morning. No, I haven't been able to check the results yet because my list of documents is so huge that I went over the usage limit only embedding my indices! In a previous experiment, though, the way I had to have the bot keep itself to only one document was to keep the \"similarity_top_k\" parameter to \"1\", and of course \"temperature=0\" . I'm sure there is a more sophisticated way to get this done, but I'm just getting started.\n\nMy problem was that it didn't always find the right document, which is why I'm now trying to compose several indicies and so on. My documents didn't have much going for them in terms of structure and the like, so you might have better luck \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 911, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5a88ce72-3160-414f-9570-b0fd3c171da6": {"__data__": {"id_": "5a88ce72-3160-414f-9570-b0fd3c171da6", "embedding": null, "metadata": {"date": "2023-05-04T06:49:36.349+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103574131431182356", "node_type": "4", "metadata": {"date": "2023-05-04T06:49:36.349+00:00"}, "hash": "d5e65bc325543e1cdf21e19909c85dbc98c5a0021fa85788decdd8da4e875e4c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e71eca27-b160-4154-b376-106e1f8d1085", "node_type": "1", "metadata": {"date": "2023-05-04T04:59:46.866+00:00"}, "hash": "435382c7074192abfab3f3d1bf63758b4423840f82561f74b8077574620b0288", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84edc15b-6a73-4b5a-987e-3dfdee8647b0", "node_type": "1", "metadata": {}, "hash": "5af6aeccf96c8fbe30a2f0cbc0d9dc3b14df62c239a14171c881b0c2188b35e3", "class_name": "RelatedNodeInfo"}}, "text": "chanansh:\nHi, I am having issues parsing a simple PDF, single file. Here is the code:\n```python\ndef construct_index(directory_path):\n    max_input_size = 4096\n    num_outputs = 512\n    max_chunk_overlap = 20\n    chunk_size_limit = 600\n\n    prompt_helper = PromptHelper(max_input_size, num_outputs, max_chunk_overlap, chunk_size_limit=chunk_size_limit)\n    llm_predictor = LLMPredictor(llm=OpenAI(temperature=0.7, model_name=\"text-davinci-003\", max_tokens=num_outputs))\n    documents = SimpleDirectoryReader(directory_path).load_data()\n    parser = SimpleNodeParser()\n    nodes = parser.get_nodes_from_documents(documents)\n    service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n    index = VectorStoreIndex(nodes=nodes, service_context=service_context)\n    index.save_to_disk('index.json')\n```\n\nI get this error (pasted part of it as it is super long) :\n```\nValueError: Invalid header value b'Bearer hf_XX\\n'\n```\n\nWhat's wrong?\nchanansh:\nOMG the issue was \"\\n\" line carrier in the openai key... the error is super not clear...", "start_char_idx": 0, "end_char_idx": 1079, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84edc15b-6a73-4b5a-987e-3dfdee8647b0": {"__data__": {"id_": "84edc15b-6a73-4b5a-987e-3dfdee8647b0", "embedding": null, "metadata": {"date": "2023-05-04T07:17:42.043+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103581201744269343", "node_type": "4", "metadata": {"date": "2023-05-04T07:17:42.043+00:00"}, "hash": "e5a64a84c64fe1dcf35147ef5cbc852f914250f4212f752d77ae1c0d1fa0c21e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5a88ce72-3160-414f-9570-b0fd3c171da6", "node_type": "1", "metadata": {"date": "2023-05-04T06:49:36.349+00:00"}, "hash": "904844a6fd9bee0aa09f56573a2b1e9b001611f23647c531b84e08fc2da3d763", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8cd4a537-96cf-445c-a0ee-582fb748b17a", "node_type": "1", "metadata": {}, "hash": "bfcdf2f1e0e7c7713efc0c9c791001c4b8310b957e7c48642d9c396a0ceae135", "class_name": "RelatedNodeInfo"}}, "text": "bozo:\nis there a lightweight webUI that I can use to introduce tech incompetent students to using LLMs to do things like 'find and classify the metaphors in the following documents'? I am teaching qualitative analysis and my students don't do numbers.\nheihei:\ntry streamlit.io, should be good for students", "start_char_idx": 0, "end_char_idx": 305, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8cd4a537-96cf-445c-a0ee-582fb748b17a": {"__data__": {"id_": "8cd4a537-96cf-445c-a0ee-582fb748b17a", "embedding": null, "metadata": {"date": "2023-05-04T10:30:40.873+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103629766877265960", "node_type": "4", "metadata": {"date": "2023-05-04T10:30:40.873+00:00"}, "hash": "762c46dcd42b42e4e8839785daaa452243505219c076d4176c0cb901a1f32d40", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84edc15b-6a73-4b5a-987e-3dfdee8647b0", "node_type": "1", "metadata": {"date": "2023-05-04T07:17:42.043+00:00"}, "hash": "1b842b2301815f5d0a996e0984e718aefc236f8680fc0e31c7bb0d1b9fcae5dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d94d528-0bbf-420a-a8f2-f8a31925fa42", "node_type": "1", "metadata": {}, "hash": "071f46983f692df386005210aecf2641bb5e220aa063f917245528c6f7890cdf", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nAnyone got an example of how to add links in the formatted sources? All my sources are notion page ids and I want them to be links to the notion pages (ideally editable). Any help super welcome !!!!!\nthomoliver:\n@Logan M if you know of an example of this please do let me know! Sorry to ask so many questions", "start_char_idx": 0, "end_char_idx": 320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d94d528-0bbf-420a-a8f2-f8a31925fa42": {"__data__": {"id_": "1d94d528-0bbf-420a-a8f2-f8a31925fa42", "embedding": null, "metadata": {"date": "2023-05-04T16:24:39.776+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103718849293066270", "node_type": "4", "metadata": {"date": "2023-05-04T16:24:39.776+00:00"}, "hash": "da31cf7b64b21e157617e2830089b57eb51f4a1aebacde5f590d0f204ffd7110", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8cd4a537-96cf-445c-a0ee-582fb748b17a", "node_type": "1", "metadata": {"date": "2023-05-04T10:30:40.873+00:00"}, "hash": "f1886c05ac215f8102276647d8960eceeb6346011ea064aef6152091eb1fa5f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7dbaa29e-9b83-44b9-8d0b-8db13eac9105", "node_type": "1", "metadata": {}, "hash": "f5349deb6bae906daf78ecb22a8a9d459ec28932fd216dd7999b9e8805199f72", "class_name": "RelatedNodeInfo"}}, "text": "Rouslan | Blooo:\n**Anyone met this issue in 0.6.0 ? : **\n\nwhen using in memory index everything works :\n** 1 - init empty index **\n```llm_predictor = LLMPredictor(llm=ChatOpenAI())\n    service_context = ServiceContext.from_defaults(\n        llm_predictor=llm_predictor, chunk_size_limit=512\n    )\n    index = VectorStoreIndex([], service_context=service_context)\n    index.storage_context.persist(persist_dir=settings.INDEX_LOCATION)```\n** 2 - insert documents using \u00ecnsert method**\n```\ndocument = SimpleDirectoryReader(input_files=[doc_file_path]).load_data()[0]\nindex.insert(document)\n```\n** 3 - query index**\n```\nquery_engine = index.as_query_engine(verbose=True)\nresponse = query_engine.query(query_text )\n```\n\n**when persisting the index and reloading it have this issue on step 3:**\n ```\nFile \"/usr/local/lib/python3.11/site-packages/llama_index/token_counter/token_counter.py\", line 78, in wrapped_llm_predict\n   f_return_val = f(_self, *args, **kwargs)\n                  K^^^^^^^^^^^^^^^^^^^^^^^^^\n KFile \"/usr/local/lib/python3.11/site-packages/llama_index/indices/vector_store/retrievers.py\", line 89, in _retrieve\n   Knode_ids = [\n              K^\n KFile \"/usr/local/lib/python3.11/site-packages/llama_index/indices/vector_store/retrievers.py\", line 90, in <listcomp>\n   Kself._index.index_struct.nodes_dict[idx] for idx in query_result.ids\n   K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^\nKeyError: 'f496d9bb-04d6-4bbd-a4be-e4228c6c0b45'\n```\nLogan M:\nHmm, I'm not sure what's happening here. There may be a bug in the insert function?", "start_char_idx": 0, "end_char_idx": 1542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dbaa29e-9b83-44b9-8d0b-8db13eac9105": {"__data__": {"id_": "7dbaa29e-9b83-44b9-8d0b-8db13eac9105", "embedding": null, "metadata": {"date": "2023-05-04T17:22:59.714+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103733529097015368", "node_type": "4", "metadata": {"date": "2023-05-04T17:22:59.714+00:00"}, "hash": "ab94ff418ae43caa550f772fd334b22f9994ea7eeeefb120c95d2deb46da895b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d94d528-0bbf-420a-a8f2-f8a31925fa42", "node_type": "1", "metadata": {"date": "2023-05-04T16:24:39.776+00:00"}, "hash": "76969ae3656707a046aa569698058460fa62ba436082c9289b50803741fc55b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aea60139-c420-4a33-abdc-d6390194272b", "node_type": "1", "metadata": {}, "hash": "a437eb2ff99fda5210bfa969cd866e6b869b094fbef859169ee1b7aee9a3369f", "class_name": "RelatedNodeInfo"}}, "text": "mkern:\nis it possible to run multiple distinct queries in parallel?\nI've noticed that `aquery` seems to block execution, even with asyncio code\n\n```\n    async def query(i):\n        return await query_engine.aquery(...)\n\n    tasks = [query(i) for i in range(10)]\n    sections = await asyncio.gather(*tasks)\n```\ncheesenuggett:\nDo they have to be in parallel or is quick succession ok? Just curious", "start_char_idx": 0, "end_char_idx": 395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aea60139-c420-4a33-abdc-d6390194272b": {"__data__": {"id_": "aea60139-c420-4a33-abdc-d6390194272b", "embedding": null, "metadata": {"date": "2023-05-04T18:05:56.783+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103744338107830272", "node_type": "4", "metadata": {"date": "2023-05-04T18:05:56.783+00:00"}, "hash": "ee78f3e1b147515547fe152b03cdc6666b74a96e8ee082c2856ffc9582392ec4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dbaa29e-9b83-44b9-8d0b-8db13eac9105", "node_type": "1", "metadata": {"date": "2023-05-04T17:22:59.714+00:00"}, "hash": "3942dba3bd3967c6cf289b0ff7c5cb47da62b228308ee227cf04c4f199bc26bc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8592d61e-1234-4f8a-bc1c-fc243833c5c5", "node_type": "1", "metadata": {}, "hash": "605ed57bd12c929e3f6d8c1d5ad0f1b0a787dbc668c455d3dca656ce494e42d1", "class_name": "RelatedNodeInfo"}}, "text": "mkern:\n@cheesenuggett ideally parallel. these are big prompts with GPT-4 so very slow\ncheesenuggett:\nI\u2019m far from expert so I could be way off. But I was under the impression that it\u2019s a one agent per task kind of thing, so you\u2019d need to ensure that you\u2019re delegating one task per agent call\u2026 so the array wouldn\u2019t be an array of tasks but rather an array of agents assigned to an array of tasks", "start_char_idx": 0, "end_char_idx": 395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8592d61e-1234-4f8a-bc1c-fc243833c5c5": {"__data__": {"id_": "8592d61e-1234-4f8a-bc1c-fc243833c5c5", "embedding": null, "metadata": {"date": "2023-05-04T18:54:27.974+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103756548527886396", "node_type": "4", "metadata": {"date": "2023-05-04T18:54:27.974+00:00"}, "hash": "e90c50b6bfa6b00b333d7b4b81247e713293c194b3c9ca0e342759aab601dae9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aea60139-c420-4a33-abdc-d6390194272b", "node_type": "1", "metadata": {"date": "2023-05-04T18:05:56.783+00:00"}, "hash": "79ec39ad369a1e1417bf4f8a96032ccdc7702f27753c09653e80053f6f61a91c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8fa97fd4-5ee1-4d7b-8d74-57e986a36928", "node_type": "1", "metadata": {}, "hash": "c00d7ac2471cb82540449abae6867bd79fce4488d19c444042f3a15baa16440b", "class_name": "RelatedNodeInfo"}}, "text": "Milkman:\nSay I want the output to be in a JSON format or Table format in a value extraction task, would it improve the performance if I have a custom prompt template that gives a example?\nLogan M:\nDefinitely, creating custom text_qa_template and custom refine_template can help", "start_char_idx": 0, "end_char_idx": 277, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fa97fd4-5ee1-4d7b-8d74-57e986a36928": {"__data__": {"id_": "8fa97fd4-5ee1-4d7b-8d74-57e986a36928", "embedding": null, "metadata": {"date": "2023-05-05T00:42:36.491+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103844161318289519", "node_type": "4", "metadata": {"date": "2023-05-05T00:42:36.491+00:00"}, "hash": "68f272476f4d9d58ce79e1ccc9d66182b558f179d5840e44c34be3c913f2e0a2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8592d61e-1234-4f8a-bc1c-fc243833c5c5", "node_type": "1", "metadata": {"date": "2023-05-04T18:54:27.974+00:00"}, "hash": "8118dda3a2845df0b140d2335b20e874edf081b113a29608ca26f71f689a5ee3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3623db81-18ad-405c-9c91-fac2651acb14", "node_type": "1", "metadata": {}, "hash": "0bf3d23bfe19c8d412ef29274f8afb5a34b4cc2fe421e64ee39f00af3fd6a3b2", "class_name": "RelatedNodeInfo"}}, "text": "Madeovmetal:\nwith 0.6.0 is it still possible to only obtain a response from the indexed information? \n\npreviously index.query() would not understand if the question pertained to anything outside the scope of the indexed information. \n\nwith query_engine.query() it seems that it will use the existing knowledge base to respond, which I do not want. \n\nGranted I can modify the prompt to achieve this, but the index.query() approach seemed 'safer' for the product I'm working on.\nLogan M:\nNothing should have changed internally between how `query` works compared to the `query_engine`... maybe openai has \"updated\" their model again?\n\nUnless you have a test that works with 0.5.X but not with 0.6.X ? \ud83d\udc40", "start_char_idx": 0, "end_char_idx": 699, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3623db81-18ad-405c-9c91-fac2651acb14": {"__data__": {"id_": "3623db81-18ad-405c-9c91-fac2651acb14", "embedding": null, "metadata": {"date": "2023-05-05T10:31:58.71+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1103992481214906430", "node_type": "4", "metadata": {"date": "2023-05-05T10:31:58.71+00:00"}, "hash": "25dd5c99fd62e0639c12bbe10e5c488e735ec849078ba94d1ad497ee2c3da8f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8fa97fd4-5ee1-4d7b-8d74-57e986a36928", "node_type": "1", "metadata": {"date": "2023-05-05T00:42:36.491+00:00"}, "hash": "614b10f213b1631f143abb1a312e06b724dd9fcbc86feb46205f7100bd0a6a21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "27473a97-bd59-40c7-ad33-9a60c43ab48b", "node_type": "1", "metadata": {}, "hash": "0fe20b714b17e0508f037aa08cdab90d1e1a98759be443499bd6577b107cdbf2", "class_name": "RelatedNodeInfo"}}, "text": "maxfrank:\nhi all! I have a question about getting back the sources from an agent created using `create_llama_chat_agent` and async streaming the result with `acall`. I can see that the sources are being logged, im just not sure how to capture them in the final result (so i can then unpack and display citations etc). Has anyone worked this out? im happy to share my source code for the toolkit etc. \n\nThanks in advance \ud83d\ude4f\n\nnb. I can see the sources in the observation bit (blue text) - sorry my screenshot didnt make that obvious\nmaxfrank:\nManaged to get it working:\n\n**toolkit**\n```\nindex_configs = [\n    IndexToolConfig(\n        query_engine=query_engine,\n        name=\"blah\",\n        description=\"blah blah\"\n        index_query_kwargs={},\n        tool_kwargs={\"return_direct\": True, \"return_sources\": True},\n    ),\n]\ntoolkit = LlamaToolkit(\n    index_configs=index_configs,\n)\n```\n\n**Agent**\n```\nprefix_message = \"only ever return blahs\"\n\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\nllm=ChatOpenAI(\n    streaming=True,\n    temperature=0,\n    verbose=True,\n)\nagent_chain = create_llama_chat_agent(\n    toolkit,\n    llm,\n    memory=memory,\n    verbose=True,\n    agent_kwargs={\"prefix\": prefix_message},\n    return_sources=True)\n```\n\nThen running:\n`res = await agent_chain.acall(\"say something cool\")`\nreturns a dict where the `output` is a json string that includes the sources.\n\nI almost definitely havent done this in the most optimal way (is anyone sees any rookie mistakes they're more than welcome to correct them) Otherwise i hope this helps someone!", "start_char_idx": 0, "end_char_idx": 1573, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27473a97-bd59-40c7-ad33-9a60c43ab48b": {"__data__": {"id_": "27473a97-bd59-40c7-ad33-9a60c43ab48b", "embedding": null, "metadata": {"date": "2023-05-05T14:07:35.289+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104046741159944283", "node_type": "4", "metadata": {"date": "2023-05-05T14:07:35.289+00:00"}, "hash": "86cc5eaae01eeb52a59ada1a5e6cb2e53ba63bb241c2156af5aa5fbce47ce3b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3623db81-18ad-405c-9c91-fac2651acb14", "node_type": "1", "metadata": {"date": "2023-05-05T10:31:58.71+00:00"}, "hash": "3a7d6ee486086ac9f508c679d52848c6d73c32d34cc44cae520a6393bdf6be68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e786ff6-8a52-4c97-998d-878b8920f503", "node_type": "1", "metadata": {}, "hash": "4454d8bed6b872d3feaecb76493c7023bf47a681c0be03b9c77db3b05bbed40f", "class_name": "RelatedNodeInfo"}}, "text": "legaltext_ai:\nI keep getting this error ```---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[18], line 2\n      1 # with query decomposition in subindices\n----> 2 from llama_index.query_engine.transform_query_engine import TransformQueryEngine\n      5 custom_query_engines = {}\n      6 for index in city_indices.values():\n\nModuleNotFoundError: No module named 'llama_index.query_engine'```\nLogan M:\nDo you have the latest llama index version installed? That path definitely exists in the codebase \ud83d\udc40\nlegaltext_ai:\nJust had it reinstalled from git hub , now having a different problem ```ImportError: cannot import name 'CursorResult' from 'sqlalchemy' (\n/anaconda3/lib/python3.10/site-packages/sqlalchemy/__init__.py)```\nLogan M:\nOof haha. Maybe you need to upgrade sqlalchemy as well? \n\nIt should be upgraded with langchain... make sure your langchain version is at least 0.0.154\n\nAll the reqs for llama index are in the setup.py file\n\nIf that doesn't help you might need a fresh venv", "start_char_idx": 0, "end_char_idx": 1093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e786ff6-8a52-4c97-998d-878b8920f503": {"__data__": {"id_": "6e786ff6-8a52-4c97-998d-878b8920f503", "embedding": null, "metadata": {"date": "2023-05-05T15:12:01.074+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104062955437424700", "node_type": "4", "metadata": {"date": "2023-05-05T15:12:01.074+00:00"}, "hash": "b71560d011590174454b791999cfc28fd9dab10ca31d7c867ac6fcd3a23d8414", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27473a97-bd59-40c7-ad33-9a60c43ab48b", "node_type": "1", "metadata": {"date": "2023-05-05T14:07:35.289+00:00"}, "hash": "a1a4f7d7e6115b44e55637b00aad3d2120400d57547a765d8cbcbb7d71b55f2b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8c2cf148-1605-4f5d-8c03-0474f952b61d", "node_type": "1", "metadata": {}, "hash": "c205a64c4feefbac042533d75cf92151ed5ca93db7906a034e5e678b06c90e63", "class_name": "RelatedNodeInfo"}}, "text": "maxfrank:\nIm really struggling here with this streaming stuff hahaha....\n\nWhen using the callback manager, the response is streamed nicely but then it stops streaming after `Action Input: blahhh`. And when it is commented out I get the response im interested in (see image). \n\nI dont need a stream of the tools the agent is using as long as ive got the document sources in the output. In an ideal world, i would stream the text in \"answer\" and then fetch the relevant documents once the response is finished and then send the document info though the websocket after.\n\n**Please please please **someone help, ive spend the whole day looking at this and im very close to running headfirst at a wall\nLogan M:\nI thiiiink this is due to llama index not fully supporting streaming (at least with gpt3.5)\n\nBut also, I've never tried streaming with the llama chat agent \ud83d\ude05\nmaxfrank:\nim about to spend the next few hours of my friday eve working this out. i shall not rest. (ill have to set it all up with langchain and then try integreate the llama index (right?))", "start_char_idx": 0, "end_char_idx": 1055, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c2cf148-1605-4f5d-8c03-0474f952b61d": {"__data__": {"id_": "8c2cf148-1605-4f5d-8c03-0474f952b61d", "embedding": null, "metadata": {"date": "2023-05-05T17:58:30.27+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104104853162172501", "node_type": "4", "metadata": {"date": "2023-05-05T17:58:30.27+00:00"}, "hash": "adf188018d8265615e41c6f79dc4a636eaeedb6bd43927400996ba78665b46c1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e786ff6-8a52-4c97-998d-878b8920f503", "node_type": "1", "metadata": {"date": "2023-05-05T15:12:01.074+00:00"}, "hash": "93a5517de89330a37486d0b5f9c303078db1a7351b30c0d5cd3239d67852bfac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d22eb32c-b153-468e-8949-7a010fb1ec79", "node_type": "1", "metadata": {}, "hash": "eeb768e25b2922b9d4a44bfa8317592ccfa9eebdaf83a682cbb5e113a4441e04", "class_name": "RelatedNodeInfo"}}, "text": "vampir:\nIs there a way to attach metadata to a node? Like the filename/url where the content is grabbed from. Id like to show that in the response\npakxo.:\n`document.extra_info = <your dict>`\n\nFor me I do it like \n\n \n`some sorta loop:  \n    document = Document(page.page_content)\n    document.extra_info = page.metadata\n    documents.append(document)`\nvampir:\nCheers this is exactly what i was looking for", "start_char_idx": 0, "end_char_idx": 404, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d22eb32c-b153-468e-8949-7a010fb1ec79": {"__data__": {"id_": "d22eb32c-b153-468e-8949-7a010fb1ec79", "embedding": null, "metadata": {"date": "2023-05-05T19:10:01.872+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104122853445611610", "node_type": "4", "metadata": {"date": "2023-05-05T19:10:01.872+00:00"}, "hash": "87bc04676e176d7d8854c36f16c4fc00aec909f36238775a74adaaf9c3125b6f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8c2cf148-1605-4f5d-8c03-0474f952b61d", "node_type": "1", "metadata": {"date": "2023-05-05T17:58:30.27+00:00"}, "hash": "7fa737b49cc3b658b0fd134e8994a1ecb486a2db2666c889a5db880f873e94cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ddcac52a-885a-4a09-aa01-a92ef78c0037", "node_type": "1", "metadata": {}, "hash": "85b726c860a7860699ee66cbe3f7ccc1b9d1b45db327669e713593691515ffb5", "class_name": "RelatedNodeInfo"}}, "text": "ali:\nIt looks like VectorStoreIndex does not have the attribute \"save_to_disk\" what is the best way to do this now?\nvampir:\nVia `StorageContext`", "start_char_idx": 0, "end_char_idx": 144, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddcac52a-885a-4a09-aa01-a92ef78c0037": {"__data__": {"id_": "ddcac52a-885a-4a09-aa01-a92ef78c0037", "embedding": null, "metadata": {"date": "2023-05-05T21:40:14.828+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104160656523014307", "node_type": "4", "metadata": {"date": "2023-05-05T21:40:14.828+00:00"}, "hash": "d7aa7078bae930c66e72a7f858252d9cf7add905255cf49f0a420dc31fe91686", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d22eb32c-b153-468e-8949-7a010fb1ec79", "node_type": "1", "metadata": {"date": "2023-05-05T19:10:01.872+00:00"}, "hash": "36187881c177e35e6720a374e974be31ae479d0f113fb7b64ceedde632038895", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e6b88c2-8ba7-4c4b-893e-d0bf34facfd6", "node_type": "1", "metadata": {}, "hash": "2b8e4afb573a822ff390a6201ad7871137cb39d04a0708580beef082896149cb", "class_name": "RelatedNodeInfo"}}, "text": "vampir:\n@unbittable this?\nunbittable:\nand then you also have to mock the embeddings calls?  and IIRC there's another layer that ends up trying to call OpenAI by default and that has to be overridden in mocks?", "start_char_idx": 0, "end_char_idx": 208, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e6b88c2-8ba7-4c4b-893e-d0bf34facfd6": {"__data__": {"id_": "8e6b88c2-8ba7-4c4b-893e-d0bf34facfd6", "embedding": null, "metadata": {"date": "2023-05-05T22:46:02.691+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104177215060578365", "node_type": "4", "metadata": {"date": "2023-05-05T22:46:02.691+00:00"}, "hash": "eb75ec88baae472e73b2f32b0a44c7c529ecb50781589de1777a372cd9d5e5a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ddcac52a-885a-4a09-aa01-a92ef78c0037", "node_type": "1", "metadata": {"date": "2023-05-05T21:40:14.828+00:00"}, "hash": "1866a7eb3622ce6ba03e55f905e86c975e58cb22330825668032f2f620b0faa9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be6218b0-049c-4c99-969f-d6aa9dbeff02", "node_type": "1", "metadata": {}, "hash": "663b994574b43c325513e1ca39ec1be7d764712f6881c6ac34ef0b6716f7c739", "class_name": "RelatedNodeInfo"}}, "text": "ali:\nAnother way to ask the question above is how can I load a index based on the .json files that are generated from ```indexDocs.storage_context.persist()```.\nLogan M:\nYou can load like this, once you have the storage context (from the docs link sent earlier)\n\n`index = load_index_from_storage(storage_context)`\nali:\nYes i understand that part. but how do i create the storage context. for example: \n\n```storage_context = StorageContext.from_defaults(docstore=json_data_docstore)```\ndoes not work\n\n```\nstorage_context = StorageContext.from_defaults(docstore=json_data_docstore,\n    vector_store=json_data_vector,\n    index_store=json_data_index)\n```\ndoes not work\n\n```storage_context = StorageContext.from_defaults(json_data_docstore,json_data_index,json_data_vector)\n```\ndoes not work\n\nwhat am i missing?\nLogan M:\nWhen you say it doesn't work, what's the error you end up getting again?\nali:\n```AttributeError: 'dict' object has no attribute 'index_structs'\n```", "start_char_idx": 0, "end_char_idx": 964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be6218b0-049c-4c99-969f-d6aa9dbeff02": {"__data__": {"id_": "be6218b0-049c-4c99-969f-d6aa9dbeff02", "embedding": null, "metadata": {"date": "2023-05-06T00:33:30.673+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104204259857268869", "node_type": "4", "metadata": {"date": "2023-05-06T00:33:30.673+00:00"}, "hash": "691799deae4a16ef8f23a3b829d174bb4cc5e173d36a3e162259c3cfe1b07711", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e6b88c2-8ba7-4c4b-893e-d0bf34facfd6", "node_type": "1", "metadata": {"date": "2023-05-05T22:46:02.691+00:00"}, "hash": "f95220b6e0451762457cc80e52b294d46483511f5641057c36bdf2cf7e128bdd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94195a82-4011-495b-89db-6a726a41a74f", "node_type": "1", "metadata": {}, "hash": "dd95013ff40992de10e7c0fa258cdd187964910e536d5111abf03d235174abb9", "class_name": "RelatedNodeInfo"}}, "text": "dhrubobfg:\nQuestion: I wonder whether there is a way for \"inferring\" the inputs to an API call or python function from an input query provided by a user. So for instance, a user might say \"Generate for me 10 random numbers using the Dirichlet distribution\". And suppose I have a random number generator api which takes in two (or more) arguments: name of distribution, and number of samples. How do I then go about inferring the two arguments from the query to pass to the API ?\n\nDo I build an Index on top of the API?\npakxo.:\nI'm not sure if this is currently within the scope of llama_index.\nBut I think that should be doable using things like intent analysis and NLP. (Maybe difficult - could be outdated[?])\n\nBut wait, it might be doable using Agents running on an LLM and tools. (Could be overkill because agents are supposed to have multiple tools not just one.)\n\nI can't tell for sure. look more into it.\ndhrubobfg:\nSearching a bit and I found this thread. So the idea here is to provide the prompt with an example of how to use an external api. https://community.openai.com/t/how-a-llm-based-application-integrates-a-custom-function-api/27887/3\npakxo.:\nHello there, this seems to be an Agent and a tool approach. You can either do it by using OpenAI API integration or use LangChain, I prefer the later.", "start_char_idx": 0, "end_char_idx": 1311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94195a82-4011-495b-89db-6a726a41a74f": {"__data__": {"id_": "94195a82-4011-495b-89db-6a726a41a74f", "embedding": null, "metadata": {"date": "2023-05-06T02:58:36.011+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104240772691267696", "node_type": "4", "metadata": {"date": "2023-05-06T02:58:36.011+00:00"}, "hash": "53d3ce38c56f6221cca53454c821d92febc165030ca3ffb779405ebc0ba061aa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be6218b0-049c-4c99-969f-d6aa9dbeff02", "node_type": "1", "metadata": {"date": "2023-05-06T00:33:30.673+00:00"}, "hash": "07bf6635ac54381bd2332d2226d15ffefda781dfddcaed8fa8fec3e516045fc0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0fc322a6-a4f4-4db8-bce4-ab7dc6b1f075", "node_type": "1", "metadata": {}, "hash": "012bcca2e4f874c2f2f6987308f0b5f2b12a9c286e20da6dc0514bf598723734", "class_name": "RelatedNodeInfo"}}, "text": "WatchfulEyeOfZod:\nHi.\n\nI am trying to load a large number of documents into Llama-Index.\nThe process works pretty well with the simple file storage based approach:\n\n```reader = ConfluenceReader(base_url=base_url)\ndocuments = reader.load_data(space_key=\"DOCS\", include_attachments=True)\nindex = VectorStoreIndex.from_documents(documents)\nindex.storage_context.persist()```\n\n... and I end up with 3 files in the storage dir.\n\nI am trying to switch to using MongoDB for the docstore and the index store like this:\n\n```storage_context = StorageContext.from_defaults(\n    docstore=MongoDocumentStore.from_uri(<mymongourl>),\n    indexstore=MongoIndexStore.from_uri(<mymongourl>),\n    vector_store=SimpleVectorStore(),\n)\nreader = ConfluenceReader(base_url=base_url)\ndocs = reader.load_data(page_ids=[64490041], include_attachments=True)\nindex = VectorStoreIndex.from_documents(docs, storage_context=storage_context)\nindex.set_index_id(\"main_index\")\nindex.storage_context.persist()```\n\nThis also seems to work... updating Mongo correctly...\n\nhowever, I would like to incrementally add documents so I don't have to load many thousands of docs at a time...\n\n```storage_context = StorageContext.from_defaults(\n    docstore=MongoDocumentStore.from_uri(<mymongourl>),\n    indexstore=MongoIndexStore.from_uri(<mymongourl>),\n    vector_store=SimpleVectorStore(),\n)\nreader = ConfluenceReader(base_url=base_url)\ndocuments = reader.load_data(space_key=\"DOCS\", include_attachments=True)\nindex = VectorStoreIndex.from_documents(documents)\nfor d in docs:\n    index.insert(d)\nindex.storage_context.persist()```\n\nWhich only sort of works... , it always replaces the file based vector store with whatever the last \"run\" of documents was - wiping out the vectors that were in the file before. \n\nWhat am I doing wrong here?\nWatchfulEyeOfZod:\nDuh. Figured it out... \n```storage_context = StorageContext.from_defaults(\n    docstore=MongoDocumentStore.from_uri(<mymongourl>),\n    indexstore=MongoIndexStore.from_uri(<mymongourl>),\n    vector_store=SimpleVectorStore().from_persist_path(\"./storage/vector_store.json\"),\n)```\nNeed to tell the vector store where the current one is.\nSorry for the newb question.", "start_char_idx": 0, "end_char_idx": 2178, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fc322a6-a4f4-4db8-bce4-ab7dc6b1f075": {"__data__": {"id_": "0fc322a6-a4f4-4db8-bce4-ab7dc6b1f075", "embedding": null, "metadata": {"date": "2023-05-06T04:26:09.879+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104262809010847756", "node_type": "4", "metadata": {"date": "2023-05-06T04:26:09.879+00:00"}, "hash": "622b86095f8e6d4b9c7c88634c55ec6c66ac69046df6a1df287704b89d80457c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94195a82-4011-495b-89db-6a726a41a74f", "node_type": "1", "metadata": {"date": "2023-05-06T02:58:36.011+00:00"}, "hash": "6829c467b9b32cc32e6a10edcdae76b9f324e2695161d2477334afa26ef4e6de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b451109f-7e43-4edd-866c-a7e958173208", "node_type": "1", "metadata": {}, "hash": "967c650df3c397ad8ba09804c92c964a41cff66525917e93abaa6d13ea8afdee", "class_name": "RelatedNodeInfo"}}, "text": "dhrubobfg:\nA question about how llama-index is working under the hood: consider the PandasIndex which creates an index out of a data frame. What does that mean? Next, we can run queries on this index. So where is the interaction between the index and LLM happening.\nTechForGood:\nThe LLM is just used to create the pandas command. For example, if the query is \"What is the average product weight?\" then the LLM will most likely return something like \"df['weight'].mean()\", which is then run against your dataframe to produce the answer.\ndhrubobfg:\nSo where does the index layer come in ?  Maybe it\u2019s a dumb question: but I just don\u2019t \u2026 understand what an index is doing here. If the LLM can transform the query into a piece of code, then how does indexing help? I can then provide information about the data frame (like column names)  in the prompt itself right ?\ndhrubobfg:\nAnd the reason I ask is because it doesn\u2019t seem to get the information about the column values itself. So for instance if I say \u201cBall bearings\u201d in the query, it uses that exactly. Not knowing that the column value is \u201cball-bearing\u201d. Or maybe I am misunderstanding something ?", "start_char_idx": 0, "end_char_idx": 1149, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b451109f-7e43-4edd-866c-a7e958173208": {"__data__": {"id_": "b451109f-7e43-4edd-866c-a7e958173208", "embedding": null, "metadata": {"date": "2023-05-06T15:47:59.586+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104434396758548641", "node_type": "4", "metadata": {"date": "2023-05-06T15:47:59.586+00:00"}, "hash": "6ec00c190d548c827c803934c85f38a2e5c04241c1e7eb66611452064a3b76e4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0fc322a6-a4f4-4db8-bce4-ab7dc6b1f075", "node_type": "1", "metadata": {"date": "2023-05-06T04:26:09.879+00:00"}, "hash": "aa96003d382b1878bc542d8de7a9c41f16fc92d8ccb82d0270defa676e970040", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50641a2a-5ebb-4672-a4a3-363d578de784", "node_type": "1", "metadata": {}, "hash": "73d502167d05a0aaa111903c1dafc72125d5f66f3aeccb63c7ea627feafe2532", "class_name": "RelatedNodeInfo"}}, "text": "Akinus21:\nI need to build an index from stored documents in a mongodocumentstore, but all of the documentation describes how to do that only if you are *adding* new documents. It would seem based on the docs that I would need to grab the documents from the docstore, break them into nodes, then do ```index = VectorStoreIndex(nodes,\n                                storage_context=storage_context,\n                                service_context=service_context)```\nCan anyone advise on how to grab the documents from mongo and break them into nodes?  I keep getting errors like ```ser/node_utils.py\", line 30, in get_text_splits_from_document\n    document.get_text(),\nAttributeError: 'str' object has no attribute 'get_text'```\nLogan M:\nActually, the docstore only holds the nodes\n\n(I know, the names are confusing \ud83d\ude35\u200d\ud83d\udcab )", "start_char_idx": 0, "end_char_idx": 821, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50641a2a-5ebb-4672-a4a3-363d578de784": {"__data__": {"id_": "50641a2a-5ebb-4672-a4a3-363d578de784", "embedding": null, "metadata": {"date": "2023-05-06T16:41:46.198+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104447930150158528", "node_type": "4", "metadata": {"date": "2023-05-06T16:41:46.198+00:00"}, "hash": "e334e6965a64dd23000b0b14bc1a1cdfa8c5b6279248187027a966cbd4615115", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b451109f-7e43-4edd-866c-a7e958173208", "node_type": "1", "metadata": {"date": "2023-05-06T15:47:59.586+00:00"}, "hash": "b034e988f338538afb633bcae09cd6f3c511e7dc78ac33b68f8cee4375add7ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a482696-2281-4bef-adbb-ded971a6a382", "node_type": "1", "metadata": {}, "hash": "e9c302158dafff3270b36f40d50e1f490948b99ecaf313a4750e6aac7ebce25a", "class_name": "RelatedNodeInfo"}}, "text": "lucasq:\nHi there, I'm pretty new to the whole ecosystem. I have a question:\n\nIs there any way to give more relevance to a piece of data (document) than to another? Meaning, if I know a document comes from a more trusted source I want the LLM to know this and pay more attention to this (or take this into account) document when doing queries. Thanks!\npakxo.:\nWhat I would do, is to use node postprocessor(`BaseNodePostprocessor`), then I'd de-rank the nodes with lower quality source, or boost nodes with a better quality.", "start_char_idx": 0, "end_char_idx": 522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a482696-2281-4bef-adbb-ded971a6a382": {"__data__": {"id_": "4a482696-2281-4bef-adbb-ded971a6a382", "embedding": null, "metadata": {"date": "2023-05-06T18:46:00.502+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104479195767255133", "node_type": "4", "metadata": {"date": "2023-05-06T18:46:00.502+00:00"}, "hash": "ffd1e7ea139d4685301d38690945d3069bf52affdb7b83f93620a6bf70186072", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50641a2a-5ebb-4672-a4a3-363d578de784", "node_type": "1", "metadata": {"date": "2023-05-06T16:41:46.198+00:00"}, "hash": "21146816a5b9c31829d6c944a98ff7491ff5e2afea5514ac335704f8e691ecba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "224cfd9a-016b-4ad2-8d37-03d980288f4d", "node_type": "1", "metadata": {}, "hash": "d79f2d15cc57f4a7abed86f6301c1622b9140309b58b448a1714562666dc5d66", "class_name": "RelatedNodeInfo"}}, "text": "guardiang:\n@jerryjliu98 - re: today's update and the notebook link\njerryjliu98:\nah yeah we moved a good portion of notebooks to docs/examples - https://github.com/jerryjliu/llama_index/blob/main/docs/examples/node_postprocessor/CohereRerank.ipynb", "start_char_idx": 0, "end_char_idx": 246, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "224cfd9a-016b-4ad2-8d37-03d980288f4d": {"__data__": {"id_": "224cfd9a-016b-4ad2-8d37-03d980288f4d", "embedding": null, "metadata": {"date": "2023-05-06T21:11:24.615+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104515787349311519", "node_type": "4", "metadata": {"date": "2023-05-06T21:11:24.615+00:00"}, "hash": "f5f514cf14f84db92014ec8b44b9edf53928c3194a7b88ecc007d652345875ad", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a482696-2281-4bef-adbb-ded971a6a382", "node_type": "1", "metadata": {"date": "2023-05-06T18:46:00.502+00:00"}, "hash": "770621b27b00e098daac392f5a2611c0858516f5a4d390d5d85117e4895e204c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e702714-2e14-48f1-9cdc-ac7dc0349bb4", "node_type": "1", "metadata": {}, "hash": "f109504f4df5833d59c90c07174831e402d3630fdf3a371e71af44a0868ac809", "class_name": "RelatedNodeInfo"}}, "text": "RockyMcNuts:\nthe 10k example is somewhat broken with the 0.6 refactor, I took a crack at getting it to work here https://github.com/druce/question_answering_over_docs/blob/main/10kAnalysis.ipynb\n\nthe big thing I couldn't figure out is how to send the options in a query_configs dict in the cell numbered 55  to a query based on a ComposableGraphQueryEngine, in particular \"response_mode\": \"tree_summarize\".\n\nif anyone could point me in the right direction on how to send 'tree_summarize' to a query, that would be much appreciated!\nLogan M:\nI think you need to use custom_query_engines\n\nCheck out this page in the docs \n\nhttps://gpt-index.readthedocs.io/en/latest/examples/composable_indices/ComposableIndices-Prior.html\nRockyMcNuts:\nmany thanks! that is a great example page. shows up now when I searched docs for tree_summarize but I did not see it the first time.", "start_char_idx": 0, "end_char_idx": 866, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e702714-2e14-48f1-9cdc-ac7dc0349bb4": {"__data__": {"id_": "1e702714-2e14-48f1-9cdc-ac7dc0349bb4", "embedding": null, "metadata": {"date": "2023-05-07T07:55:33.689+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104677893314990080", "node_type": "4", "metadata": {"date": "2023-05-07T07:55:33.689+00:00"}, "hash": "ba8f604c378012b3b4e89aa60ab369add47df44d797290dcd3bb6799933ca5aa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "224cfd9a-016b-4ad2-8d37-03d980288f4d", "node_type": "1", "metadata": {"date": "2023-05-06T21:11:24.615+00:00"}, "hash": "fa5cc65eeec74971f2bf78656ea34180c0b5b1d7e9970b95d6bdcdd29c8e715f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f46a8758-c527-430b-b5df-40534227ab9c", "node_type": "1", "metadata": {}, "hash": "7349cc4ecb84065ed46a6283ae7e7caea4228d795d73bd93784e12e19ea6590c", "class_name": "RelatedNodeInfo"}}, "text": "TechForGood:\nOK, I am working on creating a composable index. The top level is a TreeIndex, and the children are VectorStoreIndex, VectorStoreIndex, and a PandasIndex. Queries work well, except when they are routed to the PandasIndex. In that case it gives me the following error. How can I fix that? @Logan M Would love your help. Thanks in advance! \ud83d\ude03\nLogan M:\nHmmm I think this is actually just a missing feature \ud83d\ude05 it seems like the pandas index wasn't set up to be used in a graph... oof", "start_char_idx": 0, "end_char_idx": 490, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f46a8758-c527-430b-b5df-40534227ab9c": {"__data__": {"id_": "f46a8758-c527-430b-b5df-40534227ab9c", "embedding": null, "metadata": {"date": "2023-05-07T16:54:52.295+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104813615145558106", "node_type": "4", "metadata": {"date": "2023-05-07T16:54:52.295+00:00"}, "hash": "8f102de5854130d555f1a7d7e80b8036ed5e6238a0e65efc3c3c8197ddafa7c8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e702714-2e14-48f1-9cdc-ac7dc0349bb4", "node_type": "1", "metadata": {"date": "2023-05-07T07:55:33.689+00:00"}, "hash": "eda1152b4b252abff31bb215239704c43967fb5cd59ab6a07e033ee9ced5151d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd156d56-dde2-412a-9181-e345ace37273", "node_type": "1", "metadata": {}, "hash": "990e1d3835db56ce236963c271c103a7b4608e5821db347f717b8e82d5f0666e", "class_name": "RelatedNodeInfo"}}, "text": "unbittable:\nSome of the links from the docs to the notebooks seem to be broken at present.  I'm currently looking for this notebook: https://github.com/jerryjliu/llama_index/blob/main/examples/vector_indices/SimpleIndexDemo-multistep.ipynb , which is linked to from https://gpt-index.readthedocs.io/en/v0.6.0/how_to/query/query_transformations.html .  Anyone know where I can find it?\nLogan M:\nSorry about that! Some of the notebooks are being moved into the docs.\n\nI think this is the one you are looking for? https://gpt-index.readthedocs.io/en/latest/examples/query_transformations/SimpleIndexDemo-multistep.html\nunbittable:\nYeah, I think so.  TY!  I see the output from each step is no longer provided?  (I found that super helpful to understand which option to use in previous explorations.)\nLogan M:\nThat's a good point. @disiok maybe you know if it's possible to include the cell outputs in the new embedded notebooks?", "start_char_idx": 0, "end_char_idx": 925, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd156d56-dde2-412a-9181-e345ace37273": {"__data__": {"id_": "bd156d56-dde2-412a-9181-e345ace37273", "embedding": null, "metadata": {"date": "2023-05-07T19:42:41.595+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104855848850833409", "node_type": "4", "metadata": {"date": "2023-05-07T19:42:41.595+00:00"}, "hash": "a85dd2dbfafb68cf6565e6bd86a191b8711f881f5d0292427b1da26b43dd0e89", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f46a8758-c527-430b-b5df-40534227ab9c", "node_type": "1", "metadata": {"date": "2023-05-07T16:54:52.295+00:00"}, "hash": "63f41483860063570a3fbcd832e204589053508b8230106c36f79ca689b7b6d1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9f3e70c3-3bfe-47fb-b8a9-0d1f7a153418", "node_type": "1", "metadata": {}, "hash": "a0dfac9c029df5b9b834b3b2576e22e8a7ea826c7f9ca444a5eeb0032bc17e59", "class_name": "RelatedNodeInfo"}}, "text": "Sofia Mendez:\nCan someone help me fix the code from this colab? https://colab.research.google.com/drive/1MwD9e11qImUqcR46eKEuBocS0K_nZJx9?usp=sharing\nLogan M:\nI can take a look in a few minutes and let you know \ud83d\udcaa\nSofia Mendez:\ni would strongly appreciate it, its part of a final project for my studies", "start_char_idx": 0, "end_char_idx": 301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9f3e70c3-3bfe-47fb-b8a9-0d1f7a153418": {"__data__": {"id_": "9f3e70c3-3bfe-47fb-b8a9-0d1f7a153418", "embedding": null, "metadata": {"date": "2023-05-07T20:19:50.334+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104865196859740281", "node_type": "4", "metadata": {"date": "2023-05-07T20:19:50.334+00:00"}, "hash": "3b555a02fca09d5a835d828c86c64dbf4d8ed4d0fff6d3a782574be562c356f6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd156d56-dde2-412a-9181-e345ace37273", "node_type": "1", "metadata": {"date": "2023-05-07T19:42:41.595+00:00"}, "hash": "bc2750010d81830f36b20763821ece40d94a0fbc0bcd28dee9579013712b2c19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a215ebc2-0104-43c3-9ada-219b04637cf6", "node_type": "1", "metadata": {}, "hash": "517f78da176ac8d2c9a04f559d09a4d9864af6f00be9f999f31f4b15b44730da", "class_name": "RelatedNodeInfo"}}, "text": "danistheremix:\nI'm trying the initial sample with the paul graham dataset. I'm getting a response of \"None\". I found the issue on github (https://github.com/jerryjliu/llama_index/issues/964) but it doesn't seem like there is a solution there. How should I troubleshoot this?\nTrajady:\nIt looks like they mentioned updating to latest version. Do you know what version of llama index you're using?\ndanistheremix:\nI just cloned from the repo so I'm assuming its the latest. But maybe not?\nTrajady:\nthe repo shows 0.6.1, so maybe rolling back to the version mentioned would work for you...", "start_char_idx": 0, "end_char_idx": 584, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a215ebc2-0104-43c3-9ada-219b04637cf6": {"__data__": {"id_": "a215ebc2-0104-43c3-9ada-219b04637cf6", "embedding": null, "metadata": {"date": "2023-05-07T22:28:22.703+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1104897544879878264", "node_type": "4", "metadata": {"date": "2023-05-07T22:28:22.703+00:00"}, "hash": "94673456f2081fb17a2aa68d072d4349fd6808667ec218a36f4b67b51501adc9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9f3e70c3-3bfe-47fb-b8a9-0d1f7a153418", "node_type": "1", "metadata": {"date": "2023-05-07T20:19:50.334+00:00"}, "hash": "7fdc35bb5937b1f9032bb3e4017766b509d7f6dc49f9a537751b7f39e850be92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d525ea6-9d7f-4be8-9f2c-457c51e8a709", "node_type": "1", "metadata": {}, "hash": "a9b2268feb043ce888f903b4a5324ee8a12a78570bfe9caa345fd186bd555c56", "class_name": "RelatedNodeInfo"}}, "text": "SeaCat:\nHi, I faced a problem that I don't know how to solve. I found if I load a small chunk of data (say, a paragraph), the query can find an answer but if a document is big, say, several pages, it can't find anything. This is my code, is it the right one for big files?\n```\n        document = Document(text)\n        document.doc_id = data_source_id\n        llm_predictor = LLMPredictor(llm=OpenAI(openai_api_key=settings['openai_key']))\n        service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\n        index = GPTQdrantIndex.from_documents([document], \n                                                client=get_qrant_client(), \n                                                collection_name=project_id,\n                                                service_context=service_context)\n```\nThe \"text\" variable is text extracted from a file.\nAnd here is the code for querying the collection:\n```\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=(model_name),\n                            openai_api_key=openai_key))\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\n\nindex = GPTQdrantIndex.from_documents([], client=get_qrant_client(), \n                                            collection_name=project_id,\n                                            service_context=service_context)\nresponse = index.query(query_text)\n```\nThanks!\nLogan M:\nWhat are some examples of queries you are making that aren't working?\nSeaCat:\nNot sure I understood your question. I'm asking some questions that can be found in that specific document. What I found right now: if I use the gpt-3.5-turbo model, it's not working but works with some other, see the screenshot:", "start_char_idx": 0, "end_char_idx": 1720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d525ea6-9d7f-4be8-9f2c-457c51e8a709": {"__data__": {"id_": "1d525ea6-9d7f-4be8-9f2c-457c51e8a709", "embedding": null, "metadata": {"date": "2023-05-08T09:15:23.236+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105060369996709901", "node_type": "4", "metadata": {"date": "2023-05-08T09:15:23.236+00:00"}, "hash": "bd29f370a9c99fd19d0b9f9c11d9dfecb91c0cb5b058aaaeacb968ceef5e16c0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a215ebc2-0104-43c3-9ada-219b04637cf6", "node_type": "1", "metadata": {"date": "2023-05-07T22:28:22.703+00:00"}, "hash": "57c94cebab35a6ee0d3ffe48cb01a10700982e54334a286e5b32d1311d3390e1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d168434-f14d-4336-8862-9ff866359ab6", "node_type": "1", "metadata": {}, "hash": "31fa716f6ec294878d3dfc19f08d9c70e30d7a74a1b65ca5ce365c3e085b8f98", "class_name": "RelatedNodeInfo"}}, "text": "harshit_alpha:\nHey community members\nI need some help from you guys.  I am trying to create a bot for financial documents. \n\n\ndef ask(file):\n    print(\" Loading...\")\n    PDFReader = download_loader(\"PDFReader\")\n    loader = PDFReader()\n    documents = loader.load_data(file=Path(file))\n    print(\"Path: \", Path(file))\n\n    # Check if the index file exists\n    if os.path.exists(INDEX_FILE):\n        # Load the index from the file\n        logger.info(\"found index.json in the directory\")\n        index = GPTSimpleVectorIndex.load_from_disk(INDEX_FILE)\n    else:\n        logger.info(\"didnt find index.json in the directory\")\n        llm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"text-davinci-003\"))\n\n        service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, chunk_size_limit=1024)\n        index = GPTSimpleVectorIndex.from_documents(documents, service_context=service_context)\n\n        # Save the index to the file\n        index.save_to_disk(INDEX_FILE)\n\n\nAbove is my code snippet for generating index for a pdf. I have used PDFReader from llamahub to extract texts from the pdf. The bot answers well when asked about the text. But it fails when I ask the value from the table present in the pdf.\n\nI tried using different open-ai text models. The best one being text-davinci-003. The bot is not able to answer me about the values present in the tables in the pdf. This is because the pdfReader simply just converts the content of pdf to text (it doesnot take any special steps to convert the table content). I want to know how can i sucessfully index both text and the tables in the pdf using langchain and llamaindex.\nharshit_alpha:\nCan you guys please look into this and help me with table indexing inside the pdfs, so that my bot can answer for the values present inside the tables too?", "start_char_idx": 0, "end_char_idx": 1834, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d168434-f14d-4336-8862-9ff866359ab6": {"__data__": {"id_": "7d168434-f14d-4336-8862-9ff866359ab6", "embedding": null, "metadata": {"date": "2023-05-08T13:11:50.085+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105119873954238556", "node_type": "4", "metadata": {"date": "2023-05-08T13:11:50.085+00:00"}, "hash": "f1ac45571ddab915d703c8460a0d3faa051357e02f300d4924e1ab81f9683ca6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d525ea6-9d7f-4be8-9f2c-457c51e8a709", "node_type": "1", "metadata": {"date": "2023-05-08T09:15:23.236+00:00"}, "hash": "0fcef1802aaf5f140fc187259cc0831041963432b9202b8a51fcc4f6650af371", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7130f9bc-3222-47aa-b665-21d2db6c4825", "node_type": "1", "metadata": {}, "hash": "67bcd2fb21d4690c1808ce6fbe8d98610d8775de071911a886274973223b8811", "class_name": "RelatedNodeInfo"}}, "text": "BtB:\nNoob here. What controls the length and depth of reponses? For example, I have got multiple text documents that have been fed about a <topic>. When I ask 'What is <topic>?\" it gives me the right answer but it extremely short. Hare my settings:\n`\nllm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0, model_name=\"gpt-4\"))\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, chunk_size_limit=512)\nindex = VectorStoreIndex.from_documents(documents, service_context=service_context)\n`\nBtB:\nLooks like it was the chunk_size_limit", "start_char_idx": 0, "end_char_idx": 558, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7130f9bc-3222-47aa-b665-21d2db6c4825": {"__data__": {"id_": "7130f9bc-3222-47aa-b665-21d2db6c4825", "embedding": null, "metadata": {"date": "2023-05-08T16:39:54.443+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105172237146927265", "node_type": "4", "metadata": {"date": "2023-05-08T16:39:54.443+00:00"}, "hash": "fe0e6b7ae83794632cf6cf2ffb5efb1faeb679dd05fd916cb4313e620aeb866a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d168434-f14d-4336-8862-9ff866359ab6", "node_type": "1", "metadata": {"date": "2023-05-08T13:11:50.085+00:00"}, "hash": "31b73f9caab9329fd7fdfe4969eab668eb45ee4a70e064d25696c3198f148ae3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3de1e495-6815-499f-b290-21304e3dc248", "node_type": "1", "metadata": {}, "hash": "61960b4d98f4a083e576a8995cb2699742ab1d67d46986fb038ff4018f55d783", "class_name": "RelatedNodeInfo"}}, "text": "Daslav:\nHey guys, cohere is not working (pprint import)!\nLogan M:\nWhat's the specific error?", "start_char_idx": 0, "end_char_idx": 92, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3de1e495-6815-499f-b290-21304e3dc248": {"__data__": {"id_": "3de1e495-6815-499f-b290-21304e3dc248", "embedding": null, "metadata": {"date": "2023-05-08T19:00:36.264+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105207644710502410", "node_type": "4", "metadata": {"date": "2023-05-08T19:00:36.264+00:00"}, "hash": "92231ffadc772820deb1235fd52b4882e581affc0224495848acffbb2305a3ea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7130f9bc-3222-47aa-b665-21d2db6c4825", "node_type": "1", "metadata": {"date": "2023-05-08T16:39:54.443+00:00"}, "hash": "967cf5683155347a7dff4e4a09ec34242a140c2d887e34ff91064eed571c0ffd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c665faa8-f069-473c-b625-95a4ad6e83ba", "node_type": "1", "metadata": {}, "hash": "bca2ff85be7c55c7234e064d7cd32be09722b8789a633fdcde41337b86950e92", "class_name": "RelatedNodeInfo"}}, "text": "zucky'z:\nHi, noob here. I don't  understand how i solve the error: \"ValueError: No existing llama_index.storage.kvstore.simple_kvstore found at  \\Arquivos\\index_store.json\". I see the documentantion, but really dont understand. thanks for any help.\nLogan M:\nIndex storage is a little different in the new versions\n\nInstead a single monolithic json file, indexes are saved in a folder, with some number of other files. \n\nhttps://gpt-index.readthedocs.io/en/latest/guides/primer/usage_pattern.html#optional-save-the-index-for-future-use", "start_char_idx": 0, "end_char_idx": 534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c665faa8-f069-473c-b625-95a4ad6e83ba": {"__data__": {"id_": "c665faa8-f069-473c-b625-95a4ad6e83ba", "embedding": null, "metadata": {"date": "2023-05-08T19:16:48.958+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105211724484849775", "node_type": "4", "metadata": {"date": "2023-05-08T19:16:48.958+00:00"}, "hash": "2e39b110c7c631310f488758e9c0e5ae4e8e2db1bc08a1e7f79b5741d3f45e67", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3de1e495-6815-499f-b290-21304e3dc248", "node_type": "1", "metadata": {"date": "2023-05-08T19:00:36.264+00:00"}, "hash": "ef925692d1f58f353bc162553c15a6a77714185caf474d0caab59094fa5935a5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97534259-e2b5-4641-aa2d-03c59159e968", "node_type": "1", "metadata": {}, "hash": "736d795f6554444252a7a0579ecccec574bc5cbf80f308b222d91536dc94a81c", "class_name": "RelatedNodeInfo"}}, "text": "Milkman:\nI've created a directory containing list indices from Llama_Index <0.6.0. How do I load them as my index? Can't find that in the repo\nMilkman:\nI didn't see a load_from_disk method now for indices", "start_char_idx": 0, "end_char_idx": 204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97534259-e2b5-4641-aa2d-03c59159e968": {"__data__": {"id_": "97534259-e2b5-4641-aa2d-03c59159e968", "embedding": null, "metadata": {"date": "2023-05-08T19:25:56.396+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105214020606234807", "node_type": "4", "metadata": {"date": "2023-05-08T19:25:56.396+00:00"}, "hash": "dc9a39a7cd24e39ac0704ec477fb36f0818e59cf2a3cbda36d9b74bfd96c390e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c665faa8-f069-473c-b625-95a4ad6e83ba", "node_type": "1", "metadata": {"date": "2023-05-08T19:16:48.958+00:00"}, "hash": "7a6b96dcd6dae66405cdf914f2e0d4e0c9341e0cb7235028e738155bac96464f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8b2a538-82e4-403a-b67d-0ea7112e07b4", "node_type": "1", "metadata": {}, "hash": "d0112ccef1ac14acc493568db2583babaa234ed0a06425a63099fcebe01c6187", "class_name": "RelatedNodeInfo"}}, "text": "malik_J:\nHi Guyes. \n\nI have one issue from ```llama_index import SimpleDirectoryReader, GPTSimpleVectorIndex, LLMPredictor, PromptHelper, ServiceContext```\n\nhow can help me? Looking forward your response.\nLogan M:\nit looks like you are trying to instal version 0.1.0? Try doing a newer version, or even leaving the version blank\nmalik_J:\nSo I am using VectorStoreIndex instead GPTSimpleVectorIndex. but there is some issues also", "start_char_idx": 0, "end_char_idx": 428, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8b2a538-82e4-403a-b67d-0ea7112e07b4": {"__data__": {"id_": "d8b2a538-82e4-403a-b67d-0ea7112e07b4", "embedding": null, "metadata": {"date": "2023-05-08T21:05:39.076+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105239113784885289", "node_type": "4", "metadata": {"date": "2023-05-08T21:05:39.076+00:00"}, "hash": "e79e9c3b1802c1f1fa27a6048f69cb6885b2ebfb82c74a49f1cd42a985b36594", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97534259-e2b5-4641-aa2d-03c59159e968", "node_type": "1", "metadata": {"date": "2023-05-08T19:25:56.396+00:00"}, "hash": "d48a1f35476af3b7827fa280971a9e29d6b6311f97ac80c3c8a722111e73038c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b26621bc-1b13-4215-bc6b-9f00516fbd87", "node_type": "1", "metadata": {}, "hash": "70e9b184ecb2a8dad0bcfd6ceca7e25a5e69f63a77ea9c07db44bc0efa40883c", "class_name": "RelatedNodeInfo"}}, "text": "cdh:\nHello! I am following an old example I've got that sets up an index via `VectorStoreIndex` and then runs a query using an index as `index.as_query_engine().query(query_string, text_qa_template = A_TEMPLATE)`, but it seems `text_qa_template` is no longer used. What is the replacement for this, where I pass a query string and a template that get combined?\nLogan M:\nPut the template kwarg into the as_query_engine() call \ud83d\udc4d\ncdh:\nAwesome, thanks so much!", "start_char_idx": 0, "end_char_idx": 456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b26621bc-1b13-4215-bc6b-9f00516fbd87": {"__data__": {"id_": "b26621bc-1b13-4215-bc6b-9f00516fbd87", "embedding": null, "metadata": {"date": "2023-05-08T22:30:14.777+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105260402817908797", "node_type": "4", "metadata": {"date": "2023-05-08T22:30:14.777+00:00"}, "hash": "36b870a7be0dff3efd17dff0c14083f5e4038935502499431f933680dfd20a20", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8b2a538-82e4-403a-b67d-0ea7112e07b4", "node_type": "1", "metadata": {"date": "2023-05-08T21:05:39.076+00:00"}, "hash": "9bf4c550f793e7df69fcd2674a88fa173181192afba1432fbec0cc58513bf26c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cad9a028-21dc-487c-8b39-b6a0b40b5fa0", "node_type": "1", "metadata": {}, "hash": "bc426f1d85dc55848b49b2a007375a906b7a99f5690abf7427090a26970cea39", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nHey everyone, I'm producing a JSON output and it's a hit or miss, oftentimes I keep getting `Error converting to JSON`. I was wondering if anyone has used this: https://github.com/1rgs/jsonformer before?\n\nWondering if it's a viable option to use with LlamaIndex?\nLogan M:\nSeems like you could use it in a CustomLLM() class maybe? Or even a custom output parser? Not sure exactly, but it feels possible\n\nNot sure if it integrates easily with OpenAI models though or not \ud83e\udd14 All the examples use local models\npaulo:\nAh I see, thank you! Do you have any other suggestions to ensure I get a complete JSON object or just do a retry?\nLogan M:\nhmmm. You could kind of take inspiration from their approach. Ask the model to generate the items you need (one on each line or something?), and then insert that into a json object yourself\npaulo:\nFound out that it oftentimes produces the correct JSON but it keeps printing this as part of the response: `The new context does not provide any additional information, so the original answer remains the same.` so it messes it up when I try loading the response into a JSON file. Do you know how to remove this additional commentary it keeps returning?", "start_char_idx": 0, "end_char_idx": 1191, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cad9a028-21dc-487c-8b39-b6a0b40b5fa0": {"__data__": {"id_": "cad9a028-21dc-487c-8b39-b6a0b40b5fa0", "embedding": null, "metadata": {"date": "2023-05-08T23:08:17.21+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105269976035770408", "node_type": "4", "metadata": {"date": "2023-05-08T23:08:17.21+00:00"}, "hash": "1cd43e59f85dfb869e3f90de1083edf3d5f296607f61236a02d1e7bebeda3ebd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b26621bc-1b13-4215-bc6b-9f00516fbd87", "node_type": "1", "metadata": {"date": "2023-05-08T22:30:14.777+00:00"}, "hash": "d14731f882242ce63f03920e6eb014a974819e457094834bbac413f97abfac63", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4164ae8b-ad6d-4bbd-ace2-fdbfd8b5dec1", "node_type": "1", "metadata": {}, "hash": "54cef04783dea7b42068840af1fb912f378b26f7e8242952d9f9f477d8d98d93", "class_name": "RelatedNodeInfo"}}, "text": "malik_J:\n@Logan M sorry for bothering you.\nCould you let me know how to see the datas from ChromaDB collection?\nLogan M:\nNot totally sure either, I havent used chroma lol. I'm assuming they have an API for inspecting your DB?\nmalik_J:\nOh.. Can I see the ChromaDB like mongodb or mysql? I can see that only library on python backend.", "start_char_idx": 0, "end_char_idx": 332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4164ae8b-ad6d-4bbd-ace2-fdbfd8b5dec1": {"__data__": {"id_": "4164ae8b-ad6d-4bbd-ace2-fdbfd8b5dec1", "embedding": null, "metadata": {"date": "2023-05-09T07:44:21.515+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105399849744089218", "node_type": "4", "metadata": {"date": "2023-05-09T07:44:21.515+00:00"}, "hash": "b733bae97617dde76cae73a6ffd5944682ec077e208088d7f09d72d0794cd28a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cad9a028-21dc-487c-8b39-b6a0b40b5fa0", "node_type": "1", "metadata": {"date": "2023-05-08T23:08:17.21+00:00"}, "hash": "6204404cce840c80d8b2011ea7c140b633e711e8bc60a6f87ef28867bbd359b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38bbc07e-7502-4fd0-8edd-d12c5f042337", "node_type": "1", "metadata": {}, "hash": "25c46ffdc19c8601bb31414733b6e365bbeaac7eea71f6144b08dc549da4fbf7", "class_name": "RelatedNodeInfo"}}, "text": "amerikanist:\nHi folks, most of the quick tools I have built this week stopped working after the update, and I am trying to backtrack to understand what is causing the issues. Looks like something has changed in GPTSimpleVectorIndex as most of errors that I am logging are around it.\n\nEven when testing the simplest local file indexing (https://llamahub.ai/l/file) there is an ImportError: cannot import name 'GPTSimpleVectorIndex' from 'llama_index' \n\nAppartently from llama_index import GPTSimpleVectorIndex no longer works.\nAny simple fixes for me to debug this?\n\nAlso started getting an error from the screenshot. Not sure if I need to worry about it.\nFairlyAverage:\nI think you'll need to use something like this : from llama_index.vector_stores import GPTSimpleVectorIndex", "start_char_idx": 0, "end_char_idx": 777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38bbc07e-7502-4fd0-8edd-d12c5f042337": {"__data__": {"id_": "38bbc07e-7502-4fd0-8edd-d12c5f042337", "embedding": null, "metadata": {"date": "2023-05-09T09:53:50.637+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105432435803557960", "node_type": "4", "metadata": {"date": "2023-05-09T09:53:50.637+00:00"}, "hash": "5ff7c4c22d05d9f9c91d628b130b3a2aa88d41b7eae0c5b607a16d60728f17c7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4164ae8b-ad6d-4bbd-ace2-fdbfd8b5dec1", "node_type": "1", "metadata": {"date": "2023-05-09T07:44:21.515+00:00"}, "hash": "d0b1c6715bc02d00c413907d0f211fc38b107733a7eb17b8827fd7ddfafd14d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd3ea68a-4289-4e8b-8cff-ff65857af714", "node_type": "1", "metadata": {}, "hash": "b83bfba11703f7522d3de058d81fb1119d817c767fe4fc18a59c22d36ce2b328", "class_name": "RelatedNodeInfo"}}, "text": "Herbie:\nDoes anyone know how to customise the prompt when using `create_llama_chat_agent`?\nmaxfrank:\nyou can pass in values into the `agent_kwargs`. You can pass in prefix, suffix and format_instructions. I would suggest leaving the format_instructions template / only modifying slightly - as changes in there can cause breaks", "start_char_idx": 0, "end_char_idx": 326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd3ea68a-4289-4e8b-8cff-ff65857af714": {"__data__": {"id_": "cd3ea68a-4289-4e8b-8cff-ff65857af714", "embedding": null, "metadata": {"date": "2023-05-09T11:22:54.464+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105454849438523392", "node_type": "4", "metadata": {"date": "2023-05-09T11:22:54.464+00:00"}, "hash": "62e61551f1eb25c13bf56006f4c3f7ad9ec160ec5ecf55a47e1c2f4ac8c3f7f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38bbc07e-7502-4fd0-8edd-d12c5f042337", "node_type": "1", "metadata": {"date": "2023-05-09T09:53:50.637+00:00"}, "hash": "2eb1f1ec5ac23bb20d373b538f61dda3a15d3ca9acc00ee1d8c7c98cc13739da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2811c243-282b-4ed2-9560-85ae86d6fdd8", "node_type": "1", "metadata": {}, "hash": "e38e437a0ac4190ae49d43fd7b3df2cb431714a8e7a8ebbff98e913d2845111a", "class_name": "RelatedNodeInfo"}}, "text": "agog:\nI'm trying to build a sales chatbot for my company and I would like to restrict the LlamaIndex output to local data (as far as possible).\nAny ideas on how to do this?\nHerbie:\nWe're trying to do something similar using custom prompts.   I'm not sure if there is a better way.\n\n```\n    \"You are a customer support agent for Foo.\\n\"\n    \"You will be given some information about how to use a Foo and a question about Foo.\\n\"\n    \"The information will be delimited by the <c> tags and the question will be delimited by <q> tags.\\n\"\n    \"<c>\\n\"\n    \"{context_str}\"\n    \"<c>\\n\"\n    \"<q>\\n\"\n    \"{query_str}\\n\"\n    \"<q>\\n\"\n    \"Using *only* the provided information answer the question.\\n\"\n```", "start_char_idx": 0, "end_char_idx": 692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2811c243-282b-4ed2-9560-85ae86d6fdd8": {"__data__": {"id_": "2811c243-282b-4ed2-9560-85ae86d6fdd8", "embedding": null, "metadata": {"date": "2023-05-09T14:35:16.828+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105503261622022175", "node_type": "4", "metadata": {"date": "2023-05-09T14:35:16.828+00:00"}, "hash": "9432781ea0f31bd01cc124a7fba8e841e0f0a2502a61976e24e313bdb8ef599f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd3ea68a-4289-4e8b-8cff-ff65857af714", "node_type": "1", "metadata": {"date": "2023-05-09T11:22:54.464+00:00"}, "hash": "65b7d8be481d7c911da19d3004b2406bac77887ade6c94b39392f4e70c457fd7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b11f930-4d8d-4828-9eb9-8ae8ce113909", "node_type": "1", "metadata": {}, "hash": "4d22f456ee4a89e39a5d62389d9d5d7b7ee847acaa01ab54464383ebca2db1a8", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nIs there a bug in the logic of this prompt or am I missing something? the flow is not very clear and it seems like the question \"Who was the winner of the 2020 Australian Open\" appears both as \"Question\" and as \"New question\" right after\n\nhttps://github.com/jerryjliu/llama_index/blob/c0029e529ed6e05388f4c3bb6318b431c25a19b6/llama_index/indices/query/query_transform/prompts.py#L124\nyoelk:\nMaybe I missed something so I guess it's better @jerryjliu98 will take a look here \u261d\ufe0f", "start_char_idx": 0, "end_char_idx": 483, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b11f930-4d8d-4828-9eb9-8ae8ce113909": {"__data__": {"id_": "4b11f930-4d8d-4828-9eb9-8ae8ce113909", "embedding": null, "metadata": {"date": "2023-05-09T14:40:13.583+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105504506302701588", "node_type": "4", "metadata": {"date": "2023-05-09T14:40:13.583+00:00"}, "hash": "29fe513ab707cec849a96a387842cb215a2a28eb045ba2ab7f7ce63754a65bfb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2811c243-282b-4ed2-9560-85ae86d6fdd8", "node_type": "1", "metadata": {"date": "2023-05-09T14:35:16.828+00:00"}, "hash": "766be9dc6e49ebaad4b276fca87a7eea1c8041f3cc55acea57a57f6314c78539", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "065f559c-fec9-492e-84fe-656c714df579", "node_type": "1", "metadata": {}, "hash": "b56e4ebf8cd9e6777aa8de3a9cf14774aaec0fbd83995fa5d598cd21aafe1bd3", "class_name": "RelatedNodeInfo"}}, "text": "yoelk:\nDue to this prompt, the first query is repeated twice for no reason. It seems to me like a bug.\nLogan M:\nI'm not totally sure.. I don't entirely understand the prompt/flow either haha\n\nBut if you think changing it improves performance, definitely make a pr! \ud83d\ude4f", "start_char_idx": 0, "end_char_idx": 266, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "065f559c-fec9-492e-84fe-656c714df579": {"__data__": {"id_": "065f559c-fec9-492e-84fe-656c714df579", "embedding": null, "metadata": {"date": "2023-05-09T16:44:20.14+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105535739426512896", "node_type": "4", "metadata": {"date": "2023-05-09T16:44:20.14+00:00"}, "hash": "9e2828f64e01bddcaee71a96190b50c9ff1fbe765c70a3c62b33035aec6178b8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b11f930-4d8d-4828-9eb9-8ae8ce113909", "node_type": "1", "metadata": {"date": "2023-05-09T14:40:13.583+00:00"}, "hash": "d7cb3206db68c391efd0b413ce6d3369b5cc25ea2a69fbaa692c0e151cd929a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b8b8793-99e7-40b0-91a8-702716523183", "node_type": "1", "metadata": {}, "hash": "d2ab439c142cbcaf6ebc0647140a7456eb8b5585e2da4addb4100148c2f63c3b", "class_name": "RelatedNodeInfo"}}, "text": "cmishra:\nMy `DocumentSummaryIndex` 's summaries get cut off around the ~1200 character mark. I'm summarizing fairly long / complex medical documents, so longer summaries are preferred - how can I increase the output maximum? \n\nPoked around the documentation and haven't really found anything. I know i'm not hitting the context cap of the LLM i'm using - I'm around ~2k-3k tokens consumed for each of these summarization calls and the cap is >4k.\ncmishra:\nJk - just found it \ud83e\udd26\u200d\u2642\ufe0f I thought PromptLayer's `num_output` enabled *multiple*, independent responses but i see based on usage it maps to \"number of output tokens\"\nLogan M:\nYou'll also want to make sure you set the max_tokens of the LLM to be the same as num output\n\nCheck out this page \nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_llms.html#example-fine-grained-control-over-all-parameters\n\nJust be careful about setting it too high. The longer it is, the less room there is for the context/source documents\n\nThe input and output of these models is connected\nMilkman:\nA follow-up question: What does it mean that there will be less room for context/source documents? Does it mean it will use more of the llm logic than the context from the documents if the output tokens is set too high?\nLogan M:\nSo, the key thing with decoder models like GPT, is that the input and output are connected.\n\nThe max input size is 4096 for most openai models\n\nThe model generates one token at a time, adds it to the input sequence, and then generates the next\n\nSo the prompt sent to openai needs to have room to generate num_output tokens (which is what llama index tries its best to do)\ncmishra:\nwhat do you mean \"max input size is 40% for most models\"? i.e. context + prompt can't be more than 40% of the total tokens a model supports?", "start_char_idx": 0, "end_char_idx": 1803, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b8b8793-99e7-40b0-91a8-702716523183": {"__data__": {"id_": "8b8b8793-99e7-40b0-91a8-702716523183", "embedding": null, "metadata": {"date": "2023-05-09T22:01:25.783+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105615538757050471", "node_type": "4", "metadata": {"date": "2023-05-09T22:01:25.783+00:00"}, "hash": "ebb91615f51c2e2ce2d2ce78ecd2501e3cca8e9174ee1641ec376b5e5f83a38b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "065f559c-fec9-492e-84fe-656c714df579", "node_type": "1", "metadata": {"date": "2023-05-09T16:44:20.14+00:00"}, "hash": "7842139a241fd56b4bddb05acde594a9ad56e93f6802b43fdfaa6b8a6729f761", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4eb5f821-4baa-4ff2-a457-a13d637f4f80", "node_type": "1", "metadata": {}, "hash": "8aac8f20f4aa5380f4f20d81c92b89bc010fd9fe63c7d0969ab4308ae230afba", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nDoes someone know the most up to date import for chat models (for streaming response)\nLogan M:\nstreaming currently doesn't work for openai chat models (we are working on this though)\nTeemu:\nAh alright, no worries. I was wondering since none of the imports seemed to work \ud83d\ude05", "start_char_idx": 0, "end_char_idx": 279, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4eb5f821-4baa-4ff2-a457-a13d637f4f80": {"__data__": {"id_": "4eb5f821-4baa-4ff2-a457-a13d637f4f80", "embedding": null, "metadata": {"date": "2023-05-09T22:09:03.498+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105617458552918126", "node_type": "4", "metadata": {"date": "2023-05-09T22:09:03.498+00:00"}, "hash": "8b6cf68b22bb8b2a607d8b5ba7e2654134324b7ca67f30f07d364392c1045fc8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b8b8793-99e7-40b0-91a8-702716523183", "node_type": "1", "metadata": {"date": "2023-05-09T22:01:25.783+00:00"}, "hash": "69a5af81a2dcb60d284f506d49b13680fda30eb86789cecf5a9e8ce476c97bf1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "930a3709-60b4-4e69-8908-a6b48a097ae4", "node_type": "1", "metadata": {}, "hash": "a6655d10cef7cef13972cca8be7d01e72491f2f0de21f50991d4910b21cdc5a2", "class_name": "RelatedNodeInfo"}}, "text": "Han Liu:\nHi @Logan M \nI hope you are well. I have a quick question that I want to verify with you. \n\nLet's say I have a GPTPineconeIndex ComposableGraph made of 10 ListIndex documents, each document is hundreds of pages long. \nWhen I run graph.query(\"my question here...\"), is it true that llama-index first encodes my question, then compare that to the encodings of the 10 index_summaries, then if there is a close match, only then will llama-index \"read\" further into the selected ListIndex document? \nYour opinion is much appreciated.\nLogan M:\nYea that sounds right. \n\nI think by default it will pick the top 2. You can configure this with the similarity_top_k argument though in the as_query_engine call", "start_char_idx": 0, "end_char_idx": 707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "930a3709-60b4-4e69-8908-a6b48a097ae4": {"__data__": {"id_": "930a3709-60b4-4e69-8908-a6b48a097ae4", "embedding": null, "metadata": {"date": "2023-05-09T23:04:33.731+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105631426562506812", "node_type": "4", "metadata": {"date": "2023-05-09T23:04:33.731+00:00"}, "hash": "0a1a33c68727913d9667a1bc68803fa0818b650b579b10741a60cdf43dcbb7ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4eb5f821-4baa-4ff2-a457-a13d637f4f80", "node_type": "1", "metadata": {"date": "2023-05-09T22:09:03.498+00:00"}, "hash": "e927cda4030f19e4d0bcd7543bb0bf0149ce94bbe503c608e24bcdb34c4e9046", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dda49d32-f1a4-4faa-a549-be3e7212099a", "node_type": "1", "metadata": {}, "hash": "f9f6148651add832c639786c61377f6f6a0587397460f4b5dd06ddc96dd4d78d", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nDoes `QASummaryGraphBuilder` not exist anymore?\nLogan M:\nI think it does. Here's the notebook  https://gpt-index.readthedocs.io/en/latest/examples/query_engine/JointQASummary.html", "start_char_idx": 0, "end_char_idx": 186, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dda49d32-f1a4-4faa-a549-be3e7212099a": {"__data__": {"id_": "dda49d32-f1a4-4faa-a549-be3e7212099a", "embedding": null, "metadata": {"date": "2023-05-10T03:33:51.942+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105699199011532831", "node_type": "4", "metadata": {"date": "2023-05-10T03:33:51.942+00:00"}, "hash": "7963068a14edd037a4c02e1ff47c6f5d7520d18a1017f080b6c26591667c7e53", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "930a3709-60b4-4e69-8908-a6b48a097ae4", "node_type": "1", "metadata": {"date": "2023-05-09T23:04:33.731+00:00"}, "hash": "29a7161f402230e411849e7e5a15932840dd97793e8b53455173e20b635984fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3a39c3ea-3d42-4aeb-a2d1-72d14d85be54", "node_type": "1", "metadata": {}, "hash": "f9627409df2f7db026c38835920a1ac48e879d0c7ae29ebf0cabe2a617c6de94", "class_name": "RelatedNodeInfo"}}, "text": "shere:\n@Logan M is it possible to add a document to the DocumentSummaryIndex? currently i'm loading the storage_context from the persist folder, then adding the node to the index, then saving the storage context to the persist folder. however the summary embedding don't seem to be added as well.\n                summary_index = load_index_from_storage(storage_context=storage_context, service_context=service_context, index_id=\"Summary Index\", verbose=True)\n                storage_context.docstore.add_documents(nodes)\n                response_synthesizer = ResponseSynthesizer.from_args(response_mode=\"tree_summarize\", use_async=True)\n                summary_index = DocumentSummaryIndex.from_documents(\n                    nodes,\n                    storage_context=storage_context,\n                    service_context=service_context,\n                    response_synthesizer=response_synthesizer\n                )\nLogan M:\nI think the proper way to insert nodes into an existing index is to use the insert_nodes functions\n`index.insert_nodes(nodes)`\nshere:\nbut then how do i persist the storage context? since index save to disk has been deprecated\nLogan M:\nI thiiiink you can load the index from storage (as you are doing), call `insert_nodes()`, and then call persist again to write to disk\n`index.storage_context.persist(persist_dir=...)`", "start_char_idx": 0, "end_char_idx": 1347, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3a39c3ea-3d42-4aeb-a2d1-72d14d85be54": {"__data__": {"id_": "3a39c3ea-3d42-4aeb-a2d1-72d14d85be54", "embedding": null, "metadata": {"date": "2023-05-10T06:31:34.872+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105743922581491765", "node_type": "4", "metadata": {"date": "2023-05-10T06:31:34.872+00:00"}, "hash": "4d6c44f22f9659a48d77ce8711fb37bd4f2ddfc9bb738200ec140588533b244a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dda49d32-f1a4-4faa-a549-be3e7212099a", "node_type": "1", "metadata": {"date": "2023-05-10T03:33:51.942+00:00"}, "hash": "5d0971bbe953eb8ecca71d4fbac376255d3ba203f82f2d9e3ccc43872cf14db3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9714f9f-79a1-4c1d-b4dd-6f26ca085812", "node_type": "1", "metadata": {}, "hash": "e8de0c5e4655b69addd8f0e330823f087cdc54076b0a1d935d31ed3bc0a9427c", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI'm trying to query a composable graph like this:\n\n```\nresponse = graph.query(\n    query_str=query_str, \n    query_configs=query_configs, \n    service_context=service_context_chatgpt\n)\n```\n\nBut keep getting this error: \n```\n   response = graph.query(\n               ^^^^^^^^^^^^\nTypeError: BaseQueryEngine.query() got an unexpected keyword argument 'query_str'\n```\nDoes anyone know how to solve this?\nmaxfrank:\ndoes this not work if you just the query string in as an unnamed param?\n\n```\nresponse = graph.query(\n    query_str, \n    query_configs=query_configs, \n    service_context=service_context_chatgpt\n)\n```\npaulo:\nI tried that and it throws the same error for `query_configs` and `service_context`. If I just pass in all the params directly then it throws `TypeError: BaseQueryEngine.query() takes 2 positional arguments but 4 were given`", "start_char_idx": 0, "end_char_idx": 850, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9714f9f-79a1-4c1d-b4dd-6f26ca085812": {"__data__": {"id_": "e9714f9f-79a1-4c1d-b4dd-6f26ca085812", "embedding": null, "metadata": {"date": "2023-05-10T10:13:26.62+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105799756099375135", "node_type": "4", "metadata": {"date": "2023-05-10T10:13:26.62+00:00"}, "hash": "c4d45936e0ab96a633436e82f757b38ec33773fa17703fe99443805ff2f672aa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3a39c3ea-3d42-4aeb-a2d1-72d14d85be54", "node_type": "1", "metadata": {"date": "2023-05-10T06:31:34.872+00:00"}, "hash": "7cddff485b9e9222088997b84022b29b04f83accdee33f2171826b4ded4d1f37", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d2f529fc-f5f4-4f58-95bc-f41bad3f6f6f", "node_type": "1", "metadata": {}, "hash": "eea61cf580e7eaa02efc56d74c5141b60deacaa240cd83d463529fa452c6a67f", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nHi team - I was using the attached code for #\ud83d\udccaenterprise-use-cases (internal doc retrieval for my company). \n\nThis now no longer works. I get: `AttributeError: 'ListIndex' object has no attribute 'query'`\n\nDo I need to change to? \n\n> `query_engine = index.as_query_engine()\n>   query_str = message['text']\n>   response = index.query_engine.query(query_str, text_qa_template=QA_PROMPT, mode=\"embedding\", response_mode=\"default\")\n>   message = str(response)`\n\n& will I get same quality of response? \n\nGrateful for help as need to update this...\nthomoliver:\nHi @Logan M \n\nAm updating my code based on docs and am currently at the screenshot. \n\nRn I am getting an error saying that the 'default' mode is unknown - `ValueError: Unknown mode: default`\n\nI wonder wyt and if the rest of my code should be doing what it did before, which is: \n- list index (embedding mode, default response mode)\n- custom prompt", "start_char_idx": 0, "end_char_idx": 914, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d2f529fc-f5f4-4f58-95bc-f41bad3f6f6f": {"__data__": {"id_": "d2f529fc-f5f4-4f58-95bc-f41bad3f6f6f", "embedding": null, "metadata": {"date": "2023-05-10T11:30:08.151+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1105819056319250553", "node_type": "4", "metadata": {"date": "2023-05-10T11:30:08.151+00:00"}, "hash": "b7d72fe5a7fc4bc34a7ee8d3f6a852e2f4703b3da195b95087be4a098121a489", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9714f9f-79a1-4c1d-b4dd-6f26ca085812", "node_type": "1", "metadata": {"date": "2023-05-10T10:13:26.62+00:00"}, "hash": "39e324591a3892aae8ddc98db14b73a09e1dafd9fcd124480a9a72156206c84f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5919190a-2842-4eec-b540-81f904ba0fa5", "node_type": "1", "metadata": {}, "hash": "9be487d4994e5f1b2ba7742cf824bf9c7fbb9ab775af0f0828ab5bb0334edaa6", "class_name": "RelatedNodeInfo"}}, "text": "ayushbhadoriya:\nCan Anyone help me, please? I am working on a project, where I have too many movie's description, including movie name, type of movie(romantic, horror etc) description etc. I have all this data in form of text. I have too many text files each movies.\n\nNow, the thing I want to perform here is:\n\n1. Split this data using textSplitter.\n\n2. Store in pineconeStore with openai gpt-3.5 embedding.\n\n3. Now, for example when user ask for: \"show me list of romantic movies\" then, provide him list of romantic movies.\n\nIssue: Because of there is no relationship between the split documents, and having movie type and movie name in different documents,  I get the result that there is a romantic movie, \"but as the name is in different document, I am not able to get the name of the movie.\"\n\nCan you please help me out regarding this?\nPriyankTRajai:\nHey im having similar kind of issue.", "start_char_idx": 0, "end_char_idx": 892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5919190a-2842-4eec-b540-81f904ba0fa5": {"__data__": {"id_": "5919190a-2842-4eec-b540-81f904ba0fa5", "embedding": null, "metadata": {"date": "2023-05-11T08:24:55.085+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106134832607678495", "node_type": "4", "metadata": {"date": "2023-05-11T08:24:55.085+00:00"}, "hash": "4a51722e526201e2333f69cc0280001f82d1ff7a45ef56cce1bc2aebb3483088", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d2f529fc-f5f4-4f58-95bc-f41bad3f6f6f", "node_type": "1", "metadata": {"date": "2023-05-10T11:30:08.151+00:00"}, "hash": "55dcfbb8f2432f474539925c6a069c67924b642b02e290044a035181e855f66c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ae0c0e3-99e9-41e2-84f1-e04b05fd8525", "node_type": "1", "metadata": {}, "hash": "6b055da80b47da207b98c8a710b5bc824758af6e6b19832551d4fe7adc1f0464", "class_name": "RelatedNodeInfo"}}, "text": "jamesbriggs:\nhey, very new to llama-index, when creating an index it seems to take a very long time to build \u2014 almost as if the embedding + indexing process is being performed in batches of 1, am I missing something that can speed it up? Thanks!\nLevan Begashvili:\nthe default batch size is 10.\njamesbriggs:\nany idea where I can set batch size?", "start_char_idx": 0, "end_char_idx": 343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ae0c0e3-99e9-41e2-84f1-e04b05fd8525": {"__data__": {"id_": "6ae0c0e3-99e9-41e2-84f1-e04b05fd8525", "embedding": null, "metadata": {"date": "2023-05-11T08:59:29.287+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106143532441423914", "node_type": "4", "metadata": {"date": "2023-05-11T08:59:29.287+00:00"}, "hash": "7a4c55009852aba1ea8e759abc9c66bf0c725ae6552dee5407305dfce7c3ea8c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5919190a-2842-4eec-b540-81f904ba0fa5", "node_type": "1", "metadata": {"date": "2023-05-11T08:24:55.085+00:00"}, "hash": "7b77b7a30b00d62ffde6efca2b2565d8a03416ca990bee8fb066d9b4983b4280", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8695719-68e5-41a8-9912-b2faf04dfa62", "node_type": "1", "metadata": {}, "hash": "bb90d6dd623187d571fe8b6cb105158b3dfc30fda37025102517ea35de7e28a4", "class_name": "RelatedNodeInfo"}}, "text": "Vaylonn:\nHey, i'm a big beginner in AI (that's my first project). I would have like to know some answers on my code that I encounter.\nI want to implement something that take info in my files using local LLMs like vicuna or alpaca, instead of open AI\n\nI know that the format of the code should look like that:\nfor exemple with PDFs:\n\n- libraries\nfrom llama_index import VectorStoreIndex, LLMPredictor, download_loader\nfrom pathlib import Path\nfrom llama_index import download_loader\n\n**-connexion to LLM (open AI or customs) (dont know how to do this part cause i cant find any exemple, everything is different)**\n\nthen\n\n- \"plugins\" from llamahub.ai to give access to documents\nPDF_NAME = '...'\n\nfile = requests.get('web_adress_to_pdf'.format(PDF_NAME), stream=True)\nwith open(PDF_NAME, 'wb') as location:\n    shutil.copyfileobj(file.raw, location)\nPDFReader = download_loader(\"PDFReader\")\n\nloader = PDFReader()\ndocuments = loader.load_data(file=Path('./article.pdf'))\nindex = VectorStoreIndex(documents, llm_predictor=llm_predictor)\n\n- prompt + answers\nresponse = index.query(\"prompt\")\nprint(response)\n\n\nIf you know how to solve this, i would like to know ! \ud83d\ude42\nVaylonn:\nor i just didnt understand the part in https://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_llms.html wich shows how to switch models from OpenAI and huggingface but not how to use smth from llms in local. I might don't understand the topic and how it works at all too. Feel free to explain me all of this if you have the time to do so : ))", "start_char_idx": 0, "end_char_idx": 1527, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8695719-68e5-41a8-9912-b2faf04dfa62": {"__data__": {"id_": "e8695719-68e5-41a8-9912-b2faf04dfa62", "embedding": null, "metadata": {"date": "2023-05-11T13:57:35.073+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106218550865166356", "node_type": "4", "metadata": {"date": "2023-05-11T13:57:35.073+00:00"}, "hash": "e629465be8cc7e982b6cb5467b392f38f3f98d056874acda4cd6f2d0e267717b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ae0c0e3-99e9-41e2-84f1-e04b05fd8525", "node_type": "1", "metadata": {"date": "2023-05-11T08:59:29.287+00:00"}, "hash": "d8212b6b1651633557b1da1918bcf79379428a6d49dfc1b3c24b3c245bab02a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66ce25ef-a846-42fa-bc26-98ee2bb5f50d", "node_type": "1", "metadata": {}, "hash": "47210709ed7962cfe1fdee5d14253ec979af78038a8f60bf28e4a38a93f53397", "class_name": "RelatedNodeInfo"}}, "text": "lucasastorian:\nHey,\n\nIt's not clear to me how LlamaIndex scales beyond 1000 documents in a deployment setting (say 100 pages each), as I currently always have to load all documents into memory, even when I'm using an external VectorStore. Why can't LlamaIndex interact with that external vector store directly, instead of using it to load data?\nAbhishek22:\nYou can use similarity_top_k to avoid loading all documents", "start_char_idx": 0, "end_char_idx": 416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66ce25ef-a846-42fa-bc26-98ee2bb5f50d": {"__data__": {"id_": "66ce25ef-a846-42fa-bc26-98ee2bb5f50d", "embedding": null, "metadata": {"date": "2023-05-11T14:02:58.891+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106219909056311316", "node_type": "4", "metadata": {"date": "2023-05-11T14:02:58.891+00:00"}, "hash": "76145815cca5e073b53fae4d376411d851ae39c7586ca890242f5021be6b590d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8695719-68e5-41a8-9912-b2faf04dfa62", "node_type": "1", "metadata": {"date": "2023-05-11T13:57:35.073+00:00"}, "hash": "aac6de7f96a4ae0a08b530b4dc19b0046b54e33291ae6403af207524c0166115", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fc0aa82-0e41-4919-b096-eaeac7d3af69", "node_type": "1", "metadata": {}, "hash": "a09cb4e7cbd1b4ee9cf464e1b7ad6a35b2860199941c4cf17d48ae44fe671390", "class_name": "RelatedNodeInfo"}}, "text": "lucasastorian:\nIt would still be slow in a chat setting, since you'd have to query the vector database first, then create an index with the documents, and then query it again to narrow it down?\nLogan M:\nThe index is already created by the time you run the first query (all the data is already living on the external vector db), so I don't think it's that slow.\n\nThen your query returns the top k from the vector database directly", "start_char_idx": 0, "end_char_idx": 429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fc0aa82-0e41-4919-b096-eaeac7d3af69": {"__data__": {"id_": "2fc0aa82-0e41-4919-b096-eaeac7d3af69", "embedding": null, "metadata": {"date": "2023-05-11T14:11:48.917+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106222132146470962", "node_type": "4", "metadata": {"date": "2023-05-11T14:11:48.917+00:00"}, "hash": "bac0969da77e474f5e6ba8f22def9f0488444c3fbbf8634bb112e1daef00d64c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66ce25ef-a846-42fa-bc26-98ee2bb5f50d", "node_type": "1", "metadata": {"date": "2023-05-11T14:02:58.891+00:00"}, "hash": "62fd14633e9c56e711dee46e3abef4db92bab30b15fa8c28b59a2051e98f261e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ba55da0-5a00-4e22-9291-208e6c6c7f9e", "node_type": "1", "metadata": {}, "hash": "77cdad7197f64ef2ca8bc6a1b41854019b4038a6dba5af4365f3dee8fd599572", "class_name": "RelatedNodeInfo"}}, "text": "nablaux:\nThis is similar to my problem. I do not want to create an index for every time I do a query. Documents already stored in vector store along with the embeddings and the index is also stores in a MongoIndexStore. The problem is starting up with all empty (a hack would be to create a document and then delete it) and then adding documents to it on need without \"forgetting\" the previously added docs.\nLogan M:\nOnce you create an index using a vector store integration, you can just connect back to it with the vector store + an \"empty\" index. No need to reconstruct anything, it should just work\n\nFor example, if I already setup a pinecone index with llama index, I can \"load\" it again, something like this I think\n\n```\nindex = pinecone.Index(\"quickstart\")\n\n# can define filters specific to this vector index (so you can\n# reuse pinecone indexes)\nmetadata_filters = {\"title\": \"paul_graham_essay\"}\n\n# construct vector store\nvector_store = PineconeVectorStore(\n    pinecone_index=index,\n    metadata_filters=metadata_filters\n)\n\nindex = VectorStoreIndex([], storage_context=StorageContext.from_defaults(vector_store=vector_store))\n```", "start_char_idx": 0, "end_char_idx": 1138, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ba55da0-5a00-4e22-9291-208e6c6c7f9e": {"__data__": {"id_": "8ba55da0-5a00-4e22-9291-208e6c6c7f9e", "embedding": null, "metadata": {"date": "2023-05-11T17:38:12.926+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106274074444976259", "node_type": "4", "metadata": {"date": "2023-05-11T17:38:12.926+00:00"}, "hash": "5a33d40b9e7d1ac8790ed30ecf68450736eed0820cf44acc282d95a7bb81c264", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fc0aa82-0e41-4919-b096-eaeac7d3af69", "node_type": "1", "metadata": {"date": "2023-05-11T14:11:48.917+00:00"}, "hash": "1e551b7e0595d6d49dddc02927608bc8ad036ae41eb4eb790537a70eee81bd3a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49042ee4-531f-415a-b969-42e2f09a1699", "node_type": "1", "metadata": {}, "hash": "8331dcfbcfb8835a6a813724b390cdb99f62327634ad62787a553e03fbfed204", "class_name": "RelatedNodeInfo"}}, "text": "fblissjr:\nHi - anyone had success with StableLM / local LLMs in the latest release? I'm getting openai API key errors using the example notebook, and once supplying the openai key, it starts using OpenAI to do the embeddings instead of the huggingface pipeline. (this notebook - https://github.com/jerryjliu/llama_index/blob/main/docs/examples/customization/llms/SimpleIndexDemo-Huggingface_stablelm.ipynb)\nLogan M:\nStableLM is only used for generating text, the embeddings still default to text-ada-002 from openai\n\nTry also setting up local embeddings to avoid openai\n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/embeddings.html#custom-embeddings\nfblissjr:\nHappen to have any insight into a model that works well for embeddings? \ud83d\ude42\nLogan M:\nThe default model that loads for the huggingface embeddings in the docs page that i sent usually works well\n\nFor LLMs, vicuna seems to be good (but it's also non-commericial). I like camel for commercial models so far\nnbulkz:\nwhat makes vicuna non commercial?\nLogan M:\nCorrect me if I'm wrong, but it's a) based on llama weights (non-commercial) and b) trained on GPT outputs, which I think is against TOS and c) pretty sure the initial release, the authors stated it was research only to avoid trouble for the above", "start_char_idx": 0, "end_char_idx": 1278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49042ee4-531f-415a-b969-42e2f09a1699": {"__data__": {"id_": "49042ee4-531f-415a-b969-42e2f09a1699", "embedding": null, "metadata": {"date": "2023-05-11T19:40:44.704+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106304910036828170", "node_type": "4", "metadata": {"date": "2023-05-11T19:40:44.704+00:00"}, "hash": "7621c52f9efe8da786997c2e41ce5a881ec5a079d98a5a3aa72e294bf3877250", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ba55da0-5a00-4e22-9291-208e6c6c7f9e", "node_type": "1", "metadata": {"date": "2023-05-11T17:38:12.926+00:00"}, "hash": "c858bce42201b825de707b5534c30d0dcbba454ea34e05ea8cba04b0c4403c8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7bbab62a-da64-489f-9be1-1de0948cc4f1", "node_type": "1", "metadata": {}, "hash": "f36eb2fc83454fecf6283c53456ab09f0bd399c95a2844233110a4799d9f82c0", "class_name": "RelatedNodeInfo"}}, "text": "nbulkz:\nis that a different llama?\nLogan M:\nThat's the same llama, vicuna basically trained on top of it", "start_char_idx": 0, "end_char_idx": 104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bbab62a-da64-489f-9be1-1de0948cc4f1": {"__data__": {"id_": "7bbab62a-da64-489f-9be1-1de0948cc4f1", "embedding": null, "metadata": {"date": "2023-05-11T19:56:54.496+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106308977639301210", "node_type": "4", "metadata": {"date": "2023-05-11T19:56:54.496+00:00"}, "hash": "0e8b21eb6ec7cb5b875ff2de558b77ca2cffcc3751a0de3a8d6bdfebf9bd0aea", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49042ee4-531f-415a-b969-42e2f09a1699", "node_type": "1", "metadata": {"date": "2023-05-11T19:40:44.704+00:00"}, "hash": "5c5cd236eb5155bb28870afb4427c84f43b9c25313d224b70bd4111d88c0c912", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b0822ff-8da2-41d7-a356-4a18302eb164", "node_type": "1", "metadata": {}, "hash": "4edd440a8ce8c3bfb6f01fb2b4fbc21c20df4337e0867fe3450dafe28529a5fc", "class_name": "RelatedNodeInfo"}}, "text": "nbulkz:\nbut the license says GPL right??\nLogan M:\nRight my bad, that's just the inference code. The weights themselves are the non-commercial part\n\nYou have to fill out a form to get access. But then the weights leaked, and everyone went wild for some reason lol", "start_char_idx": 0, "end_char_idx": 262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b0822ff-8da2-41d7-a356-4a18302eb164": {"__data__": {"id_": "8b0822ff-8da2-41d7-a356-4a18302eb164", "embedding": null, "metadata": {"date": "2023-05-11T20:03:11.251+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106310557864312892", "node_type": "4", "metadata": {"date": "2023-05-11T20:03:11.251+00:00"}, "hash": "0e601635e8217644a033efc415c7e6220287f44b1f1ded0315870bdfa20264fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7bbab62a-da64-489f-9be1-1de0948cc4f1", "node_type": "1", "metadata": {"date": "2023-05-11T19:56:54.496+00:00"}, "hash": "ce4d4a7a9759881c27d2985e0ca26c744f38a49ccea4b8044209ab1996c0cbd5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68da0105-ad25-48b6-8975-84983b4346c5", "node_type": "1", "metadata": {}, "hash": "746f66f85b22c9b33056264d45e7cca00186e5654d7092bac3a959fa6682bd50", "class_name": "RelatedNodeInfo"}}, "text": "nbulkz:\nah but there's still the threat of a big-ol-lawsuit I'm guessing?\nLogan M:\nI mean, not that there's a big lawsuit coming or anything. But yea, technically it's a little sketchy. You probably could use these models commercially and be fine. But most established companies will be pretty risk adverse to this kind of thing, and want to avoid risking it.\n\nIn general, I expect a few big legal changes in the coming years regarding AI models. Not sure what will happen lol", "start_char_idx": 0, "end_char_idx": 476, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68da0105-ad25-48b6-8975-84983b4346c5": {"__data__": {"id_": "68da0105-ad25-48b6-8975-84983b4346c5", "embedding": null, "metadata": {"date": "2023-05-12T00:06:37.296+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106371820057284740", "node_type": "4", "metadata": {"date": "2023-05-12T00:06:37.296+00:00"}, "hash": "f76f0fc2194df3e02f3ff868d88bdc9347f5314f449b234e41f23b4d7f91cb00", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b0822ff-8da2-41d7-a356-4a18302eb164", "node_type": "1", "metadata": {"date": "2023-05-11T20:03:11.251+00:00"}, "hash": "d1973aad40fa75339a16d42485844c61d320b3d7f7550de5ce4d55fef5a13889", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef6f5480-9b8e-4a8b-bfe4-9cb0d887e055", "node_type": "1", "metadata": {}, "hash": "c63c777f515e3bd8539dc76dd1251e315b5fa16d5ef4c7798c241e808c2aa3b4", "class_name": "RelatedNodeInfo"}}, "text": "Bothrops:\nHi!  I\u00b4m having a hard time getting my app to \"get into character\"  even though I prompt, \"pretend to be\" it responds \"if i was XX i would\"\nLogan M:\nMaybe instead of \"pretend to be..\", be a bit more assertive \n\n\"Your are X, a person who Y, and your are currently doing Z.\" Something like that\nBothrops:\nThanks i will try that!", "start_char_idx": 0, "end_char_idx": 336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef6f5480-9b8e-4a8b-bfe4-9cb0d887e055": {"__data__": {"id_": "ef6f5480-9b8e-4a8b-bfe4-9cb0d887e055", "embedding": null, "metadata": {"date": "2023-05-12T14:29:22.79+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106588940275830886", "node_type": "4", "metadata": {"date": "2023-05-12T14:29:22.79+00:00"}, "hash": "9862662e20a4945b6dfe070315994d29aa0fb5dfe5f3cd1dee369684169fe23b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68da0105-ad25-48b6-8975-84983b4346c5", "node_type": "1", "metadata": {"date": "2023-05-12T00:06:37.296+00:00"}, "hash": "8858607a401cc99ad5b44ac98e186de82dfa8c6d7cc5164dccd7e6f68cceb00c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "796c2b4c-0a3b-4418-ace4-545cc0fed39d", "node_type": "1", "metadata": {}, "hash": "06fdb8d318628c9e1f7611385001fb9056bc4107a9d4e59b90773770cf5caab5", "class_name": "RelatedNodeInfo"}}, "text": "Vaylonn:\nHey in https://gpt-index.readthedocs.io/en/latest/how_to/customization/custom_llms.html#example-using-a-custom-llm-model-advanced this hyperlink is now linking to a 404 page\nLogan M:\nAh, good catch. You probably want this link\n\nhttps://python.langchain.com/en/latest/modules/models/llms/examples/custom_llm.html", "start_char_idx": 0, "end_char_idx": 320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "796c2b4c-0a3b-4418-ace4-545cc0fed39d": {"__data__": {"id_": "796c2b4c-0a3b-4418-ace4-545cc0fed39d", "embedding": null, "metadata": {"date": "2023-05-13T09:41:34.504+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1106878899700375564", "node_type": "4", "metadata": {"date": "2023-05-13T09:41:34.504+00:00"}, "hash": "22b92536000b98e8b74c57e1574b2d1df11ee465a7e5b28240acfc8d6ddf258a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef6f5480-9b8e-4a8b-bfe4-9cb0d887e055", "node_type": "1", "metadata": {"date": "2023-05-12T14:29:22.79+00:00"}, "hash": "0f530b04f712bb1d90441237cede5c07b4ce74a2691733e344403fd83838de11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a1bb368-bdee-4f43-9eca-6bcb617d1044", "node_type": "1", "metadata": {}, "hash": "e2a72efe29cb33993915ac3dd5273570e88d0a0ef3992c53c0baf0c24d782c7c", "class_name": "RelatedNodeInfo"}}, "text": "discord1739:\n@czlowiek Hey Czlowiek, I was wondering if you figured this out?\nczlowiek:\nGPT-3.5-turbo will not work with code well enough. Im still on GPT-4 waitlist, however approach I want to go is to translate code using GPT to format that will be more understandable by GPT and then perform tasks I wanted.", "start_char_idx": 0, "end_char_idx": 310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a1bb368-bdee-4f43-9eca-6bcb617d1044": {"__data__": {"id_": "6a1bb368-bdee-4f43-9eca-6bcb617d1044", "embedding": null, "metadata": {"date": "2023-05-13T21:48:58.145+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107061954398396416", "node_type": "4", "metadata": {"date": "2023-05-13T21:48:58.145+00:00"}, "hash": "687b9f0271db363873e359afa141c88452a73922e3d20f0c7924d245b3963f21", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "796c2b4c-0a3b-4418-ace4-545cc0fed39d", "node_type": "1", "metadata": {"date": "2023-05-13T09:41:34.504+00:00"}, "hash": "1b1a30478a13aa512090bcb943c0d0c10a1e3f3f2c7249040ea47b53f071e406", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37f58506-2fa2-49fe-b2b4-8639b8e40bb1", "node_type": "1", "metadata": {}, "hash": "82193fb24d23e11990a7bdd85710accff2efb3d05f2d211f4554c71756ca040a", "class_name": "RelatedNodeInfo"}}, "text": "adamfard:\nI'm trying to make the streaming work with Pinecone, but I always get a Response and no Streaming response \ud83e\udd14\n----\n`llm_predictor = LLMPredictor(llm=ChatOpenAI(temperature=0.7, model_name=\"gpt-3.5-turbo\", streaming=True))\n...\ndef construct_pinecone_index(directory_path):\n...\n    pinecone_index = pinecone.Index(index_name)\n    gpt_pinecone_index = VectorStoreIndex.from_documents( documents, pinecone_index=pinecone_index)\n...\nindex = construct_pinecone_index(\"folder\")\nquery_engine = index.as_query_engine(streaming=True, similarity_top_k=1)\nresponse_stream = query_engine.query(\"my question?\")`\nLogan M:\nI see you set up an LLMPredictor, but you never put it in the service context?\n\n```python\nsc = ServiceContext.from_defaults(llm_predictor=llm_predictor, ...)\n\nindex = VectorStoreIndex.from_documents(documents, ...., service_context=sc)\n```\nadamfard:\nI do.\n`service_context = ServiceContext.from_defaults(\n    llm_predictor=llm_predictor\n)\ngpt_pinecone_index = VectorStoreIndex.from_documents(\n        documents, pinecone_index=pinecone_index, service_context=service_context\n    )`\n\nbut I still get:\n`response_stream = query_engine.query(\"...\")\nprint(type(response_stream))\n\n<class 'llama_index.response.schema.Response'>`", "start_char_idx": 0, "end_char_idx": 1238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37f58506-2fa2-49fe-b2b4-8639b8e40bb1": {"__data__": {"id_": "37f58506-2fa2-49fe-b2b4-8639b8e40bb1", "embedding": null, "metadata": {"date": "2023-05-13T22:54:07.189+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107078350117285909", "node_type": "4", "metadata": {"date": "2023-05-13T22:54:07.189+00:00"}, "hash": "a13abe2191c60ff1e8724c1a9ffd6aa4459a62ef62d8f4f0e0a738e561639f52", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a1bb368-bdee-4f43-9eca-6bcb617d1044", "node_type": "1", "metadata": {"date": "2023-05-13T21:48:58.145+00:00"}, "hash": "1d326143e9caee1e0cfb44bf27fa433801594f73a0ad5bcfb8bdb4d1b0d6f6f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7d2cbe69-8ee3-4439-8b38-e2f3f8acef4d", "node_type": "1", "metadata": {}, "hash": "a8c6efa41d02d8b9873c8c6ea589e2f4a1b16a185384175e7f166a1f6a62f710", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nIs there a way to use streaming when you're also displaying source nodes?\nLogan M:\nresponse.response_gen will get the generator \n\nresponse.source_nodes will get the source nodes", "start_char_idx": 0, "end_char_idx": 184, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7d2cbe69-8ee3-4439-8b38-e2f3f8acef4d": {"__data__": {"id_": "7d2cbe69-8ee3-4439-8b38-e2f3f8acef4d", "embedding": null, "metadata": {"date": "2023-05-14T10:50:37.82+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107258665892859954", "node_type": "4", "metadata": {"date": "2023-05-14T10:50:37.82+00:00"}, "hash": "5acda4f3e3b6271f89a3ffc2710bdc37c4bd2ba129b09a4ae2b1503404a2f8ae", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37f58506-2fa2-49fe-b2b4-8639b8e40bb1", "node_type": "1", "metadata": {"date": "2023-05-13T22:54:07.189+00:00"}, "hash": "0cb11b1d60a256af6911b0d19b3f2395703977c3dfd9cf707ac7f51f0b5d3b15", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4ea0ea4-e739-4803-b049-ec7999d07672", "node_type": "1", "metadata": {}, "hash": "a48c7d38db7233d6589c5f34658d70e5910e0203438ee9efd44a8b9705e3fa40", "class_name": "RelatedNodeInfo"}}, "text": "zainab:\nhello is there a way to convert \\n to real new line when using SimpleDirectoryReader\nLogan M:\n\\n is a real new line though? \ud83d\ude05 although certain programs might not respect it since it's a Linux thing.\n\nI think the easiest way to change this is just to just replace the strings in the loaded document objects \n\ndocument = document.text.replace(\"\\n\", \"[thing]\")\n\nOr if its a problem in responses, you can replace it there too", "start_char_idx": 0, "end_char_idx": 429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4ea0ea4-e739-4803-b049-ec7999d07672": {"__data__": {"id_": "c4ea0ea4-e739-4803-b049-ec7999d07672", "embedding": null, "metadata": {"date": "2023-05-14T10:52:36.408+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107259163286970448", "node_type": "4", "metadata": {"date": "2023-05-14T10:52:36.408+00:00"}, "hash": "66c3759a9708bf1fbbfad70e82dddeba0f95b2a72574f213b700ee7a3b4faaf2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d2cbe69-8ee3-4439-8b38-e2f3f8acef4d", "node_type": "1", "metadata": {"date": "2023-05-14T10:50:37.82+00:00"}, "hash": "e7fba66cb8418b619b1a29116f5dd67c8646c1470a0a798fae4a564f694df7ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5359736a-780d-459c-9f7e-236c5272fe5e", "node_type": "1", "metadata": {}, "hash": "0ce8713d28939167574fa719ca1a320d16459f33824beb3e4544a7f4f8ada704", "class_name": "RelatedNodeInfo"}}, "text": "meowk1r1:\nIt's very urgent\nzainab:\ncheck this https://gpt-index.readthedocs.io/en/latest/how_to/evaluation/evaluation.html\nmeowk1r1:\nthank you", "start_char_idx": 0, "end_char_idx": 142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5359736a-780d-459c-9f7e-236c5272fe5e": {"__data__": {"id_": "5359736a-780d-459c-9f7e-236c5272fe5e", "embedding": null, "metadata": {"date": "2023-05-14T14:51:56.485+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107319393815363636", "node_type": "4", "metadata": {"date": "2023-05-14T14:51:56.485+00:00"}, "hash": "9651812c301e2f835f931a88cb30d91f9baef9b51171e5e9ac05786d1915e699", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c4ea0ea4-e739-4803-b049-ec7999d07672", "node_type": "1", "metadata": {"date": "2023-05-14T10:52:36.408+00:00"}, "hash": "b2b4a50b3003ad548164c36448e9989fb615e9d6bcb673577c4cf8f8f093ba6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0fb9748a-a2e7-44ed-be87-a14e0c8e486b", "node_type": "1", "metadata": {}, "hash": "6a0f2867522593f39b6d5b0e1c21eed4a98dec2614001a7b9f0014d8aaac4f2a", "class_name": "RelatedNodeInfo"}}, "text": "meowk1r1:\n?..\nLogan M:\nTry adding to your queries \"respond in russian\" or something similar (maybe also in russian lol). If you are using gpt3.5, you can also try setting a system prompt\n\n```python\nfrom gpt_index.llm_predictor.chatgpt import ChatGPTLLMPredictor\nfrom langchain.prompts.chat import SystemMessagePromptTemplate\n\nsystem_message = SystemMessagePromptTemplate.from_template(\n        \"Write all responses in the Russian language.\"\n    )\n\nllm_predictor = ChatGPTLLMPredictor(prepend_messages=[system_message])\nservice_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\n```", "start_char_idx": 0, "end_char_idx": 598, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fb9748a-a2e7-44ed-be87-a14e0c8e486b": {"__data__": {"id_": "0fb9748a-a2e7-44ed-be87-a14e0c8e486b", "embedding": null, "metadata": {"date": "2023-05-15T04:35:38.001+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107526682677620737", "node_type": "4", "metadata": {"date": "2023-05-15T04:35:38.001+00:00"}, "hash": "5e174e1eb304a65a8d682c507e4d758027a608e2b312adfadd06c7c1145e3761", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5359736a-780d-459c-9f7e-236c5272fe5e", "node_type": "1", "metadata": {"date": "2023-05-14T14:51:56.485+00:00"}, "hash": "b369c20de7c6c3390f3d6acab766f3eb15d7023202538421617305975a101eea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13702891-9350-40ea-b72f-2737971049b0", "node_type": "1", "metadata": {}, "hash": "2223aa443e9acd4e6dabc56e52b90776cb88f68bf9f7abe0111a73d5a6c2df8b", "class_name": "RelatedNodeInfo"}}, "text": "ashishsha:\naah that schema is being used by LLM to format JSON ? The json that LLM is returning seems to be correct\nLogan M:\nI think it's the \"Output: \" in front of the json thats breaking it. I saw a PR to fix this, I wonder if it merged yet", "start_char_idx": 0, "end_char_idx": 242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13702891-9350-40ea-b72f-2737971049b0": {"__data__": {"id_": "13702891-9350-40ea-b72f-2737971049b0", "embedding": null, "metadata": {"date": "2023-05-15T16:25:31.662+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107705333440323584", "node_type": "4", "metadata": {"date": "2023-05-15T16:25:31.662+00:00"}, "hash": "25ca757897079f27fa826de93e618cd9f3b864d7071f1c67991873f12fa894c3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0fb9748a-a2e7-44ed-be87-a14e0c8e486b", "node_type": "1", "metadata": {"date": "2023-05-15T04:35:38.001+00:00"}, "hash": "ffb1c875ea5d7a7e5feb2e98c1de121c171b7881895cc8a29812b762bb191052", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26f840b2-dd60-47d6-bf71-eb9f1a397c44", "node_type": "1", "metadata": {}, "hash": "69cd9620511aeab6554932c6577e8ea6108aedd54669546b4239c08b7e99dd29", "class_name": "RelatedNodeInfo"}}, "text": "2icarus:\nIs there a different function than .get_formatted_sources() for query_engine response that will give me the sources without \"> Source (...\" ?\nLogan M:\nYou can parse the sources manually, just need to iterate over `response.source_nodes` and do what you want with the objects", "start_char_idx": 0, "end_char_idx": 283, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26f840b2-dd60-47d6-bf71-eb9f1a397c44": {"__data__": {"id_": "26f840b2-dd60-47d6-bf71-eb9f1a397c44", "embedding": null, "metadata": {"date": "2023-05-15T18:34:57.982+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107737907747360768", "node_type": "4", "metadata": {"date": "2023-05-15T18:34:57.982+00:00"}, "hash": "e9d5ce6e8906ea868777cb51c17413ed9ef67f60797ba44aec886bf533dec169", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13702891-9350-40ea-b72f-2737971049b0", "node_type": "1", "metadata": {"date": "2023-05-15T16:25:31.662+00:00"}, "hash": "35db5fda23760234dec524676305b12171871e7e1b28b2de31fe323aeec3ef1b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "35ec3e61-e71f-4c7e-b72f-f873da479c0b", "node_type": "1", "metadata": {}, "hash": "9ba47d3dc5adaa8c4e827ad41465bbc364a483e6c6fd3337a37cde4115e14d85", "class_name": "RelatedNodeInfo"}}, "text": "CharlesWave:\nHi, I wonder what is the best index for summarizing document? I feel vector index only puts subset of document to the model, and node index wants to put everything into the LLM, which won't be feasible if the document is too large. I don't quite understand how tree index works and curious whether I should use tree index or document summary index\nDelomen:\nAlso interesting. What type of index is best used for documents (for example docx).", "start_char_idx": 0, "end_char_idx": 453, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "35ec3e61-e71f-4c7e-b72f-f873da479c0b": {"__data__": {"id_": "35ec3e61-e71f-4c7e-b72f-f873da479c0b", "embedding": null, "metadata": {"date": "2023-05-16T07:49:47.823+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107937933438242826", "node_type": "4", "metadata": {"date": "2023-05-16T07:49:47.823+00:00"}, "hash": "64ca82e594faf1da30edf91357cbb81431ea20d1e0fcd467c23c9f868c7036cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26f840b2-dd60-47d6-bf71-eb9f1a397c44", "node_type": "1", "metadata": {"date": "2023-05-15T18:34:57.982+00:00"}, "hash": "7edeb8b9c78d4b5a85c918bd7fee209ef52dea0145d055eac40c451775883f81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83b226e8-4503-4952-a9f6-25c358262fce", "node_type": "1", "metadata": {}, "hash": "c9caaa6c5d5eaeb5dbeadcc6d01252d143977ed3941673e1192a0590fa58caf2", "class_name": "RelatedNodeInfo"}}, "text": "miguelcorrales11:\nDear LLAMAIndex Community,\n\nAs a newcomer in this field, I am seeking your guidance on fine-tuning GPT models with the help of LLAMA Index. Any hints, suggestions, or best practices you can share would be immensely appreciated.\nTeemu:\nI don't think many people here are using fine-tuning for the GPT models since embeddings/good prompting with the chat completion models seems to perform better\nmiguelcorrales11:\nIm trying to do a fine-tuning with a specific database\nTeemu:\nEmbeddings make a lot more sense for handling databases https://gpt-index.readthedocs.io/en/latest/getting_started/starter_example.html\nmiguelcorrales11:\nwhat about if i want to introduce a lot of information regarding a specific science field. Will you expect to perform the same just using the embeddings?\nTeemu:\nIt would perform much better with embeddings\nmiguelcorrales11:\nThanks a lot for taking the time to reply, I really appreciated it \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83b226e8-4503-4952-a9f6-25c358262fce": {"__data__": {"id_": "83b226e8-4503-4952-a9f6-25c358262fce", "embedding": null, "metadata": {"date": "2023-05-16T10:01:04.003+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1107970968531517500", "node_type": "4", "metadata": {"date": "2023-05-16T10:01:04.003+00:00"}, "hash": "7c0e00ac10eb84b3db63eb79fca8ccd94c7b933dd3fe21678d5098f945082cf8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "35ec3e61-e71f-4c7e-b72f-f873da479c0b", "node_type": "1", "metadata": {"date": "2023-05-16T07:49:47.823+00:00"}, "hash": "1ef2cbb06373bd533d3fdd024447f18a331d83b2ba5c8019c34f47ac9de3e8d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e126ffb9-2ec5-4b76-ae3c-a3f74ba098b6", "node_type": "1", "metadata": {}, "hash": "1a79ea57fa9b3e93c5816104b01b5c86e242a43149d43c46a393728a73054bf2", "class_name": "RelatedNodeInfo"}}, "text": "susa:\nHi I'm trying to use Llama Index for insertions and updates to a Weaviate database but I'm having an issue with understanding a few things \nWhen creating the *Document* object, I initialize it with \n`document_object = Document(text  = \"my_text\", doc_id = \"my_doc_id\", extra_info = extra_info) `. I then use `index = VectorStoreIndex.from_documents(all_docs, storage_context=storage_context)` to initially insert the documents into the database \nHowever I'm noticing that the doc_id that I send here is being stored in a `ref_doc_id` property in the Weaviate class, and the `doc_id` property being stored in the class is something that is auto-generated. This is a problem because I can't keep track of which chunks of the document I have inserted. In addition, this also means that I can't control if there are duplicate inserts. Is there any way to override the doc_id that is generated?\nJanis:\nI had the same problem when uploading Nodes to Pinecone. As far I understand, converting `Document` to `Node` can result in an 1:n relationship due to text chunking. In my situation the problem is that `llama_index.node_parser.node_utils.get_nodes_from_document` will not use `Document.doc_id` but auto-generate `Node.doc_id`.  Right now I resolved the problem by overwriting  this function and defining a custom Node-parser enforcing to set `Node.doc_id` equal to `Document.doc_id`. This works because my `Document` is already split and I keep a 1:1 relationship between `Document` and `Node`.", "start_char_idx": 0, "end_char_idx": 1496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e126ffb9-2ec5-4b76-ae3c-a3f74ba098b6": {"__data__": {"id_": "e126ffb9-2ec5-4b76-ae3c-a3f74ba098b6", "embedding": null, "metadata": {"date": "2023-05-16T14:00:24.536+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108031200972521503", "node_type": "4", "metadata": {"date": "2023-05-16T14:00:24.536+00:00"}, "hash": "81596cd4bae2a2aad4d62a0e1d5cc5ca0c4d273af88fd03d21de696a271fae1b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83b226e8-4503-4952-a9f6-25c358262fce", "node_type": "1", "metadata": {"date": "2023-05-16T10:01:04.003+00:00"}, "hash": "965c147618da4fd7dacba66953ede295214eacd8e7ce6c3f275eb1595aa2d9b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "857abb1b-3d52-4ba3-a25c-ceaed389266e", "node_type": "1", "metadata": {}, "hash": "a00f552b25468c682835feefdd7362629e7787037f967f980df4fdc1194dc497", "class_name": "RelatedNodeInfo"}}, "text": "Vaylonn:\nin the colab, the !pip install tensorrt, correspond to the tensorRT 8 ?\nLogan M:\nSeems like it!", "start_char_idx": 0, "end_char_idx": 104, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "857abb1b-3d52-4ba3-a25c-ceaed389266e": {"__data__": {"id_": "857abb1b-3d52-4ba3-a25c-ceaed389266e", "embedding": null, "metadata": {"date": "2023-05-16T15:42:10.468+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108056811107536906", "node_type": "4", "metadata": {"date": "2023-05-16T15:42:10.468+00:00"}, "hash": "810a4d5502874b00059bf1955156776713d0b9fd469e954952712059bbcd6240", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e126ffb9-2ec5-4b76-ae3c-a3f74ba098b6", "node_type": "1", "metadata": {"date": "2023-05-16T14:00:24.536+00:00"}, "hash": "1fc3c9f4b9566795fb7caaa22250c69dd8fa457cd3d5d4909574ae22c6517ff8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "752dd8bf-7a84-403c-84e0-11e3ede0085f", "node_type": "1", "metadata": {}, "hash": "e9363fbd143ce8c0ddf505edf1a3c3c931087321d283506c69a467a356f8ba09", "class_name": "RelatedNodeInfo"}}, "text": "jakusimo:\nTo retrieve one question cost around 1000 tokens, is there a way to reduce the token usage? I already using optimiser\nDaslav:\n@kapa.ai \nDid the way to call the hybrid search in Weaviate change?\n\nraise ValueError(f\"Invalid query mode: {query.mode}\")\nValueError: Invalid query mode: VectorStoreQueryMode.HYBRID", "start_char_idx": 0, "end_char_idx": 318, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "752dd8bf-7a84-403c-84e0-11e3ede0085f": {"__data__": {"id_": "752dd8bf-7a84-403c-84e0-11e3ede0085f", "embedding": null, "metadata": {"date": "2023-05-16T16:11:46.108+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108064258681470996", "node_type": "4", "metadata": {"date": "2023-05-16T16:11:46.108+00:00"}, "hash": "a8b1b4e219d410cbc045ac99e8091ae46b1e995ef16e7e3afa5abdfd08e8c147", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "857abb1b-3d52-4ba3-a25c-ceaed389266e", "node_type": "1", "metadata": {"date": "2023-05-16T15:42:10.468+00:00"}, "hash": "ee8e33db73410f7daeb774adf913455aa9004de3a2802458b86a616098d590dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "133f64b0-0699-4e19-af36-32f895e83196", "node_type": "1", "metadata": {}, "hash": "d164d2051dbc0f82f11e8313006fba5a6c898038d31077cdb63173ab8b30caa9", "class_name": "RelatedNodeInfo"}}, "text": "Rouslan | Blooo:\nHello Guys,\n\nHow is it possible to control if a Tool must be used or not for each request. Because it doesn't look very predictable based on the same query input\n`Thought: Do I need to use a tool? No`\n`Thought: Do I need to use a tool? Yes`\n\nThanks,\nLogan M:\nIs your temperature set to 0?\n\nAlso just so you know, whether or not a tool is picked depends almost entirely on the tool descriptions+names", "start_char_idx": 0, "end_char_idx": 416, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "133f64b0-0699-4e19-af36-32f895e83196": {"__data__": {"id_": "133f64b0-0699-4e19-af36-32f895e83196", "embedding": null, "metadata": {"date": "2023-05-16T18:32:24.274+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108099650914897951", "node_type": "4", "metadata": {"date": "2023-05-16T18:32:24.274+00:00"}, "hash": "f1a3809c05d336a6f86c1f7d9f27fa5bb07353e9788caf3e8d46e4d2687c96ff", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "752dd8bf-7a84-403c-84e0-11e3ede0085f", "node_type": "1", "metadata": {"date": "2023-05-16T16:11:46.108+00:00"}, "hash": "d4918bb21dc93b8cdba4e3a38b75fc7048bf1359ecb6cf88e70946886a459885", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58000a64-2d15-471a-8516-1e8fe14941d6", "node_type": "1", "metadata": {}, "hash": "e27128f8a1cfc66151dc16f8d51e543b3d79c6cd697895a9692d7645f13bcbbe", "class_name": "RelatedNodeInfo"}}, "text": "Mario Zelaray\u00e1n:\nI have the following code to generate a persisted index:\n```\ndef construct_index(index_id, directory_path, file_list):\n    num_outputs = 512\n    llm_predictor = LLMPredictor(llm=OpenAI(temperature=0.7, model_name=\"text-davinci-003\", max_tokens=num_outputs))\n    service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor)\n    file_exists = exists(persist_dir + '/docstore.json')\n    if (file_exists):\n        storage_context = StorageContext.from_defaults(persist_dir=persist_dir)\n    else:\n        storage_context = StorageContext.from_defaults()\n    docs = SimpleDirectoryReader(input_dir=directory_path, input_files=file_list).load_data()\n    index = VectorStoreIndex.from_documents(docs, service_context=service_context, storage_context=storage_context)\n    index.set_index_id(index_id)\n    index.storage_context.persist(persist_dir)\n    return index\n```\nThis works as long as I run it once. If I run it twice, even with a different index_id, the index files break, and trying to do a query with them throws a \"KeyError\". Deleting the index files and generating them again works. Do anyone know why?\nLogan M:\nI think persisting multiple indexes to the same directory is currently a little buggy \ud83d\ude26 Hoping to get this fixed soon..\nMario Zelaray\u00e1n:\nShould I use multiple persist folders? The old system with a single json file per index was a bit more practical \ud83d\ude15 I noticed it also breaks if I try to generate again with the same index_id. The items inside docstore.json stack, even if I'm indexing the same document.\nLogan M:\nYea they definitely do stack, which is part of the issue I think \ud83d\ude43  hoping to have this fixed in the next day or so. \n\nFor now yea, use multiple persist folders to get around this. Sorry for the inconvenience around this \ud83d\ude4f", "start_char_idx": 0, "end_char_idx": 1783, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58000a64-2d15-471a-8516-1e8fe14941d6": {"__data__": {"id_": "58000a64-2d15-471a-8516-1e8fe14941d6", "embedding": null, "metadata": {"date": "2023-05-16T20:52:10.32+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108134824541167747", "node_type": "4", "metadata": {"date": "2023-05-16T20:52:10.32+00:00"}, "hash": "d1021a29d36544914abac5c4dbd8049e03bec148854a07e762ba31d67bb5918d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "133f64b0-0699-4e19-af36-32f895e83196", "node_type": "1", "metadata": {"date": "2023-05-16T18:32:24.274+00:00"}, "hash": "61894d8245172b3ab5619f6492cc457d69e1b044e89998c05059d68c9f042dda", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4770081c-6904-4aef-9668-9ddba5de2e4d", "node_type": "1", "metadata": {}, "hash": "c726627b7378cf06dd8e931661e583ce6acbcff47c6c8f3025a9e8de88c4864e", "class_name": "RelatedNodeInfo"}}, "text": "PocketColin:\n\ud83d\udc4b Has anyone here run into an issue where embedding with davinci results in the following error when querying?\n```\nFile \"/opt/homebrew/lib/python3.11/site-packages/llama_index/embeddings/base.py\", line 45, in similarity\n    product = np.dot(embedding1, embedding2)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nFile \"<__array_function__ internals>\", line 200, in dot    \nValueError: shapes (1536,) and (12288,) not aligned: 1536 (dim 0) != 12288 (dim 0)\n```\nLogan M:\nYou'll need to start with a fresh index if you switch embeddings, the dimensions of every embedding vector need to be the same \ud83d\udc4d", "start_char_idx": 0, "end_char_idx": 607, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4770081c-6904-4aef-9668-9ddba5de2e4d": {"__data__": {"id_": "4770081c-6904-4aef-9668-9ddba5de2e4d", "embedding": null, "metadata": {"date": "2023-05-17T14:50:01.936+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108406076958842920", "node_type": "4", "metadata": {"date": "2023-05-17T14:50:01.936+00:00"}, "hash": "245163cb4b78f98ba94c4c2fe52bc032d96aeb3cdffb9815d8095b3dff88af84", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58000a64-2d15-471a-8516-1e8fe14941d6", "node_type": "1", "metadata": {"date": "2023-05-16T20:52:10.32+00:00"}, "hash": "c5e9db138fbae8e321c215f9d9a39588c516154a3757682ba1ac171e44636b82", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91508a17-59da-4e4e-8520-92fed6f8d3f4", "node_type": "1", "metadata": {}, "hash": "c2937714078105ef3374cf121e8aac22c58150e78840d04409bf27d244a812f3", "class_name": "RelatedNodeInfo"}}, "text": "Teemu:\nHas anyone managed to configure streaming simultaneously when displaying source nodes? I guess the source nodes cannot be streamed but maybe displaying them in another element while the LLM is streaming it's response?\nLogan M:\nYea the response object should still have response.source_nodes set right?\nTeemu:\nNot really sure tbh, it's giving me lots of issues", "start_char_idx": 0, "end_char_idx": 366, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91508a17-59da-4e4e-8520-92fed6f8d3f4": {"__data__": {"id_": "91508a17-59da-4e4e-8520-92fed6f8d3f4", "embedding": null, "metadata": {"date": "2023-05-17T17:59:50.961+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108453845991956511", "node_type": "4", "metadata": {"date": "2023-05-17T17:59:50.961+00:00"}, "hash": "ef410c843ab2e5d7a31f657e006fd013e8b4fa5857107d066ccac26542a11447", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4770081c-6904-4aef-9668-9ddba5de2e4d", "node_type": "1", "metadata": {"date": "2023-05-17T14:50:01.936+00:00"}, "hash": "4b29dea963ddf7c657ec3067b887e1c14f30a9306ac92e75c9bf4724bb4b6f6e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c1df02b-f89f-4757-9247-b57a19d08bb0", "node_type": "1", "metadata": {}, "hash": "07eb7c80322a7d9893a8819d67e6d4f650197381fcbceda3c2fa37a6c4addf1f", "class_name": "RelatedNodeInfo"}}, "text": "Daslav:\nHi guys! Can you help me?\n\nI'm trying to use the \"max_tokens\" parameter in the \"llm_predictor\" to get more output tokens and achieve more comprehensive responses from the model.\n\nHowever, when I use \"llm_predictor=llm_predictor\" in the \"service_context,\" the model starts generating responses only in English and, moreover, it begins to respond erratically to queries.\n\nIn other words, when I don't add llm_predictor to the service_context, the response works fine but delivers short answers. When I add llm_predictor and max_tokens, I can improve the output tokens, but the responses are incorrect. \n\nAny suggestion?\nLogan M:\nThe default llm_predictor is text-davinci-003, is your new llm_predictor also using that model?\nDaslav:\nanyway you blew my mind, @Logan M , and I came up with something amazing! \ud83d\ude2e\ud83d\udca1\nWe love you, Logan, don't forget it. \u2764\ufe0f", "start_char_idx": 0, "end_char_idx": 855, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c1df02b-f89f-4757-9247-b57a19d08bb0": {"__data__": {"id_": "2c1df02b-f89f-4757-9247-b57a19d08bb0", "embedding": null, "metadata": {"date": "2023-05-17T18:17:27.677+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108458278180098069", "node_type": "4", "metadata": {"date": "2023-05-17T18:17:27.677+00:00"}, "hash": "9c6e6c9d55a10383575a8a52ad40e7dd833337c171af4f9156970f602f077aa3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91508a17-59da-4e4e-8520-92fed6f8d3f4", "node_type": "1", "metadata": {"date": "2023-05-17T17:59:50.961+00:00"}, "hash": "0cb5ab5a2e5a4bd4d127c7e3998b2c9b2dc530b3c3a2105b29108f48b6d39185", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52d891a1-0fe5-44af-97ba-82c87e394c93", "node_type": "1", "metadata": {}, "hash": "0294824077ef330a0bfb4a74c1b1fcbe7facd09148b0555e2ca35ac976135383", "class_name": "RelatedNodeInfo"}}, "text": "badcom:\nHow do you go about refreshing pinecone data? The data will come from Google Docs files. Do I delete the data and re-upload it?\nDaslav:\nCould you create a script that analyzes if there are any changes in Google Docs files (perhaps by ID, using Docs API), and if there are, then updates the table of contents above the existing index(?)", "start_char_idx": 0, "end_char_idx": 343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52d891a1-0fe5-44af-97ba-82c87e394c93": {"__data__": {"id_": "52d891a1-0fe5-44af-97ba-82c87e394c93", "embedding": null, "metadata": {"date": "2023-05-17T18:24:17.735+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108459998088016006", "node_type": "4", "metadata": {"date": "2023-05-17T18:24:17.735+00:00"}, "hash": "522eabd2f6b672bd0bb267ce72b033082a45a604ca5f52fe93a48e04a9973f4d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c1df02b-f89f-4757-9247-b57a19d08bb0", "node_type": "1", "metadata": {"date": "2023-05-17T18:17:27.677+00:00"}, "hash": "828c46a3258b609a34bb1c3c6647d2588792429fae24b35ecfd5823b00f9695d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03009823-7572-41f1-9eb4-da7d70297fcb", "node_type": "1", "metadata": {}, "hash": "3b3b95954b1705b3ba798a59c921f5b76b5086203b68dea026c09566c39857cc", "class_name": "RelatedNodeInfo"}}, "text": "badcom:\n@Daslav so you mean I can use the doc ID to identify the index related to it and then update that piece of content only?\nDaslav:\nYes something like that! Maybe using the document ID, you can uniquely identify the specific Google Docs file. once you have the document ID, you can retrieve the content of the document and analyze it to identify the index or table of contents. then, you can update the index. Maybe someone has a better approach to handle this but is more efficient instead of re upload the entire document every time (I guess)\nbadcom:\nYeah, that sounds like a plan. Thanks!", "start_char_idx": 0, "end_char_idx": 596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03009823-7572-41f1-9eb4-da7d70297fcb": {"__data__": {"id_": "03009823-7572-41f1-9eb4-da7d70297fcb", "embedding": null, "metadata": {"date": "2023-05-18T08:10:43.348+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108667975222964334", "node_type": "4", "metadata": {"date": "2023-05-18T08:10:43.348+00:00"}, "hash": "1aac18b25a309787a54bbeca88527ad21969bda9496a68bf4671bef07974adf5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52d891a1-0fe5-44af-97ba-82c87e394c93", "node_type": "1", "metadata": {"date": "2023-05-17T18:24:17.735+00:00"}, "hash": "442c15122c7e2fca5fe2b96be6ff879a8e1ec12969b333524ed341b98e74f300", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ffab3da-e610-48dd-822a-96c016ae45ee", "node_type": "1", "metadata": {}, "hash": "93be6c813b39cdfdf4a3ce17d5c6ff2cd44919cf3b4683cb3402cac6b71c74e9", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nDespite saving my index locally (small file size, <1MB), it takes 30-45 seconds to receive a response for each of my queries. Does anyone know how to speed this up? I'm wondering how some apps can achieve sub 5-10second performance for answer retrieval\nbadcom:\nYou may have to stream the response to make it feel faster", "start_char_idx": 0, "end_char_idx": 326, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ffab3da-e610-48dd-822a-96c016ae45ee": {"__data__": {"id_": "1ffab3da-e610-48dd-822a-96c016ae45ee", "embedding": null, "metadata": {"date": "2023-05-18T09:30:15.747+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108687992115179520", "node_type": "4", "metadata": {"date": "2023-05-18T09:30:15.747+00:00"}, "hash": "35625bbdf4841089ec983bfe161c7e0be9a46e98ced13fec2164d196a2febfc6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03009823-7572-41f1-9eb4-da7d70297fcb", "node_type": "1", "metadata": {"date": "2023-05-18T08:10:43.348+00:00"}, "hash": "cb31f23d113d04be66532d5b3178455ac0f59cfd3e8941fea909b7566e10c061", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "104527ab-f7f1-47f8-9ff6-c01c189330a0", "node_type": "1", "metadata": {}, "hash": "8bc13ed21b01e3bb314377151e3a88f261180bef0fa0a0d9c6befddf09d5c6cb", "class_name": "RelatedNodeInfo"}}, "text": "amerikanist:\nStoring index directly to disk as json is no longer an option for VectorStoreIndex with the following code returning error:\n\nindex = VectorStoreIndex.from_documents(\n    documents, service_context=service_context\n)\n\nindex.save_to_disk('index.json')\n\nThis used to work until recently. What's the best workaround to enable this please?\ncdh:\nI've been doing it as follows:\n```\nindex = VectorStoreIndex.from_documents(documents, service_context = service_context)\nindex.storage_context.persist(persist_dir = persist_dir)\n```", "start_char_idx": 0, "end_char_idx": 533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "104527ab-f7f1-47f8-9ff6-c01c189330a0": {"__data__": {"id_": "104527ab-f7f1-47f8-9ff6-c01c189330a0", "embedding": null, "metadata": {"date": "2023-05-18T10:52:43.727+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108708745447485543", "node_type": "4", "metadata": {"date": "2023-05-18T10:52:43.727+00:00"}, "hash": "569d4202fc64e39d3ea7348771af95dc7d731ed83618c8e2a13d20cabfbee321", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ffab3da-e610-48dd-822a-96c016ae45ee", "node_type": "1", "metadata": {"date": "2023-05-18T09:30:15.747+00:00"}, "hash": "dd675142c8962ed6f91f16ccc73be936e52f942746bd8cfa2edd351d89bee3eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b5dea48-f824-42d3-b48c-d3c853e5c17f", "node_type": "1", "metadata": {}, "hash": "67fca72c8459d53ce3ecd5bc0c268ffc1d27854b9236786cdc8ecf508f1deab0", "class_name": "RelatedNodeInfo"}}, "text": "zainab:\nI have a question regarding PandasIndex; How does this index handle CSV files with many data whose size is more than the context size for any of the Openai models?\nLogan M:\nOpenAI never actually sees the contents of the dataframe, just the output of df.head()\n\nAlthough if that's too big, I'm not sure what will happen \ud83e\udd14\nzainab:\nSo not all the data is included in the prompt; how can the model provide accurate results?", "start_char_idx": 0, "end_char_idx": 427, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b5dea48-f824-42d3-b48c-d3c853e5c17f": {"__data__": {"id_": "4b5dea48-f824-42d3-b48c-d3c853e5c17f", "embedding": null, "metadata": {"date": "2023-05-18T13:42:16.31+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108751412353060884", "node_type": "4", "metadata": {"date": "2023-05-18T13:42:16.31+00:00"}, "hash": "1f6d7e2c20dc78612187bcea30cb363f7636715e3d8cd3dc87a094a8f77693a5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "104527ab-f7f1-47f8-9ff6-c01c189330a0", "node_type": "1", "metadata": {"date": "2023-05-18T10:52:43.727+00:00"}, "hash": "82874df0d080a6a5513460debdee557483d4c9596ff3dde01819ad53798cf5f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5a7bcdd-90ce-4a18-bed4-b3526130d87f", "node_type": "1", "metadata": {}, "hash": "fe0a136e7949329f8cfc6da6bfce114721c10ad04eb3ed0d168ec2734f8a9101", "class_name": "RelatedNodeInfo"}}, "text": "jakusimo:\nHey Team, I'm back with my open-source questions. I tried \n```base_path = os.environ.get('OPENAI_API_BASE', 'http://localhost:8080/v1')\nllm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"gpt-3.5-turbo\", openai_api_base=base_path))\n```\nhttps://github.com/go-skynet/LocalAI/blob/master/examples/query_data/store.py#L10\nand got the following error:```\nINFO:root:Loaded 2 documents\nINFO:openai:error_code=500 error_message='endpoint disabled for this model by API configuration' error_param=None error_type= message='OpenAI API error received' stream_error=False\nopenai.error.APIError: endpoint disabled for this model by API configuration {\"error\":{\"code\":500,\"message\":\"endpoint disabled for this model by API configuration\",\"type\":\"\"}} 500 {'error': {'code': 500, 'message': 'endpoint disabled for this model by API configuration', 'type': ''}} {'Date': 'Thu, 18 May 2023 13:33:29 GMT', 'Content-Type': 'application/json', 'Content-Length': '98', 'Vary': 'Origin', 'Access-Control-Allow-Origin': '*'}```\n\nif I do curl directly to the endpoint it works well.\nDo I need to setup something extra?\nDaslav:\nDid you solve this problem?\njakusimo:\nPartially, it's something with models \"overwriting\"\njakusimo:\nhttps://discord.com/channels/1076964370942267462/1090471714888102009/1108778930254647427", "start_char_idx": 0, "end_char_idx": 1315, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5a7bcdd-90ce-4a18-bed4-b3526130d87f": {"__data__": {"id_": "f5a7bcdd-90ce-4a18-bed4-b3526130d87f", "embedding": null, "metadata": {"date": "2023-05-18T19:42:57.042+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108842180161843323", "node_type": "4", "metadata": {"date": "2023-05-18T19:42:57.042+00:00"}, "hash": "8dea5f9267a17ec055ce6cc8c37761225a9af0ed0c95dd1b4430f819f858118f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b5dea48-f824-42d3-b48c-d3c853e5c17f", "node_type": "1", "metadata": {"date": "2023-05-18T13:42:16.31+00:00"}, "hash": "e26e251886d63403d8ad07b6f87a99616f9b05b4d45602f213de10242636807c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5812a5e-d7ad-42e7-b461-d0a1c279fb32", "node_type": "1", "metadata": {}, "hash": "d277631e0b5aa46e2bd58292f2062cfe55851f69376509d8e0a862288584e343", "class_name": "RelatedNodeInfo"}}, "text": "CrisTian:\ni was reading and in some places said that is deprecated taht function ...:(\nTeemu:\nWas wondering the same", "start_char_idx": 0, "end_char_idx": 116, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5812a5e-d7ad-42e7-b461-d0a1c279fb32": {"__data__": {"id_": "c5812a5e-d7ad-42e7-b461-d0a1c279fb32", "embedding": null, "metadata": {"date": "2023-05-18T20:00:12.785+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108846524382838794", "node_type": "4", "metadata": {"date": "2023-05-18T20:00:12.785+00:00"}, "hash": "55d9369a6e429b6520bfad8565fd11e62991e8f4939dd8a128239e96ad37e55d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5a7bcdd-90ce-4a18-bed4-b3526130d87f", "node_type": "1", "metadata": {"date": "2023-05-18T19:42:57.042+00:00"}, "hash": "14c3ff8f6c7374967f3813aa19ec65f46118687894d905e039ca622cf452ca7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3446310a-91fe-4891-a028-9ab7c3bda83a", "node_type": "1", "metadata": {}, "hash": "c584b06e5838a356d4d8f7c351c6a591cb94abd9ba4189a6cdcac2eaae7f2dfc", "class_name": "RelatedNodeInfo"}}, "text": "Logan M:\n@CrisTian @Teemu I haven't used it in a bit, but there is a way to do this here\n\nThe alternative is customizing the prompt templates to include extra information/messages\nTeemu:\nThink this is deprecated? The QA template does work I think but that just uses a regular prompt right?", "start_char_idx": 0, "end_char_idx": 289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3446310a-91fe-4891-a028-9ab7c3bda83a": {"__data__": {"id_": "3446310a-91fe-4891-a028-9ab7c3bda83a", "embedding": null, "metadata": {"date": "2023-05-18T20:30:17.03+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108854091934859344", "node_type": "4", "metadata": {"date": "2023-05-18T20:30:17.03+00:00"}, "hash": "bc40df8ee1618528a888bb818c634181e8e30eee416a20e1110717db86ed1993", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5812a5e-d7ad-42e7-b461-d0a1c279fb32", "node_type": "1", "metadata": {"date": "2023-05-18T20:00:12.785+00:00"}, "hash": "3ebd761e08c5c6a5d83ff2b48059905191b026c12d352b95aa661ba20fa1320f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "590718e5-d9a9-4693-8ec6-747197ffdd26", "node_type": "1", "metadata": {}, "hash": "75572c8c4e2c5ca81e5b8fc37e6831bd5588cb39f9bfa2fb80b9185cbc45a40e", "class_name": "RelatedNodeInfo"}}, "text": "jma7889:\nHi, I have a question if any one can help. How to use langchain ChatPromptTemplate class in llama-index's predictor? is it possible? The driver for this is that I like to send custom chat prompts to OpenAI's api.  It includes things such as System Message, role, etc that are specific to chat api.\nmileto:\nBeen wondering that myself\nLogan M:\nCheck out this thread\n\nhttps://discord.com/channels/1059199217496772688/1108846754499141755/1108848691827200102\nmileto:\nThank you very much", "start_char_idx": 0, "end_char_idx": 490, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "590718e5-d9a9-4693-8ec6-747197ffdd26": {"__data__": {"id_": "590718e5-d9a9-4693-8ec6-747197ffdd26", "embedding": null, "metadata": {"date": "2023-05-19T00:59:49.577+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1108921924513452084", "node_type": "4", "metadata": {"date": "2023-05-19T00:59:49.577+00:00"}, "hash": "570a3df54a3f105c08bb39f54c4d5af0ea4199f4892ecb7fc8c17d004d21c7b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3446310a-91fe-4891-a028-9ab7c3bda83a", "node_type": "1", "metadata": {"date": "2023-05-18T20:30:17.03+00:00"}, "hash": "d5f4fd83ef58dbd5c6965aabcd46872c48ccb839c73c8697a37dc5f5dca814d7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a4faaf5-57ed-41e8-bec6-b1c8112405be", "node_type": "1", "metadata": {}, "hash": "b4745bfafdd037e309036fdca633ee7beb1b6a5f60c890c0a3af3a6e17071bb4", "class_name": "RelatedNodeInfo"}}, "text": "DonRucastle:\nAny suggestions on how to force a langchain agent to use the index tool for every query?\nCrisTian:\ni think that you must use a very well description ...", "start_char_idx": 0, "end_char_idx": 165, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a4faaf5-57ed-41e8-bec6-b1c8112405be": {"__data__": {"id_": "1a4faaf5-57ed-41e8-bec6-b1c8112405be", "embedding": null, "metadata": {"date": "2023-05-19T10:42:07.101+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109068463110107157", "node_type": "4", "metadata": {"date": "2023-05-19T10:42:07.101+00:00"}, "hash": "23a22a92d80ca91b204ebc7f3b282d64404615a2d21d36aef1a2ac1232d48897", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "590718e5-d9a9-4693-8ec6-747197ffdd26", "node_type": "1", "metadata": {"date": "2023-05-19T00:59:49.577+00:00"}, "hash": "9a54f0ef66d7356f5a0e4a2f029146204fa41f5ab4ce23ac0e04dfdff5f52551", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "475d5913-0944-4acf-b01e-94b75aa22431", "node_type": "1", "metadata": {}, "hash": "ddec67adab94ec0c0fac940e049530ea123f6faa5d4395672a826e346cefac68", "class_name": "RelatedNodeInfo"}}, "text": "WhiteFang_Jr:\nHey! Has anyone combined HuggingFaceEmbedding and OpenAI for response together? \n-\nDelomen:\nAnd you? \ud83d\ude42\nWhiteFang_Jr:\nI'm trying but getting error\n`ValueError: shapes (1536,) and (768,) not aligned: 1536 (dim 0) != 768 (dim 0)`", "start_char_idx": 0, "end_char_idx": 240, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "475d5913-0944-4acf-b01e-94b75aa22431": {"__data__": {"id_": "475d5913-0944-4acf-b01e-94b75aa22431", "embedding": null, "metadata": {"date": "2023-05-19T17:01:41.395+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109163985422520340", "node_type": "4", "metadata": {"date": "2023-05-19T17:01:41.395+00:00"}, "hash": "10ce999eac9da6fcfe9fced6025680f06f63dbb58920744c9853349d1fb436d3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a4faaf5-57ed-41e8-bec6-b1c8112405be", "node_type": "1", "metadata": {"date": "2023-05-19T10:42:07.101+00:00"}, "hash": "92d101e05b26504e914b6ed89ecfe21d0b2ee388bcc462068bd3caea6f914ac7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1014887a-18f5-48ae-a967-3d68f9b35edd", "node_type": "1", "metadata": {}, "hash": "31696f210c7ad3d1750b6f023dc4b9cf17088a44bae2b3c2087d243301c3e0b1", "class_name": "RelatedNodeInfo"}}, "text": "fransb14:\nHi everyone, sorry if it's a dumb question. But conceptually I don't understand why do I need a llm_predictor to create an index? Isn't that the job of the embed_model?\nLogan M:\nYou are correct, you don't technically need one for a vector index  (although the tree index and knowledge graph index use the LLM during construction)\n\nHowever, since it's all attached to the service context, it will still instantiate a default llm predictor even if you don't pass one in\n\nWas there a certain issue you are having with this?", "start_char_idx": 0, "end_char_idx": 530, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1014887a-18f5-48ae-a967-3d68f9b35edd": {"__data__": {"id_": "1014887a-18f5-48ae-a967-3d68f9b35edd", "embedding": null, "metadata": {"date": "2023-05-19T22:21:58.001+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109244585709940766", "node_type": "4", "metadata": {"date": "2023-05-19T22:21:58.001+00:00"}, "hash": "b459426160ae8950f037a13c2a92493b7a4e203c672229a9f881fa8ced54d61a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "475d5913-0944-4acf-b01e-94b75aa22431", "node_type": "1", "metadata": {"date": "2023-05-19T17:01:41.395+00:00"}, "hash": "7a88d78df14fe8241f7bd635cd240e1645bfbcba54c811598812257206d895d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7f692019-57d2-43bd-bf76-e96e16c67fce", "node_type": "1", "metadata": {}, "hash": "6f38d5ccb74c7c08c184f44c8e82439e678e0c58a86593c0c5da849f7c326f49", "class_name": "RelatedNodeInfo"}}, "text": "damon:\nhf_predictor = HuggingFaceLLMPredictor\nwhy is it trying to use openai embedings if i am using hugging face\nLogan M:\nThe llm predictor is only for generating text\n\nIf you want to use local embeddings too, check out this page \n\nhttps://gpt-index.readthedocs.io/en/latest/how_to/customization/embeddings.html#custom-embeddings\ndamon:\nJust a bit confused on what model this `embed_model` is?", "start_char_idx": 0, "end_char_idx": 394, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7f692019-57d2-43bd-bf76-e96e16c67fce": {"__data__": {"id_": "7f692019-57d2-43bd-bf76-e96e16c67fce", "embedding": null, "metadata": {"date": "2023-05-19T22:33:33.412+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109247502475087923", "node_type": "4", "metadata": {"date": "2023-05-19T22:33:33.412+00:00"}, "hash": "6849c14f61dcc43759499ee4a541a629cce50bc714f981b1bd13a85f80edb6cc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1014887a-18f5-48ae-a967-3d68f9b35edd", "node_type": "1", "metadata": {"date": "2023-05-19T22:21:58.001+00:00"}, "hash": "6ba9a1abd040a5ee5d289ed473ec1bd94cac69ea6c2c3db0684c28540f613a5f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8035b469-8a22-411b-8f61-90f2f42f7c64", "node_type": "1", "metadata": {}, "hash": "cf2107c3c9bf1d9dd267d9697daea422cfc530864f39c33df53064e1981b2239", "class_name": "RelatedNodeInfo"}}, "text": "damon:\niirc embedings are just the context on each node?\nLogan M:\nEmbeddings are numerical representations of your nodes/text \ud83d\udcaa", "start_char_idx": 0, "end_char_idx": 127, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8035b469-8a22-411b-8f61-90f2f42f7c64": {"__data__": {"id_": "8035b469-8a22-411b-8f61-90f2f42f7c64", "embedding": null, "metadata": {"date": "2023-05-20T05:47:39.528+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109356747803607082", "node_type": "4", "metadata": {"date": "2023-05-20T05:47:39.528+00:00"}, "hash": "027be6c8f130e3b4628c86b9588c355a1c57285062f38cdafc6756f67462156e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7f692019-57d2-43bd-bf76-e96e16c67fce", "node_type": "1", "metadata": {"date": "2023-05-19T22:33:33.412+00:00"}, "hash": "17b8108af39d68afb17c22ece24429f19052a30cab0b671f729d7ad39b9c6861", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec88ccf8-f922-45c5-aca0-e3a0917d7bc2", "node_type": "1", "metadata": {}, "hash": "d076591416c30ec150222fe2b557bf6a81f76be9c6e1110f70d011faf14e3cab", "class_name": "RelatedNodeInfo"}}, "text": "Lakshay Arora:\n\"query_engine = index.as_query_engine(\n    sql_context_container=context_container\n)\nresponse = query_engine.query(query_str)\n    Error :     query_engine = index.as_query_engine(\nAttributeError: 'SQLStructStoreIndex' object has no attribute 'as_query_engine'\" . Can somebody help with this?\nLogan M:\nAre you on the latest version? Maybe try `pip install --upgrade llama-index`, or even start a fresh venv", "start_char_idx": 0, "end_char_idx": 420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec88ccf8-f922-45c5-aca0-e3a0917d7bc2": {"__data__": {"id_": "ec88ccf8-f922-45c5-aca0-e3a0917d7bc2", "embedding": null, "metadata": {"date": "2023-05-20T09:29:29.325+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109412573138395198", "node_type": "4", "metadata": {"date": "2023-05-20T09:29:29.325+00:00"}, "hash": "396eac1c104c655c3b71cd5b84f16b0f6934c36a01c209ebc93e3435e3f97412", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8035b469-8a22-411b-8f61-90f2f42f7c64", "node_type": "1", "metadata": {"date": "2023-05-20T05:47:39.528+00:00"}, "hash": "482a3d93a2c55efe7f2d9c927c86715d371cf94fa0586eed813d5cfb46161a95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "426217c6-270e-4d1c-9fdd-138052939821", "node_type": "1", "metadata": {}, "hash": "9219a547f3f8946f8287110995cccdd3bbb190c8a17e910e5fb38051f4d81da8", "class_name": "RelatedNodeInfo"}}, "text": "hbqbio:\n@Logan M Any help about this bug? I think there is something wrong in document, maybe \"Missing query bundle\"?\nLuxocraft:\nat least you succeed to start privateGPT.py. Consider you are lucky \ud83d\ude42 I even hav't prompt to post a question!", "start_char_idx": 0, "end_char_idx": 238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "426217c6-270e-4d1c-9fdd-138052939821": {"__data__": {"id_": "426217c6-270e-4d1c-9fdd-138052939821", "embedding": null, "metadata": {"date": "2023-05-20T16:01:38.786+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109511262850777088", "node_type": "4", "metadata": {"date": "2023-05-20T16:01:38.786+00:00"}, "hash": "b58ef2396f6327594f59702dabb7a6c03aaf24ee9eef3f614588ac793e09de9a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec88ccf8-f922-45c5-aca0-e3a0917d7bc2", "node_type": "1", "metadata": {"date": "2023-05-20T09:29:29.325+00:00"}, "hash": "4daf23e689dacfb212bbfaf3aa0a372f0e981851d70105ecbf7a3351a8f51bef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe867dac-1526-4344-b285-cf40e2b90878", "node_type": "1", "metadata": {}, "hash": "5fd75c551dee2df3dc017a8e2dc17bf9dd9a439d4ed5e3801732b4b645acd708", "class_name": "RelatedNodeInfo"}}, "text": "kagnar:\nHi guys, what if you want to chunk by sentence build a vector index, but on retrieval return the a larger 500 word chunk where the sentence was extracted. Is this something that llama supports?\nDaslav:\nyou can try this:\nIt seems that modifying max_tokens could solve your need to obtain more response tokens from the model.\nkagnar:\nNo im talking about building the vector index. Thats just the max tokens for the llm", "start_char_idx": 0, "end_char_idx": 424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe867dac-1526-4344-b285-cf40e2b90878": {"__data__": {"id_": "fe867dac-1526-4344-b285-cf40e2b90878", "embedding": null, "metadata": {"date": "2023-05-20T20:32:51.816+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109579516885618748", "node_type": "4", "metadata": {"date": "2023-05-20T20:32:51.816+00:00"}, "hash": "6a6987c2fb091f2c7764926a5d2d85f1a623aaab27be8b73d1e50905e5572840", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "426217c6-270e-4d1c-9fdd-138052939821", "node_type": "1", "metadata": {"date": "2023-05-20T16:01:38.786+00:00"}, "hash": "1f2527661a85d4e5165429c14fd4b18fd12e1b601662bd99fcfd6df59d9281e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6caa801c-625d-4a67-ae29-c6d08629d22b", "node_type": "1", "metadata": {}, "hash": "06e8aff5c907aa10cf76f8ac6d029f3bddb6d04f6143db5c368191b39748c5aa", "class_name": "RelatedNodeInfo"}}, "text": "Russellocean:\nHow can I get a document from an index using it's doc_id? I am adding documents to my index as follows:\n```python\nnew_document = Document(doc_id=memory_id, text=content, extra_info=metadata)\n            self.index.insert(document=new_document)\n```\nBut when I search for the doc_id using\n```python\ndocument = self.index.docstore.get_document(doc_id=id)\n```\nIt always says it can't be found, and then in my docstore file my doc_id is instead this generated id instead of the one I actually assigned:\n`\"doc_id\": \"e89d4f6f-f96f-4d62-aa04-8c79eba1eb6a\"`\nbut the one I assigned seems to be in the relationships:\n`\"relationships\": {\"1\": \"file-test.py\"}}`\nWhy is this? Why does the doc_id not actually assign doc_id in the docstore.\nLogan M:\nIt seems confusing, but a document is broken into nodes, which are then stored into the docstore \n\nYou can do index.docstore.docs to get all the nodes, and your original doc_id is set to the ref_doc_id of each node\nRussellocean:\nI see, well I couldn't figure out how to get the ref_doc_id so I went ahead and extracted it from the items and built a tuple to correlate with the \"real ids\" with the generated ones\n\n```python\n            # Iterate over each document in the docstore's collection of documents\n            for doc_id, node in self.index.docstore.docs.items():\n                # Each document (node) has a dictionary of relationships.\n                # We make the assumption here that there's only one key in this dictionary.\n                # Therefore, we convert the keys to a list and select the first one (at index 0).\n                source_key = list(node.relationships.keys())[0]\n\n                # Now, we use this key to access the corresponding value in the relationships dictionary.\n                # This value is associated with the 'source' of the document.\n                source_value = node.relationships[source_key]\n\n                # Now that we have both the doc_id and the source_value, we create a tuple consisting of these two values.\n                # This tuple is then appended to the self.ids list.\n                # This list is essentially a mapping between the document's ID and its source.\n                # This mapping will be helpful in future operations where we need to quickly look up the source of a document based on its ID.\n                self.ids.append((doc_id, source_value))\n```\n\nThen when I want to query by just an ID I query it as follows:", "start_char_idx": 0, "end_char_idx": 2448, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6caa801c-625d-4a67-ae29-c6d08629d22b": {"__data__": {"id_": "6caa801c-625d-4a67-ae29-c6d08629d22b", "embedding": null, "metadata": {"date": "2023-05-20T23:16:52.985+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109620793740107906", "node_type": "4", "metadata": {"date": "2023-05-20T23:16:52.985+00:00"}, "hash": "7e09eedb0c2d8a1a63c7cb34e94f494a499a0ee0906461c1b94f980031f4f3a9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fe867dac-1526-4344-b285-cf40e2b90878", "node_type": "1", "metadata": {"date": "2023-05-20T20:32:51.816+00:00"}, "hash": "ab3100930d5810c90c8bba51a1b4ac4c2b5081c48abe86841223c353419a2391", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f91b52de-ccdd-4ebb-97a9-a6d72d731f2b", "node_type": "1", "metadata": {}, "hash": "4d3bc663339b7245494c8524f7433d2610087701d7ec8b7ff6a2100f58ca7c76", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nI have several documents: A, B, C.\nI want to query each individual document.\nAnd then I also want to query all documents A, B, C at the same time to find out patterns throughout all of these documents.\n\nTo achieve this would I create an index for each document and then create a ComposableGraph that takes in all three indexes as a param? Would love to know the best way to approach this\nnezkikul:\nForget the graph, looks like it's going to be replaced with the router query engine (or Retriever Router Query Engine, not sure). But yeah, basically querying all documents is putting A, B and C into a folder, loading it with simpledirectory reader and making a vectorstore index with that. to do each sep. i guess there are several ways,  do you want to have 3 seperate answers for each doc? that would be having 3 indexes and querying each separately", "start_char_idx": 0, "end_char_idx": 857, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f91b52de-ccdd-4ebb-97a9-a6d72d731f2b": {"__data__": {"id_": "f91b52de-ccdd-4ebb-97a9-a6d72d731f2b", "embedding": null, "metadata": {"date": "2023-05-20T23:24:44.704+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109622772272988230", "node_type": "4", "metadata": {"date": "2023-05-20T23:24:44.704+00:00"}, "hash": "0d42497c72d0a30c8c3f650b3e827a1763b2a230a1b763d05f7f182dbae65ecc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6caa801c-625d-4a67-ae29-c6d08629d22b", "node_type": "1", "metadata": {"date": "2023-05-20T23:16:52.985+00:00"}, "hash": "70f5c7da70bba45aea6138a1bbe651973dd068349df866b41cc7e8aba60d5b81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb6686ab-e2e5-44f4-9e7e-478bcdd98f28", "node_type": "1", "metadata": {}, "hash": "fc26f857d80e2a1c256743e0f3e7d0dd0a80348d20bc64e18cf6bc4db21cea10", "class_name": "RelatedNodeInfo"}}, "text": "paulo:\nOr is there a way to specify a specific document when querying an index?\nnezkikul:\nWith the graph or either the router query engine, you could define the summary for a graph or the \"tool\"/retriever engine description for the llm and explain \"this is info for doc A\" , \"this is info for doc B\" etc, and then in the query type \" for doc A, ...question...\"", "start_char_idx": 0, "end_char_idx": 360, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb6686ab-e2e5-44f4-9e7e-478bcdd98f28": {"__data__": {"id_": "eb6686ab-e2e5-44f4-9e7e-478bcdd98f28", "embedding": null, "metadata": {"date": "2023-05-21T01:28:56.07+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1109654025567207444", "node_type": "4", "metadata": {"date": "2023-05-21T01:28:56.07+00:00"}, "hash": "2d04180d60c46289a0b131866ceaed5321a82dbcbebd516c6dee1d10290369b2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f91b52de-ccdd-4ebb-97a9-a6d72d731f2b", "node_type": "1", "metadata": {"date": "2023-05-20T23:24:44.704+00:00"}, "hash": "8755d6fab9ea5cbd9b354256daf2b452e6ba703eebd099071ce036bb3936faeb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e7538adc-eabf-4495-a222-b59c5dbd7fad", "node_type": "1", "metadata": {}, "hash": "5e10a78cfadfd6ce334557b1bd2e567aebc4eb055aba3d3b89e43d7ad153e740", "class_name": "RelatedNodeInfo"}}, "text": "fponknevets:\nHi, trying to use KnowledgebaseWebReader, but getting a syntax error when running the sample code provided at https://llamahub.ai/l/web-knowledge_base\n\nAny help understanding what I am doing wrong here will be gratefully received.\nfponknevets:\nOK. I get a bit further if instead of following the example in the llamahub I do this instead:\n\n`loader = KnowledgeBaseWebReader(\n    root_url='https://example.com/',\n    link_selectors=['.nav-link a', 'a'],\n    article_path='/principles'\n)`\n\nBut now I have come across the issue of Playright sync api not running in Jupyter Labs. Onwards and upwards. \ud83d\ude42", "start_char_idx": 0, "end_char_idx": 610, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e7538adc-eabf-4495-a222-b59c5dbd7fad": {"__data__": {"id_": "e7538adc-eabf-4495-a222-b59c5dbd7fad", "embedding": null, "metadata": {"date": "2023-05-22T00:29:23.037+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110001427046215690", "node_type": "4", "metadata": {"date": "2023-05-22T00:29:23.037+00:00"}, "hash": "0e10c7a24850e74db8c5fd339ab789042516ff2fa44851e32538e277dd8b081d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb6686ab-e2e5-44f4-9e7e-478bcdd98f28", "node_type": "1", "metadata": {"date": "2023-05-21T01:28:56.07+00:00"}, "hash": "364f7aa8b286fa10099fb2a2a952ce3b274eeb866de0c4aca8ff5cd759ad42ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f17f7e53-f27f-4b02-a10c-0a4ad3993cf6", "node_type": "1", "metadata": {}, "hash": "2e6d6fdd10a609befa975b7ca529b525ddeac6b3c5a08edcd33bc42bb3a25a40", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\nHi everyone, I wanted to ask something. I am currently using GPTSimpleVectorIndex to create an index base on my documents, but I have seen there is also VectorStoreIndex, and I was wandering if they are the same, and if not what are the differences and which one is better to use to create a custom chatbot?\nkenhutaiwan:\nPlease correct me if I am wrong.... but I think there's only VectorStoreIndex not GPTSimpleVectorIndex in the latest version of LlamaIndex. I am using llama-index 0.6.9 right now.\nTesterMan:\nYes, I was using am old version", "start_char_idx": 0, "end_char_idx": 554, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f17f7e53-f27f-4b02-a10c-0a4ad3993cf6": {"__data__": {"id_": "f17f7e53-f27f-4b02-a10c-0a4ad3993cf6", "embedding": null, "metadata": {"date": "2023-05-22T04:26:25.6+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110061080799105054", "node_type": "4", "metadata": {"date": "2023-05-22T04:26:25.6+00:00"}, "hash": "0f1a37c05b39e71c6812dd1cc77b86e4cea706cd7e873e69d1a8c89f910b81ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e7538adc-eabf-4495-a222-b59c5dbd7fad", "node_type": "1", "metadata": {"date": "2023-05-22T00:29:23.037+00:00"}, "hash": "482af367e2c9444ab56572c0636f3020719dd6e62404738f7f1d98af951191dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "39dc1e2e-8506-44e5-8468-fb9105bc52d8", "node_type": "1", "metadata": {}, "hash": "7887f94b77739e068d8418f3b1ba8297a324e0be41ecb17544852e7a17ac892d", "class_name": "RelatedNodeInfo"}}, "text": "kenhutaiwan:\nI store my documents' embeddings in Pinecone and use the following code to get a VectorStoreIndex instance from PineCone:\n    \n    pinecone.init(api_key=PINECONE_API_KEY, environment=PINECONE_ENV)\n    pinecone_index = pinecone.Index(PINECONE_INDEX)\n    vector_store = PineconeVectorStore(\n        pinecone_index=pinecone_index,\n        namespace=PINECONE_NAMESPACE\n    )\n    storage_context = StorageContext.from_defaults(vector_store=vector_store)   \n    index = VectorStoreIndex([], service_context=service_context, storage_context=storage_context) But I get the following error:\n    \n    \"ModuleNotFoundError: No module named 'transformers' \" becuase PineconeVectorStore() try to call get_default_tokenizer() for a tokenizer.    \n I am wonderring is any possible way I can use to avoid the need of transformers dependency ?\nLogan M:\nLooks like it's used to generate sparse vectors for hybrid search. It's mostly taken from pinecone code though \n\nYou can try passing in your own tokenizer to avoid this (or if you aren't using hybrid search, a quick hack should be passing in any random value for the tokinizer in the constructor)\n\nhttps://github.com/jerryjliu/llama_index/blob/79c40a0a0382c5952b3f3c5b10663344aee19c1a/llama_index/vector_stores/pinecone.py#L172", "start_char_idx": 0, "end_char_idx": 1276, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39dc1e2e-8506-44e5-8468-fb9105bc52d8": {"__data__": {"id_": "39dc1e2e-8506-44e5-8468-fb9105bc52d8", "embedding": null, "metadata": {"date": "2023-05-22T05:08:28.501+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110071662612852737", "node_type": "4", "metadata": {"date": "2023-05-22T05:08:28.501+00:00"}, "hash": "c42f00018135bd92f78f5b067038a14cdac11d83dc43562d8507887a7552776d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f17f7e53-f27f-4b02-a10c-0a4ad3993cf6", "node_type": "1", "metadata": {"date": "2023-05-22T04:26:25.6+00:00"}, "hash": "df5231e26cf6e7150bfd6693f5ebcd6f5020f4abbccab3a8b0e6aaf86dcd79f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "492d7965-81aa-4528-b078-d66faea6ebff", "node_type": "1", "metadata": {}, "hash": "9234465f15bcbbe3f9bca8366a79af73e22f3f95a1bf15e7b49ad63a1eb30d3d", "class_name": "RelatedNodeInfo"}}, "text": "TesterMan:\nIs it correct that the VectorStoreIndex.from_documents function and the \"insert\" function use \"text-embedding-ada-002-v2\" model even if I set \"model_name=gpt-3.5-turbo\" in the LLMPredictor?\nLogan M:\nYes, there's two models, an llm predictor (for generating text) and an embed model (for generating embeddings)\nTesterMan:\nOk so setting a model_name when doing \"VectorStoreIndex.from_documents()\" is pointless right?!\nLogan M:\nWell, that llm will still be used when you query, so not entirely pointless (although you can also pass in a new service context when creating the query engine)\nTesterMan:\nOk, perfect thank you", "start_char_idx": 0, "end_char_idx": 629, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "492d7965-81aa-4528-b078-d66faea6ebff": {"__data__": {"id_": "492d7965-81aa-4528-b078-d66faea6ebff", "embedding": null, "metadata": {"date": "2023-05-22T06:18:12.468+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110089211442376725", "node_type": "4", "metadata": {"date": "2023-05-22T06:18:12.468+00:00"}, "hash": "ed4537582cfda2f1c2dde37fffc4e1558939b3fa5281e8ff0c356939a190bb98", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39dc1e2e-8506-44e5-8468-fb9105bc52d8", "node_type": "1", "metadata": {"date": "2023-05-22T05:08:28.501+00:00"}, "hash": "4d29ec38ffffacd021dd06093d167845f653a9d5e5c2ac60c7c2d0d142dedd51", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94d8cb7c-da50-42a4-a594-2807919f7d72", "node_type": "1", "metadata": {}, "hash": "055817539bc3c13a803e24901c951242081d5c9ab06ce4067bce29b186899fde", "class_name": "RelatedNodeInfo"}}, "text": "viveksinghhhhhh:\ni referred this link ( https://gpt-index.readthedocs.io/en/latest/how_to/index_structs/update.html ) but it didn't say how to update existing indexes on GPTVectorStore\nTesterMan:\nWhat do you mean? Because there are the methods \"insert\" and \"update\" that allows you to put new documents or update existing ones in the index\nviveksinghhhhhh:\nhere is my code \n\n```\nindex = load_index_from_storage(storage_context, service_context = service_context)\ndef update_index(index):\n    max_input_size = 4096\n    num_outputs = 5000\n    max_chunk_overlap = 256\n    chunk_size_limit = 3900\n    prompt_helper = PromptHelper(max_input_size, num_outputs, max_chunk_overlap, chunk_size_limit=chunk_size_limit)\n    llm_predictor = LLMPredictor(llm=OpenAI(temperature=0, model_name=\"gpt-3.5-turbo\", max_tokens=num_outputs))\n    \n    service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)\n\n    directory_path = \"./trial_docs\"\n    file_metadata = lambda x : {\"filename\": x}\n    reader = SimpleDirectoryReader(directory_path, file_metadata=file_metadata)\n    \n    documents = reader.load_data()\n    print(type(documents))\n    index.insert(document = documents, service_context = service_context)\n    \n\nindex = update_index(index)\n\n```", "start_char_idx": 0, "end_char_idx": 1278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94d8cb7c-da50-42a4-a594-2807919f7d72": {"__data__": {"id_": "94d8cb7c-da50-42a4-a594-2807919f7d72", "embedding": null, "metadata": {"date": "2023-05-22T08:49:04.517+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110127178487701584", "node_type": "4", "metadata": {"date": "2023-05-22T08:49:04.517+00:00"}, "hash": "6328d5c123e8e1810501afe6163015a0e1da8004ac31e39633f58b6069ccad0a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "492d7965-81aa-4528-b078-d66faea6ebff", "node_type": "1", "metadata": {"date": "2023-05-22T06:18:12.468+00:00"}, "hash": "34a3573318ed98b64db224a60541e2a46994f5455c5825e0192843cd53d834c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "889da785-7713-42d5-a5d8-cf503c2c6e25", "node_type": "1", "metadata": {}, "hash": "b2b38db44ba2783722522a4b39640d557ea4dfbc5fa9576cc96d9c8a160a8952", "class_name": "RelatedNodeInfo"}}, "text": "viveksinghhhhhh:\nas ... it indicates that there should not be any creativity in forming the answers, and stick to the general idea of the documentation provided\namerikanist:\nUnfortunately, no. E.g. I am feeding it a file about specific rules and regulations. Yet when asking \"Tell me 3 great business ideas\" it unfortunately responds adequately instead of stating the query is out of context. \ud83d\ude1f  @Logan M, any suggestions?", "start_char_idx": 0, "end_char_idx": 422, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "889da785-7713-42d5-a5d8-cf503c2c6e25": {"__data__": {"id_": "889da785-7713-42d5-a5d8-cf503c2c6e25", "embedding": null, "metadata": {"date": "2023-05-22T09:19:31.532+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110134841544036382", "node_type": "4", "metadata": {"date": "2023-05-22T09:19:31.532+00:00"}, "hash": "50c95343e0c0113bd8c6c8b3e7a5d73f49c7b53c6cce1875823c93acf6e70add", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94d8cb7c-da50-42a4-a594-2807919f7d72", "node_type": "1", "metadata": {"date": "2023-05-22T08:49:04.517+00:00"}, "hash": "720ad77cf67c8d215d8a2d71ec3b05cedfc34c29b2b96d739fd5d2f48971cdd8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f0dbd9e-0020-4100-ac14-a5386df24b2e", "node_type": "1", "metadata": {}, "hash": "978b3f6ff3dbe42fe56f6216c08619b99f3e65c7eaf1b464d108e1aa9d4d206c", "class_name": "RelatedNodeInfo"}}, "text": "Jovis:\nWould a solution perhaps be to make \"tags\" for diffrent companies? Would the LLM understand that structure?\namerikanist:\n@Jovis This one is sort of similar to what I asked about. You can build separate indices based on separate external documents, create separate fields or even scripts to ask about company-specific matters (keywords indexing should help here), but I am also looking for a way to limit LLM from answering based on what it already knows and limit the responses only to those that are in-scope, i.e. explicitly stated in the document. \n\nWhen you are asking about a company A, could it be that it is responding about company B based on what it knows about it, not so much based on the external document index overlap?\nJovis:\nThank you for your answear.\nYes this is very likely the scenario if I understod your question. Basically I asked something more abstract about company A (that is not directly stated in company A's PDF). However, relevant information about company B exists, therefore it might assume this is correct seeing it is the most relevant answear to the query.", "start_char_idx": 0, "end_char_idx": 1098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f0dbd9e-0020-4100-ac14-a5386df24b2e": {"__data__": {"id_": "3f0dbd9e-0020-4100-ac14-a5386df24b2e", "embedding": null, "metadata": {"date": "2023-05-22T15:01:04.907+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110220796988760268", "node_type": "4", "metadata": {"date": "2023-05-22T15:01:04.907+00:00"}, "hash": "beb6cc7deb6a0c6d6248a8a35cfd659cb571905f937a17ae76c05c6070d79899", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "889da785-7713-42d5-a5d8-cf503c2c6e25", "node_type": "1", "metadata": {"date": "2023-05-22T09:19:31.532+00:00"}, "hash": "fd4a0a467f00904c78993e43e153f83aba9bfeba056015268ef6e2964c841737", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13b4fdd5-9bef-434c-a341-764068c29e6d", "node_type": "1", "metadata": {}, "hash": "02f86f1ce4a76d1c045a51c56ece62d930ee1d8d8a92536bdabd6a25432462c9", "class_name": "RelatedNodeInfo"}}, "text": "damon:\nIs there anyway I can preappend each prompt that gets sent out with certain text?\nLogan M:\nCheck this out: https://discord.com/channels/1059199217496772688/1109906051727364147/1109972300578693191", "start_char_idx": 0, "end_char_idx": 202, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13b4fdd5-9bef-434c-a341-764068c29e6d": {"__data__": {"id_": "13b4fdd5-9bef-434c-a341-764068c29e6d", "embedding": null, "metadata": {"date": "2023-05-23T01:52:00.565+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110384608291328070", "node_type": "4", "metadata": {"date": "2023-05-23T01:52:00.565+00:00"}, "hash": "4e854a896c9d474f0b1c90b734283a9ab97387f70a7365e9a8792b33c24fcf92", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f0dbd9e-0020-4100-ac14-a5386df24b2e", "node_type": "1", "metadata": {"date": "2023-05-22T15:01:04.907+00:00"}, "hash": "ca19d7a803933f0fd321db9a2bb6d3835ebdf122b275606987cb1d2fe9a8068d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "193d740c-59ec-4804-88f7-8176ff087e65", "node_type": "1", "metadata": {}, "hash": "1799cfeb0c1a8a21f82198acd8ceb9b2f6f95ac7f86e68751ce3c87382b05fbd", "class_name": "RelatedNodeInfo"}}, "text": "damon:\nIs there anyway I can see what device `device_map=auto` selected using the  `HuggingFaceLLMPredictor` I am using 4 NVIDIA T4s Core and it is being incredibly slow to generate text with `StabilityAI/stablelm-tuned-alpha-3b\"`\nLogan M:\nTry nvidia-smi while it's running to check if memory is being used?\n\nIf you want, you can also ensure the model is on gpu by loading it yourself and passing it in as a kwarg\n\n```python\nHuggingFaceLLMPredictor(model=model, ....)\n```", "start_char_idx": 0, "end_char_idx": 471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "193d740c-59ec-4804-88f7-8176ff087e65": {"__data__": {"id_": "193d740c-59ec-4804-88f7-8176ff087e65", "embedding": null, "metadata": {"date": "2023-05-23T18:59:22.576+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110643153624637440", "node_type": "4", "metadata": {"date": "2023-05-23T18:59:22.576+00:00"}, "hash": "0f2f1aaa2a1e1826dc5c9b757c7d70029389391288c399faa966df3a44192a83", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13b4fdd5-9bef-434c-a341-764068c29e6d", "node_type": "1", "metadata": {"date": "2023-05-23T01:52:00.565+00:00"}, "hash": "60ff1572868403c65cedffca4310ce2ccbe93aff0663e923f51aa637dbe0c4ab", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9eb2e29f-32aa-4792-88e3-685232a48621", "node_type": "1", "metadata": {}, "hash": "64b738b9259f442b0683e038bae6676831d43ea96b89c538828d8f8e9f765508", "class_name": "RelatedNodeInfo"}}, "text": "Chancellor Hands LLC:\nDoes anybody know if there is a way to only return the most similar nodes of an index based on a query and not answer the query?  I query a vector index, and instead of answering the query, It just returns the chunks of text that are most similar to the query.\nLogan M:\nYup!\n\n`index.as_query_engine(response_mode=\"no_text\")`\n\nThe nodes will then been on the response object, `response.source_nodes`\nChancellor Hands LLC:\namazing. thank you", "start_char_idx": 0, "end_char_idx": 461, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9eb2e29f-32aa-4792-88e3-685232a48621": {"__data__": {"id_": "9eb2e29f-32aa-4792-88e3-685232a48621", "embedding": null, "metadata": {"date": "2023-05-24T02:43:05.221+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110759850255859712", "node_type": "4", "metadata": {"date": "2023-05-24T02:43:05.221+00:00"}, "hash": "c59aa7611406ab1a853b095499e20888e8f688d728b4fb5245116b774fa37e5c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "193d740c-59ec-4804-88f7-8176ff087e65", "node_type": "1", "metadata": {"date": "2023-05-23T18:59:22.576+00:00"}, "hash": "b28c158f675a9c2b52b169b230cd3c47f5fcae86a5ff934e411f47494c8223a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "389bc3a2-6828-4a79-bce2-7ce5c2d37c4f", "node_type": "1", "metadata": {}, "hash": "b8ff35909db4ca42b4d8f387037231b8441d301c8847e6e7c1f2728650f50065", "class_name": "RelatedNodeInfo"}}, "text": "DonRucastle:\nHas anyone had any luck in forcing a specific language in the response? More specifically, allowing multiple languages to be spoken to the bot despite the prompt template being written in english.\ncoffeerv:\nThis did the trick for me \n`SYSTEM_PROMPT = SystemMessagePromptTemplate.from_template(\"Every response should be written like you are a grumpy but really wise old man. Answer in Spanish\")`\nDonRucastle:\nHonestly I will be trying this. Including the grumpy part even if it doesn't fit the service at all! Will be fun for the team to figure out why every response is grumpy when in another language.", "start_char_idx": 0, "end_char_idx": 615, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "389bc3a2-6828-4a79-bce2-7ce5c2d37c4f": {"__data__": {"id_": "389bc3a2-6828-4a79-bce2-7ce5c2d37c4f", "embedding": null, "metadata": {"date": "2023-05-24T06:18:38.798+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110814097609609246", "node_type": "4", "metadata": {"date": "2023-05-24T06:18:38.798+00:00"}, "hash": "a4476cf28bc3821d508a0f43b8c946ba7971b38c216e1ae39af4abf98eee0a41", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9eb2e29f-32aa-4792-88e3-685232a48621", "node_type": "1", "metadata": {"date": "2023-05-24T02:43:05.221+00:00"}, "hash": "7ca3551a7a7a0072bdefdfe71c8d884e522109ee1be4a3f4338389acbecaa213", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e59f8af6-dfe0-42d9-8156-207413e8a466", "node_type": "1", "metadata": {}, "hash": "03f7be683fd8121bdde734ecbb8de4ec35f0cdb4f15bbccd17f41ae4e106e95f", "class_name": "RelatedNodeInfo"}}, "text": "\u897f\u5229\u5148\u751f:\nDoes anyone have this problem?\nhttps://github.com/jerryjliu/llama_index/issues/3834\nmaxfrank:\nYep im having exactly this\n\u897f\u5229\u5148\u751f:\ngit pull , fix ~\nhttps://github.com/jerryjliu/llama_index/pull/3837", "start_char_idx": 0, "end_char_idx": 200, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e59f8af6-dfe0-42d9-8156-207413e8a466": {"__data__": {"id_": "e59f8af6-dfe0-42d9-8156-207413e8a466", "embedding": null, "metadata": {"date": "2023-05-24T14:31:28.732+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1110938122902048809", "node_type": "4", "metadata": {"date": "2023-05-24T14:31:28.732+00:00"}, "hash": "c995c43873440a9d0263de70fff664269ec70d751c6e8245b290882ec5b656a1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "389bc3a2-6828-4a79-bce2-7ce5c2d37c4f", "node_type": "1", "metadata": {"date": "2023-05-24T06:18:38.798+00:00"}, "hash": "fcd3d6bee05dac67e195375f86b6f0919840637a1a344300c872f3daa683b376", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2551aa8f-8c08-4e88-9717-c4b14e92cc75", "node_type": "1", "metadata": {}, "hash": "1ce907492f69f294227a38f862cdc43b579a0dc4b280841b83cd711d160b05b1", "class_name": "RelatedNodeInfo"}}, "text": "Siddhant Saurabh:\nhey facing error\n```\n*error_trace: Traceback (most recent call last):\n File \"/app/src/chatbot/query_gpt.py\", line 248, in get_answer\n   context_answer = self.call_pinecone_index(request)\n File \"/app/src/chatbot/query_gpt.py\", line 229, in call_pinecone_index\n   self.source.append(format_cited_source(source_node.doc_id))\n File \"/usr/local/lib/python3.8/site-packages/llama_index/data_structs/node.py\", line 172, in doc_id\n   return self.node.ref_doc_id\n File \"/usr/local/lib/python3.8/site-packages/llama_index/data_structs/node.py\", line 87, in ref_doc_id\n   return self.relationships.get(DocumentRelationship.SOURCE, None)\nAttributeError: 'Field' object has no attribute 'get'\n```\nwith latest llama_index 0.6.9\n@Logan M @jerryjliu98 @ravitheja\nLogan M:\nHow are you inserting nodes/documents? That attribute on the node should be set automatically usually", "start_char_idx": 0, "end_char_idx": 875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2551aa8f-8c08-4e88-9717-c4b14e92cc75": {"__data__": {"id_": "2551aa8f-8c08-4e88-9717-c4b14e92cc75", "embedding": null, "metadata": {"date": "2023-05-24T19:28:54.553+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111012973700460665", "node_type": "4", "metadata": {"date": "2023-05-24T19:28:54.553+00:00"}, "hash": "3e41b8a8e00d38ae42fd9975ef47ceac84aeb4faa8b0c556fa95ac253e009bc2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e59f8af6-dfe0-42d9-8156-207413e8a466", "node_type": "1", "metadata": {"date": "2023-05-24T14:31:28.732+00:00"}, "hash": "0c3c40a6c383c30d71e66a1ce687ff9a15d5876edd3b8fd9de0465d6af1917ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bb2461e7-b9a7-431a-a81f-c590a00eef00", "node_type": "1", "metadata": {}, "hash": "895e0d0a3abecf6c1002e9c0d3662e1bc31117d751f419f8a165b9e727b14580", "class_name": "RelatedNodeInfo"}}, "text": "Soshyant:\nhey guys, I have a question I'd appreciate if you answer. apparently in Langchain's SQL chains you can prevent the output of a Query to be handed over to the LLM, it is an essential feature for keeping sensitive data, private. I was wondering if there's a way to do the same with Llamaindex?\nLogan M:\nIs this question specific to SQL, or just in general?\n\nOur current SQL index only sends the table schema to the LLM (not the actual values in the db)\nSoshyant:\nsince I plan on using Llamaindex for structured data, then I assume my question only applies to SQL queries. My purpose is to implement a feature where NL prompts are translated into SQL queries. but I think if the returned query is directed to LLM for further elaboration, it's kind of a privacy risk.\nLogan M:\nYea the current sql index is a little basic. It will read the table schema and user query, and translate that to a SQL query, and then returns the raw result of running that query\n\nI think that should be fine, unless the schema is also a privacy risk?\nSoshyant:\nNo that's not what I mean. let's say a user types : \"who's the worst performing employee of the month?\", the LLM turns this prompt into a Query and extracts the required values from a DB. so far the data remains private (schema doesn't matter), but when the extracted data is returned to the LLM for explanation, like \" Mr. X performed the worst.\" at this point I'd consider it a data risk. I want to stop it from the data to be returned to the LLM for elaboration upon.", "start_char_idx": 0, "end_char_idx": 1515, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bb2461e7-b9a7-431a-a81f-c590a00eef00": {"__data__": {"id_": "bb2461e7-b9a7-431a-a81f-c590a00eef00", "embedding": null, "metadata": {"date": "2023-05-25T03:24:49.937+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111132743661781042", "node_type": "4", "metadata": {"date": "2023-05-25T03:24:49.937+00:00"}, "hash": "487da82eba031943e5a7f843f6e6d7f5c9df3d736d4abe3fe186efd7c513ae47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2551aa8f-8c08-4e88-9717-c4b14e92cc75", "node_type": "1", "metadata": {"date": "2023-05-24T19:28:54.553+00:00"}, "hash": "7f69dfd3d43646c07bf88f99788bd5454cb1aaab667aa6d65683a31833c42107", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9898c9f4-acbd-4726-bf0a-54c8fefd65a7", "node_type": "1", "metadata": {}, "hash": "b512a5b368325ea9d1424596c21d722893c969f7c04233361759f5ef32a38ec9", "class_name": "RelatedNodeInfo"}}, "text": "yendle:\nNeed help getting started using LlamaIndex, I have built apps using Langchain, can someone tell me what I should use for the Discord reader? Should I put the code in Vs Code or use a Jupyter Notebook?\nVaylonn:\nyou can use the jupyter notebook extension in vs code\nyendle:\nthanks I was trying to use it in VS code but had problems using it with Streamlit", "start_char_idx": 0, "end_char_idx": 361, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9898c9f4-acbd-4726-bf0a-54c8fefd65a7": {"__data__": {"id_": "9898c9f4-acbd-4726-bf0a-54c8fefd65a7", "embedding": null, "metadata": {"date": "2023-05-25T14:57:47.33+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111307131887562823", "node_type": "4", "metadata": {"date": "2023-05-25T14:57:47.33+00:00"}, "hash": "7f3cb6a354b43444f1e3232b9ca75bc7c28ff093cf204cf46072664e8baa0ee7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bb2461e7-b9a7-431a-a81f-c590a00eef00", "node_type": "1", "metadata": {"date": "2023-05-25T03:24:49.937+00:00"}, "hash": "e97558694283c0d3a36020bf5e5ffc36bb14a42010723ada16269251083c6cee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89f33194-9f75-4ecc-bc59-1bc878d42b68", "node_type": "1", "metadata": {}, "hash": "9fdd5614ad9ccb93dcd5219e64abb3961949f78972d713dcac61f6f4a1d778ff", "class_name": "RelatedNodeInfo"}}, "text": "Hajravasas:\nGreetings, I am looking to bootstrap my app with an index that was persisted somewhere. Do we have an opinion on what the community's opinion is about easiest persistence layer to deal with? I saw some of us are using pinecone. Is there anything more straightforward than that?\nLogan M:\nDepends on how you want to use the index. Are you loading it once and serving requests, or would it be loaded once per every request? Is the index static?\nHajravasas:\nI'm glad I asked \ud83d\ude00 Initial use case is for the index to be static, but my plan is for it to be additive. That way, when users add content, the index changes.\nLogan M:\nIn that case, I think pinecone and weaviate seem to be the most popular for this type of use case\n\nThis nice thing about the vector store integrations is that everything is actually persisted in the vector store (text and vectors!)\n\nTo connect back to an existing index, you can setup the vector store and storage context, and just do this\n\n`index = VectorStoreIndex([], storage_context=storage_context)`\n\nI think this gets missed quite often \ud83e\udd72\nHajravasas:\nAs always, thank you for being so helpful, @Logan M !!!", "start_char_idx": 0, "end_char_idx": 1145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89f33194-9f75-4ecc-bc59-1bc878d42b68": {"__data__": {"id_": "89f33194-9f75-4ecc-bc59-1bc878d42b68", "embedding": null, "metadata": {"date": "2023-05-25T16:39:39.5+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111332768186646618", "node_type": "4", "metadata": {"date": "2023-05-25T16:39:39.5+00:00"}, "hash": "4aa3ca83c44e7fb1e65d79e7761240e0dc5f1e37758ed20ff2872138769e600c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9898c9f4-acbd-4726-bf0a-54c8fefd65a7", "node_type": "1", "metadata": {"date": "2023-05-25T14:57:47.33+00:00"}, "hash": "9f81461b1b1f3658a560ba39e074c8abc4f7c0924a8f647d307bbc53666edf99", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "367b542b-1f7b-4d46-92af-8ec32f745ca3", "node_type": "1", "metadata": {}, "hash": "1870f8d177652c14523136970af9bd17cde2e1ef016402846a87a25455ccd417", "class_name": "RelatedNodeInfo"}}, "text": "lexe12:\nOf course the channel I'm trying to index is a text channel despite the description of the ValueError I copied above. I noticed that the llama-index DiscordReader was updated 3 months ago on github. Could it be just out of the date? I've got nothing left to think of after the whole day of unsuccessful attempts to make it work\nLogan M:\nNgl I think it might be out of date. These loaders are mostly community driven/maintained, so if you know the issue with the source code, definitely make a PR!", "start_char_idx": 0, "end_char_idx": 504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "367b542b-1f7b-4d46-92af-8ec32f745ca3": {"__data__": {"id_": "367b542b-1f7b-4d46-92af-8ec32f745ca3", "embedding": null, "metadata": {"date": "2023-05-25T18:01:07.571+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111353270242398369", "node_type": "4", "metadata": {"date": "2023-05-25T18:01:07.571+00:00"}, "hash": "af174495c944dc784d1bb5eb8add2190f0e5c45189b9f6dd49a5ffb6f4796a25", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89f33194-9f75-4ecc-bc59-1bc878d42b68", "node_type": "1", "metadata": {"date": "2023-05-25T16:39:39.5+00:00"}, "hash": "bc9056d2e3ea8d9976fd574763ca3f80f7b57f9005506ad62c91f4c9158c61ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "771eb551-f105-401e-897a-ec9c9dc555ce", "node_type": "1", "metadata": {}, "hash": "3dfaa92c1025a2d830c6edba08ac8018d06c438f47eb696a21642923f522fa68", "class_name": "RelatedNodeInfo"}}, "text": "thomoliver:\nhey team - would love some help here... \n\nthe airtable loader is giving my documents like this. \n\n\\', \\'Areas of Improvement\\': [\\'Making and changing plans\\'], \\'Source\\': \\'[Elon Musk by Ashlee Vance](https://www.amazon.com/Elon-Musk-SpaceX-Fantastic-Future/dp/006230125X)\\\\n\\\\n\\', \\'Quotes\\': \\'Musk also trained employees to make the right trade-offs between spending money and productivity\u2026 \u2018He would say that everything we did was a function of our burn rate and that we were burning through a hundred thousand dollars per day\u2026 Sometimes he wouldn\u2019t let you buy a part for two thousand dollars because he expected you to find it cheaper or invent something cheaper. Other times, he wouldn\u2019t flinch at renting a plane for ninety thousand dollars to get something to Kwaj because it saved an entire workday, so it was worth it. He would place this urgency that he expected the revenue in ten years to be ten million dollars a day and that every day we were slower to achieve our goals was a day of missing out on that money.\u2019\\\\n\\', \\'People (Raw)\\': [\\'Elon Musk\\']}},\n\nI want to get each node to be just the quote. Anyone got any idea how to do that in python? I am trying to do it but am being told documents is not subscriptable..\nthomoliver:\nhow can I find out the structure of the document type?", "start_char_idx": 0, "end_char_idx": 1316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "771eb551-f105-401e-897a-ec9c9dc555ce": {"__data__": {"id_": "771eb551-f105-401e-897a-ec9c9dc555ce", "embedding": null, "metadata": {"date": "2023-05-25T18:05:14.403+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111354305530843358", "node_type": "4", "metadata": {"date": "2023-05-25T18:05:14.403+00:00"}, "hash": "d00e6a0fcfb09cf5e81c508d3fdb1c8148560a0339eac74f671f511043169482", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "367b542b-1f7b-4d46-92af-8ec32f745ca3", "node_type": "1", "metadata": {"date": "2023-05-25T18:01:07.571+00:00"}, "hash": "4624759c8a69af1dd0ffd87b97c28a54ca558337d690c97ac2c5a3ab290a663a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eaad405a-2f20-484f-b538-ad8cab3f2d14", "node_type": "1", "metadata": {}, "hash": "f25db84305cc1db7a8ca17f496a8e91f86e053699e136856df5428e5dcae83b0", "class_name": "RelatedNodeInfo"}}, "text": "vampir:\nI use a vector index and I tried with a graph is it normal the langchain agent for chat doesn't always seem to use the index. I get no logs via llama_index.\nLogan M:\nYea that's normal, the langchain agent has to decide which tool to use (if any) based on the descriptions of the tool\nvampir:\nIs it possible to force him to use one? For instance in the context of just 1 index\nLogan M:\nI see this question come up a lot regarding langchain. Last time I searched for answer on this, seemed like there isn't a deterministic way.\n\nThe best was is to either modify the tool description, or modify the agent prefix to say something along the lines of \"always use tool X\"", "start_char_idx": 0, "end_char_idx": 672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eaad405a-2f20-484f-b538-ad8cab3f2d14": {"__data__": {"id_": "eaad405a-2f20-484f-b538-ad8cab3f2d14", "embedding": null, "metadata": {"date": "2023-05-25T19:26:12.121+00:00"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1111374680276877413", "node_type": "4", "metadata": {"date": "2023-05-25T19:26:12.121+00:00"}, "hash": "45573694faf0b7badbab17cc7c3015bffc7d446bd366d1df8048fa420be98daf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "771eb551-f105-401e-897a-ec9c9dc555ce", "node_type": "1", "metadata": {"date": "2023-05-25T18:05:14.403+00:00"}, "hash": "55b1073e008b8f81a5f0878c5c976bd906888c23bbce1128eac642b55062e3f4", "class_name": "RelatedNodeInfo"}}, "text": "Anbraten:\nCan I create a `LlamaToolkit` with a single index or query_engine somehow or do I always need `IndexToolConfig`?\nvampir:\nIt's just an array so you can just fill it with 1 query engine if you want. It works for me.\nAnbraten:\nOkay, I am now trying this:\n\n```\nindex_config = IndexToolConfig(\n        query_engine=index.as_query_engine(),\n        name=f\"Vector Index\",\n        description=f\"Vector index\",\n        tool_kwargs={\"return_direct\": True, \"return_sources\": True}\n    )\n\n    toolkit = LlamaToolkit(\n        index_configs=[index_config],\n    )\n```", "start_char_idx": 0, "end_char_idx": 562, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"1059314106907242566": {"node_ids": ["ad0b9bf8-040e-405f-8e9e-e48d1101a9c4"], "metadata": {"date": "2023-01-02T03:36:04.191+00:00"}}, "1059531287758655538": {"node_ids": ["7a377e25-32f6-45a1-a401-868172fbffe1"], "metadata": {"date": "2023-01-02T17:59:04.141+00:00"}}, "1059640614783828048": {"node_ids": ["7a3e470f-9795-44ad-8e61-407cdd8c7262"], "metadata": {"date": "2023-01-03T01:13:29.735+00:00"}}, "1059642227766341653": {"node_ids": ["6918dc88-6221-4b9f-8a49-2b477c0c6d99"], "metadata": {"date": "2023-01-03T01:19:54.3+00:00"}}, "1059737181234671676": {"node_ids": ["496561d5-a2df-48b3-9d76-2407e27ce23b"], "metadata": {"date": "2023-01-03T07:37:12.971+00:00"}}, "1061574088079978586": {"node_ids": ["160f54b4-9ba5-4696-a81a-2533560e241e"], "metadata": {"date": "2023-01-08T09:16:25.691+00:00"}}, "1061715932248035448": {"node_ids": ["c941520e-8c1c-4b72-9bb1-9b7b68e0c6da"], "metadata": {"date": "2023-01-08T18:40:03.976+00:00"}}, "1062802959508963439": {"node_ids": ["217abd49-cf1b-4a09-9885-cb526e4c6cd7"], "metadata": {"date": "2023-01-11T18:39:31.471+00:00"}}, "1063163546000707725": {"node_ids": ["a16ee3ec-1789-4712-b5b0-9c666b602c2c"], "metadata": {"date": "2023-01-12T18:32:21.99+00:00"}}, "1063476199780782100": {"node_ids": ["83475daa-cff8-4ed1-afc9-c8d441a54a6f"], "metadata": {"date": "2023-01-13T15:14:44.46+00:00"}}, "1063883812045594724": {"node_ids": ["157f0efa-205c-4fc3-82cc-71b17861e11f"], "metadata": {"date": "2023-01-14T18:14:26.797+00:00"}}, "1063884238610518126": {"node_ids": ["238bf44f-0e5a-4fa6-8935-8e72dd5c85b8"], "metadata": {"date": "2023-01-14T18:16:08.498+00:00"}}, "1063884751557120030": {"node_ids": ["062238e7-a3af-42ff-9fbb-cf0a1b2573be"], "metadata": {"date": "2023-01-14T18:18:10.794+00:00"}}, "1063913848790319136": {"node_ids": ["d5679e5a-906c-4ef9-a134-9ff506e3b10d"], "metadata": {"date": "2023-01-14T20:13:48.115+00:00"}}, "1063949675696234586": {"node_ids": ["b88a38b0-d2c8-4013-aec5-af865ef21ad6"], "metadata": {"date": "2023-01-14T22:36:09.915+00:00"}}, "1063961595878838385": {"node_ids": ["3cb54e1b-f392-4321-a451-6a58cad4a56a"], "metadata": {"date": "2023-01-14T23:23:31.908+00:00"}}, "1064018367301812346": {"node_ids": ["4cfb4e15-7a37-4f27-a86c-ad8279d60d8c"], "metadata": {"date": "2023-01-15T03:09:07.27+00:00"}}, "1064111734522134538": {"node_ids": ["17d05f81-853b-44ea-9601-2f592261658f"], "metadata": {"date": "2023-01-15T09:20:07.75+00:00"}}, "1065428004760731718": {"node_ids": ["dece5fe8-7a05-4f23-8a69-7a0ba598fe51"], "metadata": {"date": "2023-01-19T00:30:31.03+00:00"}}, "1065471408311898153": {"node_ids": ["b7683098-3856-47d7-b513-bece11f9b5f7"], "metadata": {"date": "2023-01-19T03:22:59.243+00:00"}}, "1065578358315954246": {"node_ids": ["24c61c9e-78ad-43f3-a7e5-174a189d10df"], "metadata": {"date": "2023-01-19T10:27:58.111+00:00"}}, "1065683307699904584": {"node_ids": ["c17514d9-0028-422d-963f-4e4a2d85f41a"], "metadata": {"date": "2023-01-19T17:24:59.994+00:00"}}, "1065697489073741915": {"node_ids": ["a3e59177-c6a6-4ade-a61f-92ae6ac302e5"], "metadata": {"date": "2023-01-19T18:21:21.097+00:00"}}, "1065804322908164246": {"node_ids": ["ac8d1944-cbac-41f0-a396-edbcaf90207f"], "metadata": {"date": "2023-01-20T01:25:52.268+00:00"}}, "1065808880518566010": {"node_ids": ["50e8ecf6-e448-4a08-8d78-2e487b05d6c6"], "metadata": {"date": "2023-01-20T01:43:58.887+00:00"}}, "1065975878812696666": {"node_ids": ["968ad9f8-cd8b-4259-978d-791c38405a71"], "metadata": {"date": "2023-01-20T12:47:34.383+00:00"}}, "1065977153327468575": {"node_ids": ["a811aac3-e999-42f0-845d-2edb1bcbc896"], "metadata": {"date": "2023-01-20T12:52:38.251+00:00"}}, "1065979599374262333": {"node_ids": ["009495fc-69c7-450d-81b4-590d16364bd0"], "metadata": {"date": "2023-01-20T13:02:21.434+00:00"}}, "1066044818574290964": {"node_ids": ["72243f22-454e-43e3-9e4a-ef306ce1d393"], "metadata": {"date": "2023-01-20T17:21:30.903+00:00"}}, "1066484476164722748": {"node_ids": ["a3512bf0-7512-4a08-9616-62ef24f694ce"], "metadata": {"date": "2023-01-21T22:28:33.441+00:00"}}, "1066522245079511140": {"node_ids": ["d41a8d3d-9bf9-41f9-9dce-251a26eb7fe8"], "metadata": {"date": "2023-01-22T00:58:38.252+00:00"}}, "1066664500239015957": {"node_ids": ["73b86eeb-76da-4fc8-b505-8c94865ec2de"], "metadata": {"date": "2023-01-22T10:23:54.525+00:00"}}, "1066815268870959125": {"node_ids": ["9dbde246-7013-46fb-a069-b064f073f207"], "metadata": {"date": "2023-01-22T20:23:00.568+00:00"}}, "1066866355548209172": {"node_ids": ["0105984b-2253-4d37-959c-75ab703fef40"], "metadata": {"date": "2023-01-22T23:46:00.581+00:00"}}, "1067001008334589952": {"node_ids": ["6a8f2ef7-6403-498e-96f2-0545082ca27a"], "metadata": {"date": "2023-01-23T08:41:04.307+00:00"}}, "1067140353838293033": {"node_ids": ["eb91d854-87cc-4f71-9349-52d99fc0d564"], "metadata": {"date": "2023-01-23T17:54:46.864+00:00"}}, "1067378921894580264": {"node_ids": ["0f5cdc26-2dda-4b10-9413-d410db317a70"], "metadata": {"date": "2023-01-24T09:42:45.921+00:00"}}, "1067393805323612160": {"node_ids": ["bd473c26-55c1-4f80-930e-de289796cbd3"], "metadata": {"date": "2023-01-24T10:41:54.407+00:00"}}, "1067398661253910589": {"node_ids": ["ece20304-b1b5-4c0e-9618-d4291b37cd5c"], "metadata": {"date": "2023-01-24T11:01:12.151+00:00"}}, "1067399604112478249": {"node_ids": ["498842ae-3343-4757-8a49-b03a043f9309"], "metadata": {"date": "2023-01-24T11:04:56.946+00:00"}}, "1067679198614917182": {"node_ids": ["b11ee36a-8da3-4396-bf1e-c8f052eeb6dd"], "metadata": {"date": "2023-01-25T05:35:57.47+00:00"}}, "1067679518816477194": {"node_ids": ["7b037985-5d20-43d7-803c-043b821896cd"], "metadata": {"date": "2023-01-25T05:37:13.812+00:00"}}, "1067859234173235240": {"node_ids": ["bf603371-2045-4bc1-a7d0-6e81b5d29661"], "metadata": {"date": "2023-01-25T17:31:21.292+00:00"}}, "1068244680422199326": {"node_ids": ["e4f81299-72f5-4430-a00c-6e359eb9192b"], "metadata": {"date": "2023-01-26T19:02:58.839+00:00"}}, "1068380296682147900": {"node_ids": ["c022a5fb-2d96-4973-ae7e-d112cac9ea28"], "metadata": {"date": "2023-01-27T04:01:52.275+00:00"}}, "1068423249828007946": {"node_ids": ["86ddc833-1ce5-4698-8011-db59189a45c5"], "metadata": {"date": "2023-01-27T06:52:33.103+00:00"}}, "1068451912644558848": {"node_ids": ["ca11e80b-9370-47a6-a591-8f64f9f84eed"], "metadata": {"date": "2023-01-27T08:46:26.851+00:00"}}, "1068570619001712730": {"node_ids": ["f6e53d45-20a3-4896-b17a-5ba2fb8c17e5"], "metadata": {"date": "2023-01-27T16:38:08.652+00:00"}}, "1068580389381210223": {"node_ids": ["ec8bb5eb-aca6-45ac-bc5a-59b4457e76c7"], "metadata": {"date": "2023-01-27T17:16:58.092+00:00"}}, "1068776132272472085": {"node_ids": ["6fdbe84e-5e82-4203-8b21-e63d601dff84"], "metadata": {"date": "2023-01-28T06:14:46.834+00:00"}}, "1068964291807555685": {"node_ids": ["5c1102b5-eca7-40c6-8bbb-9316b88a9161"], "metadata": {"date": "2023-01-28T18:42:27.563+00:00"}}, "1068982361770950716": {"node_ids": ["eb40048a-10f8-4883-9e14-eee3ab213293"], "metadata": {"date": "2023-01-28T19:54:15.778+00:00"}}, "1069017983382458438": {"node_ids": ["52a664a2-58f1-4bbd-9fd4-1eb9f86c03ad"], "metadata": {"date": "2023-01-28T22:15:48.632+00:00"}}, "1069019881359544420": {"node_ids": ["3f31412c-f6fb-42a1-b929-7e16848f5215"], "metadata": {"date": "2023-01-28T22:23:21.145+00:00"}}, "1069020747076468876": {"node_ids": ["fa88e2ac-99fd-4447-895a-b02d9b7bf9db"], "metadata": {"date": "2023-01-28T22:26:47.548+00:00"}}, "1069373288834412626": {"node_ids": ["dc66c10a-cd01-4dcd-9511-acddb9cef9f9"], "metadata": {"date": "2023-01-29T21:47:40.053+00:00"}}, "1069405879666999346": {"node_ids": ["c4b2ec13-3c97-49df-9d12-4ab56eb0a895"], "metadata": {"date": "2023-01-29T23:57:10.313+00:00"}}, "1069456064099143761": {"node_ids": ["e0d32942-7e7e-4645-ac7b-0f2a9a92d9e8"], "metadata": {"date": "2023-01-30T03:16:35.214+00:00"}}, "1069790899309138081": {"node_ids": ["7e71761b-fcab-4af5-b112-f08e2678c97e"], "metadata": {"date": "2023-01-31T01:27:06.149+00:00"}}, "1070359401598287943": {"node_ids": ["95e34ba8-b987-4318-9c76-0a17e8914176"], "metadata": {"date": "2023-02-01T15:06:07.657+00:00"}}, "1070857656799076352": {"node_ids": ["3cf33557-7e90-42c4-9a20-ee2666c9034f"], "metadata": {"date": "2023-02-03T00:06:00.954+00:00"}}, "1071106783181029406": {"node_ids": ["ccdc59fc-7584-4124-a861-bf44e41f7218"], "metadata": {"date": "2023-02-03T16:35:57.312+00:00"}}, "1071153785243697234": {"node_ids": ["922d27df-a3b9-4e24-9ab2-93de644ac1e8"], "metadata": {"date": "2023-02-03T19:42:43.477+00:00"}}, "1071228197074632745": {"node_ids": ["b12f9c34-fff6-4557-91b1-6ae669516e13"], "metadata": {"date": "2023-02-04T00:38:24.64+00:00"}}, "1071243006688112730": {"node_ids": ["9d24c8dd-f116-4660-96d2-5fa5c04862d7"], "metadata": {"date": "2023-02-04T01:37:15.527+00:00"}}, "1071354591515516959": {"node_ids": ["7f08c837-d8f8-40c7-84e8-f66d193639fd"], "metadata": {"date": "2023-02-04T09:00:39.423+00:00"}}, "1071378307263770685": {"node_ids": ["6624383a-d3a9-4cc3-95f9-9531f9b5b5ce"], "metadata": {"date": "2023-02-04T10:34:53.698+00:00"}}, "1071832260090794014": {"node_ids": ["c3e1198e-1d9b-426c-aeac-0701c2f790ad"], "metadata": {"date": "2023-02-05T16:38:44.486+00:00"}}, "1071887841740738731": {"node_ids": ["08e908d4-24e7-44e0-989a-dc2a3ebe20f1"], "metadata": {"date": "2023-02-05T20:19:36.184+00:00"}}, "1071900308982218783": {"node_ids": ["add0043e-8b54-43c8-a9d4-55ecf64cf888"], "metadata": {"date": "2023-02-05T21:09:08.606+00:00"}}, "1072077885214556251": {"node_ids": ["6aa9e8ec-3216-4e73-a594-64d28bc94409"], "metadata": {"date": "2023-02-06T08:54:46.079+00:00"}}, "1072186651650043995": {"node_ids": ["159416f0-8ad6-4aaa-8741-1bb2c6ffc987"], "metadata": {"date": "2023-02-06T16:06:58.018+00:00"}}, "1072262195800449207": {"node_ids": ["e0b5a247-f046-44d7-aa22-b7305ef1ad67"], "metadata": {"date": "2023-02-06T21:07:09.147+00:00"}}, "1072337856091144323": {"node_ids": ["046c0069-fb8c-45be-aeae-a346f33e343b"], "metadata": {"date": "2023-02-07T02:07:47.966+00:00"}}, "1072505550681677864": {"node_ids": ["4c791a98-24e2-4981-92a9-e113bbdaabae"], "metadata": {"date": "2023-02-07T13:14:09.472+00:00"}}, "1072579473691652128": {"node_ids": ["70e1731e-06e3-449a-b6cc-14bd9f61b9fa"], "metadata": {"date": "2023-02-07T18:07:54.091+00:00"}}, "1072723051189391431": {"node_ids": ["f03877ff-3f9b-4c3b-b8fb-0e3d9f5cc257"], "metadata": {"date": "2023-02-08T03:38:25.634+00:00"}}, "1072733033318318190": {"node_ids": ["2ea3eedc-664c-4697-a24f-78d2fe38dd35"], "metadata": {"date": "2023-02-08T04:18:05.559+00:00"}}, "1072861437053120512": {"node_ids": ["d3513f7d-53ec-428d-9365-6fe06293bd81"], "metadata": {"date": "2023-02-08T12:48:19.395+00:00"}}, "1072865771484622878": {"node_ids": ["55b6080c-e667-4a92-878b-4e154202292a"], "metadata": {"date": "2023-02-08T13:05:32.804+00:00"}}, "1072918444669943858": {"node_ids": ["f8d13645-48ca-487b-9b13-364216805be5"], "metadata": {"date": "2023-02-08T16:34:51.07+00:00"}}, "1072920103844319232": {"node_ids": ["2f46c051-f076-43e4-ae77-21c501de40c2"], "metadata": {"date": "2023-02-08T16:41:26.648+00:00"}}, "1073041964787834880": {"node_ids": ["be65e0c1-d4e8-4537-8a12-84bbd9522cae"], "metadata": {"date": "2023-02-09T00:45:40.561+00:00"}}, "1073051051936202773": {"node_ids": ["156a4ff2-85c2-414f-9862-6229aa1cd381"], "metadata": {"date": "2023-02-09T01:21:47.106+00:00"}}, "1073140516151103548": {"node_ids": ["db6ad1a2-01c6-4e2f-ba73-8bf72d6ec8ea"], "metadata": {"date": "2023-02-09T07:17:17.037+00:00"}}, "1073143739872194590": {"node_ids": ["f9d2f99c-bd77-4648-af4f-45bcfca8f9ee"], "metadata": {"date": "2023-02-09T07:30:05.632+00:00"}}, "1073215541856182332": {"node_ids": ["cc572593-f37d-4fd9-b4a3-81a3d00b0d3d"], "metadata": {"date": "2023-02-09T12:15:24.559+00:00"}}, "1073221588457099295": {"node_ids": ["d8b782ee-f4dd-43f5-9832-3cfb649373a2"], "metadata": {"date": "2023-02-09T12:39:26.181+00:00"}}, "1073224750572245042": {"node_ids": ["c8706269-a2f6-4158-a3d2-6f5e12d45c5f"], "metadata": {"date": "2023-02-09T12:52:00.088+00:00"}}, "1073250173658083508": {"node_ids": ["fa7b5073-607a-4619-bebb-2b26b74abfc0"], "metadata": {"date": "2023-02-09T14:33:01.424+00:00"}}, "1073340799598735373": {"node_ids": ["e7246b00-16dc-4644-a550-590b8ef8cb4d"], "metadata": {"date": "2023-02-09T20:33:08.332+00:00"}}, "1073366281799086220": {"node_ids": ["2f314dbd-02f5-443f-a9b3-b415d5c9ab65"], "metadata": {"date": "2023-02-09T22:14:23.762+00:00"}}, "1073441919574745129": {"node_ids": ["b1b615e6-1c28-4f2b-9b54-b6221f5c3bd6"], "metadata": {"date": "2023-02-10T03:14:57.213+00:00"}}, "1073454185430913105": {"node_ids": ["c7940338-ed3e-4f0e-9d09-d3b07ac8ee56"], "metadata": {"date": "2023-02-10T04:03:41.621+00:00"}}, "1073470005330591796": {"node_ids": ["4ec0b41c-10ee-451d-8df4-22247ff4f7a9"], "metadata": {"date": "2023-02-10T05:06:33.379+00:00"}}, "1073489506147258450": {"node_ids": ["784dcf86-30c2-4a21-b2f2-495fff011a18"], "metadata": {"date": "2023-02-10T06:24:02.736+00:00"}}, "1073705390979698829": {"node_ids": ["1977b405-f518-4e66-a973-2e57f34052c8"], "metadata": {"date": "2023-02-10T20:41:53.691+00:00"}}, "1073742124551512104": {"node_ids": ["55b4d14a-db18-406e-887f-1e259752c0a3"], "metadata": {"date": "2023-02-10T23:07:51.657+00:00"}}, "1073746285452070953": {"node_ids": ["35d9ca0d-227d-4f65-b178-52c2aca50be3"], "metadata": {"date": "2023-02-10T23:24:23.693+00:00"}}, "1073747794898211006": {"node_ids": ["7fcb01da-aa9f-4191-a999-d873dddcc1a5"], "metadata": {"date": "2023-02-10T23:30:23.573+00:00"}}, "1073874802718285834": {"node_ids": ["c3205d19-8104-4882-a9c1-fb035df79e1b"], "metadata": {"date": "2023-02-11T07:55:04.597+00:00"}}, "1074004335131893780": {"node_ids": ["190117f4-1228-43a5-8e57-67ef9c0b9026"], "metadata": {"date": "2023-02-11T16:29:47.531+00:00"}}, "1074013294165245972": {"node_ids": ["012079d9-7734-4175-987e-6c075391354f"], "metadata": {"date": "2023-02-11T17:05:23.531+00:00"}}, "1074064493979643934": {"node_ids": ["d5dea8c7-9dee-4d69-86be-9f3eb2fda36d"], "metadata": {"date": "2023-02-11T20:28:50.518+00:00"}}, "1074066504263401533": {"node_ids": ["e8f70ede-bd7b-4564-9e89-2feeb171c9eb"], "metadata": {"date": "2023-02-11T20:36:49.807+00:00"}}, "1074263408175755274": {"node_ids": ["38394d33-8304-40ba-b379-d7d30375898d"], "metadata": {"date": "2023-02-12T09:39:15.358+00:00"}}, "1074430667359797268": {"node_ids": ["57002f7f-39f0-4c77-a162-278ce28111b6"], "metadata": {"date": "2023-02-12T20:43:53.055+00:00"}}, "1074484726108266577": {"node_ids": ["d87307ef-0556-43b1-b3f2-b377d3bd7c3b"], "metadata": {"date": "2023-02-13T00:18:41.665+00:00"}}, "1074511357258518538": {"node_ids": ["6e3215d7-1795-4850-8a3d-a62321dcdd05"], "metadata": {"date": "2023-02-13T02:04:31.026+00:00"}}, "1074531128628756590": {"node_ids": ["e8a054e5-c721-45a1-8da4-2e777c1076a8"], "metadata": {"date": "2023-02-13T03:23:04.888+00:00"}}, "1074532133470732308": {"node_ids": ["8a337f08-31a7-4674-9aa7-5f935c72ccc8"], "metadata": {"date": "2023-02-13T03:27:04.461+00:00"}}, "1074673952682672210": {"node_ids": ["b8c1cddd-f836-4cdd-a8a8-066499789e4b"], "metadata": {"date": "2023-02-13T12:50:36.796+00:00"}}, "1074690672650633327": {"node_ids": ["b1b3bc2f-b0a2-410d-9da8-a305f9d9c8a1"], "metadata": {"date": "2023-02-13T13:57:03.147+00:00"}}, "1074711837263790131": {"node_ids": ["f3ef83da-7e57-4ac4-8750-0fa2df82d3fb"], "metadata": {"date": "2023-02-13T15:21:09.184+00:00"}}, "1074724475658043474": {"node_ids": ["be43a632-802d-4b8d-b45b-83c5732973a4"], "metadata": {"date": "2023-02-13T16:11:22.412+00:00"}}, "1074819346670563459": {"node_ids": ["099bfcea-b2c9-4cac-85be-0c1520340a86"], "metadata": {"date": "2023-02-13T22:28:21.424+00:00"}}, "1074884406914842634": {"node_ids": ["22bf4fdf-903b-41f8-9918-f3933e6817cc"], "metadata": {"date": "2023-02-14T02:46:52.995+00:00"}}, "1075032341417840761": {"node_ids": ["523e2d31-602b-4284-bb7b-4e5d0e442bb6"], "metadata": {"date": "2023-02-14T12:34:43.329+00:00"}}, "1075158852179349594": {"node_ids": ["c0bec1b3-6880-4a89-aff9-699996fa12c9"], "metadata": {"date": "2023-02-14T20:57:25.845+00:00"}}, "1075292235983224842": {"node_ids": ["6976be85-132b-48be-949c-c62bdb11954d"], "metadata": {"date": "2023-02-15T05:47:27.022+00:00"}}, "1075297640360706048": {"node_ids": ["0362f1a1-0a6b-4736-baa9-6d61d00ac686"], "metadata": {"date": "2023-02-15T06:08:55.526+00:00"}}, "1075328672870957076": {"node_ids": ["540c139c-40cf-451a-bb3a-8baa95a6e42d"], "metadata": {"date": "2023-02-15T08:12:14.253+00:00"}}, "1075330342128472126": {"node_ids": ["f943e581-7d64-4977-9785-83ac05889250"], "metadata": {"date": "2023-02-15T08:18:52.235+00:00"}}, "1075408853170147418": {"node_ids": ["03155c65-e206-4e08-a061-ec3c56455cf1"], "metadata": {"date": "2023-02-15T13:30:50.726+00:00"}}, "1075451235475402764": {"node_ids": ["1934fcd1-6a8b-4c1f-beb7-1ea14a5f7a4e"], "metadata": {"date": "2023-02-15T16:19:15.455+00:00"}}, "1075512720813719563": {"node_ids": ["663d017e-20a6-4dee-a05d-1e12d1132fce"], "metadata": {"date": "2023-02-15T20:23:34.702+00:00"}}, "1075748774653198366": {"node_ids": ["04eed960-07db-4576-9751-d6050220f06f"], "metadata": {"date": "2023-02-16T12:01:34.323+00:00"}}, "1075749386946093096": {"node_ids": ["f4391c8e-6fdb-4b69-a3e8-e367576350e8"], "metadata": {"date": "2023-02-16T12:04:00.305+00:00"}}, "1075797462595403817": {"node_ids": ["00ea0ca0-cb8a-4f6b-8dfb-8d15fc267fa4"], "metadata": {"date": "2023-02-16T15:15:02.433+00:00"}}, "1075839506575544481": {"node_ids": ["1b90250d-f221-46ce-ba78-941ebcd924f3"], "metadata": {"date": "2023-02-16T18:02:06.499+00:00"}}, "1075843568763162797": {"node_ids": ["6a0b2473-edb9-4c7f-b862-ef8f06439b1f"], "metadata": {"date": "2023-02-16T18:18:15+00:00"}}, "1075865143650558054": {"node_ids": ["998109bd-53f6-4294-8091-6b206e58dc9c"], "metadata": {"date": "2023-02-16T19:43:58.854+00:00"}}, "1075867143717011576": {"node_ids": ["3b10f734-f815-4e6e-bab9-84c95b3ceece"], "metadata": {"date": "2023-02-16T19:51:55.707+00:00"}}, "1075886072678060163": {"node_ids": ["9f68719c-4250-4c00-ac96-615e93e77e19"], "metadata": {"date": "2023-02-16T21:07:08.723+00:00"}}, "1075929098406338711": {"node_ids": ["2a620754-1c38-4851-a14e-4304a8e53beb"], "metadata": {"date": "2023-02-16T23:58:06.856+00:00"}}, "1076783492857348166": {"node_ids": ["65cc65fe-10e4-4a2a-aa28-6f34f3a7fd7d"], "metadata": {"date": "2023-02-19T08:33:10.367+00:00"}}, "1076783534699716629": {"node_ids": ["53991171-7c7a-40c9-83a3-b641f289e6d7"], "metadata": {"date": "2023-02-19T08:33:20.343+00:00"}}, "1076898778843467776": {"node_ids": ["4e8b9622-a16c-4311-97a7-b79cfc806048"], "metadata": {"date": "2023-02-19T16:11:16.688+00:00"}}, "1077358811934896198": {"node_ids": ["5ec9b843-a45b-48e3-8643-891c0d745aed", "a1cd01fd-ede6-43b2-ad67-6c4c09e7e07a"], "metadata": {"date": "2023-02-20T22:39:17.124+00:00"}}, "1077473220917219328": {"node_ids": ["5b648728-2bc8-4b27-b27d-41d71893638e"], "metadata": {"date": "2023-02-21T06:13:54.351+00:00"}}, "1077506974834495568": {"node_ids": ["df1c8070-44b0-473e-9b7b-768d88352b4a"], "metadata": {"date": "2023-02-21T08:28:01.912+00:00"}}, "1077681579020791880": {"node_ids": ["045c0e48-a6ac-4fd7-89b7-77a0169e9b04"], "metadata": {"date": "2023-02-21T20:01:50.794+00:00"}}, "1077861022674735184": {"node_ids": ["9610eaf9-0d81-47ac-916e-a8c5e8c7e705"], "metadata": {"date": "2023-02-22T07:54:53.495+00:00"}}, "1078303463299096617": {"node_ids": ["f2435a33-e866-4662-a52d-183cea7aef67"], "metadata": {"date": "2023-02-23T13:12:59.56+00:00"}}, "1078473961739915334": {"node_ids": ["9245979c-f960-46d3-82b0-9600601e284e"], "metadata": {"date": "2023-02-24T00:30:29.556+00:00"}}, "1078679652723335228": {"node_ids": ["39ff5a8e-38ff-498a-a82f-93569761e5f2"], "metadata": {"date": "2023-02-24T14:07:50.108+00:00"}}, "1078713750435151872": {"node_ids": ["3a9b475d-d2af-46e2-a887-60da7e9069d2"], "metadata": {"date": "2023-02-24T16:23:19.636+00:00"}}, "1078774643650986136": {"node_ids": ["2ee6cbc8-83d9-4093-a520-c26ae334f65f"], "metadata": {"date": "2023-02-24T20:25:17.71+00:00"}}, "1078789274075402251": {"node_ids": ["8070bcfd-5da8-45a0-be1d-a94eb759dfec"], "metadata": {"date": "2023-02-24T21:23:25.875+00:00"}}, "1078789953884000428": {"node_ids": ["03065805-e1bc-43e2-a211-326ef63e15c3"], "metadata": {"date": "2023-02-24T21:26:07.954+00:00"}}, "1078791067996000296": {"node_ids": ["737611f1-7245-40ba-abc3-662aa8e7e023"], "metadata": {"date": "2023-02-24T21:30:33.579+00:00"}}, "1078800149561737277": {"node_ids": ["7bd6e236-47cc-4be8-926e-17e34eeb5804"], "metadata": {"date": "2023-02-24T22:06:38.793+00:00"}}, "1078826036260773958": {"node_ids": ["7b702ce2-f14d-43cd-a73e-a5ea418877d3"], "metadata": {"date": "2023-02-24T23:49:30.663+00:00"}}, "1079076747041050715": {"node_ids": ["17a8ca58-4fd5-40cf-b4b9-99972f50606e"], "metadata": {"date": "2023-02-25T16:25:44.771+00:00"}}, "1079191090508345435": {"node_ids": ["25b7ac9f-8f32-4061-9578-874d4cfcb7d9"], "metadata": {"date": "2023-02-26T00:00:06.378+00:00"}}, "1079442490555383938": {"node_ids": ["cdcbe4c2-6c71-4e56-bc23-a663aaf9fbbb"], "metadata": {"date": "2023-02-26T16:39:04.82+00:00"}}, "1079575925471068230": {"node_ids": ["adf2a8de-3d2d-4fad-973e-ef30a5ae56bc"], "metadata": {"date": "2023-02-27T01:29:18.183+00:00"}}, "1080263915650416811": {"node_ids": ["1884aeb9-fdb8-42c8-b186-5315d6e35133"], "metadata": {"date": "2023-02-28T23:03:07.824+00:00"}}, "1080299966817374250": {"node_ids": ["f5975a91-8a12-4aea-99d2-c6918c05e60a"], "metadata": {"date": "2023-03-01T01:26:23.092+00:00"}}, "1080374871864922212": {"node_ids": ["5ea3759f-190e-4891-afe9-f84ded59b55c"], "metadata": {"date": "2023-03-01T06:24:01.847+00:00"}}, "1080551520757612594": {"node_ids": ["cdc00f7a-99ed-418a-8147-21b6d9a7de80"], "metadata": {"date": "2023-03-01T18:05:58.225+00:00"}}, "1080552440115499128": {"node_ids": ["1070d48f-8347-422c-bab7-f1079ec4ea63"], "metadata": {"date": "2023-03-01T18:09:37.417+00:00"}}, "1080639518195073054": {"node_ids": ["07c3f2a5-7114-4766-975c-c7c3e6be9bc8"], "metadata": {"date": "2023-03-01T23:55:38.449+00:00"}}, "1080648100479254568": {"node_ids": ["11949e00-0abb-48cb-b4fe-852007625c24"], "metadata": {"date": "2023-03-02T00:29:44.625+00:00"}}, "1080670134177370142": {"node_ids": ["bf28bc3c-bcd4-4fe8-99df-3c5cd11064ca"], "metadata": {"date": "2023-03-02T01:57:17.868+00:00"}}, "1080680891094945893": {"node_ids": ["1ee5d42e-7f98-49fd-a4fd-ca2ab16f5db7"], "metadata": {"date": "2023-03-02T02:40:02.517+00:00"}}, "1080682854452834395": {"node_ids": ["6d1794b5-e6b3-4a4c-96f9-4ed77a75ae1d"], "metadata": {"date": "2023-03-02T02:47:50.618+00:00"}}, "1080704497719984180": {"node_ids": ["a47ab701-94be-4f15-87e2-e0cea8d32571"], "metadata": {"date": "2023-03-02T04:13:50.775+00:00"}}, "1080718083867553822": {"node_ids": ["f7c9e92c-6565-40f9-888d-bd9bfc06b23a"], "metadata": {"date": "2023-03-02T05:07:49.965+00:00"}}, "1080788565258154044": {"node_ids": ["64add6ed-114d-487b-9ece-161efb186520"], "metadata": {"date": "2023-03-02T09:47:54.038+00:00"}}, "1080793075401633823": {"node_ids": ["b3221280-8fc2-44b3-8c66-e732db0965cd"], "metadata": {"date": "2023-03-02T10:05:49.34+00:00"}}, "1080796088849678357": {"node_ids": ["2ef7d2e0-dfeb-4828-a4e0-07ab8647dcc7"], "metadata": {"date": "2023-03-02T10:17:47.802+00:00"}}, "1080806777836281877": {"node_ids": ["86f359fd-8d94-48c9-93f2-141043c44ab7"], "metadata": {"date": "2023-03-02T11:00:16.255+00:00"}}, "1080847925342642218": {"node_ids": ["2d6ccdae-1084-4d56-96e2-b9f108e5f077"], "metadata": {"date": "2023-03-02T13:43:46.585+00:00"}}, "1080912671366467827": {"node_ids": ["e74698a8-a130-4855-875e-c033e6a11686"], "metadata": {"date": "2023-03-02T18:01:03.24+00:00"}}, "1080932626539483258": {"node_ids": ["9428958d-ed08-416e-add6-91cd97a0bc03"], "metadata": {"date": "2023-03-02T19:20:20.924+00:00"}}, "1080933109073186826": {"node_ids": ["63f1a3ea-5c48-42aa-831f-c6f14f1ade41"], "metadata": {"date": "2023-03-02T19:22:15.969+00:00"}}, "1080937442997190676": {"node_ids": ["281f2c6c-fa08-46a0-9ce6-ee898eca8805"], "metadata": {"date": "2023-03-02T19:39:29.257+00:00"}}, "1081112568510292018": {"node_ids": ["00c905ab-374a-44f8-b2d7-98bead96d4d9"], "metadata": {"date": "2023-03-03T07:15:22.433+00:00"}}, "1081148960430886933": {"node_ids": ["c2216ef9-2608-4ece-9037-9a38ce85b440"], "metadata": {"date": "2023-03-03T09:39:58.943+00:00"}}, "1081295364595908790": {"node_ids": ["029526d7-3880-4704-ab7d-0c3871c03468"], "metadata": {"date": "2023-03-03T19:21:44.416+00:00"}}, "1081328872571801680": {"node_ids": ["08264b07-9918-48e6-8ca7-891f6b77e371"], "metadata": {"date": "2023-03-03T21:34:53.34+00:00"}}, "1081329351800406107": {"node_ids": ["6d5099ff-1edb-4f09-b6fb-b7abcdd72bc7"], "metadata": {"date": "2023-03-03T21:36:47.597+00:00"}}, "1081336444339109948": {"node_ids": ["2bc34d6b-4b9b-4fbf-a303-38df2668e487"], "metadata": {"date": "2023-03-03T22:04:58.59+00:00"}}, "1081366516399882340": {"node_ids": ["63a9723f-6d4c-4d39-8961-f44d9e50679e"], "metadata": {"date": "2023-03-04T00:04:28.328+00:00"}}, "1081394193764712488": {"node_ids": ["3f81febf-5601-4af7-a815-5c6b469668fe"], "metadata": {"date": "2023-03-04T01:54:27.126+00:00"}}, "1081568608863391824": {"node_ids": ["d1e324fc-9d8a-4ab8-9a9d-febfeac337a7"], "metadata": {"date": "2023-03-04T13:27:30.926+00:00"}}, "1081742628237881494": {"node_ids": ["34e8f2ac-e6e0-47b2-a176-b01dea43b296"], "metadata": {"date": "2023-03-05T00:59:00.378+00:00"}}, "1082076726974234737": {"node_ids": ["8a6a5cd5-b781-4fda-b072-992cadb878c3"], "metadata": {"date": "2023-03-05T23:06:35.724+00:00"}}, "1082205263349678151": {"node_ids": ["d10af1ae-a22b-4e0a-804c-f124de0a3ef2"], "metadata": {"date": "2023-03-06T07:37:21.184+00:00"}}, "1082211813766213692": {"node_ids": ["fa879dee-1279-491d-93f4-abfab8c8a7ca"], "metadata": {"date": "2023-03-06T08:03:22.925+00:00"}}, "1082303582981869649": {"node_ids": ["4f9dc698-114f-4595-ac80-9b87b7ac6666"], "metadata": {"date": "2023-03-06T14:08:02.411+00:00"}}, "1082768936573075606": {"node_ids": ["ad3d827b-5969-4685-91d2-69e2cf66e513"], "metadata": {"date": "2023-03-07T20:57:11.353+00:00"}}, "1083069177985765386": {"node_ids": ["051c2198-3649-455e-9c93-aef783b352c8"], "metadata": {"date": "2023-03-08T16:50:14.484+00:00"}}, "1083097212671766590": {"node_ids": ["e1d0d185-9140-46f8-b47c-94ee98de1934"], "metadata": {"date": "2023-03-08T18:41:38.474+00:00"}}, "1083099657632223342": {"node_ids": ["32ee192a-33d3-4def-b9c6-57cc59f14b6b"], "metadata": {"date": "2023-03-08T18:51:21.398+00:00"}}, "1083108184740339742": {"node_ids": ["314e15fe-e7fd-464b-b211-92402afdc101"], "metadata": {"date": "2023-03-08T19:25:14.419+00:00"}}, "1083116241541156945": {"node_ids": ["0be76cdf-42fe-491d-bcc7-096a73e82108"], "metadata": {"date": "2023-03-08T19:57:15.31+00:00"}}, "1083122207531749426": {"node_ids": ["a9978d0b-6640-4cc9-9387-c0ea050fe323"], "metadata": {"date": "2023-03-08T20:20:57.713+00:00"}}, "1083322529105575956": {"node_ids": ["8e6ddccd-d742-42d2-a958-f7a1f3c8fc0b"], "metadata": {"date": "2023-03-09T09:36:58.098+00:00"}}, "1083474132441772113": {"node_ids": ["ba383ded-7ac1-4191-8894-9f7db7aaaf3a"], "metadata": {"date": "2023-03-09T19:39:23.15+00:00"}}, "1083519788573261864": {"node_ids": ["ec2c95de-4d17-411c-b6db-d85b99d869ad"], "metadata": {"date": "2023-03-09T22:40:48.42+00:00"}}, "1083561958097289216": {"node_ids": ["67bcda7d-2f1a-42b7-a88e-544f799ed618"], "metadata": {"date": "2023-03-10T01:28:22.418+00:00"}}, "1083572873848963154": {"node_ids": ["0238478e-c1d2-47f7-ae7f-60fa58523fe4"], "metadata": {"date": "2023-03-10T02:11:44.936+00:00"}}, "1083619174938595388": {"node_ids": ["25d3dc39-ebc5-4488-865a-bbf06c0193bb"], "metadata": {"date": "2023-03-10T05:15:43.976+00:00"}}, "1083754445705326673": {"node_ids": ["7002a959-e16c-4f6e-8a2e-784d3819982e"], "metadata": {"date": "2023-03-10T14:13:15.04+00:00"}}, "1083759371990859888": {"node_ids": ["3e916b02-a69f-486e-bec0-5e02f5f7cf54"], "metadata": {"date": "2023-03-10T14:32:49.558+00:00"}}, "1083760308314706031": {"node_ids": ["178bc042-4ee9-4e5c-ac33-45f7f571f897"], "metadata": {"date": "2023-03-10T14:36:32.795+00:00"}}, "1083778977526722611": {"node_ids": ["2549f8fa-ee84-4bd8-9922-49c97a940359"], "metadata": {"date": "2023-03-10T15:50:43.882+00:00"}}, "1083792829278584843": {"node_ids": ["d6f5f444-0ca1-4bc7-b7e6-45e336c32526"], "metadata": {"date": "2023-03-10T16:45:46.397+00:00"}}, "1084085632562888734": {"node_ids": ["2464655d-221b-42da-aea0-59de1e1a51bd"], "metadata": {"date": "2023-03-11T12:09:16.14+00:00"}}, "1084179118033227836": {"node_ids": ["a393f9c8-80a7-4402-a6c6-58761f00f8c3"], "metadata": {"date": "2023-03-11T18:20:44.813+00:00"}}, "1084247067112779898": {"node_ids": ["963f46d1-fd35-4b1b-9ad6-5b6bedd07d07"], "metadata": {"date": "2023-03-11T22:50:45.136+00:00"}}, "1084247092635107438": {"node_ids": ["f97cc97f-f176-426f-ac67-16564183822a"], "metadata": {"date": "2023-03-11T22:50:51.221+00:00"}}, "1084305521215033444": {"node_ids": ["80dd1486-43b2-4e1c-8900-7e2398b1a0ab"], "metadata": {"date": "2023-03-12T02:43:01.68+00:00"}}, "1084613316053311489": {"node_ids": ["ba623c04-a525-4576-b58b-4bb17b6c091d"], "metadata": {"date": "2023-03-12T23:06:05.688+00:00"}}, "1084718723987947571": {"node_ids": ["02992e9e-f6e5-4b6e-86bc-8b540f686494"], "metadata": {"date": "2023-03-13T06:04:56.898+00:00"}}, "1084753677178376222": {"node_ids": ["0e82514b-8276-4462-9c47-68f2fff0800c"], "metadata": {"date": "2023-03-13T08:23:50.388+00:00"}}, "1084876932589555783": {"node_ids": ["bdb945be-e646-4be9-86a6-9f47f33f2f94"], "metadata": {"date": "2023-03-13T16:33:36.768+00:00"}}, "1084956695194775592": {"node_ids": ["58a703e0-393d-4720-a869-787ec0e59fa5"], "metadata": {"date": "2023-03-13T21:50:33.655+00:00"}}, "1085087103920132197": {"node_ids": ["2cd679d2-b9a9-40fe-90ec-fcc55c76e0eb"], "metadata": {"date": "2023-03-14T06:28:45.518+00:00"}}, "1085100286441439273": {"node_ids": ["6df134c0-52c5-49eb-ab40-79383f3daf95"], "metadata": {"date": "2023-03-14T07:21:08.476+00:00"}}, "1085122648046063636": {"node_ids": ["6071ec5c-6e1a-48de-bbbd-d94786cb4cb6"], "metadata": {"date": "2023-03-14T08:49:59.898+00:00"}}, "1085216740339875991": {"node_ids": ["d225c8b9-4a5d-436a-a7e1-1ed8a0e0e3cf"], "metadata": {"date": "2023-03-14T15:03:53.249+00:00"}}, "1085319607897821195": {"node_ids": ["bc12b1e2-17f5-41f8-b2c7-f689a471445b"], "metadata": {"date": "2023-03-14T21:52:38.786+00:00"}}, "1085324838559821974": {"node_ids": ["bc3ef2a2-9ef5-425b-a11e-eccf4476846d"], "metadata": {"date": "2023-03-14T22:13:25.873+00:00"}}, "1085371949858947123": {"node_ids": ["b2ef1a71-b3ea-4c3c-875a-7a737ab45daf"], "metadata": {"date": "2023-03-15T01:20:38.082+00:00"}}, "1085398267770183760": {"node_ids": ["9f6fb565-be6a-4373-8429-e37bf5134ae8"], "metadata": {"date": "2023-03-15T03:05:12.761+00:00"}}, "1085511018693804113": {"node_ids": ["12ea90d4-e35f-417e-ad7f-51fa38bfc5ad"], "metadata": {"date": "2023-03-15T10:33:14.676+00:00"}}, "1085540732070285353": {"node_ids": ["4a3180be-2b0b-445b-b5af-3f2de75eba2c"], "metadata": {"date": "2023-03-15T12:31:18.897+00:00"}}, "1085553350390583307": {"node_ids": ["3f99eee2-db41-47f1-8fa0-e5b5eab74de8"], "metadata": {"date": "2023-03-15T13:21:27.339+00:00"}}, "1085579182307807313": {"node_ids": ["b2b31664-24cf-4f85-9d22-81d98d0d2b86"], "metadata": {"date": "2023-03-15T15:04:06.148+00:00"}}, "1085586527591075860": {"node_ids": ["1c0fefd8-7d32-4f51-9bda-05bb7097210e"], "metadata": {"date": "2023-03-15T15:33:17.4+00:00"}}, "1085648901148770478": {"node_ids": ["7ee3d94b-a2fa-43ef-baef-88152273c377"], "metadata": {"date": "2023-03-15T19:41:08.415+00:00"}}, "1085688993858981909": {"node_ids": ["2cc19d61-2bba-4bdb-b31b-ee34bf86f48c"], "metadata": {"date": "2023-03-15T22:20:27.262+00:00"}}, "1085745359394979860": {"node_ids": ["cc0725d5-ed82-4ad2-ba75-1b3d53c77599"], "metadata": {"date": "2023-03-16T02:04:25.853+00:00"}}, "1085785318822785064": {"node_ids": ["c3c96ec5-1a4b-49a3-b7f0-31edc3769252"], "metadata": {"date": "2023-03-16T04:43:12.923+00:00"}}, "1085789697814564914": {"node_ids": ["5783eccd-6802-4d29-a10b-b40af78a82fe"], "metadata": {"date": "2023-03-16T05:00:36.956+00:00"}}, "1085812187861352498": {"node_ids": ["ebb24d8b-bcf3-428d-a3a6-dd2499b1ad1c"], "metadata": {"date": "2023-03-16T06:29:59.001+00:00"}}, "1085813176513347704": {"node_ids": ["3f6245e1-3d80-48f6-879d-fa61856520a6"], "metadata": {"date": "2023-03-16T06:33:54.714+00:00"}}, "1085934652314877983": {"node_ids": ["a7df105c-80ba-4472-816c-f2e2ddf06f3f"], "metadata": {"date": "2023-03-16T14:36:36.802+00:00"}}, "1086012677068959776": {"node_ids": ["a1cac087-30cb-4add-866f-61dd6ed2b822"], "metadata": {"date": "2023-03-16T19:46:39.353+00:00"}}, "1086020117458079925": {"node_ids": ["a38e208b-91ed-446e-81b6-60db82d8c340"], "metadata": {"date": "2023-03-16T20:16:13.28+00:00"}}, "1086037370836615259": {"node_ids": ["a27bba67-64e7-4d83-8f42-1bd91b994a9d"], "metadata": {"date": "2023-03-16T21:24:46.806+00:00"}}, "1086050962499711026": {"node_ids": ["2fedfdce-a172-42fa-ab92-d739ddab864b"], "metadata": {"date": "2023-03-16T22:18:47.311+00:00"}}, "1086204851379245197": {"node_ids": ["b1a675c5-8629-466d-b482-94926f637324"], "metadata": {"date": "2023-03-17T08:30:17.279+00:00"}}, "1086270139021930506": {"node_ids": ["f002fd44-d3cb-451b-a6f5-dcf9b9885977"], "metadata": {"date": "2023-03-17T12:49:43.066+00:00"}}, "1086441287319826522": {"node_ids": ["49dbd679-e9c3-4a24-8b14-6efdae89a816"], "metadata": {"date": "2023-03-18T00:09:48+00:00"}}, "1086450662818197566": {"node_ids": ["f51c38d5-669d-4cbc-a94a-728cda22a1eb"], "metadata": {"date": "2023-03-18T00:47:03.293+00:00"}}, "1086724338461462541": {"node_ids": ["7cd4b425-d7c3-4536-b76f-37a77a5715d4"], "metadata": {"date": "2023-03-18T18:54:32.651+00:00"}}, "1086832870787666030": {"node_ids": ["05a52f6c-3cf3-44ef-8d62-178aa93e7b26"], "metadata": {"date": "2023-03-19T02:05:48.774+00:00"}}, "1086950395458355292": {"node_ids": ["79383abe-7a84-4472-a021-52be7e9722ac"], "metadata": {"date": "2023-03-19T09:52:48.839+00:00"}}, "1086968174353862687": {"node_ids": ["ba1b6514-adf9-4b7f-ba55-118f2d1219ee"], "metadata": {"date": "2023-03-19T11:03:27.658+00:00"}}, "1086968357326180395": {"node_ids": ["7b1194a7-bf5c-463b-bd78-5e516ff325a8"], "metadata": {"date": "2023-03-19T11:04:11.282+00:00"}}, "1086974298251608116": {"node_ids": ["5a5f6857-2100-4b3e-851a-f490621aebeb"], "metadata": {"date": "2023-03-19T11:27:47.709+00:00"}}, "1086977412400693280": {"node_ids": ["20b8fb19-814e-4770-b673-fef8114d86b2"], "metadata": {"date": "2023-03-19T11:40:10.18+00:00"}}, "1086984654860599366": {"node_ids": ["a804445f-965f-45c6-995b-0983e4af72d7"], "metadata": {"date": "2023-03-19T12:08:56.917+00:00"}}, "1086994839096266783": {"node_ids": ["ff38bf2e-d57e-4a96-ac62-6502208c0ec8"], "metadata": {"date": "2023-03-19T12:49:25.028+00:00"}}, "1087000519073079337": {"node_ids": ["d587fd12-fc78-4e54-8897-eaeda297ccc6"], "metadata": {"date": "2023-03-19T13:11:59.24+00:00"}}, "1087006323180306563": {"node_ids": ["e336df57-5aa0-4b8c-a279-2a5d4f474bac"], "metadata": {"date": "2023-03-19T13:35:03.047+00:00"}}, "1087006977063923713": {"node_ids": ["e527282e-f2ad-43a5-b455-9b6b6ff3132b"], "metadata": {"date": "2023-03-19T13:37:38.945+00:00"}}, "1087022368150540318": {"node_ids": ["fc3e1ed2-19fa-45c9-95eb-9a92446a4e16"], "metadata": {"date": "2023-03-19T14:38:48.466+00:00"}}, "1087050949303992472": {"node_ids": ["9f4393d3-9f4e-40fe-bd92-e8eddb377c51"], "metadata": {"date": "2023-03-19T16:32:22.744+00:00"}}, "1087051901142585395": {"node_ids": ["c728e66c-0379-4de9-ba80-e143d6301542"], "metadata": {"date": "2023-03-19T16:36:09.68+00:00"}}, "1087053681406509066": {"node_ids": ["500f3ed1-92db-46fe-be0a-bac65768cdd9"], "metadata": {"date": "2023-03-19T16:43:14.128+00:00"}}, "1087056600499499098": {"node_ids": ["89175def-e29e-426c-ae7a-460464ceb01c"], "metadata": {"date": "2023-03-19T16:54:50.094+00:00"}}, "1087062566993404004": {"node_ids": ["6b435df0-2535-42c9-ab90-2d745f019bb1"], "metadata": {"date": "2023-03-19T17:18:32.617+00:00"}}, "1087344397680648324": {"node_ids": ["2aaa172d-b25f-4947-9f07-8108ce2bd189"], "metadata": {"date": "2023-03-20T11:58:26.289+00:00"}}, "1087347988407525377": {"node_ids": ["0f128100-cacd-45d2-825d-14fbb7c063f4"], "metadata": {"date": "2023-03-20T12:12:42.385+00:00"}}, "1087348527635644417": {"node_ids": ["e785808e-baf9-4a99-bc4d-3fb040ecbbfc"], "metadata": {"date": "2023-03-20T12:14:50.947+00:00"}}, "1087364107654680668": {"node_ids": ["4de0b387-b0cd-4384-bd78-1a8886dbd5dd"], "metadata": {"date": "2023-03-20T13:16:45.513+00:00"}}, "1087412205156303019": {"node_ids": ["89cf293c-86b4-4b0b-aa4c-b867f62ee531"], "metadata": {"date": "2023-03-20T16:27:52.851+00:00"}}, "1087415605101084682": {"node_ids": ["bdf522cf-aacc-4652-afe0-2421e6b4f8a7"], "metadata": {"date": "2023-03-20T16:41:23.461+00:00"}}, "1087440937623490692": {"node_ids": ["65ea30bc-99ef-4875-85d8-3787c7f94a9d"], "metadata": {"date": "2023-03-20T18:22:03.205+00:00"}}, "1087444022911578142": {"node_ids": ["0f87aa93-97e7-4e0a-973a-f30eb2e3b98c"], "metadata": {"date": "2023-03-20T18:34:18.795+00:00"}}, "1087504177825067078": {"node_ids": ["a9ba1d6d-3ae4-430d-8ed9-16979f8a329c"], "metadata": {"date": "2023-03-20T22:33:20.844+00:00"}}, "1087509749517533204": {"node_ids": ["5856bed4-555e-4e93-bce9-e8d55522a692"], "metadata": {"date": "2023-03-20T22:55:29.239+00:00"}}, "1087590022074601543": {"node_ids": ["69c13501-08fd-4614-a998-c713ba4a3a65"], "metadata": {"date": "2023-03-21T04:14:27.708+00:00"}}, "1087600298274586755": {"node_ids": ["ae5eb307-d501-4572-a675-515c6f3007de"], "metadata": {"date": "2023-03-21T04:55:17.745+00:00"}}, "1087634790888509500": {"node_ids": ["1a4726e5-9e53-438c-a530-ee73d58557e9"], "metadata": {"date": "2023-03-21T07:12:21.425+00:00"}}, "1087671852622688266": {"node_ids": ["c161bc68-8601-43a7-a9bf-70fee088e4ef"], "metadata": {"date": "2023-03-21T09:39:37.631+00:00"}}, "1087721537827786772": {"node_ids": ["4ec3bbba-fbd1-4ad2-970d-f2dbe6022614"], "metadata": {"date": "2023-03-21T12:57:03.507+00:00"}}, "1087734157083418634": {"node_ids": ["c0c9d527-3c43-4ae4-971a-fe92e4a1a5ca"], "metadata": {"date": "2023-03-21T13:47:12.172+00:00"}}, "1087737128148009042": {"node_ids": ["d3bfa49e-528e-41c3-880f-62d4cc2fcda1"], "metadata": {"date": "2023-03-21T13:59:00.529+00:00"}}, "1087785559646290040": {"node_ids": ["c61193f5-feaf-48ab-99c0-1f6bb8fbc37b"], "metadata": {"date": "2023-03-21T17:11:27.498+00:00"}}, "1087789607195791511": {"node_ids": ["e2a41294-93e2-4404-b874-26f107af42f8"], "metadata": {"date": "2023-03-21T17:27:32.509+00:00"}}, "1087800655470678066": {"node_ids": ["57808c3d-e571-4a31-bb77-e62053fccea8"], "metadata": {"date": "2023-03-21T18:11:26.623+00:00"}}, "1087835701732720820": {"node_ids": ["3d97c0bf-3b24-41ee-b246-cebbc5f13ece"], "metadata": {"date": "2023-03-21T20:30:42.303+00:00"}}, "1087876152611315742": {"node_ids": ["66e78ce3-c200-485d-9ed6-eb7614eb169e"], "metadata": {"date": "2023-03-21T23:11:26.544+00:00"}}, "1087968569729486868": {"node_ids": ["8dfa093b-9d7c-4bdb-b7e6-bd511cd5fd4f"], "metadata": {"date": "2023-03-22T05:18:40.502+00:00"}}, "1088016711845957653": {"node_ids": ["1b180a0b-ee34-46d1-a3a7-d5324d33f579"], "metadata": {"date": "2023-03-22T08:29:58.477+00:00"}}, "1088081015639126096": {"node_ids": ["862513ff-c8ac-46bb-b900-63299b94f53b"], "metadata": {"date": "2023-03-22T12:45:29.696+00:00"}}, "1088163751502561302": {"node_ids": ["1a05ed9c-a6e4-4d87-a735-073a7b64b364"], "metadata": {"date": "2023-03-22T18:14:15.463+00:00"}}, "1088164500206800936": {"node_ids": ["44cd3754-3e07-497a-a1f1-dfcc59a3080c"], "metadata": {"date": "2023-03-22T18:17:13.968+00:00"}}, "1088217325221728337": {"node_ids": ["9252f4d7-cf36-4677-8e9d-77469bd3b115"], "metadata": {"date": "2023-03-22T21:47:08.433+00:00"}}, "1088220601140924536": {"node_ids": ["827ad132-e465-4d67-88e1-aa2a6e74c1d4"], "metadata": {"date": "2023-03-22T22:00:09.473+00:00"}}, "1088276920447270992": {"node_ids": ["74f4e6d6-3f01-4c66-92fb-60e6eb22f529"], "metadata": {"date": "2023-03-23T01:43:57.042+00:00"}}, "1088280495785254972": {"node_ids": ["cca78525-8ee5-427a-9cf9-ffd96090d63d"], "metadata": {"date": "2023-03-23T01:58:09.469+00:00"}}, "1088421061298769970": {"node_ids": ["e263632f-6cb8-475f-86a9-c257d6f91c02"], "metadata": {"date": "2023-03-23T11:16:42.899+00:00"}}, "1088444181753630780": {"node_ids": ["77b6fe7a-1d07-4986-8abb-a45901b684cb"], "metadata": {"date": "2023-03-23T12:48:35.245+00:00"}}, "1088480785574662275": {"node_ids": ["7beaf66e-235d-4e49-bf72-7369c7cb6219"], "metadata": {"date": "2023-03-23T15:14:02.276+00:00"}}, "1088481956255240192": {"node_ids": ["34c8c148-399d-4e3e-9aaf-7ddec7ab332d"], "metadata": {"date": "2023-03-23T15:18:41.388+00:00"}}, "1088494981565661244": {"node_ids": ["92b3817d-376b-47f7-b233-9b476efed0d4"], "metadata": {"date": "2023-03-23T16:10:26.864+00:00"}}, "1088502513503850658": {"node_ids": ["42a4ee59-31b3-49f0-b8eb-530c1da671b4"], "metadata": {"date": "2023-03-23T16:40:22.618+00:00"}}, "1088534046381969528": {"node_ids": ["561cbe2c-7aac-414d-ae6b-9905d6f1fa0a"], "metadata": {"date": "2023-03-23T18:45:40.642+00:00"}}, "1088552607083143299": {"node_ids": ["2fd9ecc9-56a8-4cbf-9785-92062fbcaa4b"], "metadata": {"date": "2023-03-23T19:59:25.858+00:00"}}, "1088564751266750505": {"node_ids": ["b77a548f-3588-4d46-8fb6-0a494cc91c9f"], "metadata": {"date": "2023-03-23T20:47:41.257+00:00"}}, "1088637858186809565": {"node_ids": ["679d034e-0903-4570-bffb-e6aaed46634f"], "metadata": {"date": "2023-03-24T01:38:11.305+00:00"}}, "1088730842198712391": {"node_ids": ["1498f68d-fc81-4900-be41-70ff2c5c3d74"], "metadata": {"date": "2023-03-24T07:47:40.421+00:00"}}, "1088737463847108619": {"node_ids": ["9b68a1f9-0523-4600-b726-8b1ee85f6709"], "metadata": {"date": "2023-03-24T08:13:59.145+00:00"}}, "1088754575323955200": {"node_ids": ["004d8c18-6b0b-4712-b3ee-ec308e608e1d"], "metadata": {"date": "2023-03-24T09:21:58.839+00:00"}}, "1088764538482085949": {"node_ids": ["df144d32-ebe9-41c6-9005-396fee22142a"], "metadata": {"date": "2023-03-24T10:01:34.241+00:00"}}, "1088890651850055862": {"node_ids": ["5bc76c7b-974f-45b8-99f6-0d82e521fbf4"], "metadata": {"date": "2023-03-24T18:22:42.011+00:00"}}, "1088893005001412658": {"node_ids": ["ca3fef25-e7be-41d0-9802-c15c3e343ed1"], "metadata": {"date": "2023-03-24T18:32:03.046+00:00"}}, "1088893847720960020": {"node_ids": ["81c6d64a-4c90-4f66-85db-4b1a311d0220"], "metadata": {"date": "2023-03-24T18:35:23.966+00:00"}}, "1088947642840649868": {"node_ids": ["6148e013-040a-4b02-8954-0943d3f71bfe"], "metadata": {"date": "2023-03-24T22:09:09.722+00:00"}}, "1089063519749689426": {"node_ids": ["8ede471c-c93f-4280-bd69-924928f4825b"], "metadata": {"date": "2023-03-25T05:49:36.93+00:00"}}, "1089198484638404638": {"node_ids": ["69c44bc0-fa21-4e0d-8ab2-26566281f050"], "metadata": {"date": "2023-03-25T14:45:55.067+00:00"}}, "1089229932586074152": {"node_ids": ["7cf3439c-9bed-4ed0-97d4-511bce841f20"], "metadata": {"date": "2023-03-25T16:50:52.842+00:00"}}, "1089248211698466988": {"node_ids": ["0fee8329-ec17-48c0-85b0-4e4c77a10984"], "metadata": {"date": "2023-03-25T18:03:30.922+00:00"}}, "1089357972657934336": {"node_ids": ["7c4029e4-1546-463d-af23-654502ba2317"], "metadata": {"date": "2023-03-26T01:19:39.974+00:00"}}, "1089517412078071810": {"node_ids": ["07237f79-4577-40b0-8dfb-13b3317de973"], "metadata": {"date": "2023-03-26T11:53:13.294+00:00"}}, "1089720306886770709": {"node_ids": ["df74cf37-8afa-4b48-a010-e727cc9fb0c8"], "metadata": {"date": "2023-03-27T01:19:27.186+00:00"}}, "1089881201684262912": {"node_ids": ["de91d015-dc00-4ad7-8307-efc887bb3f52"], "metadata": {"date": "2023-03-27T11:58:47.495+00:00"}}, "1089916275184111667": {"node_ids": ["65f20ce0-da3b-4030-a234-52b54c75dd5e"], "metadata": {"date": "2023-03-27T14:18:09.669+00:00"}}, "1090035927159681144": {"node_ids": ["65eb35b0-224f-4cab-b3ca-b21b3f3ef99c"], "metadata": {"date": "2023-03-27T22:13:36.923+00:00"}}, "1090043846454423654": {"node_ids": ["c2b2c48b-0784-48da-9a18-7b4efc989fac"], "metadata": {"date": "2023-03-27T22:45:05.03+00:00"}}, "1090046627449946122": {"node_ids": ["10a0eb7c-3832-4455-a240-531acabdeae5"], "metadata": {"date": "2023-03-27T22:56:08.071+00:00"}}, "1090060277485158480": {"node_ids": ["b29ef19f-fb9f-49e9-9ce9-088025126b4f"], "metadata": {"date": "2023-03-27T23:50:22.493+00:00"}}, "1090159696981262396": {"node_ids": ["43ad5437-a27f-42d9-9998-7fb37b16eb59"], "metadata": {"date": "2023-03-28T06:25:25.948+00:00"}}, "1090383537481469972": {"node_ids": ["8270107b-e4b1-4545-9d7b-2b74705d1971"], "metadata": {"date": "2023-03-28T21:14:53.682+00:00"}}, "1090384679481376809": {"node_ids": ["116171ea-821a-43d3-8cdd-a16a4b829518"], "metadata": {"date": "2023-03-28T21:19:25.956+00:00"}}, "1090384767528206408": {"node_ids": ["757f5fbd-c3ef-4d76-bc6a-c8b3864bdf5c"], "metadata": {"date": "2023-03-28T21:19:46.948+00:00"}}, "1090430513560424488": {"node_ids": ["bcd1f529-ea1a-4e45-ac4e-787864d69291"], "metadata": {"date": "2023-03-29T00:21:33.652+00:00"}}, "1090454778326298676": {"node_ids": ["e7f11f49-3e1c-4723-974a-23bade999320"], "metadata": {"date": "2023-03-29T01:57:58.823+00:00"}}, "1090479032686104657": {"node_ids": ["430d4b2a-5e3f-4c04-810c-8c64ed144aec"], "metadata": {"date": "2023-03-29T03:34:21.513+00:00"}}, "1090520284672565268": {"node_ids": ["5b1f24f0-12ae-4c90-b5bc-241dedbefbad"], "metadata": {"date": "2023-03-29T06:18:16.753+00:00"}}, "1090552847650803723": {"node_ids": ["39252a67-5f83-45a7-a74f-1fd3949749a0"], "metadata": {"date": "2023-03-29T08:27:40.372+00:00"}}, "1090574437205676112": {"node_ids": ["dd37d415-4ef8-4011-a252-245accb72dbc"], "metadata": {"date": "2023-03-29T09:53:27.723+00:00"}}, "1090580412138532894": {"node_ids": ["8b402ba4-ca14-418a-9323-02d395fe05df"], "metadata": {"date": "2023-03-29T10:17:12.258+00:00"}}, "1090617709466767431": {"node_ids": ["84328161-9cbe-4657-b8fe-8d88899a7a05"], "metadata": {"date": "2023-03-29T12:45:24.634+00:00"}}, "1090633302773346344": {"node_ids": ["35a6051e-800d-482a-ad34-edfe71687db2"], "metadata": {"date": "2023-03-29T13:47:22.368+00:00"}}, "1090646705361399848": {"node_ids": ["1bae8a02-e584-4e38-bc90-9d5a9ecb9147"], "metadata": {"date": "2023-03-29T14:40:37.794+00:00"}}, "1090650412870271077": {"node_ids": ["1bb3bb13-bb81-4d0a-b946-9c7d860f8a41"], "metadata": {"date": "2023-03-29T14:55:21.733+00:00"}}, "1090670459168759884": {"node_ids": ["b78aae49-25ab-4ec2-b342-1020af9c6a6b"], "metadata": {"date": "2023-03-29T16:15:01.143+00:00"}}, "1090723822308704357": {"node_ids": ["28a191da-6fa7-47e4-b711-5bfebc4fcecb"], "metadata": {"date": "2023-03-29T19:47:03.907+00:00"}}, "1090740288919720027": {"node_ids": ["498adce6-6a74-4cae-8a6e-098c2ec6292b"], "metadata": {"date": "2023-03-29T20:52:29.853+00:00"}}, "1090745720899899392": {"node_ids": ["6c066305-35de-4b85-822e-5614938d29a3"], "metadata": {"date": "2023-03-29T21:14:04.938+00:00"}}, "1090777458036461699": {"node_ids": ["c487e9f7-7e04-44cd-8ee0-49ab24844519"], "metadata": {"date": "2023-03-29T23:20:11.661+00:00"}}, "1090810973587247195": {"node_ids": ["3f2197f3-70db-41d6-8eed-d78ff8033492"], "metadata": {"date": "2023-03-30T01:33:22.391+00:00"}}, "1090854990714785862": {"node_ids": ["7fa87b1c-bd54-4266-88fc-81e37e41ea09"], "metadata": {"date": "2023-03-30T04:28:16.892+00:00"}}, "1090871529933381644": {"node_ids": ["c53d6a87-8ca6-4663-aaa8-ccd46b1cb6d1"], "metadata": {"date": "2023-03-30T05:34:00.149+00:00"}}, "1090965285374275684": {"node_ids": ["9805dd95-c671-4481-b552-d94cf1a5e6e0"], "metadata": {"date": "2023-03-30T11:46:33.188+00:00"}}, "1091013188402810881": {"node_ids": ["e70c43b9-47e5-46b3-b56a-b5ad25de6efe"], "metadata": {"date": "2023-03-30T14:56:54.16+00:00"}}, "1091044468775473152": {"node_ids": ["ccf83673-acb3-43d3-9fd5-2b2c454b224d"], "metadata": {"date": "2023-03-30T17:01:11.982+00:00"}}, "1091064499739566130": {"node_ids": ["a895a551-0dd4-45f7-8a4a-5e45319be559"], "metadata": {"date": "2023-03-30T18:20:47.736+00:00"}}, "1091088166414463057": {"node_ids": ["20029004-5f43-4f7d-8f1a-d1937aaf9f3c"], "metadata": {"date": "2023-03-30T19:54:50.311+00:00"}}, "1091220365340069938": {"node_ids": ["5cae747e-e88f-4be3-8474-5a2631beedd8"], "metadata": {"date": "2023-03-31T04:40:08.991+00:00"}}, "1091244336534003732": {"node_ids": ["440c1163-fae8-4201-994f-e83229850c8a"], "metadata": {"date": "2023-03-31T06:15:24.169+00:00"}}, "1091260944463691797": {"node_ids": ["60059c90-1784-4d85-9c55-46a496df13b8"], "metadata": {"date": "2023-03-31T07:21:23.808+00:00"}}, "1091276055035269151": {"node_ids": ["366cf2b7-b837-4da5-85fe-78da23eaba1c"], "metadata": {"date": "2023-03-31T08:21:26.449+00:00"}}, "1091279157448691761": {"node_ids": ["80ba884e-dc74-47e7-8df5-a2f9bdd09b96"], "metadata": {"date": "2023-03-31T08:33:46.122+00:00"}}, "1091298907583160321": {"node_ids": ["353edd79-54da-4357-bff8-9184c5e0cd67"], "metadata": {"date": "2023-03-31T09:52:14.921+00:00"}}, "1091326971163705406": {"node_ids": ["ccb1ac27-2683-4f31-bb62-6cbff4e71616"], "metadata": {"date": "2023-03-31T11:43:45.8+00:00"}}, "1091540691269722144": {"node_ids": ["c9beeb59-68f0-4677-94af-072c5d15c426"], "metadata": {"date": "2023-04-01T01:53:00.644+00:00"}}, "1091692373328810124": {"node_ids": ["b36f368f-0220-457d-9096-d36a6b46d198"], "metadata": {"date": "2023-04-01T11:55:44.465+00:00"}}, "1092086171120705676": {"node_ids": ["3f099145-1db9-4dc5-812c-7b9817133c8f"], "metadata": {"date": "2023-04-02T14:00:33.175+00:00"}}, "1092200001293275186": {"node_ids": ["d01604d1-67e5-4c5b-bb19-2f6ef8fef21b"], "metadata": {"date": "2023-04-02T21:32:52.403+00:00"}}, "1092242741062275152": {"node_ids": ["5fa4deef-cf49-4894-b3c8-504cece0181e"], "metadata": {"date": "2023-04-03T00:22:42.358+00:00"}}, "1092432032400945182": {"node_ids": ["182cc68c-c562-4e9a-895b-16cbc08a0d94"], "metadata": {"date": "2023-04-03T12:54:52.93+00:00"}}, "1092487133073248276": {"node_ids": ["d6d60286-2853-44e8-84d7-f1aad8b953a4"], "metadata": {"date": "2023-04-03T16:33:49.954+00:00"}}, "1092519759309967390": {"node_ids": ["a7301839-d57f-4ac7-a063-d0108d594c5d"], "metadata": {"date": "2023-04-03T18:43:28.655+00:00"}}, "1092546886902222869": {"node_ids": ["a9995fef-602e-4da3-be69-a86c4b9dc09b"], "metadata": {"date": "2023-04-03T20:31:16.377+00:00"}}, "1092581722455023716": {"node_ids": ["46e24a11-b390-41cf-8b07-fedc9736ea0b"], "metadata": {"date": "2023-04-03T22:49:41.82+00:00"}}, "1092605765111521310": {"node_ids": ["8136e108-6d78-4a22-9f7b-9b05008c4e91"], "metadata": {"date": "2023-04-04T00:25:14.036+00:00"}}, "1092607359420993556": {"node_ids": ["46df8e3d-994f-4ffe-a91b-e6c9d76ab591"], "metadata": {"date": "2023-04-04T00:31:34.149+00:00"}}, "1092692065361592391": {"node_ids": ["00d165cd-5f7e-4796-82f9-880495030db9"], "metadata": {"date": "2023-04-04T06:08:09.619+00:00"}}, "1092711792414818354": {"node_ids": ["e16eb40f-9444-48db-8042-470dae7f9072"], "metadata": {"date": "2023-04-04T07:26:32.915+00:00"}}, "1092745879624110100": {"node_ids": ["e0742839-4e3a-4531-8fd5-beb0527d9785"], "metadata": {"date": "2023-04-04T09:41:59.939+00:00"}}, "1092862292816822372": {"node_ids": ["3c991259-a165-4907-a976-564114793cd5"], "metadata": {"date": "2023-04-04T17:24:35.007+00:00"}}, "1092887140188303380": {"node_ids": ["1960a5c7-c7e8-4907-a4b8-fe7d8172b9d0"], "metadata": {"date": "2023-04-04T19:03:19.082+00:00"}}, "1092955994012790896": {"node_ids": ["20067f87-cd3b-4ef4-b343-3ce33993b48c"], "metadata": {"date": "2023-04-04T23:36:55.113+00:00"}}, "1092963511858122783": {"node_ids": ["a459fc69-1ea7-4645-b83f-7ce3a2ccf585"], "metadata": {"date": "2023-04-05T00:06:47.507+00:00"}}, "1093140563555008574": {"node_ids": ["1837c80f-4b71-497a-b062-ee1a8c08753c"], "metadata": {"date": "2023-04-05T11:50:19.921+00:00"}}, "1093147582647251055": {"node_ids": ["86e9c8a4-4f15-4179-b22d-25fc419316e4"], "metadata": {"date": "2023-04-05T12:18:13.403+00:00"}}, "1093205174727757844": {"node_ids": ["f9ec443c-86e6-444e-bb5d-c9cbf685ad1c"], "metadata": {"date": "2023-04-05T16:07:04.425+00:00"}}, "1093208273219506176": {"node_ids": ["2337e002-17b2-4b9a-8ad3-6c53e0ff1c5f"], "metadata": {"date": "2023-04-05T16:19:23.163+00:00"}}, "1093262299407597648": {"node_ids": ["211dbb7f-5adf-47ed-bd3d-f64b7667f3fc"], "metadata": {"date": "2023-04-05T19:54:04.01+00:00"}}, "1093321690337005578": {"node_ids": ["d385a8be-e56b-4cb5-855d-378db20307e9"], "metadata": {"date": "2023-04-05T23:50:03.911+00:00"}}, "1093344546752036905": {"node_ids": ["22908098-1c14-4f6a-9f8c-fdca6e7e3bb4"], "metadata": {"date": "2023-04-06T01:20:53.305+00:00"}}, "1093463314719322194": {"node_ids": ["ee3745a0-a93c-400c-9c25-e494f82f5563"], "metadata": {"date": "2023-04-06T09:12:49.795+00:00"}}, "1093501820900483214": {"node_ids": ["367caa42-696a-4d28-8f6a-bd487491d6d7"], "metadata": {"date": "2023-04-06T11:45:50.384+00:00"}}, "1093558597876723753": {"node_ids": ["d850c8b3-045b-43ad-a7c8-2c75fc26c12d"], "metadata": {"date": "2023-04-06T15:31:27.07+00:00"}}, "1093571154175869028": {"node_ids": ["b0c1171d-38d1-43c9-86bd-5b483e34656b"], "metadata": {"date": "2023-04-06T16:21:20.725+00:00"}}, "1093626809662320691": {"node_ids": ["f38d7bdc-ee85-4b15-b4a7-9e36c307386f"], "metadata": {"date": "2023-04-06T20:02:30.027+00:00"}}, "1093627048301436969": {"node_ids": ["3fc24bbd-b4d3-4967-a5ba-fc6860e56a81"], "metadata": {"date": "2023-04-06T20:03:26.923+00:00"}}, "1093627143541506078": {"node_ids": ["ddc2d406-1a6b-43e5-ac56-cf193b391468"], "metadata": {"date": "2023-04-06T20:03:49.63+00:00"}}, "1093627256368275466": {"node_ids": ["fbfe3953-7f78-4404-bc19-159f5221b507"], "metadata": {"date": "2023-04-06T20:04:16.53+00:00"}}, "1093635993099313162": {"node_ids": ["5e47e59c-108c-4716-98bc-23068fb6b3b9"], "metadata": {"date": "2023-04-06T20:38:59.529+00:00"}}, "1093638449862553642": {"node_ids": ["db2dcf89-91b0-495a-b261-af329051e4ff"], "metadata": {"date": "2023-04-06T20:48:45.267+00:00"}}, "1093642280100962324": {"node_ids": ["45ab52f3-f98b-4ad2-9b0f-c9e29ebf6149"], "metadata": {"date": "2023-04-06T21:03:58.467+00:00"}}, "1093678160790425610": {"node_ids": ["310677ff-91ea-43b9-8c52-5144ba713aa2"], "metadata": {"date": "2023-04-06T23:26:33.09+00:00"}}, "1093679900700979291": {"node_ids": ["ec46d4d8-20a2-4dd1-98d1-ccf5ad7e8078"], "metadata": {"date": "2023-04-06T23:33:27.917+00:00"}}, "1093687021689638932": {"node_ids": ["6428e045-1cc2-4e4e-9226-3abcbd844932"], "metadata": {"date": "2023-04-07T00:01:45.693+00:00"}}, "1093691684228964383": {"node_ids": ["7c454d75-9f61-43b2-ae4c-4ef662070f53"], "metadata": {"date": "2023-04-07T00:20:17.329+00:00"}}, "1093719425837973564": {"node_ids": ["598aa715-08b8-4aef-b5d8-c4d19e30c657"], "metadata": {"date": "2023-04-07T02:10:31.444+00:00"}}, "1093723232504381571": {"node_ids": ["ad481aba-863d-45a6-ab5e-16312be3f652"], "metadata": {"date": "2023-04-07T02:25:39.024+00:00"}}, "1093741472983035924": {"node_ids": ["1862abac-abaa-45ef-8b5f-cb73ab2a11ac"], "metadata": {"date": "2023-04-07T03:38:07.893+00:00"}}, "1093838805519315075": {"node_ids": ["42d0faec-9ff6-43bd-9612-c499483f8ce4"], "metadata": {"date": "2023-04-07T10:04:53.778+00:00"}}, "1093841749966860309": {"node_ids": ["7dae1b27-3643-431a-8ec2-2d34bd05988a"], "metadata": {"date": "2023-04-07T10:16:35.789+00:00"}}, "1093845630532730930": {"node_ids": ["f6fdfa10-7c9a-4b28-aaec-b7541a852685"], "metadata": {"date": "2023-04-07T10:32:00.988+00:00"}}, "1093872829684011088": {"node_ids": ["213e52e2-97d6-4884-8be4-99dd00d9aab3"], "metadata": {"date": "2023-04-07T12:20:05.771+00:00"}}, "1093874705074769940": {"node_ids": ["982941d5-515d-4b80-ac3b-419d2ea05db7"], "metadata": {"date": "2023-04-07T12:27:32.899+00:00"}}, "1093887885796720660": {"node_ids": ["86343f41-d066-4e93-a498-9f54ebdf2a58"], "metadata": {"date": "2023-04-07T13:19:55.428+00:00"}}, "1093917687601709136": {"node_ids": ["83a85c95-a802-4c2d-9477-ae712d76c511"], "metadata": {"date": "2023-04-07T15:18:20.732+00:00"}}, "1093924553522167958": {"node_ids": ["0245700c-ae3b-4d31-8b27-280f39eac514"], "metadata": {"date": "2023-04-07T15:45:37.695+00:00"}}, "1093929899774984293": {"node_ids": ["87753970-f7da-481f-8f1a-faa28e1b3a61"], "metadata": {"date": "2023-04-07T16:06:52.341+00:00"}}, "1093941566772625529": {"node_ids": ["06d413b1-e1cd-4f27-b3e9-56b7653ce409"], "metadata": {"date": "2023-04-07T16:53:13.97+00:00"}}, "1093942201496637501": {"node_ids": ["37e3243a-6693-4187-893f-750f9f11d0d4"], "metadata": {"date": "2023-04-07T16:55:45.3+00:00"}}, "1093946869664727110": {"node_ids": ["537a38f3-9355-44e5-8db9-5096e7cc3b79"], "metadata": {"date": "2023-04-07T17:14:18.278+00:00"}}, "1093951109493698741": {"node_ids": ["06dfb410-3a8a-4345-a59c-ad06fe797fe8"], "metadata": {"date": "2023-04-07T17:31:09.132+00:00"}}, "1093976288538148956": {"node_ids": ["4a93452c-5615-467a-a34d-d5c47f1ae6a6"], "metadata": {"date": "2023-04-07T19:11:12.284+00:00"}}, "1094046570040795227": {"node_ids": ["c1fd45ec-fd17-4701-9cb5-e314b273e539"], "metadata": {"date": "2023-04-07T23:50:28.7+00:00"}}, "1094083038880747540": {"node_ids": ["9a8f690f-959d-4131-ac1b-fefe06158947"], "metadata": {"date": "2023-04-08T02:15:23.549+00:00"}}, "1094226388271247370": {"node_ids": ["ede1546b-8526-4bac-ba9a-63b3a1cc5e73"], "metadata": {"date": "2023-04-08T11:45:00.707+00:00"}}, "1094250026458415124": {"node_ids": ["ac1ef1aa-e3a9-4dad-be07-f130c4404d3e"], "metadata": {"date": "2023-04-08T13:18:56.49+00:00"}}, "1094413465550074026": {"node_ids": ["c10aadab-f8f7-494f-bb99-d718881869d5"], "metadata": {"date": "2023-04-09T00:08:23.406+00:00"}}, "1094435722498408519": {"node_ids": ["a967162d-8922-462d-b3c4-101ca6e4dd3b"], "metadata": {"date": "2023-04-09T01:36:49.876+00:00"}}, "1094669214545084467": {"node_ids": ["f44a9558-4f3f-4ff3-a552-3e11d9b2a3b8"], "metadata": {"date": "2023-04-09T17:04:38.718+00:00"}}, "1094672732509176029": {"node_ids": ["e6bdde35-100e-4cd7-af81-c69bc38d9337"], "metadata": {"date": "2023-04-09T17:18:37.466+00:00"}}, "1094673099942801591": {"node_ids": ["b9031c8c-4f3c-45fe-bab0-53233cf19346"], "metadata": {"date": "2023-04-09T17:20:05.069+00:00"}}, "1094687962115080392": {"node_ids": ["7cef5702-1f32-4f42-bf93-a8e47b5b2f7c"], "metadata": {"date": "2023-04-09T18:19:08.487+00:00"}}, "1094692959884157021": {"node_ids": ["79e59714-61a5-4117-976c-97071305860d"], "metadata": {"date": "2023-04-09T18:39:00.048+00:00"}}, "1094696941541130302": {"node_ids": ["5b4caf6e-3fc7-4304-89d3-983eb7654502"], "metadata": {"date": "2023-04-09T18:54:49.349+00:00"}}, "1094730579116822548": {"node_ids": ["0c097e89-b809-4860-afb1-be1252eda3c8"], "metadata": {"date": "2023-04-09T21:08:29.172+00:00"}}, "1094748090621239347": {"node_ids": ["ffb348bf-8dd3-4631-b798-c8ef848b600d"], "metadata": {"date": "2023-04-09T22:18:04.24+00:00"}}, "1094841164626133022": {"node_ids": ["23d8bbd5-aee0-458b-b5ae-ddaa9d465c67"], "metadata": {"date": "2023-04-10T04:27:54.812+00:00"}}, "1094849021211836476": {"node_ids": ["2674e8ca-ee9b-4f67-a60c-4a3f1600a1c3"], "metadata": {"date": "2023-04-10T04:59:07.968+00:00"}}, "1094849110357586090": {"node_ids": ["8bc7e058-339b-4d86-85c4-bba13de48a07"], "metadata": {"date": "2023-04-10T04:59:29.222+00:00"}}, "1094988592159404042": {"node_ids": ["d381d80f-531a-444f-85cc-8432ce4883ec"], "metadata": {"date": "2023-04-10T14:13:44.275+00:00"}}, "1095024178597474386": {"node_ids": ["0e1496a1-a762-428b-8d01-8ca5eac468da"], "metadata": {"date": "2023-04-10T16:35:08.743+00:00"}}, "1095045798925975613": {"node_ids": ["3db0bb35-4746-4f32-93a6-544c737e0c05"], "metadata": {"date": "2023-04-10T18:01:03.431+00:00"}}, "1095062859026792560": {"node_ids": ["92dabdfa-058e-439f-88fe-30233074b59e"], "metadata": {"date": "2023-04-10T19:08:50.876+00:00"}}, "1095077541846462716": {"node_ids": ["8bae67c8-1d8e-4b07-b641-6e58d570d75b"], "metadata": {"date": "2023-04-10T20:07:11.533+00:00"}}, "1095094580929630329": {"node_ids": ["5b5592cf-b58e-4f03-9ddf-62ae0e13d456"], "metadata": {"date": "2023-04-10T21:14:53.967+00:00"}}, "1095096365459189880": {"node_ids": ["9524fcec-be63-4fce-8c74-a61f2e969ef3"], "metadata": {"date": "2023-04-10T21:21:59.432+00:00"}}, "1095146031928328242": {"node_ids": ["74fa9688-d0d2-4b90-af75-76ee6335536f"], "metadata": {"date": "2023-04-11T00:39:20.841+00:00"}}, "1095162431535317122": {"node_ids": ["ac2972ba-0881-47c2-80a8-45ca8162e698"], "metadata": {"date": "2023-04-11T01:44:30.812+00:00"}}, "1095185307453894656": {"node_ids": ["1aaa0a55-9bd4-43ad-a86e-51363a5d266f"], "metadata": {"date": "2023-04-11T03:15:24.856+00:00"}}, "1095189395369365584": {"node_ids": ["2fd69a8c-00b8-4f01-bf38-6d8383983711"], "metadata": {"date": "2023-04-11T03:31:39.491+00:00"}}, "1095196769459118080": {"node_ids": ["d6e53a25-2719-4f8d-8fe8-cdc505c55424"], "metadata": {"date": "2023-04-11T04:00:57.611+00:00"}}, "1095205700164136980": {"node_ids": ["ba8309ca-61b2-4426-971a-2aa6721e8db8"], "metadata": {"date": "2023-04-11T04:36:26.857+00:00"}}, "1095206051877502986": {"node_ids": ["f5c26f20-ef31-44f0-8fd0-752e45444813"], "metadata": {"date": "2023-04-11T04:37:50.712+00:00"}}, "1095211773285650512": {"node_ids": ["61c9444b-d74f-4008-aedb-c04b6d6b4f7d"], "metadata": {"date": "2023-04-11T05:00:34.802+00:00"}}, "1095215052803551292": {"node_ids": ["f1b9e406-a9ea-4736-aecf-c628bef50aff"], "metadata": {"date": "2023-04-11T05:13:36.7+00:00"}}, "1095215342869037177": {"node_ids": ["2ad43a27-1382-477d-9113-776b1948ed99"], "metadata": {"date": "2023-04-11T05:14:45.857+00:00"}}, "1095236866061643796": {"node_ids": ["84893197-80c6-4fdc-b0ca-4186ed1b9564"], "metadata": {"date": "2023-04-11T06:40:17.386+00:00"}}, "1095245753225576538": {"node_ids": ["88774674-4267-4513-b8f1-113f263a7bd9"], "metadata": {"date": "2023-04-11T07:15:36.251+00:00"}}, "1095271119474401344": {"node_ids": ["13f389ab-732b-4868-a668-33ad338783a8"], "metadata": {"date": "2023-04-11T08:56:24.036+00:00"}}, "1095312415807246496": {"node_ids": ["ab2e76b5-6c66-4ae1-aaf5-8828e45c735f"], "metadata": {"date": "2023-04-11T11:40:29.849+00:00"}}, "1095314039250374757": {"node_ids": ["9309355d-a533-48cf-ba61-92161cb48705"], "metadata": {"date": "2023-04-11T11:46:56.908+00:00"}}, "1095323782228475924": {"node_ids": ["00425b4e-42a4-4241-b725-f5a3484241a2"], "metadata": {"date": "2023-04-11T12:25:39.815+00:00"}}, "1095374029122179174": {"node_ids": ["b10278f9-3b5e-4ba0-ae61-a2ac888e8e04"], "metadata": {"date": "2023-04-11T15:45:19.608+00:00"}}, "1095388609672126524": {"node_ids": ["a24bf793-2b51-4a6d-8836-517c571ffab8"], "metadata": {"date": "2023-04-11T16:43:15.882+00:00"}}, "1095402192665583656": {"node_ids": ["d0b9405b-367a-4999-87fd-501ef4df14bb"], "metadata": {"date": "2023-04-11T17:37:14.32+00:00"}}, "1095427710710464543": {"node_ids": ["91a0f10f-46c3-4128-a0a1-d61928046782"], "metadata": {"date": "2023-04-11T19:18:38.296+00:00"}}, "1095434229069918350": {"node_ids": ["83db2d37-6714-4c8e-b315-1f350d7853d8"], "metadata": {"date": "2023-04-11T19:44:32.394+00:00"}}, "1095446982170001498": {"node_ids": ["60ab0005-e3ec-4dec-a93d-df9cd9e56a50"], "metadata": {"date": "2023-04-11T20:35:12.97+00:00"}}, "1095453963551260763": {"node_ids": ["037b47f1-13bf-4152-a6cc-d962a1d1ec66"], "metadata": {"date": "2023-04-11T21:02:57.461+00:00"}}, "1095456043204624394": {"node_ids": ["2bbc81a7-f545-44ab-b24c-f9fc58758a16"], "metadata": {"date": "2023-04-11T21:11:13.289+00:00"}}, "1095457000663568474": {"node_ids": ["203826cd-3009-4583-b166-93fcaa0fd0b8"], "metadata": {"date": "2023-04-11T21:15:01.565+00:00"}}, "1095468224109367437": {"node_ids": ["20d95ffe-ba54-4593-9eb5-159c144f339a"], "metadata": {"date": "2023-04-11T21:59:37.443+00:00"}}, "1095494616867930223": {"node_ids": ["8b995fe7-9f88-47f9-8950-c675fcfebb82"], "metadata": {"date": "2023-04-11T23:44:29.967+00:00"}}, "1095524477305094184": {"node_ids": ["2c4861e0-9bab-4580-9488-79ce0cb082d3"], "metadata": {"date": "2023-04-12T01:43:09.25+00:00"}}, "1095545141848187042": {"node_ids": ["defe5a4a-60c3-4943-849c-9d2f24f5129b"], "metadata": {"date": "2023-04-12T03:05:16.061+00:00"}}, "1095752066640642059": {"node_ids": ["4c880b5b-7e47-4d5f-bff4-b5f7af537526"], "metadata": {"date": "2023-04-12T16:47:30.776+00:00"}}, "1095753837555486811": {"node_ids": ["6698be22-ed69-49a8-851f-32998d95754c"], "metadata": {"date": "2023-04-12T16:54:32.995+00:00"}}, "1095755357613199510": {"node_ids": ["c3f0daee-f9de-42ef-afa8-84c04c87b87d"], "metadata": {"date": "2023-04-12T17:00:35.405+00:00"}}, "1095757528131977316": {"node_ids": ["c088087b-6a71-4be9-9f91-3f41a3affefa"], "metadata": {"date": "2023-04-12T17:09:12.897+00:00"}}, "1095758154568060959": {"node_ids": ["9e54ac9d-a900-4af3-8387-48185e1a9f7c"], "metadata": {"date": "2023-04-12T17:11:42.251+00:00"}}, "1095758244787535932": {"node_ids": ["d10f3695-7eb7-4e64-ac38-51b95def3b9c"], "metadata": {"date": "2023-04-12T17:12:03.761+00:00"}}, "1095822900898050171": {"node_ids": ["53e0adfd-5597-4204-9f6d-992ebb44f526"], "metadata": {"date": "2023-04-12T21:28:58.979+00:00"}}, "1095843145780056145": {"node_ids": ["61520052-1b60-49a4-aa79-a5d15039a4e9"], "metadata": {"date": "2023-04-12T22:49:25.735+00:00"}}, "1095850293444477008": {"node_ids": ["6178d4eb-7b45-4e45-97d3-bb85e0ece32e"], "metadata": {"date": "2023-04-12T23:17:49.871+00:00"}}, "1095877935728169061": {"node_ids": ["73cd57cb-23c9-4945-bed3-91eebc6cd22a"], "metadata": {"date": "2023-04-13T01:07:40.305+00:00"}}, "1095921352390754425": {"node_ids": ["cec70050-f129-4d87-91e8-0a13602e73b8"], "metadata": {"date": "2023-04-13T04:00:11.644+00:00"}}, "1095973964783812668": {"node_ids": ["25897e8f-757a-4d06-8b4e-fcdf29778318"], "metadata": {"date": "2023-04-13T07:29:15.416+00:00"}}, "1095975685648023683": {"node_ids": ["634536f8-c5bc-443d-a2c3-d5c599a8bfbd"], "metadata": {"date": "2023-04-13T07:36:05.702+00:00"}}, "1096013981581328405": {"node_ids": ["cca8668c-6225-490e-bbd5-5bd22d482c68"], "metadata": {"date": "2023-04-13T10:08:16.164+00:00"}}, "1096084398975230104": {"node_ids": ["b8985f02-7491-431d-8af8-09496c73b1ba"], "metadata": {"date": "2023-04-13T14:48:04.979+00:00"}}, "1096087849742377042": {"node_ids": ["ba56cf17-c471-426f-b550-731fab9c5476"], "metadata": {"date": "2023-04-13T15:01:47.706+00:00"}}, "1096119257198243972": {"node_ids": ["8742a08e-2a40-4159-ba89-6df5f910b4c5"], "metadata": {"date": "2023-04-13T17:06:35.827+00:00"}}, "1096123297202176173": {"node_ids": ["0fdfc48a-f91c-4a13-83cb-63ff9e2b96e9"], "metadata": {"date": "2023-04-13T17:22:39.039+00:00"}}, "1096124373108261005": {"node_ids": ["7b417734-a13c-4b07-a8ba-33fb48809154"], "metadata": {"date": "2023-04-13T17:26:55.555+00:00"}}, "1096156804301455401": {"node_ids": ["8cef5eb4-ca82-4fc3-98d1-a76397b89b54"], "metadata": {"date": "2023-04-13T19:35:47.754+00:00"}}, "1096186836059160656": {"node_ids": ["5850161b-0271-4d65-8927-e08ce19cb407"], "metadata": {"date": "2023-04-13T21:35:07.883+00:00"}}, "1096201182386606135": {"node_ids": ["1c4c9e1e-5777-4681-a22c-ce8885fe08a4"], "metadata": {"date": "2023-04-13T22:32:08.314+00:00"}}, "1096218175265312878": {"node_ids": ["3ce0519a-012e-45c1-9b00-e9e9ffea09e0"], "metadata": {"date": "2023-04-13T23:39:39.732+00:00"}}, "1096303955664969828": {"node_ids": ["aa7a0cee-2c9c-4081-baaf-1505bee18dc7"], "metadata": {"date": "2023-04-14T05:20:31.373+00:00"}}, "1096330936024563752": {"node_ids": ["a1cf0cbc-dd60-40bd-9cc6-815f63ba834e"], "metadata": {"date": "2023-04-14T07:07:43.992+00:00"}}, "1096336176673202198": {"node_ids": ["099ae5de-e4de-43d3-866d-582531537807"], "metadata": {"date": "2023-04-14T07:28:33.46+00:00"}}, "1096336227814342707": {"node_ids": ["c634af56-7b5c-4e09-a464-985e4282eb29"], "metadata": {"date": "2023-04-14T07:28:45.653+00:00"}}, "1096413431122374726": {"node_ids": ["a31c2880-ffaa-4de4-bbb3-17acdeb087bf"], "metadata": {"date": "2023-04-14T12:35:32.356+00:00"}}, "1096474926128566332": {"node_ids": ["a28cd4b5-9fcd-49e0-acff-e12424b410e3"], "metadata": {"date": "2023-04-14T16:39:53.908+00:00"}}, "1096529895259123852": {"node_ids": ["2546504f-f4e4-4ec6-b437-f20503f00db8"], "metadata": {"date": "2023-04-14T20:18:19.57+00:00"}}, "1096553917602611270": {"node_ids": ["a9c279f5-82ab-4dc4-9902-72850de1d25f"], "metadata": {"date": "2023-04-14T21:53:46.943+00:00"}}, "1096594952991035453": {"node_ids": ["a0196f9d-69fd-4e68-a659-8e4d37c435d1"], "metadata": {"date": "2023-04-15T00:36:50.542+00:00"}}, "1096834295299051620": {"node_ids": ["48a211b3-b252-41fb-bc92-b2a9ab11213d"], "metadata": {"date": "2023-04-15T16:27:54.195+00:00"}}, "1096874982572822530": {"node_ids": ["2e18b323-cd51-4fcf-a433-4620c106728a"], "metadata": {"date": "2023-04-15T19:09:34.797+00:00"}}, "1096947591872254054": {"node_ids": ["11796d4f-deab-4f29-9de9-f9b5eab2f0d9"], "metadata": {"date": "2023-04-15T23:58:06.203+00:00"}}, "1096948907759632465": {"node_ids": ["985b330d-250d-4b0f-80c3-66bca937b03a"], "metadata": {"date": "2023-04-16T00:03:19.935+00:00"}}, "1097121014447607858": {"node_ids": ["78e883de-21f1-4333-98fd-173b86b17cac"], "metadata": {"date": "2023-04-16T11:27:13.367+00:00"}}, "1097272296298774538": {"node_ids": ["600f3b9c-55e6-4200-8258-43357b0cb268"], "metadata": {"date": "2023-04-16T21:28:21.771+00:00"}}, "1097300835244970115": {"node_ids": ["ec07c5bc-1665-449e-936c-ead455b52e87"], "metadata": {"date": "2023-04-16T23:21:45.986+00:00"}}, "1097339675217236141": {"node_ids": ["467f7d99-3b0c-4b32-b567-2fb2656d705f"], "metadata": {"date": "2023-04-17T01:56:06.157+00:00"}}, "1097355813615571085": {"node_ids": ["c4317051-d4ce-4b0b-8cbe-a2465f1532a5"], "metadata": {"date": "2023-04-17T03:00:13.851+00:00"}}, "1097360650923155586": {"node_ids": ["93a34b87-0b20-4f7f-a3bb-404e1f15778d"], "metadata": {"date": "2023-04-17T03:19:27.155+00:00"}}, "1097398731076292638": {"node_ids": ["2b6979db-5482-4ad1-83ad-0c86bc0904d6"], "metadata": {"date": "2023-04-17T05:50:46.171+00:00"}}, "1097401616430276608": {"node_ids": ["6b91e67e-545d-4f71-a6a8-734f841b4b42"], "metadata": {"date": "2023-04-17T06:02:14.093+00:00"}}, "1097404071704530984": {"node_ids": ["1dbabf21-f16c-4db2-a845-aa0605d2e1e2"], "metadata": {"date": "2023-04-17T06:11:59.476+00:00"}}, "1097409746828533870": {"node_ids": ["4aaf3f60-64aa-49f6-857b-ee7532b24c68"], "metadata": {"date": "2023-04-17T06:34:32.531+00:00"}}, "1097414565211414579": {"node_ids": ["aac775f7-0e63-4701-9193-14a9a006be86"], "metadata": {"date": "2023-04-17T06:53:41.323+00:00"}}, "1097429068569387078": {"node_ids": ["66a11a95-3d6b-468e-b193-6238c8f1e5aa"], "metadata": {"date": "2023-04-17T07:51:19.193+00:00"}}, "1097466500291510322": {"node_ids": ["66a145e7-56b3-4b68-8164-7fc6b14b9cfd"], "metadata": {"date": "2023-04-17T10:20:03.611+00:00"}}, "1097520126120710224": {"node_ids": ["b1673038-c0e5-49ae-9265-e6d0bf56b2c2"], "metadata": {"date": "2023-04-17T13:53:09.005+00:00"}}, "1097537142068101241": {"node_ids": ["288e7525-a573-42f8-8a3a-3d1f784b0925"], "metadata": {"date": "2023-04-17T15:00:45.923+00:00"}}, "1097558647455887462": {"node_ids": ["294221e5-3108-4d07-96f1-55025d939c65"], "metadata": {"date": "2023-04-17T16:26:13.207+00:00"}}, "1097571668064477424": {"node_ids": ["8997ca1d-08c7-48e8-9e05-4d9202f3bc17"], "metadata": {"date": "2023-04-17T17:17:57.562+00:00"}}, "1097593771702624366": {"node_ids": ["56422d1e-4ea2-42a2-bcfd-b60e6c6c82d9"], "metadata": {"date": "2023-04-17T18:45:47.48+00:00"}}, "1097664723497009304": {"node_ids": ["1e3ad923-50bd-4ca4-8598-fc741c0d2bf0"], "metadata": {"date": "2023-04-17T23:27:43.706+00:00"}}, "1097686435546529823": {"node_ids": ["033a5b12-7a77-4ca9-9b98-4c77c13d0ba2"], "metadata": {"date": "2023-04-18T00:54:00.262+00:00"}}, "1097712034801524756": {"node_ids": ["40fec9b8-a0e4-45a3-999e-e4383eef6011"], "metadata": {"date": "2023-04-18T02:35:43.6+00:00"}}, "1097722499237695488": {"node_ids": ["d7a84c16-45ad-435a-a389-56a23a0bda78"], "metadata": {"date": "2023-04-18T03:17:18.516+00:00"}}, "1097763050137858048": {"node_ids": ["0b91b8ba-b948-422b-89a2-fa38730655be"], "metadata": {"date": "2023-04-18T05:58:26.604+00:00"}}, "1097766621998751766": {"node_ids": ["75d38914-29d9-459e-b76e-d522f704f23a"], "metadata": {"date": "2023-04-18T06:12:38.202+00:00"}}, "1097770637545721876": {"node_ids": ["4ccbbf90-23c7-4290-befa-6008252fe975"], "metadata": {"date": "2023-04-18T06:28:35.583+00:00"}}, "1097808213832892426": {"node_ids": ["84315fdc-5780-4066-8f54-11cfb25164f2"], "metadata": {"date": "2023-04-18T08:57:54.468+00:00"}}, "1097861742127755354": {"node_ids": ["14128ad0-4144-4b23-adc0-bbff73d529c5"], "metadata": {"date": "2023-04-18T12:30:36.608+00:00"}}, "1097937493518733453": {"node_ids": ["acb092cf-ddeb-4236-84b6-4c168d344395"], "metadata": {"date": "2023-04-18T17:31:37.147+00:00"}}, "1097971564814794842": {"node_ids": ["8e319c23-ea18-4392-8367-9d7b1d345fd6"], "metadata": {"date": "2023-04-18T19:47:00.377+00:00"}}, "1097995032281239652": {"node_ids": ["25094501-8d87-4df7-af72-38e76d5e6a98"], "metadata": {"date": "2023-04-18T21:20:15.457+00:00"}}, "1097995717672448020": {"node_ids": ["37b62100-9ed9-4337-99cd-6b2f4fcf3aed"], "metadata": {"date": "2023-04-18T21:22:58.867+00:00"}}, "1097997796738609222": {"node_ids": ["cd697c7d-0249-488a-90d8-7b635e032367"], "metadata": {"date": "2023-04-18T21:31:14.555+00:00"}}, "1098019685888434308": {"node_ids": ["fdd13c24-8bf5-4b5c-afd8-b555ddd8fe7c"], "metadata": {"date": "2023-04-18T22:58:13.335+00:00"}}, "1098025623466811432": {"node_ids": ["894351bc-fdf8-42c1-a75d-7f416d44e48a"], "metadata": {"date": "2023-04-18T23:21:48.964+00:00"}}, "1098048197596819516": {"node_ids": ["9899cb33-2493-49b7-9365-e9716e4c2f31"], "metadata": {"date": "2023-04-19T00:51:31.056+00:00"}}, "1098162346284826764": {"node_ids": ["d4b0e69e-23af-4e72-a916-0ff6e559dcea"], "metadata": {"date": "2023-04-19T08:25:06.224+00:00"}}, "1098262415298269294": {"node_ids": ["8b1cf702-dc1f-4926-a57e-dc2340801041"], "metadata": {"date": "2023-04-19T15:02:44.536+00:00"}}, "1098281808606531694": {"node_ids": ["d1d9e9f9-76be-476a-b307-04807f3b6a98"], "metadata": {"date": "2023-04-19T16:19:48.261+00:00"}}, "1098283962385838180": {"node_ids": ["f16fbedd-d0ef-4dbd-8af5-418776a7f8bd"], "metadata": {"date": "2023-04-19T16:28:21.762+00:00"}}, "1098287636004737095": {"node_ids": ["c0ecf228-9acc-4349-821c-4c2945bca796"], "metadata": {"date": "2023-04-19T16:42:57.621+00:00"}}, "1098454726850383892": {"node_ids": ["f2fd2c70-b265-4306-bce0-6d596d50e1c4"], "metadata": {"date": "2023-04-20T03:46:55.183+00:00"}}, "1098636367950532668": {"node_ids": ["2b3d5372-7e31-4318-adc8-f6822e9ea5c3"], "metadata": {"date": "2023-04-20T15:48:41.796+00:00"}}, "1098683327805919253": {"node_ids": ["35c0543a-44dc-45a8-8255-1a423a0f7fea"], "metadata": {"date": "2023-04-20T18:55:17.898+00:00"}}, "1098685337708023988": {"node_ids": ["d1c9944b-7794-400b-bb8f-927788336331"], "metadata": {"date": "2023-04-20T19:03:17.096+00:00"}}, "1098687182140616745": {"node_ids": ["8b1b3451-2128-433f-ad07-d345077aed9b"], "metadata": {"date": "2023-04-20T19:10:36.843+00:00"}}, "1098777646537650206": {"node_ids": ["3a372065-573e-48bc-a2df-105369985510"], "metadata": {"date": "2023-04-21T01:10:05.236+00:00"}}, "1098792683163623475": {"node_ids": ["0f72f83f-2740-438f-bfa5-910950143c1b"], "metadata": {"date": "2023-04-21T02:09:50.247+00:00"}}, "1099040182646362203": {"node_ids": ["90c69b5a-8198-440f-ab3c-f72daa7cdfb8"], "metadata": {"date": "2023-04-21T18:33:18.722+00:00"}}, "1099042393698865192": {"node_ids": ["cd60da02-3b0f-401f-8a70-37ee18cc97b2"], "metadata": {"date": "2023-04-21T18:42:05.878+00:00"}}, "1099124874590556210": {"node_ids": ["07acc492-fab7-416c-92b7-0be30eeb79d1"], "metadata": {"date": "2023-04-22T00:09:50.855+00:00"}}, "1099172603706486835": {"node_ids": ["2f952f43-3ebb-42fa-bbe3-1be9cfba28bb"], "metadata": {"date": "2023-04-22T03:19:30.363+00:00"}}, "1099439531549265960": {"node_ids": ["ffc0fadd-242f-47d5-be61-de7930b39ce2"], "metadata": {"date": "2023-04-22T21:00:10.92+00:00"}}, "1099449008860184586": {"node_ids": ["f071f721-ff1c-4ccd-b167-8505146968a4"], "metadata": {"date": "2023-04-22T21:37:50.487+00:00"}}, "1099450116131258530": {"node_ids": ["7b0a6975-6a54-4101-8ed7-895ec211727a"], "metadata": {"date": "2023-04-22T21:42:14.481+00:00"}}, "1099464754067685438": {"node_ids": ["beb318d6-6dd0-4ba8-972d-f9e510233586"], "metadata": {"date": "2023-04-22T22:40:24.437+00:00"}}, "1099469959479955621": {"node_ids": ["f886fa2a-e017-468d-a62c-4fca9551a7eb"], "metadata": {"date": "2023-04-22T23:01:05.504+00:00"}}, "1099693858146754660": {"node_ids": ["65bd1ca0-776b-4693-aa29-b54c43e2daaf"], "metadata": {"date": "2023-04-23T13:50:47.106+00:00"}}, "1099791236430319687": {"node_ids": ["f4851f95-c0d2-4252-ac20-9e7a89468761"], "metadata": {"date": "2023-04-23T20:17:43.898+00:00"}}, "1099837576917024808": {"node_ids": ["4b517c91-529c-466a-bfc2-4e7c643002ba"], "metadata": {"date": "2023-04-23T23:21:52.331+00:00"}}, "1099841632121135134": {"node_ids": ["dc077470-35b3-41ea-8128-44df82447e77"], "metadata": {"date": "2023-04-23T23:37:59.167+00:00"}}, "1099858239228743741": {"node_ids": ["91d9dc9c-dc03-4b2e-bc43-b0560ab29d24"], "metadata": {"date": "2023-04-24T00:43:58.61+00:00"}}, "1099906867402133596": {"node_ids": ["49c1cc03-1fa7-4622-a6d1-fb0917fa2172"], "metadata": {"date": "2023-04-24T03:57:12.47+00:00"}}, "1099911293311397950": {"node_ids": ["2ab1dcf6-3d58-44cb-8613-9209fd9fa7cf"], "metadata": {"date": "2023-04-24T04:14:47.689+00:00"}}, "1099912350129197196": {"node_ids": ["a59d5af6-b4b7-4680-9544-37869267198c"], "metadata": {"date": "2023-04-24T04:18:59.654+00:00"}}, "1099930822397661225": {"node_ids": ["ea9e6ef3-a52d-498b-a39e-19d61c9740a2"], "metadata": {"date": "2023-04-24T05:32:23.786+00:00"}}, "1100000721149104178": {"node_ids": ["f0935c29-1188-4fac-b51c-7523cea835b6"], "metadata": {"date": "2023-04-24T10:10:08.947+00:00"}}, "1100102638135169138": {"node_ids": ["b1ea0946-d458-4758-8f3e-600b29c9dbc1"], "metadata": {"date": "2023-04-24T16:55:07.85+00:00"}}, "1100110065840697464": {"node_ids": ["649519f6-ef92-4a7d-8fd1-c9213ec5a907"], "metadata": {"date": "2023-04-24T17:24:38.753+00:00"}}, "1100191872749682738": {"node_ids": ["3f22ac06-879a-4cff-bf76-0000e9cc5f1a"], "metadata": {"date": "2023-04-24T22:49:43.04+00:00"}}, "1100356152593756172": {"node_ids": ["d7e37b62-daa6-4982-a17e-14915141f89b"], "metadata": {"date": "2023-04-25T09:42:30.407+00:00"}}, "1100384051954712596": {"node_ids": ["4188fa39-fab5-4d2d-8386-fbf8aff57c0c"], "metadata": {"date": "2023-04-25T11:33:22.133+00:00"}}, "1100391280166588446": {"node_ids": ["1f8bc9ac-c5b6-4b4a-acda-dd4815ac53ca", "9c4940c0-99d3-414e-9992-f8c4fe49408a"], "metadata": {"date": "2023-04-25T12:02:05.473+00:00"}}, "1100432734666633309": {"node_ids": ["6b307a8a-232a-420f-8ab1-44eb7d9dc964"], "metadata": {"date": "2023-04-25T14:46:48.996+00:00"}}, "1100442307481849898": {"node_ids": ["5f6b4a84-c9dc-4ee5-9134-8729c00032c1"], "metadata": {"date": "2023-04-25T15:24:51.333+00:00"}}, "1100482619596091453": {"node_ids": ["26121d41-dfb6-46b8-9e6f-b700019ebd87"], "metadata": {"date": "2023-04-25T18:05:02.49+00:00"}}, "1100493445614813205": {"node_ids": ["8f7a3b07-dcb9-49c0-a401-60de8ced3c7e"], "metadata": {"date": "2023-04-25T18:48:03.614+00:00"}}, "1100515309741408276": {"node_ids": ["f478c6da-46e1-41c5-a8ea-dfceeeb13306"], "metadata": {"date": "2023-04-25T20:14:56.428+00:00"}}, "1100551698147196969": {"node_ids": ["23107137-061f-4123-9f27-928169d051c3"], "metadata": {"date": "2023-04-25T22:39:32.1+00:00"}}, "1100561196073103461": {"node_ids": ["c8127902-2d75-4b85-bc60-ccfafdf554bf"], "metadata": {"date": "2023-04-25T23:17:16.582+00:00"}}, "1100626944657215541": {"node_ids": ["83115588-461a-408c-b7eb-5b912c518ce2"], "metadata": {"date": "2023-04-26T03:38:32.266+00:00"}}, "1100794926486274100": {"node_ids": ["1f0a6390-af64-44ca-8e32-f2e71b2994f9"], "metadata": {"date": "2023-04-26T14:46:02.255+00:00"}}, "1100805108998090784": {"node_ids": ["fd2c71ac-60b0-4964-afe4-3d94b4ce21b5"], "metadata": {"date": "2023-04-26T15:26:29.955+00:00"}}, "1100809386257043565": {"node_ids": ["4fc7f22f-1242-45fc-b2ab-68997c2d690a"], "metadata": {"date": "2023-04-26T15:43:29.733+00:00"}}, "1100848445343932497": {"node_ids": ["51e9c7fe-5425-44ee-9d0c-a16a76a0a276"], "metadata": {"date": "2023-04-26T18:18:42.145+00:00"}}, "1100868170388086845": {"node_ids": ["5ab72c3d-a7d8-4e87-b5e5-a59925185306"], "metadata": {"date": "2023-04-26T19:37:04.962+00:00"}}, "1100901226020884490": {"node_ids": ["03616788-bdec-436e-b90a-9d60521d6fae"], "metadata": {"date": "2023-04-26T21:48:26.039+00:00"}}, "1101012703725764629": {"node_ids": ["ea032ca8-20fb-4673-a416-7286a3df4212"], "metadata": {"date": "2023-04-27T05:11:24.395+00:00"}}, "1101139253154549800": {"node_ids": ["2f20b13f-5ce8-4e0f-9b49-23e82c7b8d86"], "metadata": {"date": "2023-04-27T13:34:16.13+00:00"}}, "1101168521423101974": {"node_ids": ["38508ea9-3dec-4741-9276-6b7c00edb16b"], "metadata": {"date": "2023-04-27T15:30:34.229+00:00"}}, "1101227048762085458": {"node_ids": ["ead220b2-c156-4a00-8c50-39bbb3c671f7"], "metadata": {"date": "2023-04-27T19:23:08.234+00:00"}}, "1101280908666994719": {"node_ids": ["b431c8c9-4338-45b4-90f5-b1cf3e71e184"], "metadata": {"date": "2023-04-27T22:57:09.436+00:00"}}, "1101309453111926815": {"node_ids": ["c22d1869-cc51-4fb2-b7fb-7fee9d946791"], "metadata": {"date": "2023-04-28T00:50:34.962+00:00"}}, "1101312613847138354": {"node_ids": ["1d8b1cd7-13b6-4588-aed5-f506ae988f50"], "metadata": {"date": "2023-04-28T01:03:08.54+00:00"}}, "1101342617389781042": {"node_ids": ["c2b68c4d-cc43-4145-add1-94108329aaca"], "metadata": {"date": "2023-04-28T03:02:21.942+00:00"}}, "1101361090572582942": {"node_ids": ["47597dc3-1420-40d2-97e0-0f1c29eb86b3"], "metadata": {"date": "2023-04-28T04:15:46.292+00:00"}}, "1101395056453222480": {"node_ids": ["b042631f-2260-45b7-ae97-e7e7f18c9029"], "metadata": {"date": "2023-04-28T06:30:44.389+00:00"}}, "1101397910194757692": {"node_ids": ["99ad73aa-0a0f-411c-ad59-e712037b9493"], "metadata": {"date": "2023-04-28T06:42:04.774+00:00"}}, "1101575114585292850": {"node_ids": ["331f6745-7455-4f0a-95a7-36b459fa2abe"], "metadata": {"date": "2023-04-28T18:26:13.593+00:00"}}, "1101623077596569671": {"node_ids": ["4f1423d6-1e6e-45b1-858f-cd72b823ee13"], "metadata": {"date": "2023-04-28T21:36:48.866+00:00"}}, "1101660562041098321": {"node_ids": ["42c270d4-f42d-4e17-9841-bebe9106bf12"], "metadata": {"date": "2023-04-29T00:05:45.854+00:00"}}, "1101661401254203442": {"node_ids": ["cc84788c-477b-424f-b10a-00407f20209c"], "metadata": {"date": "2023-04-29T00:09:05.938+00:00"}}, "1101818908505280552": {"node_ids": ["201b384c-cbc4-4fcb-ac84-dbb0d43757cd"], "metadata": {"date": "2023-04-29T10:34:58.593+00:00"}}, "1101900251176116335": {"node_ids": ["16497a05-dbc1-4079-828f-e4b52032b5da"], "metadata": {"date": "2023-04-29T15:58:12.197+00:00"}}, "1101919651413381171": {"node_ids": ["cc6af57b-54a8-4e13-abfa-e658c8254b94"], "metadata": {"date": "2023-04-29T17:15:17.574+00:00"}}, "1101931864802984008": {"node_ids": ["1cfba289-4be3-43ad-a972-5e136dcd02c9"], "metadata": {"date": "2023-04-29T18:03:49.473+00:00"}}, "1102039230949118033": {"node_ids": ["30653371-ba2e-4bd3-926d-5072d7bd2d80"], "metadata": {"date": "2023-04-30T01:10:27.557+00:00"}}, "1102146238159261736": {"node_ids": ["fd078825-c4dd-437b-a819-b30fbec4101a"], "metadata": {"date": "2023-04-30T08:15:40.064+00:00"}}, "1102312662320283808": {"node_ids": ["2ee4887a-6ab5-4434-9431-910907fcaa7e"], "metadata": {"date": "2023-04-30T19:16:58.676+00:00"}}, "1102329163483979897": {"node_ids": ["9b881fcf-7354-4326-bcb8-bc23fbeb2723"], "metadata": {"date": "2023-04-30T20:22:32.86+00:00"}}, "1102382713480171540": {"node_ids": ["695df484-e151-4c8a-a4b2-a537cbd71292"], "metadata": {"date": "2023-04-30T23:55:20.174+00:00"}}, "1102417187962105886": {"node_ids": ["a5892394-1134-4d5c-a646-936e5a5f75e4"], "metadata": {"date": "2023-05-01T02:12:19.531+00:00"}}, "1102544418579431454": {"node_ids": ["af7f26b0-9d58-49ac-9a75-f62f822595f2"], "metadata": {"date": "2023-05-01T10:37:53.674+00:00"}}, "1102572024712405044": {"node_ids": ["91f64f9c-2af0-439e-83d3-71a3048e3600"], "metadata": {"date": "2023-05-01T12:27:35.489+00:00"}}, "1102604058713395330": {"node_ids": ["6d7cfc97-f4ac-4dbf-a373-2452b1ca60f2"], "metadata": {"date": "2023-05-01T14:34:52.99+00:00"}}, "1102628178595426406": {"node_ids": ["6071a3a9-3215-4846-97ce-78ca6b0be67c"], "metadata": {"date": "2023-05-01T16:10:43.618+00:00"}}, "1102689650277105717": {"node_ids": ["3be02cdd-2d80-4c46-80b6-849d4db8da3c"], "metadata": {"date": "2023-05-01T20:14:59.609+00:00"}}, "1102704008549908630": {"node_ids": ["15d35758-eced-4758-ab91-720014081f96"], "metadata": {"date": "2023-05-01T21:12:02.888+00:00"}}, "1102718648193404928": {"node_ids": ["df674f95-f7bc-4b30-af18-69bd251ac2e8"], "metadata": {"date": "2023-05-01T22:10:13.251+00:00"}}, "1102728788644728902": {"node_ids": ["3cc58d7f-d1f7-4547-9dcf-6a594a47298f"], "metadata": {"date": "2023-05-01T22:50:30.923+00:00"}}, "1102805937250639942": {"node_ids": ["d83c3ca5-05a6-4cac-9212-c8e72254af30"], "metadata": {"date": "2023-05-02T03:57:04.584+00:00"}}, "1102932995511439410": {"node_ids": ["90b0162f-1b33-4ab5-b600-3ea0853e2be0"], "metadata": {"date": "2023-05-02T12:21:57.634+00:00"}}, "1103006069220970557": {"node_ids": ["da7b03d3-7376-4966-8611-3fa5ebca1cad"], "metadata": {"date": "2023-05-02T17:12:19.764+00:00"}}, "1103007057990385674": {"node_ids": ["65763979-88f1-4a30-a432-3357b0983461"], "metadata": {"date": "2023-05-02T17:16:15.505+00:00"}}, "1103017834872852560": {"node_ids": ["072310e2-df95-4d38-aff7-d4013593e3aa"], "metadata": {"date": "2023-05-02T17:59:04.914+00:00"}}, "1103032319868141569": {"node_ids": ["4939d517-fcf8-4f41-b8d8-59c24986fe57"], "metadata": {"date": "2023-05-02T18:56:38.406+00:00"}}, "1103044452739723394": {"node_ids": ["cd1f835f-abd1-4f4c-97b1-2568b63a9061"], "metadata": {"date": "2023-05-02T19:44:51.108+00:00"}}, "1103044961525567499": {"node_ids": ["d970902e-50b6-45d2-829e-78a2ced4aab4"], "metadata": {"date": "2023-05-02T19:46:52.412+00:00"}}, "1103047627211284603": {"node_ids": ["02f06687-98f2-4bb0-a4fc-ef5dfdce4c54"], "metadata": {"date": "2023-05-02T19:57:27.961+00:00"}}, "1103048955794817084": {"node_ids": ["589e4dfc-77c2-4051-93ec-cb6b72160b2e"], "metadata": {"date": "2023-05-02T20:02:44.72+00:00"}}, "1103049140604248154": {"node_ids": ["c0e2e4d6-3d54-4e54-b14c-5474ec226d86"], "metadata": {"date": "2023-05-02T20:03:28.782+00:00"}}, "1103049554015826064": {"node_ids": ["b6abba7e-9b62-4759-b2a4-aadb77bf9905"], "metadata": {"date": "2023-05-02T20:05:07.347+00:00"}}, "1103186776241209384": {"node_ids": ["80e5b360-29c9-4f03-ae80-50c2ff65285f"], "metadata": {"date": "2023-05-03T05:10:23.675+00:00"}}, "1103414360476483715": {"node_ids": ["19b5d5dd-9164-4c5b-a253-b7b3d059c3ab"], "metadata": {"date": "2023-05-03T20:14:43.985+00:00"}}, "1103446268308619327": {"node_ids": ["19575006-b864-4094-afd0-79c4309c764d"], "metadata": {"date": "2023-05-03T22:21:31.405+00:00"}}, "1103468907907518506": {"node_ids": ["f1be8c88-7508-41df-ab65-cb8cbddf9937"], "metadata": {"date": "2023-05-03T23:51:29.106+00:00"}}, "1103543391624642642": {"node_ids": ["3e6f77b5-4b62-4b47-90c5-d161d29a1c7e"], "metadata": {"date": "2023-05-04T04:47:27.408+00:00"}}, "1103545177894817843": {"node_ids": ["ec22ea1e-a0c0-4b34-823b-fd7f11abb46e"], "metadata": {"date": "2023-05-04T04:54:33.288+00:00"}}, "1103546493136293918": {"node_ids": ["e71eca27-b160-4154-b376-106e1f8d1085"], "metadata": {"date": "2023-05-04T04:59:46.866+00:00"}}, "1103574131431182356": {"node_ids": ["5a88ce72-3160-414f-9570-b0fd3c171da6"], "metadata": {"date": "2023-05-04T06:49:36.349+00:00"}}, "1103581201744269343": {"node_ids": ["84edc15b-6a73-4b5a-987e-3dfdee8647b0"], "metadata": {"date": "2023-05-04T07:17:42.043+00:00"}}, "1103629766877265960": {"node_ids": ["8cd4a537-96cf-445c-a0ee-582fb748b17a"], "metadata": {"date": "2023-05-04T10:30:40.873+00:00"}}, "1103718849293066270": {"node_ids": ["1d94d528-0bbf-420a-a8f2-f8a31925fa42"], "metadata": {"date": "2023-05-04T16:24:39.776+00:00"}}, "1103733529097015368": {"node_ids": ["7dbaa29e-9b83-44b9-8d0b-8db13eac9105"], "metadata": {"date": "2023-05-04T17:22:59.714+00:00"}}, "1103744338107830272": {"node_ids": ["aea60139-c420-4a33-abdc-d6390194272b"], "metadata": {"date": "2023-05-04T18:05:56.783+00:00"}}, "1103756548527886396": {"node_ids": ["8592d61e-1234-4f8a-bc1c-fc243833c5c5"], "metadata": {"date": "2023-05-04T18:54:27.974+00:00"}}, "1103844161318289519": {"node_ids": ["8fa97fd4-5ee1-4d7b-8d74-57e986a36928"], "metadata": {"date": "2023-05-05T00:42:36.491+00:00"}}, "1103992481214906430": {"node_ids": ["3623db81-18ad-405c-9c91-fac2651acb14"], "metadata": {"date": "2023-05-05T10:31:58.71+00:00"}}, "1104046741159944283": {"node_ids": ["27473a97-bd59-40c7-ad33-9a60c43ab48b"], "metadata": {"date": "2023-05-05T14:07:35.289+00:00"}}, "1104062955437424700": {"node_ids": ["6e786ff6-8a52-4c97-998d-878b8920f503"], "metadata": {"date": "2023-05-05T15:12:01.074+00:00"}}, "1104104853162172501": {"node_ids": ["8c2cf148-1605-4f5d-8c03-0474f952b61d"], "metadata": {"date": "2023-05-05T17:58:30.27+00:00"}}, "1104122853445611610": {"node_ids": ["d22eb32c-b153-468e-8949-7a010fb1ec79"], "metadata": {"date": "2023-05-05T19:10:01.872+00:00"}}, "1104160656523014307": {"node_ids": ["ddcac52a-885a-4a09-aa01-a92ef78c0037"], "metadata": {"date": "2023-05-05T21:40:14.828+00:00"}}, "1104177215060578365": {"node_ids": ["8e6b88c2-8ba7-4c4b-893e-d0bf34facfd6"], "metadata": {"date": "2023-05-05T22:46:02.691+00:00"}}, "1104204259857268869": {"node_ids": ["be6218b0-049c-4c99-969f-d6aa9dbeff02"], "metadata": {"date": "2023-05-06T00:33:30.673+00:00"}}, "1104240772691267696": {"node_ids": ["94195a82-4011-495b-89db-6a726a41a74f"], "metadata": {"date": "2023-05-06T02:58:36.011+00:00"}}, "1104262809010847756": {"node_ids": ["0fc322a6-a4f4-4db8-bce4-ab7dc6b1f075"], "metadata": {"date": "2023-05-06T04:26:09.879+00:00"}}, "1104434396758548641": {"node_ids": ["b451109f-7e43-4edd-866c-a7e958173208"], "metadata": {"date": "2023-05-06T15:47:59.586+00:00"}}, "1104447930150158528": {"node_ids": ["50641a2a-5ebb-4672-a4a3-363d578de784"], "metadata": {"date": "2023-05-06T16:41:46.198+00:00"}}, "1104479195767255133": {"node_ids": ["4a482696-2281-4bef-adbb-ded971a6a382"], "metadata": {"date": "2023-05-06T18:46:00.502+00:00"}}, "1104515787349311519": {"node_ids": ["224cfd9a-016b-4ad2-8d37-03d980288f4d"], "metadata": {"date": "2023-05-06T21:11:24.615+00:00"}}, "1104677893314990080": {"node_ids": ["1e702714-2e14-48f1-9cdc-ac7dc0349bb4"], "metadata": {"date": "2023-05-07T07:55:33.689+00:00"}}, "1104813615145558106": {"node_ids": ["f46a8758-c527-430b-b5df-40534227ab9c"], "metadata": {"date": "2023-05-07T16:54:52.295+00:00"}}, "1104855848850833409": {"node_ids": ["bd156d56-dde2-412a-9181-e345ace37273"], "metadata": {"date": "2023-05-07T19:42:41.595+00:00"}}, "1104865196859740281": {"node_ids": ["9f3e70c3-3bfe-47fb-b8a9-0d1f7a153418"], "metadata": {"date": "2023-05-07T20:19:50.334+00:00"}}, "1104897544879878264": {"node_ids": ["a215ebc2-0104-43c3-9ada-219b04637cf6"], "metadata": {"date": "2023-05-07T22:28:22.703+00:00"}}, "1105060369996709901": {"node_ids": ["1d525ea6-9d7f-4be8-9f2c-457c51e8a709"], "metadata": {"date": "2023-05-08T09:15:23.236+00:00"}}, "1105119873954238556": {"node_ids": ["7d168434-f14d-4336-8862-9ff866359ab6"], "metadata": {"date": "2023-05-08T13:11:50.085+00:00"}}, "1105172237146927265": {"node_ids": ["7130f9bc-3222-47aa-b665-21d2db6c4825"], "metadata": {"date": "2023-05-08T16:39:54.443+00:00"}}, "1105207644710502410": {"node_ids": ["3de1e495-6815-499f-b290-21304e3dc248"], "metadata": {"date": "2023-05-08T19:00:36.264+00:00"}}, "1105211724484849775": {"node_ids": ["c665faa8-f069-473c-b625-95a4ad6e83ba"], "metadata": {"date": "2023-05-08T19:16:48.958+00:00"}}, "1105214020606234807": {"node_ids": ["97534259-e2b5-4641-aa2d-03c59159e968"], "metadata": {"date": "2023-05-08T19:25:56.396+00:00"}}, "1105239113784885289": {"node_ids": ["d8b2a538-82e4-403a-b67d-0ea7112e07b4"], "metadata": {"date": "2023-05-08T21:05:39.076+00:00"}}, "1105260402817908797": {"node_ids": ["b26621bc-1b13-4215-bc6b-9f00516fbd87"], "metadata": {"date": "2023-05-08T22:30:14.777+00:00"}}, "1105269976035770408": {"node_ids": ["cad9a028-21dc-487c-8b39-b6a0b40b5fa0"], "metadata": {"date": "2023-05-08T23:08:17.21+00:00"}}, "1105399849744089218": {"node_ids": ["4164ae8b-ad6d-4bbd-ace2-fdbfd8b5dec1"], "metadata": {"date": "2023-05-09T07:44:21.515+00:00"}}, "1105432435803557960": {"node_ids": ["38bbc07e-7502-4fd0-8edd-d12c5f042337"], "metadata": {"date": "2023-05-09T09:53:50.637+00:00"}}, "1105454849438523392": {"node_ids": ["cd3ea68a-4289-4e8b-8cff-ff65857af714"], "metadata": {"date": "2023-05-09T11:22:54.464+00:00"}}, "1105503261622022175": {"node_ids": ["2811c243-282b-4ed2-9560-85ae86d6fdd8"], "metadata": {"date": "2023-05-09T14:35:16.828+00:00"}}, "1105504506302701588": {"node_ids": ["4b11f930-4d8d-4828-9eb9-8ae8ce113909"], "metadata": {"date": "2023-05-09T14:40:13.583+00:00"}}, "1105535739426512896": {"node_ids": ["065f559c-fec9-492e-84fe-656c714df579"], "metadata": {"date": "2023-05-09T16:44:20.14+00:00"}}, "1105615538757050471": {"node_ids": ["8b8b8793-99e7-40b0-91a8-702716523183"], "metadata": {"date": "2023-05-09T22:01:25.783+00:00"}}, "1105617458552918126": {"node_ids": ["4eb5f821-4baa-4ff2-a457-a13d637f4f80"], "metadata": {"date": "2023-05-09T22:09:03.498+00:00"}}, "1105631426562506812": {"node_ids": ["930a3709-60b4-4e69-8908-a6b48a097ae4"], "metadata": {"date": "2023-05-09T23:04:33.731+00:00"}}, "1105699199011532831": {"node_ids": ["dda49d32-f1a4-4faa-a549-be3e7212099a"], "metadata": {"date": "2023-05-10T03:33:51.942+00:00"}}, "1105743922581491765": {"node_ids": ["3a39c3ea-3d42-4aeb-a2d1-72d14d85be54"], "metadata": {"date": "2023-05-10T06:31:34.872+00:00"}}, "1105799756099375135": {"node_ids": ["e9714f9f-79a1-4c1d-b4dd-6f26ca085812"], "metadata": {"date": "2023-05-10T10:13:26.62+00:00"}}, "1105819056319250553": {"node_ids": ["d2f529fc-f5f4-4f58-95bc-f41bad3f6f6f"], "metadata": {"date": "2023-05-10T11:30:08.151+00:00"}}, "1106134832607678495": {"node_ids": ["5919190a-2842-4eec-b540-81f904ba0fa5"], "metadata": {"date": "2023-05-11T08:24:55.085+00:00"}}, "1106143532441423914": {"node_ids": ["6ae0c0e3-99e9-41e2-84f1-e04b05fd8525"], "metadata": {"date": "2023-05-11T08:59:29.287+00:00"}}, "1106218550865166356": {"node_ids": ["e8695719-68e5-41a8-9912-b2faf04dfa62"], "metadata": {"date": "2023-05-11T13:57:35.073+00:00"}}, "1106219909056311316": {"node_ids": ["66ce25ef-a846-42fa-bc26-98ee2bb5f50d"], "metadata": {"date": "2023-05-11T14:02:58.891+00:00"}}, "1106222132146470962": {"node_ids": ["2fc0aa82-0e41-4919-b096-eaeac7d3af69"], "metadata": {"date": "2023-05-11T14:11:48.917+00:00"}}, "1106274074444976259": {"node_ids": ["8ba55da0-5a00-4e22-9291-208e6c6c7f9e"], "metadata": {"date": "2023-05-11T17:38:12.926+00:00"}}, "1106304910036828170": {"node_ids": ["49042ee4-531f-415a-b969-42e2f09a1699"], "metadata": {"date": "2023-05-11T19:40:44.704+00:00"}}, "1106308977639301210": {"node_ids": ["7bbab62a-da64-489f-9be1-1de0948cc4f1"], "metadata": {"date": "2023-05-11T19:56:54.496+00:00"}}, "1106310557864312892": {"node_ids": ["8b0822ff-8da2-41d7-a356-4a18302eb164"], "metadata": {"date": "2023-05-11T20:03:11.251+00:00"}}, "1106371820057284740": {"node_ids": ["68da0105-ad25-48b6-8975-84983b4346c5"], "metadata": {"date": "2023-05-12T00:06:37.296+00:00"}}, "1106588940275830886": {"node_ids": ["ef6f5480-9b8e-4a8b-bfe4-9cb0d887e055"], "metadata": {"date": "2023-05-12T14:29:22.79+00:00"}}, "1106878899700375564": {"node_ids": ["796c2b4c-0a3b-4418-ace4-545cc0fed39d"], "metadata": {"date": "2023-05-13T09:41:34.504+00:00"}}, "1107061954398396416": {"node_ids": ["6a1bb368-bdee-4f43-9eca-6bcb617d1044"], "metadata": {"date": "2023-05-13T21:48:58.145+00:00"}}, "1107078350117285909": {"node_ids": ["37f58506-2fa2-49fe-b2b4-8639b8e40bb1"], "metadata": {"date": "2023-05-13T22:54:07.189+00:00"}}, "1107258665892859954": {"node_ids": ["7d2cbe69-8ee3-4439-8b38-e2f3f8acef4d"], "metadata": {"date": "2023-05-14T10:50:37.82+00:00"}}, "1107259163286970448": {"node_ids": ["c4ea0ea4-e739-4803-b049-ec7999d07672"], "metadata": {"date": "2023-05-14T10:52:36.408+00:00"}}, "1107319393815363636": {"node_ids": ["5359736a-780d-459c-9f7e-236c5272fe5e"], "metadata": {"date": "2023-05-14T14:51:56.485+00:00"}}, "1107526682677620737": {"node_ids": ["0fb9748a-a2e7-44ed-be87-a14e0c8e486b"], "metadata": {"date": "2023-05-15T04:35:38.001+00:00"}}, "1107705333440323584": {"node_ids": ["13702891-9350-40ea-b72f-2737971049b0"], "metadata": {"date": "2023-05-15T16:25:31.662+00:00"}}, "1107737907747360768": {"node_ids": ["26f840b2-dd60-47d6-bf71-eb9f1a397c44"], "metadata": {"date": "2023-05-15T18:34:57.982+00:00"}}, "1107937933438242826": {"node_ids": ["35ec3e61-e71f-4c7e-b72f-f873da479c0b"], "metadata": {"date": "2023-05-16T07:49:47.823+00:00"}}, "1107970968531517500": {"node_ids": ["83b226e8-4503-4952-a9f6-25c358262fce"], "metadata": {"date": "2023-05-16T10:01:04.003+00:00"}}, "1108031200972521503": {"node_ids": ["e126ffb9-2ec5-4b76-ae3c-a3f74ba098b6"], "metadata": {"date": "2023-05-16T14:00:24.536+00:00"}}, "1108056811107536906": {"node_ids": ["857abb1b-3d52-4ba3-a25c-ceaed389266e"], "metadata": {"date": "2023-05-16T15:42:10.468+00:00"}}, "1108064258681470996": {"node_ids": ["752dd8bf-7a84-403c-84e0-11e3ede0085f"], "metadata": {"date": "2023-05-16T16:11:46.108+00:00"}}, "1108099650914897951": {"node_ids": ["133f64b0-0699-4e19-af36-32f895e83196"], "metadata": {"date": "2023-05-16T18:32:24.274+00:00"}}, "1108134824541167747": {"node_ids": ["58000a64-2d15-471a-8516-1e8fe14941d6"], "metadata": {"date": "2023-05-16T20:52:10.32+00:00"}}, "1108406076958842920": {"node_ids": ["4770081c-6904-4aef-9668-9ddba5de2e4d"], "metadata": {"date": "2023-05-17T14:50:01.936+00:00"}}, "1108453845991956511": {"node_ids": ["91508a17-59da-4e4e-8520-92fed6f8d3f4"], "metadata": {"date": "2023-05-17T17:59:50.961+00:00"}}, "1108458278180098069": {"node_ids": ["2c1df02b-f89f-4757-9247-b57a19d08bb0"], "metadata": {"date": "2023-05-17T18:17:27.677+00:00"}}, "1108459998088016006": {"node_ids": ["52d891a1-0fe5-44af-97ba-82c87e394c93"], "metadata": {"date": "2023-05-17T18:24:17.735+00:00"}}, "1108667975222964334": {"node_ids": ["03009823-7572-41f1-9eb4-da7d70297fcb"], "metadata": {"date": "2023-05-18T08:10:43.348+00:00"}}, "1108687992115179520": {"node_ids": ["1ffab3da-e610-48dd-822a-96c016ae45ee"], "metadata": {"date": "2023-05-18T09:30:15.747+00:00"}}, "1108708745447485543": {"node_ids": ["104527ab-f7f1-47f8-9ff6-c01c189330a0"], "metadata": {"date": "2023-05-18T10:52:43.727+00:00"}}, "1108751412353060884": {"node_ids": ["4b5dea48-f824-42d3-b48c-d3c853e5c17f"], "metadata": {"date": "2023-05-18T13:42:16.31+00:00"}}, "1108842180161843323": {"node_ids": ["f5a7bcdd-90ce-4a18-bed4-b3526130d87f"], "metadata": {"date": "2023-05-18T19:42:57.042+00:00"}}, "1108846524382838794": {"node_ids": ["c5812a5e-d7ad-42e7-b461-d0a1c279fb32"], "metadata": {"date": "2023-05-18T20:00:12.785+00:00"}}, "1108854091934859344": {"node_ids": ["3446310a-91fe-4891-a028-9ab7c3bda83a"], "metadata": {"date": "2023-05-18T20:30:17.03+00:00"}}, "1108921924513452084": {"node_ids": ["590718e5-d9a9-4693-8ec6-747197ffdd26"], "metadata": {"date": "2023-05-19T00:59:49.577+00:00"}}, "1109068463110107157": {"node_ids": ["1a4faaf5-57ed-41e8-bec6-b1c8112405be"], "metadata": {"date": "2023-05-19T10:42:07.101+00:00"}}, "1109163985422520340": {"node_ids": ["475d5913-0944-4acf-b01e-94b75aa22431"], "metadata": {"date": "2023-05-19T17:01:41.395+00:00"}}, "1109244585709940766": {"node_ids": ["1014887a-18f5-48ae-a967-3d68f9b35edd"], "metadata": {"date": "2023-05-19T22:21:58.001+00:00"}}, "1109247502475087923": {"node_ids": ["7f692019-57d2-43bd-bf76-e96e16c67fce"], "metadata": {"date": "2023-05-19T22:33:33.412+00:00"}}, "1109356747803607082": {"node_ids": ["8035b469-8a22-411b-8f61-90f2f42f7c64"], "metadata": {"date": "2023-05-20T05:47:39.528+00:00"}}, "1109412573138395198": {"node_ids": ["ec88ccf8-f922-45c5-aca0-e3a0917d7bc2"], "metadata": {"date": "2023-05-20T09:29:29.325+00:00"}}, "1109511262850777088": {"node_ids": ["426217c6-270e-4d1c-9fdd-138052939821"], "metadata": {"date": "2023-05-20T16:01:38.786+00:00"}}, "1109579516885618748": {"node_ids": ["fe867dac-1526-4344-b285-cf40e2b90878"], "metadata": {"date": "2023-05-20T20:32:51.816+00:00"}}, "1109620793740107906": {"node_ids": ["6caa801c-625d-4a67-ae29-c6d08629d22b"], "metadata": {"date": "2023-05-20T23:16:52.985+00:00"}}, "1109622772272988230": {"node_ids": ["f91b52de-ccdd-4ebb-97a9-a6d72d731f2b"], "metadata": {"date": "2023-05-20T23:24:44.704+00:00"}}, "1109654025567207444": {"node_ids": ["eb6686ab-e2e5-44f4-9e7e-478bcdd98f28"], "metadata": {"date": "2023-05-21T01:28:56.07+00:00"}}, "1110001427046215690": {"node_ids": ["e7538adc-eabf-4495-a222-b59c5dbd7fad"], "metadata": {"date": "2023-05-22T00:29:23.037+00:00"}}, "1110061080799105054": {"node_ids": ["f17f7e53-f27f-4b02-a10c-0a4ad3993cf6"], "metadata": {"date": "2023-05-22T04:26:25.6+00:00"}}, "1110071662612852737": {"node_ids": ["39dc1e2e-8506-44e5-8468-fb9105bc52d8"], "metadata": {"date": "2023-05-22T05:08:28.501+00:00"}}, "1110089211442376725": {"node_ids": ["492d7965-81aa-4528-b078-d66faea6ebff"], "metadata": {"date": "2023-05-22T06:18:12.468+00:00"}}, "1110127178487701584": {"node_ids": ["94d8cb7c-da50-42a4-a594-2807919f7d72"], "metadata": {"date": "2023-05-22T08:49:04.517+00:00"}}, "1110134841544036382": {"node_ids": ["889da785-7713-42d5-a5d8-cf503c2c6e25"], "metadata": {"date": "2023-05-22T09:19:31.532+00:00"}}, "1110220796988760268": {"node_ids": ["3f0dbd9e-0020-4100-ac14-a5386df24b2e"], "metadata": {"date": "2023-05-22T15:01:04.907+00:00"}}, "1110384608291328070": {"node_ids": ["13b4fdd5-9bef-434c-a341-764068c29e6d"], "metadata": {"date": "2023-05-23T01:52:00.565+00:00"}}, "1110643153624637440": {"node_ids": ["193d740c-59ec-4804-88f7-8176ff087e65"], "metadata": {"date": "2023-05-23T18:59:22.576+00:00"}}, "1110759850255859712": {"node_ids": ["9eb2e29f-32aa-4792-88e3-685232a48621"], "metadata": {"date": "2023-05-24T02:43:05.221+00:00"}}, "1110814097609609246": {"node_ids": ["389bc3a2-6828-4a79-bce2-7ce5c2d37c4f"], "metadata": {"date": "2023-05-24T06:18:38.798+00:00"}}, "1110938122902048809": {"node_ids": ["e59f8af6-dfe0-42d9-8156-207413e8a466"], "metadata": {"date": "2023-05-24T14:31:28.732+00:00"}}, "1111012973700460665": {"node_ids": ["2551aa8f-8c08-4e88-9717-c4b14e92cc75"], "metadata": {"date": "2023-05-24T19:28:54.553+00:00"}}, "1111132743661781042": {"node_ids": ["bb2461e7-b9a7-431a-a81f-c590a00eef00"], "metadata": {"date": "2023-05-25T03:24:49.937+00:00"}}, "1111307131887562823": {"node_ids": ["9898c9f4-acbd-4726-bf0a-54c8fefd65a7"], "metadata": {"date": "2023-05-25T14:57:47.33+00:00"}}, "1111332768186646618": {"node_ids": ["89f33194-9f75-4ecc-bc59-1bc878d42b68"], "metadata": {"date": "2023-05-25T16:39:39.5+00:00"}}, "1111353270242398369": {"node_ids": ["367b542b-1f7b-4d46-92af-8ec32f745ca3"], "metadata": {"date": "2023-05-25T18:01:07.571+00:00"}}, "1111354305530843358": {"node_ids": ["771eb551-f105-401e-897a-ec9c9dc555ce"], "metadata": {"date": "2023-05-25T18:05:14.403+00:00"}}, "1111374680276877413": {"node_ids": ["eaad405a-2f20-484f-b538-ad8cab3f2d14"], "metadata": {"date": "2023-05-25T19:26:12.121+00:00"}}}}